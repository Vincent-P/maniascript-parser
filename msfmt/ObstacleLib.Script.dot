digraph ast {
    0 [label="File(File { syntax: 0, hashes: [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 92], globals: [98, 104, 110, 116, 122, 128], labels: [], functions: [134, 202, 426, 867, 883, 1024, 1086, 1399, 1654, 1744, 1880, 2173, 2228, 2471, 2830, 2858, 2992, 3550, 4166, 4475, 4960], eof: Some(5689) })"];
    0 -> 1;
    1 [label="Include(Include { syntax: 1, include: Some(2), path: Some(3), as_: Some(4), name: Some(5) })"];
    1 -> 2;
    2[label="#Include"];
    1 -> 3;
    3[label="\"TextLib\""];
    1 -> 4;
    4[label="as"];
    1 -> 5;
    5[label="TL"];
    0 -> 6;
    6 [label="Include(Include { syntax: 6, include: Some(7), path: Some(8), as_: Some(9), name: Some(10) })"];
    6 -> 7;
    7[label="#Include"];
    6 -> 8;
    8[label="\"MathLib\""];
    6 -> 9;
    9[label="as"];
    6 -> 10;
    10[label="ML"];
    0 -> 11;
    11 [label="Include(Include { syntax: 11, include: Some(12), path: Some(13), as_: Some(14), name: Some(15) })"];
    11 -> 12;
    12[label="#Include"];
    11 -> 13;
    13[label="\"Libs/Nadeo/Json2.Script.txt\""];
    11 -> 14;
    14[label="as"];
    11 -> 15;
    15[label="Json"];
    0 -> 16;
    16 [label="Include(Include { syntax: 16, include: Some(17), path: Some(18), as_: Some(19), name: Some(20) })"];
    16 -> 17;
    17[label="#Include"];
    16 -> 18;
    18[label="\"Libs/Nadeo/ShootMania/Map.Script.txt\""];
    16 -> 19;
    19[label="as"];
    16 -> 20;
    20[label="Map"];
    0 -> 21;
    21 [label="Include(Include { syntax: 21, include: Some(22), path: Some(23), as_: Some(24), name: Some(25) })"];
    21 -> 22;
    22[label="#Include"];
    21 -> 23;
    23[label="\"Libs/Nadeo/Ladder.Script.txt\""];
    21 -> 24;
    24[label="as"];
    21 -> 25;
    25[label="Ladder"];
    0 -> 26;
    26 [label="Include(Include { syntax: 26, include: Some(27), path: Some(28), as_: Some(29), name: Some(30) })"];
    26 -> 27;
    27[label="#Include"];
    26 -> 28;
    28[label="\"Libs/Nadeo/ShootMania/SM3.Script.txt\""];
    26 -> 29;
    29[label="as"];
    26 -> 30;
    30[label="SM"];
    0 -> 31;
    31 [label="Include(Include { syntax: 31, include: Some(32), path: Some(33), as_: Some(34), name: Some(35) })"];
    31 -> 32;
    32[label="#Include"];
    31 -> 33;
    33[label="\"Libs/Nadeo/ShootMania/Scores.Script.txt\""];
    31 -> 34;
    34[label="as"];
    31 -> 35;
    35[label="Scores"];
    0 -> 36;
    36 [label="Include(Include { syntax: 36, include: Some(37), path: Some(38), as_: Some(39), name: Some(40) })"];
    36 -> 37;
    37[label="#Include"];
    36 -> 38;
    38[label="\"Libs/Nadeo/Message.Script.txt\""];
    36 -> 39;
    39[label="as"];
    36 -> 40;
    40[label="Message"];
    0 -> 41;
    41 [label="Include(Include { syntax: 41, include: Some(42), path: Some(43), as_: Some(44), name: Some(45) })"];
    41 -> 42;
    42[label="#Include"];
    41 -> 43;
    43[label="\"Libs/Nadeo/Log.Script.txt\""];
    41 -> 44;
    44[label="as"];
    41 -> 45;
    45[label="Log"];
    0 -> 46;
    46 [label="Include(Include { syntax: 46, include: Some(47), path: Some(48), as_: Some(49), name: Some(50) })"];
    46 -> 47;
    47[label="#Include"];
    46 -> 48;
    48[label="\"Libs/Nadeo/TabsServer.Script.txt\""];
    46 -> 49;
    49[label="as"];
    46 -> 50;
    50[label="Tabs"];
    0 -> 51;
    51 [label="Include(Include { syntax: 51, include: Some(52), path: Some(53), as_: Some(54), name: Some(55) })"];
    51 -> 52;
    52[label="#Include"];
    51 -> 53;
    53[label="\"Libs/smokegun/Player.Script.txt\""];
    51 -> 54;
    54[label="as"];
    51 -> 55;
    55[label="Player"];
    0 -> 56;
    56 [label="Include(Include { syntax: 56, include: Some(57), path: Some(58), as_: Some(59), name: Some(60) })"];
    56 -> 57;
    57[label="#Include"];
    56 -> 58;
    58[label="\"Libs/smokegun/Tools.Script.txt\""];
    56 -> 59;
    59[label="as"];
    56 -> 60;
    60[label="Tools"];
    0 -> 61;
    61 [label="Include(Include { syntax: 61, include: Some(62), path: Some(63), as_: Some(64), name: Some(65) })"];
    61 -> 62;
    62[label="#Include"];
    61 -> 63;
    63[label="\"Libs/smokegun/Weapons.Script.txt\""];
    61 -> 64;
    64[label="as"];
    61 -> 65;
    65[label="Weapons"];
    0 -> 66;
    66 [label="Include(Include { syntax: 66, include: Some(67), path: Some(68), as_: Some(69), name: Some(70) })"];
    66 -> 67;
    67[label="#Include"];
    66 -> 68;
    68[label="\"Libs/smokegun/UI.Script.txt\""];
    66 -> 69;
    69[label="as"];
    66 -> 70;
    70[label="ObsUI"];
    0 -> 71;
    71 [label="Include(Include { syntax: 71, include: Some(72), path: Some(73), as_: Some(74), name: Some(75) })"];
    71 -> 72;
    72[label="#Include"];
    71 -> 73;
    73[label="\"Libs/smokegun/ObstacleRecords.Script.txt\""];
    71 -> 74;
    74[label="as"];
    71 -> 75;
    75[label="API"];
    0 -> 76;
    76 [label="Include(Include { syntax: 76, include: Some(77), path: Some(78), as_: Some(79), name: Some(80) })"];
    76 -> 77;
    77[label="#Include"];
    76 -> 78;
    78[label="\"Libs/smokegun/CPTimes.Script.txt\""];
    76 -> 79;
    79[label="as"];
    76 -> 80;
    80[label="CPTimes"];
    0 -> 81;
    81 [label="Include(Include { syntax: 81, include: Some(82), path: Some(83), as_: Some(84), name: Some(85) })"];
    81 -> 82;
    82[label="#Include"];
    81 -> 83;
    83[label="\"Libs/smokegun/UI/TimeDiff.Script.txt\""];
    81 -> 84;
    84[label="as"];
    81 -> 85;
    85[label="TimeDiff"];
    0 -> 86;
    86 [label="Const(Const { syntax: 86, const_: Some(87), name: Some(88), value: Some(89) })"];
    86 -> 87;
    87[label="#Const"];
    86 -> 88;
    88[label="Version"];
    86 -> 89;
    89 [label="Expr"];
    89 -> 90;
    90 [label="Literal"];
    90 -> 91;
    91[label="\"2017-07-10\""];
    0 -> 92;
    92 [label="Const(Const { syntax: 92, const_: Some(93), name: Some(94), value: Some(95) })"];
    92 -> 93;
    93[label="#Const"];
    92 -> 94;
    94[label="ScriptName"];
    92 -> 95;
    95 [label="Expr"];
    95 -> 96;
    96 [label="Literal"];
    96 -> 97;
    97[label="\"ObstacleLib.Script.txt\""];
    0 -> 98;
    98 [label="VarDec(VarDec { syntax: 98, declare: Some(99), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(100), name: Some(102), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    98 -> 99;
    99[label="declare"];
    98 -> 100;
    100 [label="Type(Type { syntax: 100, basename: Some(101), members: [], arrays: [] })"];
    100 -> 101;
    101[label="Ident"];
    98 -> 102;
    102[label="G_StartSpawnId"];
    98 -> 103;
    103[label=";"];
    0 -> 104;
    104 [label="VarDec(VarDec { syntax: 104, declare: Some(105), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(106), name: Some(108), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    104 -> 105;
    105[label="declare"];
    104 -> 106;
    106 [label="Type(Type { syntax: 106, basename: Some(107), members: [], arrays: [] })"];
    106 -> 107;
    107[label="Integer"];
    104 -> 108;
    108[label="G_CheckpointsTotal"];
    104 -> 109;
    109[label=";"];
    0 -> 110;
    110 [label="VarDec(VarDec { syntax: 110, declare: Some(111), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(112), name: Some(114), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    110 -> 111;
    111[label="declare"];
    110 -> 112;
    112 [label="Type(Type { syntax: 112, basename: Some(113), members: [], arrays: [] })"];
    112 -> 113;
    113[label="Boolean"];
    110 -> 114;
    114[label="G_FullAmmoSpawn"];
    110 -> 115;
    115[label=";"];
    0 -> 116;
    116 [label="VarDec(VarDec { syntax: 116, declare: Some(117), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(118), name: Some(120), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    116 -> 117;
    117[label="declare"];
    116 -> 118;
    118 [label="Type(Type { syntax: 118, basename: Some(119), members: [], arrays: [] })"];
    118 -> 119;
    119[label="Boolean"];
    116 -> 120;
    120[label="G_FastRespawn"];
    116 -> 121;
    121[label=";"];
    0 -> 122;
    122 [label="VarDec(VarDec { syntax: 122, declare: Some(123), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(124), name: Some(126), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    122 -> 123;
    123[label="declare"];
    122 -> 124;
    124 [label="Type(Type { syntax: 124, basename: Some(125), members: [], arrays: [] })"];
    124 -> 125;
    125[label="Boolean"];
    122 -> 126;
    126[label="G_LegacyRespawn"];
    122 -> 127;
    127[label=";"];
    0 -> 128;
    128 [label="VarDec(VarDec { syntax: 128, declare: Some(129), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(130), name: Some(132), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    128 -> 129;
    129[label="declare"];
    128 -> 130;
    130 [label="Type(Type { syntax: 130, basename: Some(131), members: [], arrays: [] })"];
    130 -> 131;
    131[label="Boolean"];
    128 -> 132;
    132[label="G_AllowJump"];
    128 -> 133;
    133[label=";"];
    0 -> 134;
    134 [label="FuncDec(FuncDec { syntax: 134, type_: Some(135), name: Some(137), lparen: Some(138), args: [139, 144, 149, 154], rparen: Some(158), body: Some(159) })"];
    134 -> 135;
    135 [label="Type(Type { syntax: 135, basename: Some(136), members: [], arrays: [] })"];
    135 -> 136;
    136[label="Void"];
    134 -> 137;
    137[label="SetSettings"];
    134 -> 138;
    138[label="("];
    134 -> 139;
    139 [label="FormalArg(FormalArg { syntax: 139, type_: Some(140), name: Some(142), comma: Some(143) })"];
    139 -> 140;
    140 [label="Type(Type { syntax: 140, basename: Some(141), members: [], arrays: [] })"];
    140 -> 141;
    141[label="Boolean"];
    139 -> 142;
    142[label="_FullAmmoSpawn"];
    139 -> 143;
    143[label=","];
    134 -> 144;
    144 [label="FormalArg(FormalArg { syntax: 144, type_: Some(145), name: Some(147), comma: Some(148) })"];
    144 -> 145;
    145 [label="Type(Type { syntax: 145, basename: Some(146), members: [], arrays: [] })"];
    145 -> 146;
    146[label="Boolean"];
    144 -> 147;
    147[label="_FastRespawn"];
    144 -> 148;
    148[label=","];
    134 -> 149;
    149 [label="FormalArg(FormalArg { syntax: 149, type_: Some(150), name: Some(152), comma: Some(153) })"];
    149 -> 150;
    150 [label="Type(Type { syntax: 150, basename: Some(151), members: [], arrays: [] })"];
    150 -> 151;
    151[label="Boolean"];
    149 -> 152;
    152[label="_LegacyRespawn"];
    149 -> 153;
    153[label=","];
    134 -> 154;
    154 [label="FormalArg(FormalArg { syntax: 154, type_: Some(155), name: Some(157), comma: None })"];
    154 -> 155;
    155 [label="Type(Type { syntax: 155, basename: Some(156), members: [], arrays: [] })"];
    155 -> 156;
    156[label="Boolean"];
    154 -> 157;
    157[label="_AllowJump"];
    134 -> 158;
    158[label=")"];
    134 -> 159;
    159 [label="Block(Block { syntax: 159, lbrace: Some(160), statements: [161, 171, 181, 191], rbrace: Some(201) })"];
    159 -> 160;
    160[label="{"];
    159 -> 161;
    161 [label="Statement(Statement { syntax: 161, statement: Some(165), semicolon: Some(170) })"];
    161 -> 162;
    162 [label="Expr"];
    162 -> 163;
    163 [label="Identifier"];
    163 -> 164;
    164[label="G_FullAmmoSpawn"];
    161 -> 165;
    165 [label="Assignment(Assignment { syntax: 165, lvalue: Some(162), operator: Some(166), rvalue: Some(167) })"];
    165 -> 166;
    166[label="="];
    165 -> 167;
    167 [label="Expr"];
    167 -> 168;
    168 [label="Identifier"];
    168 -> 169;
    169[label="_FullAmmoSpawn"];
    161 -> 170;
    170[label=";"];
    159 -> 171;
    171 [label="Statement(Statement { syntax: 171, statement: Some(175), semicolon: Some(180) })"];
    171 -> 172;
    172 [label="Expr"];
    172 -> 173;
    173 [label="Identifier"];
    173 -> 174;
    174[label="G_FastRespawn"];
    171 -> 175;
    175 [label="Assignment(Assignment { syntax: 175, lvalue: Some(172), operator: Some(176), rvalue: Some(177) })"];
    175 -> 176;
    176[label="="];
    175 -> 177;
    177 [label="Expr"];
    177 -> 178;
    178 [label="Identifier"];
    178 -> 179;
    179[label="_FastRespawn"];
    171 -> 180;
    180[label=";"];
    159 -> 181;
    181 [label="Statement(Statement { syntax: 181, statement: Some(185), semicolon: Some(190) })"];
    181 -> 182;
    182 [label="Expr"];
    182 -> 183;
    183 [label="Identifier"];
    183 -> 184;
    184[label="G_LegacyRespawn"];
    181 -> 185;
    185 [label="Assignment(Assignment { syntax: 185, lvalue: Some(182), operator: Some(186), rvalue: Some(187) })"];
    185 -> 186;
    186[label="="];
    185 -> 187;
    187 [label="Expr"];
    187 -> 188;
    188 [label="Identifier"];
    188 -> 189;
    189[label="_LegacyRespawn"];
    181 -> 190;
    190[label=";"];
    159 -> 191;
    191 [label="Statement(Statement { syntax: 191, statement: Some(195), semicolon: Some(200) })"];
    191 -> 192;
    192 [label="Expr"];
    192 -> 193;
    193 [label="Identifier"];
    193 -> 194;
    194[label="G_AllowJump"];
    191 -> 195;
    195 [label="Assignment(Assignment { syntax: 195, lvalue: Some(192), operator: Some(196), rvalue: Some(197) })"];
    195 -> 196;
    196[label="="];
    195 -> 197;
    197 [label="Expr"];
    197 -> 198;
    198 [label="Identifier"];
    198 -> 199;
    199[label="_AllowJump"];
    191 -> 200;
    200[label=";"];
    159 -> 201;
    201[label="}"];
    0 -> 202;
    202 [label="FuncDec(FuncDec { syntax: 202, type_: Some(203), name: Some(205), lparen: Some(206), args: [207], rparen: Some(211), body: Some(212) })"];
    202 -> 203;
    203 [label="Type(Type { syntax: 203, basename: Some(204), members: [], arrays: [] })"];
    203 -> 204;
    204[label="Void"];
    202 -> 205;
    205[label="NewPlayer"];
    202 -> 206;
    206[label="("];
    202 -> 207;
    207 [label="FormalArg(FormalArg { syntax: 207, type_: Some(208), name: Some(210), comma: None })"];
    207 -> 208;
    208 [label="Type(Type { syntax: 208, basename: Some(209), members: [], arrays: [] })"];
    208 -> 209;
    209[label="CSmPlayer"];
    207 -> 210;
    210[label="_Player"];
    202 -> 211;
    211[label=")"];
    202 -> 212;
    212 [label="Block(Block { syntax: 212, lbrace: Some(213), statements: [214, 230, 246, 267, 288, 305, 325, 357, 391], rbrace: Some(425) })"];
    212 -> 213;
    213[label="{"];
    212 -> 214;
    214 [label="Statement(Statement { syntax: 214, statement: Some(215), semicolon: Some(229) })"];
    214 -> 215;
    215 [label="Expr"];
    215 -> 223;
    223 [label="FunctionCall(FunctionCall { syntax: 223, lhs: Some(218), lparen: Some(224), args: [(225, None)], rparen: Some(228) })"];
    223 -> 218;
    218 [label="BinaryOp(BinaryOp { syntax: 218, lhs: Some(216), operator: Some(219), rhs: Some(220) })"];
    218 -> 216;
    216 [label="Identifier"];
    216 -> 217;
    217[label="Player"];
    218 -> 219;
    219[label="::"];
    218 -> 220;
    220 [label="Expr"];
    220 -> 221;
    221 [label="Identifier"];
    221 -> 222;
    222[label="InitPlayer"];
    223 -> 224;
    224[label="("];
    223 -> 225;
    225 [label="Expr"];
    225 -> 226;
    226 [label="Identifier"];
    226 -> 227;
    227[label="_Player"];
    223 -> 228;
    228[label=")"];
    214 -> 229;
    229[label=";"];
    212 -> 230;
    230 [label="Statement(Statement { syntax: 230, statement: Some(231), semicolon: Some(245) })"];
    230 -> 231;
    231 [label="Expr"];
    231 -> 239;
    239 [label="FunctionCall(FunctionCall { syntax: 239, lhs: Some(234), lparen: Some(240), args: [(241, None)], rparen: Some(244) })"];
    239 -> 234;
    234 [label="BinaryOp(BinaryOp { syntax: 234, lhs: Some(232), operator: Some(235), rhs: Some(236) })"];
    234 -> 232;
    232 [label="Identifier"];
    232 -> 233;
    233[label="API"];
    234 -> 235;
    235[label="::"];
    234 -> 236;
    236 [label="Expr"];
    236 -> 237;
    237 [label="Identifier"];
    237 -> 238;
    238[label="ReplaceOrCreatePlayer"];
    239 -> 240;
    240[label="("];
    239 -> 241;
    241 [label="Expr"];
    241 -> 242;
    242 [label="Identifier"];
    242 -> 243;
    243[label="_Player"];
    239 -> 244;
    244[label=")"];
    230 -> 245;
    245[label=";"];
    212 -> 246;
    246 [label="Statement(Statement { syntax: 246, statement: Some(247), semicolon: Some(266) })"];
    246 -> 247;
    247 [label="Expr"];
    247 -> 255;
    255 [label="FunctionCall(FunctionCall { syntax: 255, lhs: Some(250), lparen: Some(256), args: [(257, None)], rparen: Some(265) })"];
    255 -> 250;
    250 [label="BinaryOp(BinaryOp { syntax: 250, lhs: Some(248), operator: Some(251), rhs: Some(252) })"];
    250 -> 248;
    248 [label="Identifier"];
    248 -> 249;
    249[label="Ladder"];
    250 -> 251;
    251[label="::"];
    250 -> 252;
    252 [label="Expr"];
    252 -> 253;
    253 [label="Identifier"];
    253 -> 254;
    254[label="AddPlayer"];
    255 -> 256;
    256[label="("];
    255 -> 257;
    257 [label="Expr"];
    257 -> 260;
    260 [label="BinaryOp(BinaryOp { syntax: 260, lhs: Some(258), operator: Some(261), rhs: Some(262) })"];
    260 -> 258;
    258 [label="Identifier"];
    258 -> 259;
    259[label="_Player"];
    260 -> 261;
    261[label="."];
    260 -> 262;
    262 [label="Expr"];
    262 -> 263;
    263 [label="Identifier"];
    263 -> 264;
    264[label="Score"];
    255 -> 265;
    265[label=")"];
    246 -> 266;
    266[label=";"];
    212 -> 267;
    267 [label="Statement(Statement { syntax: 267, statement: Some(268), semicolon: None })"];
    267 -> 268;
    268 [label="VarDec(VarDec { syntax: 268, declare: Some(269), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(270), as_: None, alias: None, for_: None, target: None, assignment: Some(272), value: Some(273) })"];
    268 -> 269;
    269[label="declare"];
    268 -> 270;
    270 [label="Type(Type { syntax: 270, basename: Some(271), members: [], arrays: [] })"];
    270 -> 271;
    271[label="UI"];
    268 -> 272;
    272[label="<=>"];
    268 -> 273;
    273 [label="Expr"];
    273 -> 281;
    281 [label="FunctionCall(FunctionCall { syntax: 281, lhs: Some(276), lparen: Some(282), args: [(283, None)], rparen: Some(286) })"];
    281 -> 276;
    276 [label="BinaryOp(BinaryOp { syntax: 276, lhs: Some(274), operator: Some(277), rhs: Some(278) })"];
    276 -> 274;
    274 [label="Identifier"];
    274 -> 275;
    275[label="UIManager"];
    276 -> 277;
    277[label="."];
    276 -> 278;
    278 [label="Expr"];
    278 -> 279;
    279 [label="Identifier"];
    279 -> 280;
    280[label="GetUI"];
    281 -> 282;
    282[label="("];
    281 -> 283;
    283 [label="Expr"];
    283 -> 284;
    284 [label="Identifier"];
    284 -> 285;
    285[label="_Player"];
    281 -> 286;
    286[label=")"];
    268 -> 287;
    287[label=";"];
    212 -> 288;
    288 [label="Statement(Statement { syntax: 288, statement: Some(289), semicolon: None })"];
    288 -> 289;
    289 [label="If(If { syntax: 289, if_: Some(290), lparen: Some(291), condition: Some(292), rparen: Some(300), body: Some(301), else_: None })"];
    289 -> 290;
    290[label="if"];
    289 -> 291;
    291[label="("];
    289 -> 292;
    292 [label="Expr"];
    292 -> 295;
    295 [label="BinaryOp(BinaryOp { syntax: 295, lhs: Some(293), operator: Some(296), rhs: Some(297) })"];
    295 -> 293;
    293 [label="Identifier"];
    293 -> 294;
    294[label="UI"];
    295 -> 296;
    296[label="=="];
    295 -> 297;
    297 [label="Expr"];
    297 -> 298;
    298 [label="Literal"];
    298 -> 299;
    299[label="Null"];
    289 -> 300;
    300[label=")"];
    289 -> 301;
    301 [label="Statement(Statement { syntax: 301, statement: Some(302), semicolon: Some(304) })"];
    301 -> 302;
    302 [label="Return(Return { syntax: 302, return_: Some(303), value: None })"];
    302 -> 303;
    303[label="return"];
    301 -> 304;
    304[label=";"];
    212 -> 305;
    305 [label="Statement(Statement { syntax: 305, statement: Some(306), semicolon: Some(324) })"];
    305 -> 306;
    306 [label="Expr"];
    306 -> 314;
    314 [label="FunctionCall(FunctionCall { syntax: 314, lhs: Some(309), lparen: Some(315), args: [(316, Some(319)), (320, None)], rparen: Some(323) })"];
    314 -> 309;
    309 [label="BinaryOp(BinaryOp { syntax: 309, lhs: Some(307), operator: Some(310), rhs: Some(311) })"];
    309 -> 307;
    307 [label="Identifier"];
    307 -> 308;
    308[label="Tabs"];
    309 -> 310;
    310[label="::"];
    309 -> 311;
    311 [label="Expr"];
    311 -> 312;
    312 [label="Identifier"];
    312 -> 313;
    313[label="UseTabs"];
    314 -> 315;
    315[label="("];
    314 -> 316;
    316 [label="Expr"];
    316 -> 317;
    317 [label="Identifier"];
    317 -> 318;
    318[label="UI"];
    314 -> 319;
    319[label=","];
    314 -> 320;
    320 [label="Expr"];
    320 -> 321;
    321 [label="Literal"];
    321 -> 322;
    322[label="\"ScoresTab\""];
    314 -> 323;
    323[label=")"];
    305 -> 324;
    324[label=";"];
    212 -> 325;
    325 [label="Statement(Statement { syntax: 325, statement: Some(326), semicolon: None })"];
    325 -> 326;
    326 [label="If(If { syntax: 326, if_: Some(327), lparen: Some(328), condition: Some(329), rparen: Some(352), body: Some(353), else_: None })"];
    326 -> 327;
    327[label="if"];
    326 -> 328;
    328[label="("];
    326 -> 329;
    329 [label="Expr"];
    329 -> 337;
    337 [label="BinaryOp(BinaryOp { syntax: 337, lhs: Some(332), operator: Some(338), rhs: Some(339) })"];
    337 -> 332;
    332 [label="BinaryOp(BinaryOp { syntax: 332, lhs: Some(330), operator: Some(333), rhs: Some(334) })"];
    332 -> 330;
    330 [label="Identifier"];
    330 -> 331;
    331[label="Hud"];
    332 -> 333;
    333[label="=="];
    332 -> 334;
    334 [label="Expr"];
    334 -> 335;
    335 [label="Literal"];
    335 -> 336;
    336[label="Null"];
    337 -> 338;
    338[label="||"];
    337 -> 339;
    339 [label="Expr"];
    339 -> 347;
    347 [label="BinaryOp(BinaryOp { syntax: 347, lhs: Some(342), operator: Some(348), rhs: Some(349) })"];
    347 -> 342;
    342 [label="BinaryOp(BinaryOp { syntax: 342, lhs: Some(340), operator: Some(343), rhs: Some(344) })"];
    342 -> 340;
    340 [label="Identifier"];
    340 -> 341;
    341[label="Hud"];
    342 -> 343;
    343[label="."];
    342 -> 344;
    344 [label="Expr"];
    344 -> 345;
    345 [label="Identifier"];
    345 -> 346;
    346[label="ScoresTable"];
    347 -> 348;
    348[label="=="];
    347 -> 349;
    349 [label="Expr"];
    349 -> 350;
    350 [label="Literal"];
    350 -> 351;
    351[label="Null"];
    326 -> 352;
    352[label=")"];
    326 -> 353;
    353 [label="Statement(Statement { syntax: 353, statement: Some(354), semicolon: Some(356) })"];
    353 -> 354;
    354 [label="Return(Return { syntax: 354, return_: Some(355), value: None })"];
    354 -> 355;
    355[label="return"];
    353 -> 356;
    356[label=";"];
    212 -> 357;
    357 [label="Statement(Statement { syntax: 357, statement: Some(358), semicolon: Some(390) })"];
    357 -> 358;
    358 [label="Expr"];
    358 -> 371;
    371 [label="FunctionCall(FunctionCall { syntax: 371, lhs: Some(361), lparen: Some(372), args: [(373, Some(381)), (382, Some(385)), (386, None)], rparen: Some(389) })"];
    371 -> 361;
    361 [label="BinaryOp(BinaryOp { syntax: 361, lhs: Some(359), operator: Some(362), rhs: Some(363) })"];
    361 -> 359;
    359 [label="Identifier"];
    359 -> 360;
    360[label="Hud"];
    361 -> 362;
    362[label="."];
    361 -> 363;
    363 [label="Expr"];
    363 -> 366;
    366 [label="BinaryOp(BinaryOp { syntax: 366, lhs: Some(364), operator: Some(367), rhs: Some(368) })"];
    366 -> 364;
    364 [label="Identifier"];
    364 -> 365;
    365[label="ScoresTable"];
    366 -> 367;
    367[label="."];
    366 -> 368;
    368 [label="Expr"];
    368 -> 369;
    369 [label="Identifier"];
    369 -> 370;
    370[label="SetColumnValue"];
    371 -> 372;
    372[label="("];
    371 -> 373;
    373 [label="Expr"];
    373 -> 376;
    376 [label="BinaryOp(BinaryOp { syntax: 376, lhs: Some(374), operator: Some(377), rhs: Some(378) })"];
    376 -> 374;
    374 [label="Identifier"];
    374 -> 375;
    375[label="_Player"];
    376 -> 377;
    377[label="."];
    376 -> 378;
    378 [label="Expr"];
    378 -> 379;
    379 [label="Identifier"];
    379 -> 380;
    380[label="Score"];
    371 -> 381;
    381[label=","];
    371 -> 382;
    382 [label="Expr"];
    382 -> 383;
    383 [label="Literal"];
    383 -> 384;
    384[label="\"BestTime\""];
    371 -> 385;
    385[label=","];
    371 -> 386;
    386 [label="Expr"];
    386 -> 387;
    387 [label="Literal"];
    387 -> 388;
    388[label="\"--:--:--\""];
    371 -> 389;
    389[label=")"];
    357 -> 390;
    390[label=";"];
    212 -> 391;
    391 [label="Statement(Statement { syntax: 391, statement: Some(392), semicolon: Some(424) })"];
    391 -> 392;
    392 [label="Expr"];
    392 -> 405;
    405 [label="FunctionCall(FunctionCall { syntax: 405, lhs: Some(395), lparen: Some(406), args: [(407, Some(415)), (416, Some(419)), (420, None)], rparen: Some(423) })"];
    405 -> 395;
    395 [label="BinaryOp(BinaryOp { syntax: 395, lhs: Some(393), operator: Some(396), rhs: Some(397) })"];
    395 -> 393;
    393 [label="Identifier"];
    393 -> 394;
    394[label="Hud"];
    395 -> 396;
    396[label="."];
    395 -> 397;
    397 [label="Expr"];
    397 -> 400;
    400 [label="BinaryOp(BinaryOp { syntax: 400, lhs: Some(398), operator: Some(401), rhs: Some(402) })"];
    400 -> 398;
    398 [label="Identifier"];
    398 -> 399;
    399[label="ScoresTable"];
    400 -> 401;
    401[label="."];
    400 -> 402;
    402 [label="Expr"];
    402 -> 403;
    403 [label="Identifier"];
    403 -> 404;
    404[label="SetColumnValue"];
    405 -> 406;
    406[label="("];
    405 -> 407;
    407 [label="Expr"];
    407 -> 410;
    410 [label="BinaryOp(BinaryOp { syntax: 410, lhs: Some(408), operator: Some(411), rhs: Some(412) })"];
    410 -> 408;
    408 [label="Identifier"];
    408 -> 409;
    409[label="_Player"];
    410 -> 411;
    411[label="."];
    410 -> 412;
    412 [label="Expr"];
    412 -> 413;
    413 [label="Identifier"];
    413 -> 414;
    414[label="Score"];
    405 -> 415;
    415[label=","];
    405 -> 416;
    416 [label="Expr"];
    416 -> 417;
    417 [label="Literal"];
    417 -> 418;
    418[label="\"RS\""];
    405 -> 419;
    419[label=","];
    405 -> 420;
    420 [label="Expr"];
    420 -> 421;
    421 [label="Literal"];
    421 -> 422;
    422[label="0"];
    405 -> 423;
    423[label=")"];
    391 -> 424;
    424[label=";"];
    212 -> 425;
    425[label="}"];
    0 -> 426;
    426 [label="FuncDec(FuncDec { syntax: 426, type_: Some(427), name: Some(429), lparen: Some(430), args: [], rparen: Some(431), body: Some(432) })"];
    426 -> 427;
    427 [label="Type(Type { syntax: 427, basename: Some(428), members: [], arrays: [] })"];
    427 -> 428;
    428[label="Boolean"];
    426 -> 429;
    429[label="PrepareMap"];
    426 -> 430;
    430[label="("];
    426 -> 431;
    431[label=")"];
    426 -> 432;
    432 [label="Block(Block { syntax: 432, lbrace: Some(433), statements: [434, 447, 457, 467, 481, 633, 651, 661, 677, 733, 803, 821, 859], rbrace: Some(866) })"];
    432 -> 433;
    433[label="{"];
    432 -> 434;
    434 [label="Statement(Statement { syntax: 434, statement: Some(435), semicolon: Some(446) })"];
    434 -> 435;
    435 [label="Expr"];
    435 -> 443;
    443 [label="FunctionCall(FunctionCall { syntax: 443, lhs: Some(438), lparen: Some(444), args: [], rparen: Some(445) })"];
    443 -> 438;
    438 [label="BinaryOp(BinaryOp { syntax: 438, lhs: Some(436), operator: Some(439), rhs: Some(440) })"];
    438 -> 436;
    436 [label="Identifier"];
    436 -> 437;
    437[label="API"];
    438 -> 439;
    439[label="::"];
    438 -> 440;
    440 [label="Expr"];
    440 -> 441;
    441 [label="Identifier"];
    441 -> 442;
    442[label="ReplaceOrCreateMap"];
    443 -> 444;
    444[label="("];
    443 -> 445;
    445[label=")"];
    434 -> 446;
    446[label=";"];
    432 -> 447;
    447 [label="Statement(Statement { syntax: 447, statement: Some(451), semicolon: Some(456) })"];
    447 -> 448;
    448 [label="Expr"];
    448 -> 449;
    449 [label="Identifier"];
    449 -> 450;
    450[label="G_StartSpawnId"];
    447 -> 451;
    451 [label="Assignment(Assignment { syntax: 451, lvalue: Some(448), operator: Some(452), rvalue: Some(453) })"];
    451 -> 452;
    452[label="="];
    451 -> 453;
    453 [label="Expr"];
    453 -> 454;
    454 [label="Literal"];
    454 -> 455;
    455[label="NullId"];
    447 -> 456;
    456[label=";"];
    432 -> 457;
    457 [label="Statement(Statement { syntax: 457, statement: Some(461), semicolon: Some(466) })"];
    457 -> 458;
    458 [label="Expr"];
    458 -> 459;
    459 [label="Identifier"];
    459 -> 460;
    460[label="G_CheckpointsTotal"];
    457 -> 461;
    461 [label="Assignment(Assignment { syntax: 461, lvalue: Some(458), operator: Some(462), rvalue: Some(463) })"];
    461 -> 462;
    462[label="="];
    461 -> 463;
    463 [label="Expr"];
    463 -> 464;
    464 [label="Literal"];
    464 -> 465;
    465[label="0"];
    457 -> 466;
    466[label=";"];
    432 -> 467;
    467 [label="Statement(Statement { syntax: 467, statement: Some(468), semicolon: None })"];
    467 -> 468;
    468 [label="VarDec(VarDec { syntax: 468, declare: Some(469), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(470), name: Some(474), as_: None, alias: None, for_: None, target: None, assignment: Some(475), value: Some(476) })"];
    468 -> 469;
    469[label="declare"];
    468 -> 470;
    470 [label="Type(Type { syntax: 470, basename: Some(471), members: [], arrays: [(472, None, 473)] })"];
    470 -> 471;
    471[label="Integer"];
    470 -> 472;
    472[label="["];
    470 -> 473;
    473[label="]"];
    468 -> 474;
    474[label="CheckpointOrders"];
    468 -> 475;
    475[label="="];
    468 -> 476;
    476 [label="Expr"];
    476 -> 477;
    477 [label="Array(Array { syntax: 477, lsquare: Some(478), values: [], rsquare: Some(479) })"];
    477 -> 478;
    478[label="["];
    477 -> 479;
    479[label="]"];
    468 -> 480;
    480[label=";"];
    432 -> 481;
    481 [label="Statement(Statement { syntax: 481, statement: Some(482), semicolon: None })"];
    481 -> 482;
    482 [label="Foreach(Foreach { syntax: 482, foreach: Some(483), lparen: Some(484), name1: Some(485), arrow: None, name2: None, in_: Some(486), value: Some(487), rparen: Some(490), body: Some(491) })"];
    482 -> 483;
    483[label="foreach"];
    482 -> 484;
    484[label="("];
    482 -> 485;
    485[label="Landmark"];
    482 -> 486;
    486[label="in"];
    482 -> 487;
    487 [label="Expr"];
    487 -> 488;
    488 [label="Identifier"];
    488 -> 489;
    489[label="MapLandmarks"];
    482 -> 490;
    490[label=")"];
    482 -> 491;
    491 [label="Statement(Statement { syntax: 491, statement: Some(492), semicolon: None })"];
    491 -> 492;
    492 [label="Block(Block { syntax: 492, lbrace: Some(493), statements: [494, 532], rbrace: Some(632) })"];
    492 -> 493;
    493[label="{"];
    492 -> 494;
    494 [label="Statement(Statement { syntax: 494, statement: Some(495), semicolon: None })"];
    494 -> 495;
    495 [label="If(If { syntax: 495, if_: Some(496), lparen: Some(497), condition: Some(498), rparen: Some(511), body: Some(512), else_: None })"];
    495 -> 496;
    496[label="if"];
    495 -> 497;
    497[label="("];
    495 -> 498;
    498 [label="Expr"];
    498 -> 506;
    506 [label="BinaryOp(BinaryOp { syntax: 506, lhs: Some(501), operator: Some(507), rhs: Some(508) })"];
    506 -> 501;
    501 [label="BinaryOp(BinaryOp { syntax: 501, lhs: Some(499), operator: Some(502), rhs: Some(503) })"];
    501 -> 499;
    499 [label="Identifier"];
    499 -> 500;
    500[label="Landmark"];
    501 -> 502;
    502[label="."];
    501 -> 503;
    503 [label="Expr"];
    503 -> 504;
    504 [label="Identifier"];
    504 -> 505;
    505[label="Gauge"];
    506 -> 507;
    507[label="!="];
    506 -> 508;
    508 [label="Expr"];
    508 -> 509;
    509 [label="Literal"];
    509 -> 510;
    510[label="Null"];
    495 -> 511;
    511[label=")"];
    495 -> 512;
    512 [label="Statement(Statement { syntax: 512, statement: Some(526), semicolon: Some(531) })"];
    512 -> 513;
    513 [label="Expr"];
    513 -> 516;
    516 [label="BinaryOp(BinaryOp { syntax: 516, lhs: Some(514), operator: Some(517), rhs: Some(518) })"];
    516 -> 514;
    514 [label="Identifier"];
    514 -> 515;
    515[label="Landmark"];
    516 -> 517;
    517[label="."];
    516 -> 518;
    518 [label="Expr"];
    518 -> 521;
    521 [label="BinaryOp(BinaryOp { syntax: 521, lhs: Some(519), operator: Some(522), rhs: Some(523) })"];
    521 -> 519;
    519 [label="Identifier"];
    519 -> 520;
    520[label="Gauge"];
    521 -> 522;
    522[label="."];
    521 -> 523;
    523 [label="Expr"];
    523 -> 524;
    524 [label="Identifier"];
    524 -> 525;
    525[label="ValueReal"];
    512 -> 526;
    526 [label="Assignment(Assignment { syntax: 526, lvalue: Some(513), operator: Some(527), rvalue: Some(528) })"];
    526 -> 527;
    527[label="="];
    526 -> 528;
    528 [label="Expr"];
    528 -> 529;
    529 [label="Literal"];
    529 -> 530;
    530[label="1.0"];
    512 -> 531;
    531[label=";"];
    492 -> 532;
    532 [label="Statement(Statement { syntax: 532, statement: Some(533), semicolon: None })"];
    532 -> 533;
    533 [label="If(If { syntax: 533, if_: Some(534), lparen: Some(535), condition: Some(536), rparen: Some(550), body: Some(551), else_: None })"];
    533 -> 534;
    534[label="if"];
    533 -> 535;
    535[label="("];
    533 -> 536;
    536 [label="Expr"];
    536 -> 544;
    544 [label="FunctionCall(FunctionCall { syntax: 544, lhs: Some(539), lparen: Some(545), args: [(546, None)], rparen: Some(549) })"];
    544 -> 539;
    539 [label="BinaryOp(BinaryOp { syntax: 539, lhs: Some(537), operator: Some(540), rhs: Some(541) })"];
    539 -> 537;
    537 [label="Identifier"];
    537 -> 538;
    538[label="Tools"];
    539 -> 540;
    540[label="::"];
    539 -> 541;
    541 [label="Expr"];
    541 -> 542;
    542 [label="Identifier"];
    542 -> 543;
    543[label="IsCheckpoint"];
    544 -> 545;
    545[label="("];
    544 -> 546;
    546 [label="Expr"];
    546 -> 547;
    547 [label="Identifier"];
    547 -> 548;
    548[label="Landmark"];
    544 -> 549;
    549[label=")"];
    533 -> 550;
    550[label=")"];
    533 -> 551;
    551 [label="Statement(Statement { syntax: 551, statement: Some(552), semicolon: None })"];
    551 -> 552;
    552 [label="Block(Block { syntax: 552, lbrace: Some(553), statements: [554], rbrace: Some(631) })"];
    552 -> 553;
    553[label="{"];
    552 -> 554;
    554 [label="Statement(Statement { syntax: 554, statement: Some(555), semicolon: None })"];
    554 -> 555;
    555 [label="If(If { syntax: 555, if_: Some(556), lparen: Some(557), condition: Some(558), rparen: Some(595), body: Some(596), else_: None })"];
    555 -> 556;
    556[label="if"];
    555 -> 557;
    557[label="("];
    555 -> 558;
    558 [label="Expr"];
    558 -> 584;
    584 [label="FunctionCall(FunctionCall { syntax: 584, lhs: Some(571), lparen: Some(585), args: [(586, None)], rparen: Some(594) })"];
    584 -> 571;
    571 [label="BinaryOp(BinaryOp { syntax: 571, lhs: Some(566), operator: Some(572), rhs: Some(573) })"];
    571 -> 566;
    566 [label="BinaryOp(BinaryOp { syntax: 566, lhs: Some(561), operator: Some(567), rhs: Some(568) })"];
    566 -> 561;
    561 [label="BinaryOp(BinaryOp { syntax: 561, lhs: Some(559), operator: Some(562), rhs: Some(563) })"];
    561 -> 559;
    559 [label="Identifier"];
    559 -> 560;
    560[label="Landmark"];
    561 -> 562;
    562[label="."];
    561 -> 563;
    563 [label="Expr"];
    563 -> 564;
    564 [label="Identifier"];
    564 -> 565;
    565[label="Order"];
    566 -> 567;
    567[label="=="];
    566 -> 568;
    568 [label="Expr"];
    568 -> 569;
    569 [label="Literal"];
    569 -> 570;
    570[label="0"];
    571 -> 572;
    572[label="||"];
    571 -> 573;
    573 [label="Expr"];
    573 -> 574;
    574 [label="UnOp(UnOp { syntax: 574, operator: Some(575), operand: Some(576) })"];
    574 -> 575;
    575[label="!"];
    574 -> 576;
    576 [label="Expr"];
    576 -> 579;
    579 [label="BinaryOp(BinaryOp { syntax: 579, lhs: Some(577), operator: Some(580), rhs: Some(581) })"];
    579 -> 577;
    577 [label="Identifier"];
    577 -> 578;
    578[label="CheckpointOrders"];
    579 -> 580;
    580[label="."];
    579 -> 581;
    581 [label="Expr"];
    581 -> 582;
    582 [label="Identifier"];
    582 -> 583;
    583[label="exists"];
    584 -> 585;
    585[label="("];
    584 -> 586;
    586 [label="Expr"];
    586 -> 589;
    589 [label="BinaryOp(BinaryOp { syntax: 589, lhs: Some(587), operator: Some(590), rhs: Some(591) })"];
    589 -> 587;
    587 [label="Identifier"];
    587 -> 588;
    588[label="Landmark"];
    589 -> 590;
    590[label="."];
    589 -> 591;
    591 [label="Expr"];
    591 -> 592;
    592 [label="Identifier"];
    592 -> 593;
    593[label="Order"];
    584 -> 594;
    594[label=")"];
    555 -> 595;
    595[label=")"];
    555 -> 596;
    596 [label="Statement(Statement { syntax: 596, statement: Some(597), semicolon: None })"];
    596 -> 597;
    597 [label="Block(Block { syntax: 597, lbrace: Some(598), statements: [599, 609], rbrace: Some(630) })"];
    597 -> 598;
    598[label="{"];
    597 -> 599;
    599 [label="Statement(Statement { syntax: 599, statement: Some(603), semicolon: Some(608) })"];
    599 -> 600;
    600 [label="Expr"];
    600 -> 601;
    601 [label="Identifier"];
    601 -> 602;
    602[label="G_CheckpointsTotal"];
    599 -> 603;
    603 [label="Assignment(Assignment { syntax: 603, lvalue: Some(600), operator: Some(604), rvalue: Some(605) })"];
    603 -> 604;
    604[label="+="];
    603 -> 605;
    605 [label="Expr"];
    605 -> 606;
    606 [label="Literal"];
    606 -> 607;
    607[label="1"];
    599 -> 608;
    608[label=";"];
    597 -> 609;
    609 [label="Statement(Statement { syntax: 609, statement: Some(610), semicolon: Some(629) })"];
    609 -> 610;
    610 [label="Expr"];
    610 -> 618;
    618 [label="FunctionCall(FunctionCall { syntax: 618, lhs: Some(613), lparen: Some(619), args: [(620, None)], rparen: Some(628) })"];
    618 -> 613;
    613 [label="BinaryOp(BinaryOp { syntax: 613, lhs: Some(611), operator: Some(614), rhs: Some(615) })"];
    613 -> 611;
    611 [label="Identifier"];
    611 -> 612;
    612[label="CheckpointOrders"];
    613 -> 614;
    614[label="."];
    613 -> 615;
    615 [label="Expr"];
    615 -> 616;
    616 [label="Identifier"];
    616 -> 617;
    617[label="add"];
    618 -> 619;
    619[label="("];
    618 -> 620;
    620 [label="Expr"];
    620 -> 623;
    623 [label="BinaryOp(BinaryOp { syntax: 623, lhs: Some(621), operator: Some(624), rhs: Some(625) })"];
    623 -> 621;
    621 [label="Identifier"];
    621 -> 622;
    622[label="Landmark"];
    623 -> 624;
    624[label="."];
    623 -> 625;
    625 [label="Expr"];
    625 -> 626;
    626 [label="Identifier"];
    626 -> 627;
    627[label="Order"];
    618 -> 628;
    628[label=")"];
    609 -> 629;
    629[label=";"];
    597 -> 630;
    630[label="}"];
    552 -> 631;
    631[label="}"];
    492 -> 632;
    632[label="}"];
    432 -> 633;
    633 [label="Statement(Statement { syntax: 633, statement: Some(634), semicolon: None })"];
    633 -> 634;
    634 [label="VarDec(VarDec { syntax: 634, declare: Some(635), netread: None, netwrite: Some(636), persistent: None, metadata: None, type_: Some(637), name: Some(639), as_: None, alias: None, for_: Some(640), target: Some(641), assignment: None, value: None })"];
    634 -> 635;
    635[label="declare"];
    634 -> 636;
    636[label="netwrite"];
    634 -> 637;
    637 [label="Type(Type { syntax: 637, basename: Some(638), members: [], arrays: [] })"];
    637 -> 638;
    638[label="Integer"];
    634 -> 639;
    639[label="Net_CheckpointsTotal"];
    634 -> 640;
    640[label="for"];
    634 -> 641;
    641 [label="Expr"];
    641 -> 644;
    644 [label="ArrayAccess(ArrayAccess { syntax: 644, lhs: Some(642), lsquare: Some(645), index: Some(646), rsquare: Some(649) })"];
    644 -> 642;
    642 [label="Identifier"];
    642 -> 643;
    643[label="Teams"];
    644 -> 645;
    645[label="["];
    644 -> 646;
    646 [label="Expr"];
    646 -> 647;
    647 [label="Literal"];
    647 -> 648;
    648[label="0"];
    644 -> 649;
    649[label="]"];
    634 -> 650;
    650[label=";"];
    432 -> 651;
    651 [label="Statement(Statement { syntax: 651, statement: Some(655), semicolon: Some(660) })"];
    651 -> 652;
    652 [label="Expr"];
    652 -> 653;
    653 [label="Identifier"];
    653 -> 654;
    654[label="Net_CheckpointsTotal"];
    651 -> 655;
    655 [label="Assignment(Assignment { syntax: 655, lvalue: Some(652), operator: Some(656), rvalue: Some(657) })"];
    655 -> 656;
    656[label="="];
    655 -> 657;
    657 [label="Expr"];
    657 -> 658;
    658 [label="Identifier"];
    658 -> 659;
    659[label="G_CheckpointsTotal"];
    651 -> 660;
    660[label=";"];
    432 -> 661;
    661 [label="Statement(Statement { syntax: 661, statement: Some(662), semicolon: Some(676) })"];
    661 -> 662;
    662 [label="Expr"];
    662 -> 670;
    670 [label="FunctionCall(FunctionCall { syntax: 670, lhs: Some(665), lparen: Some(671), args: [(672, None)], rparen: Some(675) })"];
    670 -> 665;
    665 [label="BinaryOp(BinaryOp { syntax: 665, lhs: Some(663), operator: Some(666), rhs: Some(667) })"];
    665 -> 663;
    663 [label="Identifier"];
    663 -> 664;
    664[label="CPTimes"];
    665 -> 666;
    666[label="::"];
    665 -> 667;
    667 [label="Expr"];
    667 -> 668;
    668 [label="Identifier"];
    668 -> 669;
    669[label="StartMap"];
    670 -> 671;
    671[label="("];
    670 -> 672;
    672 [label="Expr"];
    672 -> 673;
    673 [label="Identifier"];
    673 -> 674;
    674[label="G_CheckpointsTotal"];
    670 -> 675;
    675[label=")"];
    661 -> 676;
    676[label=";"];
    432 -> 677;
    677 [label="Statement(Statement { syntax: 677, statement: Some(678), semicolon: None })"];
    677 -> 678;
    678 [label="Foreach(Foreach { syntax: 678, foreach: Some(679), lparen: Some(680), name1: Some(681), arrow: None, name2: None, in_: Some(682), value: Some(683), rparen: Some(686), body: Some(687) })"];
    678 -> 679;
    679[label="foreach"];
    678 -> 680;
    680[label="("];
    678 -> 681;
    681[label="SpawnLandmark"];
    678 -> 682;
    682[label="in"];
    678 -> 683;
    683 [label="Expr"];
    683 -> 684;
    684 [label="Identifier"];
    684 -> 685;
    685[label="MapLandmarks_PlayerSpawn"];
    678 -> 686;
    686[label=")"];
    678 -> 687;
    687 [label="Statement(Statement { syntax: 687, statement: Some(688), semicolon: None })"];
    687 -> 688;
    688 [label="Block(Block { syntax: 688, lbrace: Some(689), statements: [690], rbrace: Some(732) })"];
    688 -> 689;
    689[label="{"];
    688 -> 690;
    690 [label="Statement(Statement { syntax: 690, statement: Some(691), semicolon: None })"];
    690 -> 691;
    691 [label="If(If { syntax: 691, if_: Some(692), lparen: Some(693), condition: Some(694), rparen: Some(708), body: Some(709), else_: None })"];
    691 -> 692;
    692[label="if"];
    691 -> 693;
    693[label="("];
    691 -> 694;
    694 [label="Expr"];
    694 -> 702;
    702 [label="FunctionCall(FunctionCall { syntax: 702, lhs: Some(697), lparen: Some(703), args: [(704, None)], rparen: Some(707) })"];
    702 -> 697;
    697 [label="BinaryOp(BinaryOp { syntax: 697, lhs: Some(695), operator: Some(698), rhs: Some(699) })"];
    697 -> 695;
    695 [label="Identifier"];
    695 -> 696;
    696[label="Tools"];
    697 -> 698;
    698[label="::"];
    697 -> 699;
    699 [label="Expr"];
    699 -> 700;
    700 [label="Identifier"];
    700 -> 701;
    701[label="IsSpawn"];
    702 -> 703;
    703[label="("];
    702 -> 704;
    704 [label="Expr"];
    704 -> 705;
    705 [label="Identifier"];
    705 -> 706;
    706[label="SpawnLandmark"];
    702 -> 707;
    707[label=")"];
    691 -> 708;
    708[label=")"];
    691 -> 709;
    709 [label="Statement(Statement { syntax: 709, statement: Some(710), semicolon: None })"];
    709 -> 710;
    710 [label="Block(Block { syntax: 710, lbrace: Some(711), statements: [712, 727], rbrace: Some(731) })"];
    710 -> 711;
    711[label="{"];
    710 -> 712;
    712 [label="Statement(Statement { syntax: 712, statement: Some(716), semicolon: Some(726) })"];
    712 -> 713;
    713 [label="Expr"];
    713 -> 714;
    714 [label="Identifier"];
    714 -> 715;
    715[label="G_StartSpawnId"];
    712 -> 716;
    716 [label="Assignment(Assignment { syntax: 716, lvalue: Some(713), operator: Some(717), rvalue: Some(718) })"];
    716 -> 717;
    717[label="="];
    716 -> 718;
    718 [label="Expr"];
    718 -> 721;
    721 [label="BinaryOp(BinaryOp { syntax: 721, lhs: Some(719), operator: Some(722), rhs: Some(723) })"];
    721 -> 719;
    719 [label="Identifier"];
    719 -> 720;
    720[label="SpawnLandmark"];
    721 -> 722;
    722[label="."];
    721 -> 723;
    723 [label="Expr"];
    723 -> 724;
    724 [label="Identifier"];
    724 -> 725;
    725[label="Id"];
    712 -> 726;
    726[label=";"];
    710 -> 727;
    727 [label="Statement(Statement { syntax: 727, statement: Some(728), semicolon: Some(730) })"];
    727 -> 728;
    728 [label="Break"];
    728 -> 729;
    729[label="break"];
    727 -> 730;
    730[label=";"];
    710 -> 731;
    731[label="}"];
    688 -> 732;
    732[label="}"];
    432 -> 733;
    733 [label="Statement(Statement { syntax: 733, statement: Some(734), semicolon: None })"];
    733 -> 734;
    734 [label="If(If { syntax: 734, if_: Some(735), lparen: Some(736), condition: Some(737), rparen: Some(754), body: Some(755), else_: None })"];
    734 -> 735;
    735[label="if"];
    734 -> 736;
    736[label="("];
    734 -> 737;
    737 [label="Expr"];
    737 -> 748;
    748 [label="FunctionCall(FunctionCall { syntax: 748, lhs: Some(738), lparen: Some(749), args: [(750, None)], rparen: Some(753) })"];
    748 -> 738;
    738 [label="UnOp(UnOp { syntax: 738, operator: Some(739), operand: Some(740) })"];
    738 -> 739;
    739[label="!"];
    738 -> 740;
    740 [label="Expr"];
    740 -> 743;
    743 [label="BinaryOp(BinaryOp { syntax: 743, lhs: Some(741), operator: Some(744), rhs: Some(745) })"];
    743 -> 741;
    741 [label="Identifier"];
    741 -> 742;
    742[label="MapLandmarks_PlayerSpawn"];
    743 -> 744;
    744[label="."];
    743 -> 745;
    745 [label="Expr"];
    745 -> 746;
    746 [label="Identifier"];
    746 -> 747;
    747[label="existskey"];
    748 -> 749;
    749[label="("];
    748 -> 750;
    750 [label="Expr"];
    750 -> 751;
    751 [label="Identifier"];
    751 -> 752;
    752[label="G_StartSpawnId"];
    748 -> 753;
    753[label=")"];
    734 -> 754;
    754[label=")"];
    734 -> 755;
    755 [label="Statement(Statement { syntax: 755, statement: Some(756), semicolon: None })"];
    755 -> 756;
    756 [label="Block(Block { syntax: 756, lbrace: Some(757), statements: [758, 774, 795], rbrace: Some(802) })"];
    756 -> 757;
    757[label="{"];
    756 -> 758;
    758 [label="Statement(Statement { syntax: 758, statement: Some(759), semicolon: Some(773) })"];
    758 -> 759;
    759 [label="Expr"];
    759 -> 767;
    767 [label="FunctionCall(FunctionCall { syntax: 767, lhs: Some(762), lparen: Some(768), args: [(769, None)], rparen: Some(772) })"];
    767 -> 762;
    762 [label="BinaryOp(BinaryOp { syntax: 762, lhs: Some(760), operator: Some(763), rhs: Some(764) })"];
    762 -> 760;
    760 [label="Identifier"];
    760 -> 761;
    761[label="Log"];
    762 -> 763;
    763[label="::"];
    762 -> 764;
    764 [label="Expr"];
    764 -> 765;
    765 [label="Identifier"];
    765 -> 766;
    766[label="Log"];
    767 -> 768;
    768[label="("];
    767 -> 769;
    769 [label="Expr"];
    769 -> 770;
    770 [label="Literal"];
    770 -> 771;
    771[label="\"ERROR: No Start Spawn on this Map!\""];
    767 -> 772;
    772[label=")"];
    758 -> 773;
    773[label=";"];
    756 -> 774;
    774 [label="Statement(Statement { syntax: 774, statement: Some(775), semicolon: Some(794) })"];
    774 -> 775;
    775 [label="Expr"];
    775 -> 788;
    788 [label="FunctionCall(FunctionCall { syntax: 788, lhs: Some(778), lparen: Some(789), args: [(790, None)], rparen: Some(793) })"];
    788 -> 778;
    778 [label="BinaryOp(BinaryOp { syntax: 778, lhs: Some(776), operator: Some(779), rhs: Some(780) })"];
    778 -> 776;
    776 [label="Identifier"];
    776 -> 777;
    777[label="UIManager"];
    778 -> 779;
    779[label="."];
    778 -> 780;
    780 [label="Expr"];
    780 -> 783;
    783 [label="BinaryOp(BinaryOp { syntax: 783, lhs: Some(781), operator: Some(784), rhs: Some(785) })"];
    783 -> 781;
    781 [label="Identifier"];
    781 -> 782;
    782[label="UIAll"];
    783 -> 784;
    784[label="."];
    783 -> 785;
    785 [label="Expr"];
    785 -> 786;
    786 [label="Identifier"];
    786 -> 787;
    787[label="SendChat"];
    788 -> 789;
    789[label="("];
    788 -> 790;
    790 [label="Expr"];
    790 -> 791;
    791 [label="Literal"];
    791 -> 792;
    792[label="\"$f00ERROR: No Start Spawn on this Map!\""];
    788 -> 793;
    793[label=")"];
    774 -> 794;
    794[label=";"];
    756 -> 795;
    795 [label="Statement(Statement { syntax: 795, statement: Some(796), semicolon: Some(801) })"];
    795 -> 796;
    796 [label="Return(Return { syntax: 796, return_: Some(797), value: Some(798) })"];
    796 -> 797;
    797[label="return"];
    796 -> 798;
    798 [label="Expr"];
    798 -> 799;
    799 [label="Literal"];
    799 -> 800;
    800[label="False"];
    795 -> 801;
    801[label=";"];
    756 -> 802;
    802[label="}"];
    432 -> 803;
    803 [label="Statement(Statement { syntax: 803, statement: Some(804), semicolon: None })"];
    803 -> 804;
    804 [label="VarDec(VarDec { syntax: 804, declare: Some(805), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(806), as_: None, alias: None, for_: None, target: None, assignment: Some(808), value: Some(809) })"];
    804 -> 805;
    805[label="declare"];
    804 -> 806;
    806 [label="Type(Type { syntax: 806, basename: Some(807), members: [], arrays: [] })"];
    806 -> 807;
    807[label="MapVersion"];
    804 -> 808;
    808[label="="];
    804 -> 809;
    809 [label="Expr"];
    809 -> 817;
    817 [label="FunctionCall(FunctionCall { syntax: 817, lhs: Some(812), lparen: Some(818), args: [], rparen: Some(819) })"];
    817 -> 812;
    812 [label="BinaryOp(BinaryOp { syntax: 812, lhs: Some(810), operator: Some(813), rhs: Some(814) })"];
    812 -> 810;
    810 [label="Identifier"];
    810 -> 811;
    811[label="Map"];
    812 -> 813;
    813[label="::"];
    812 -> 814;
    814 [label="Expr"];
    814 -> 815;
    815 [label="Identifier"];
    815 -> 816;
    816[label="GetMapTypeVersion"];
    817 -> 818;
    818[label="("];
    817 -> 819;
    819[label=")"];
    804 -> 820;
    820[label=";"];
    432 -> 821;
    821 [label="Statement(Statement { syntax: 821, statement: Some(822), semicolon: None })"];
    821 -> 822;
    822 [label="If(If { syntax: 822, if_: Some(823), lparen: Some(824), condition: Some(825), rparen: Some(833), body: Some(834), else_: None })"];
    822 -> 823;
    823[label="if"];
    822 -> 824;
    824[label="("];
    822 -> 825;
    825 [label="Expr"];
    825 -> 828;
    828 [label="BinaryOp(BinaryOp { syntax: 828, lhs: Some(826), operator: Some(829), rhs: Some(830) })"];
    828 -> 826;
    826 [label="Identifier"];
    826 -> 827;
    827[label="MapVersion"];
    828 -> 829;
    829[label="<"];
    828 -> 830;
    830 [label="Expr"];
    830 -> 831;
    831 [label="Literal"];
    831 -> 832;
    832[label="2"];
    822 -> 833;
    833[label=")"];
    822 -> 834;
    834 [label="Statement(Statement { syntax: 834, statement: Some(835), semicolon: None })"];
    834 -> 835;
    835 [label="Block(Block { syntax: 835, lbrace: Some(836), statements: [837], rbrace: Some(858) })"];
    835 -> 836;
    836[label="{"];
    835 -> 837;
    837 [label="Statement(Statement { syntax: 837, statement: Some(838), semicolon: Some(857) })"];
    837 -> 838;
    838 [label="Expr"];
    838 -> 851;
    851 [label="FunctionCall(FunctionCall { syntax: 851, lhs: Some(841), lparen: Some(852), args: [(853, None)], rparen: Some(856) })"];
    851 -> 841;
    841 [label="BinaryOp(BinaryOp { syntax: 841, lhs: Some(839), operator: Some(842), rhs: Some(843) })"];
    841 -> 839;
    839 [label="Identifier"];
    839 -> 840;
    840[label="UIManager"];
    841 -> 842;
    842[label="."];
    841 -> 843;
    843 [label="Expr"];
    843 -> 846;
    846 [label="BinaryOp(BinaryOp { syntax: 846, lhs: Some(844), operator: Some(847), rhs: Some(848) })"];
    846 -> 844;
    844 [label="Identifier"];
    844 -> 845;
    845[label="UIAll"];
    846 -> 847;
    847[label="."];
    846 -> 848;
    848 [label="Expr"];
    848 -> 849;
    849 [label="Identifier"];
    849 -> 850;
    850[label="SendChat"];
    851 -> 852;
    852[label="("];
    851 -> 853;
    853 [label="Expr"];
    853 -> 854;
    854 [label="Literal"];
    854 -> 855;
    855[label="\"$f00WARNING: This is an old map, please disable fast respawn in the settings if some cps are made with poles!\""];
    851 -> 856;
    856[label=")"];
    837 -> 857;
    857[label=";"];
    835 -> 858;
    858[label="}"];
    432 -> 859;
    859 [label="Statement(Statement { syntax: 859, statement: Some(860), semicolon: Some(865) })"];
    859 -> 860;
    860 [label="Return(Return { syntax: 860, return_: Some(861), value: Some(862) })"];
    860 -> 861;
    861[label="return"];
    860 -> 862;
    862 [label="Expr"];
    862 -> 863;
    863 [label="Literal"];
    863 -> 864;
    864[label="True"];
    859 -> 865;
    865[label=";"];
    432 -> 866;
    866[label="}"];
    0 -> 867;
    867 [label="FuncDec(FuncDec { syntax: 867, type_: Some(868), name: Some(870), lparen: Some(871), args: [], rparen: Some(872), body: Some(873) })"];
    867 -> 868;
    868 [label="Type(Type { syntax: 868, basename: Some(869), members: [], arrays: [] })"];
    868 -> 869;
    869[label="Integer"];
    867 -> 870;
    870[label="GetCheckpointsTotal"];
    867 -> 871;
    871[label="("];
    867 -> 872;
    872[label=")"];
    867 -> 873;
    873 [label="Block(Block { syntax: 873, lbrace: Some(874), statements: [875], rbrace: Some(882) })"];
    873 -> 874;
    874[label="{"];
    873 -> 875;
    875 [label="Statement(Statement { syntax: 875, statement: Some(876), semicolon: Some(881) })"];
    875 -> 876;
    876 [label="Return(Return { syntax: 876, return_: Some(877), value: Some(878) })"];
    876 -> 877;
    877[label="return"];
    876 -> 878;
    878 [label="Expr"];
    878 -> 879;
    879 [label="Identifier"];
    879 -> 880;
    880[label="G_CheckpointsTotal"];
    875 -> 881;
    881[label=";"];
    873 -> 882;
    882[label="}"];
    0 -> 883;
    883 [label="FuncDec(FuncDec { syntax: 883, type_: Some(884), name: Some(886), lparen: Some(887), args: [888, 893, 898, 903], rparen: Some(907), body: Some(908) })"];
    883 -> 884;
    884 [label="Type(Type { syntax: 884, basename: Some(885), members: [], arrays: [] })"];
    884 -> 885;
    885[label="Void"];
    883 -> 886;
    886[label="Private_SendXmlRpcCallback"];
    883 -> 887;
    887[label="("];
    883 -> 888;
    888 [label="FormalArg(FormalArg { syntax: 888, type_: Some(889), name: Some(891), comma: Some(892) })"];
    888 -> 889;
    889 [label="Type(Type { syntax: 889, basename: Some(890), members: [], arrays: [] })"];
    889 -> 890;
    890[label="Text"];
    888 -> 891;
    891[label="_CallbackName"];
    888 -> 892;
    892[label=","];
    883 -> 893;
    893 [label="FormalArg(FormalArg { syntax: 893, type_: Some(894), name: Some(896), comma: Some(897) })"];
    893 -> 894;
    894 [label="Type(Type { syntax: 894, basename: Some(895), members: [], arrays: [] })"];
    894 -> 895;
    895[label="CSmPlayer"];
    893 -> 896;
    896[label="_Player"];
    893 -> 897;
    897[label=","];
    883 -> 898;
    898 [label="FormalArg(FormalArg { syntax: 898, type_: Some(899), name: Some(901), comma: Some(902) })"];
    898 -> 899;
    899 [label="Type(Type { syntax: 899, basename: Some(900), members: [], arrays: [] })"];
    899 -> 900;
    900[label="Integer"];
    898 -> 901;
    901[label="_RunTime"];
    898 -> 902;
    902[label=","];
    883 -> 903;
    903 [label="FormalArg(FormalArg { syntax: 903, type_: Some(904), name: Some(906), comma: None })"];
    903 -> 904;
    904 [label="Type(Type { syntax: 904, basename: Some(905), members: [], arrays: [] })"];
    904 -> 905;
    905[label="Ident"];
    903 -> 906;
    906[label="_CheckpointId"];
    883 -> 907;
    907[label=")"];
    883 -> 908;
    908 [label="Block(Block { syntax: 908, lbrace: Some(909), statements: [910, 972, 993, 1003], rbrace: Some(1023) })"];
    908 -> 909;
    909[label="{"];
    908 -> 910;
    910 [label="Statement(Statement { syntax: 910, statement: Some(911), semicolon: None })"];
    910 -> 911;
    911 [label="If(If { syntax: 911, if_: Some(912), lparen: Some(913), condition: Some(914), rparen: Some(967), body: Some(968), else_: None })"];
    911 -> 912;
    912[label="if"];
    911 -> 913;
    913[label="("];
    911 -> 914;
    914 [label="Expr"];
    914 -> 922;
    922 [label="BinaryOp(BinaryOp { syntax: 922, lhs: Some(917), operator: Some(923), rhs: Some(924) })"];
    922 -> 917;
    917 [label="BinaryOp(BinaryOp { syntax: 917, lhs: Some(915), operator: Some(918), rhs: Some(919) })"];
    917 -> 915;
    915 [label="Identifier"];
    915 -> 916;
    916[label="_Player"];
    917 -> 918;
    918[label="=="];
    917 -> 919;
    919 [label="Expr"];
    919 -> 920;
    920 [label="Literal"];
    920 -> 921;
    921[label="Null"];
    922 -> 923;
    923[label="||"];
    922 -> 924;
    924 [label="Expr"];
    924 -> 932;
    932 [label="BinaryOp(BinaryOp { syntax: 932, lhs: Some(927), operator: Some(933), rhs: Some(934) })"];
    932 -> 927;
    927 [label="BinaryOp(BinaryOp { syntax: 927, lhs: Some(925), operator: Some(928), rhs: Some(929) })"];
    927 -> 925;
    925 [label="Identifier"];
    925 -> 926;
    926[label="_Player"];
    927 -> 928;
    928[label="."];
    927 -> 929;
    929 [label="Expr"];
    929 -> 930;
    930 [label="Identifier"];
    930 -> 931;
    931[label="IsFakePlayer"];
    932 -> 933;
    933[label="||"];
    932 -> 934;
    934 [label="Expr"];
    934 -> 947;
    947 [label="BinaryOp(BinaryOp { syntax: 947, lhs: Some(942), operator: Some(948), rhs: Some(949) })"];
    947 -> 942;
    942 [label="BinaryOp(BinaryOp { syntax: 942, lhs: Some(937), operator: Some(943), rhs: Some(944) })"];
    942 -> 937;
    937 [label="BinaryOp(BinaryOp { syntax: 937, lhs: Some(935), operator: Some(938), rhs: Some(939) })"];
    937 -> 935;
    935 [label="Identifier"];
    935 -> 936;
    936[label="_Player"];
    937 -> 938;
    938[label="."];
    937 -> 939;
    939 [label="Expr"];
    939 -> 940;
    940 [label="Identifier"];
    940 -> 941;
    941[label="Score"];
    942 -> 943;
    943[label="=="];
    942 -> 944;
    944 [label="Expr"];
    944 -> 945;
    945 [label="Literal"];
    945 -> 946;
    946[label="Null"];
    947 -> 948;
    948[label="||"];
    947 -> 949;
    949 [label="Expr"];
    949 -> 957;
    957 [label="BinaryOp(BinaryOp { syntax: 957, lhs: Some(952), operator: Some(958), rhs: Some(959) })"];
    957 -> 952;
    952 [label="BinaryOp(BinaryOp { syntax: 952, lhs: Some(950), operator: Some(953), rhs: Some(954) })"];
    952 -> 950;
    950 [label="Identifier"];
    950 -> 951;
    951[label="_CallbackName"];
    952 -> 953;
    953[label="=="];
    952 -> 954;
    954 [label="Expr"];
    954 -> 955;
    955 [label="Literal"];
    955 -> 956;
    956[label="\"\""];
    957 -> 958;
    958[label="||"];
    957 -> 959;
    959 [label="Expr"];
    959 -> 962;
    962 [label="BinaryOp(BinaryOp { syntax: 962, lhs: Some(960), operator: Some(963), rhs: Some(964) })"];
    962 -> 960;
    960 [label="Identifier"];
    960 -> 961;
    961[label="_RunTime"];
    962 -> 963;
    963[label="<="];
    962 -> 964;
    964 [label="Expr"];
    964 -> 965;
    965 [label="Literal"];
    965 -> 966;
    966[label="0"];
    911 -> 967;
    967[label=")"];
    911 -> 968;
    968 [label="Statement(Statement { syntax: 968, statement: Some(969), semicolon: Some(971) })"];
    968 -> 969;
    969 [label="Return(Return { syntax: 969, return_: Some(970), value: None })"];
    969 -> 970;
    970[label="return"];
    968 -> 971;
    971[label=";"];
    908 -> 972;
    972 [label="Statement(Statement { syntax: 972, statement: Some(973), semicolon: None })"];
    972 -> 973;
    973 [label="VarDec(VarDec { syntax: 973, declare: Some(974), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(975), as_: None, alias: None, for_: None, target: None, assignment: Some(977), value: Some(978) })"];
    973 -> 974;
    974[label="declare"];
    973 -> 975;
    975 [label="Type(Type { syntax: 975, basename: Some(976), members: [], arrays: [] })"];
    975 -> 976;
    976[label="LastCPTimes"];
    973 -> 977;
    977[label="="];
    973 -> 978;
    978 [label="Expr"];
    978 -> 986;
    986 [label="FunctionCall(FunctionCall { syntax: 986, lhs: Some(981), lparen: Some(987), args: [(988, None)], rparen: Some(991) })"];
    986 -> 981;
    981 [label="BinaryOp(BinaryOp { syntax: 981, lhs: Some(979), operator: Some(982), rhs: Some(983) })"];
    981 -> 979;
    979 [label="Identifier"];
    979 -> 980;
    980[label="Player"];
    981 -> 982;
    982[label="::"];
    981 -> 983;
    983 [label="Expr"];
    983 -> 984;
    984 [label="Identifier"];
    984 -> 985;
    985[label="getLastCPTimes"];
    986 -> 987;
    987[label="("];
    986 -> 988;
    988 [label="Expr"];
    988 -> 989;
    989 [label="Identifier"];
    989 -> 990;
    990[label="_Player"];
    986 -> 991;
    991[label=")"];
    973 -> 992;
    992[label=";"];
    908 -> 993;
    993 [label="Statement(Statement { syntax: 993, statement: Some(994), semicolon: None })"];
    993 -> 994;
    994 [label="VarDec(VarDec { syntax: 994, declare: Some(995), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(996), as_: None, alias: None, for_: None, target: None, assignment: Some(998), value: Some(999) })"];
    994 -> 995;
    995[label="declare"];
    994 -> 996;
    996 [label="Type(Type { syntax: 996, basename: Some(997), members: [], arrays: [] })"];
    996 -> 997;
    997[label="JSON"];
    994 -> 998;
    998[label="="];
    994 -> 999;
    999 [label="Expr"];
    999 -> 1000;
    1000 [label="Literal"];
    1000 -> 1001;
    1001[label="\"\"\"{
            \"Player\":
            {
                \"Name\": \"{{{Json::EscapeText(_Player.User.Name)}}}\",
                \"Login\": \"{{{Json::EscapeText(_Player.User.Login)}}}\"
            },
            \"Run\":
            {
                \"Time\": {{{_RunTime}}},
                \"RespawnCount\": {{{Player::getRespawnCount(_Player)}}},
                \"CheckpointIndex\": {{{LastCPTimes.count - 1}}},
                \"CheckpointId\": \"{{{_CheckpointId}}}\"
            }
        }\"\"\""];
    994 -> 1002;
    1002[label=";"];
    908 -> 1003;
    1003 [label="Statement(Statement { syntax: 1003, statement: Some(1004), semicolon: Some(1022) })"];
    1003 -> 1004;
    1004 [label="Expr"];
    1004 -> 1012;
    1012 [label="FunctionCall(FunctionCall { syntax: 1012, lhs: Some(1007), lparen: Some(1013), args: [(1014, Some(1017)), (1018, None)], rparen: Some(1021) })"];
    1012 -> 1007;
    1007 [label="BinaryOp(BinaryOp { syntax: 1007, lhs: Some(1005), operator: Some(1008), rhs: Some(1009) })"];
    1007 -> 1005;
    1005 [label="Identifier"];
    1005 -> 1006;
    1006[label="XmlRpc"];
    1007 -> 1008;
    1008[label="."];
    1007 -> 1009;
    1009 [label="Expr"];
    1009 -> 1010;
    1010 [label="Identifier"];
    1010 -> 1011;
    1011[label="SendCallback"];
    1012 -> 1013;
    1013[label="("];
    1012 -> 1014;
    1014 [label="Expr"];
    1014 -> 1015;
    1015 [label="Identifier"];
    1015 -> 1016;
    1016[label="_CallbackName"];
    1012 -> 1017;
    1017[label=","];
    1012 -> 1018;
    1018 [label="Expr"];
    1018 -> 1019;
    1019 [label="Identifier"];
    1019 -> 1020;
    1020[label="JSON"];
    1012 -> 1021;
    1021[label=")"];
    1003 -> 1022;
    1022[label=";"];
    908 -> 1023;
    1023[label="}"];
    0 -> 1024;
    1024 [label="FuncDec(FuncDec { syntax: 1024, type_: Some(1025), name: Some(1027), lparen: Some(1028), args: [1029, 1034, 1039], rparen: Some(1043), body: Some(1044) })"];
    1024 -> 1025;
    1025 [label="Type(Type { syntax: 1025, basename: Some(1026), members: [], arrays: [] })"];
    1025 -> 1026;
    1026[label="Void"];
    1024 -> 1027;
    1027[label="Private_SendFinishedRun"];
    1024 -> 1028;
    1028[label="("];
    1024 -> 1029;
    1029 [label="FormalArg(FormalArg { syntax: 1029, type_: Some(1030), name: Some(1032), comma: Some(1033) })"];
    1029 -> 1030;
    1030 [label="Type(Type { syntax: 1030, basename: Some(1031), members: [], arrays: [] })"];
    1030 -> 1031;
    1031[label="CSmPlayer"];
    1029 -> 1032;
    1032[label="_Player"];
    1029 -> 1033;
    1033[label=","];
    1024 -> 1034;
    1034 [label="FormalArg(FormalArg { syntax: 1034, type_: Some(1035), name: Some(1037), comma: Some(1038) })"];
    1034 -> 1035;
    1035 [label="Type(Type { syntax: 1035, basename: Some(1036), members: [], arrays: [] })"];
    1035 -> 1036;
    1036[label="Integer"];
    1034 -> 1037;
    1037[label="_Run"];
    1034 -> 1038;
    1038[label=","];
    1024 -> 1039;
    1039 [label="FormalArg(FormalArg { syntax: 1039, type_: Some(1040), name: Some(1042), comma: None })"];
    1039 -> 1040;
    1040 [label="Type(Type { syntax: 1040, basename: Some(1041), members: [], arrays: [] })"];
    1040 -> 1041;
    1041[label="Ident"];
    1039 -> 1042;
    1042[label="_GoalId"];
    1024 -> 1043;
    1043[label=")"];
    1024 -> 1044;
    1044 [label="Block(Block { syntax: 1044, lbrace: Some(1045), statements: [1046, 1069], rbrace: Some(1085) })"];
    1044 -> 1045;
    1045[label="{"];
    1044 -> 1046;
    1046 [label="Statement(Statement { syntax: 1046, statement: Some(1047), semicolon: Some(1068) })"];
    1046 -> 1047;
    1047 [label="Expr"];
    1047 -> 1050;
    1050 [label="FunctionCall(FunctionCall { syntax: 1050, lhs: Some(1048), lparen: Some(1051), args: [(1052, Some(1055)), (1056, Some(1059)), (1060, Some(1063)), (1064, None)], rparen: Some(1067) })"];
    1050 -> 1048;
    1048 [label="Identifier"];
    1048 -> 1049;
    1049[label="Private_SendXmlRpcCallback"];
    1050 -> 1051;
    1051[label="("];
    1050 -> 1052;
    1052 [label="Expr"];
    1052 -> 1053;
    1053 [label="Literal"];
    1053 -> 1054;
    1054[label="\"OnFinish\""];
    1050 -> 1055;
    1055[label=","];
    1050 -> 1056;
    1056 [label="Expr"];
    1056 -> 1057;
    1057 [label="Identifier"];
    1057 -> 1058;
    1058[label="_Player"];
    1050 -> 1059;
    1059[label=","];
    1050 -> 1060;
    1060 [label="Expr"];
    1060 -> 1061;
    1061 [label="Identifier"];
    1061 -> 1062;
    1062[label="_Run"];
    1050 -> 1063;
    1063[label=","];
    1050 -> 1064;
    1064 [label="Expr"];
    1064 -> 1065;
    1065 [label="Identifier"];
    1065 -> 1066;
    1066[label="_GoalId"];
    1050 -> 1067;
    1067[label=")"];
    1046 -> 1068;
    1068[label=";"];
    1044 -> 1069;
    1069 [label="Statement(Statement { syntax: 1069, statement: Some(1070), semicolon: Some(1084) })"];
    1069 -> 1070;
    1070 [label="Expr"];
    1070 -> 1078;
    1078 [label="FunctionCall(FunctionCall { syntax: 1078, lhs: Some(1073), lparen: Some(1079), args: [(1080, None)], rparen: Some(1083) })"];
    1078 -> 1073;
    1073 [label="BinaryOp(BinaryOp { syntax: 1073, lhs: Some(1071), operator: Some(1074), rhs: Some(1075) })"];
    1073 -> 1071;
    1071 [label="Identifier"];
    1071 -> 1072;
    1072[label="API"];
    1073 -> 1074;
    1074[label="::"];
    1073 -> 1075;
    1075 [label="Expr"];
    1075 -> 1076;
    1076 [label="Identifier"];
    1076 -> 1077;
    1077[label="PlayerFinished"];
    1078 -> 1079;
    1079[label="("];
    1078 -> 1080;
    1080 [label="Expr"];
    1080 -> 1081;
    1081 [label="Identifier"];
    1081 -> 1082;
    1082[label="_Player"];
    1078 -> 1083;
    1083[label=")"];
    1069 -> 1084;
    1084[label=";"];
    1044 -> 1085;
    1085[label="}"];
    0 -> 1086;
    1086 [label="FuncDec(FuncDec { syntax: 1086, type_: Some(1087), name: Some(1089), lparen: Some(1090), args: [], rparen: Some(1091), body: Some(1092) })"];
    1086 -> 1087;
    1087 [label="Type(Type { syntax: 1087, basename: Some(1088), members: [], arrays: [] })"];
    1087 -> 1088;
    1088[label="Void"];
    1086 -> 1089;
    1089[label="Private_UpdateRanking"];
    1086 -> 1090;
    1090[label="("];
    1086 -> 1091;
    1091[label=")"];
    1086 -> 1092;
    1092 [label="Block(Block { syntax: 1092, lbrace: Some(1093), statements: [1094, 1109, 1123, 1210, 1275, 1293, 1303], rbrace: Some(1398) })"];
    1092 -> 1093;
    1093[label="{"];
    1092 -> 1094;
    1094 [label="Statement(Statement { syntax: 1094, statement: Some(1095), semicolon: None })"];
    1094 -> 1095;
    1095 [label="VarDec(VarDec { syntax: 1095, declare: Some(1096), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(1097), name: Some(1102), as_: None, alias: None, for_: None, target: None, assignment: Some(1103), value: Some(1104) })"];
    1095 -> 1096;
    1096[label="declare"];
    1095 -> 1097;
    1097 [label="Type(Type { syntax: 1097, basename: Some(1098), members: [], arrays: [(1099, Some(1100), 1101)] })"];
    1097 -> 1098;
    1098[label="Integer"];
    1097 -> 1099;
    1099[label="["];
    1097 -> 1100;
    1100[label="Ident"];
    1097 -> 1101;
    1101[label="]"];
    1095 -> 1102;
    1102[label="Finished"];
    1095 -> 1103;
    1103[label="="];
    1095 -> 1104;
    1104 [label="Expr"];
    1104 -> 1105;
    1105 [label="Array(Array { syntax: 1105, lsquare: Some(1106), values: [], rsquare: Some(1107) })"];
    1105 -> 1106;
    1106[label="["];
    1105 -> 1107;
    1107[label="]"];
    1095 -> 1108;
    1108[label=";"];
    1092 -> 1109;
    1109 [label="Statement(Statement { syntax: 1109, statement: Some(1110), semicolon: None })"];
    1109 -> 1110;
    1110 [label="VarDec(VarDec { syntax: 1110, declare: Some(1111), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(1112), name: Some(1116), as_: None, alias: None, for_: None, target: None, assignment: Some(1117), value: Some(1118) })"];
    1110 -> 1111;
    1111[label="declare"];
    1110 -> 1112;
    1112 [label="Type(Type { syntax: 1112, basename: Some(1113), members: [], arrays: [(1114, None, 1115)] })"];
    1112 -> 1113;
    1113[label="CSmPlayer"];
    1112 -> 1114;
    1114[label="["];
    1112 -> 1115;
    1115[label="]"];
    1110 -> 1116;
    1116[label="Unfinished"];
    1110 -> 1117;
    1117[label="="];
    1110 -> 1118;
    1118 [label="Expr"];
    1118 -> 1119;
    1119 [label="Array(Array { syntax: 1119, lsquare: Some(1120), values: [], rsquare: Some(1121) })"];
    1119 -> 1120;
    1120[label="["];
    1119 -> 1121;
    1121[label="]"];
    1110 -> 1122;
    1122[label=";"];
    1092 -> 1123;
    1123 [label="Statement(Statement { syntax: 1123, statement: Some(1124), semicolon: None })"];
    1123 -> 1124;
    1124 [label="Foreach(Foreach { syntax: 1124, foreach: Some(1125), lparen: Some(1126), name1: Some(1127), arrow: None, name2: None, in_: Some(1128), value: Some(1129), rparen: Some(1132), body: Some(1133) })"];
    1124 -> 1125;
    1125[label="foreach"];
    1124 -> 1126;
    1126[label="("];
    1124 -> 1127;
    1127[label="Player"];
    1124 -> 1128;
    1128[label="in"];
    1124 -> 1129;
    1129 [label="Expr"];
    1129 -> 1130;
    1130 [label="Identifier"];
    1130 -> 1131;
    1131[label="AllPlayers"];
    1124 -> 1132;
    1132[label=")"];
    1124 -> 1133;
    1133 [label="Statement(Statement { syntax: 1133, statement: Some(1134), semicolon: None })"];
    1133 -> 1134;
    1134 [label="Block(Block { syntax: 1134, lbrace: Some(1135), statements: [1136, 1157], rbrace: Some(1209) })"];
    1134 -> 1135;
    1135[label="{"];
    1134 -> 1136;
    1136 [label="Statement(Statement { syntax: 1136, statement: Some(1137), semicolon: None })"];
    1136 -> 1137;
    1137 [label="VarDec(VarDec { syntax: 1137, declare: Some(1138), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1139), as_: None, alias: None, for_: None, target: None, assignment: Some(1141), value: Some(1142) })"];
    1137 -> 1138;
    1138[label="declare"];
    1137 -> 1139;
    1139 [label="Type(Type { syntax: 1139, basename: Some(1140), members: [], arrays: [] })"];
    1139 -> 1140;
    1140[label="BestRun"];
    1137 -> 1141;
    1141[label="="];
    1137 -> 1142;
    1142 [label="Expr"];
    1142 -> 1150;
    1150 [label="FunctionCall(FunctionCall { syntax: 1150, lhs: Some(1145), lparen: Some(1151), args: [(1152, None)], rparen: Some(1155) })"];
    1150 -> 1145;
    1145 [label="BinaryOp(BinaryOp { syntax: 1145, lhs: Some(1143), operator: Some(1146), rhs: Some(1147) })"];
    1145 -> 1143;
    1143 [label="Identifier"];
    1143 -> 1144;
    1144[label="Player"];
    1145 -> 1146;
    1146[label="::"];
    1145 -> 1147;
    1147 [label="Expr"];
    1147 -> 1148;
    1148 [label="Identifier"];
    1148 -> 1149;
    1149[label="getBestRun"];
    1150 -> 1151;
    1151[label="("];
    1150 -> 1152;
    1152 [label="Expr"];
    1152 -> 1153;
    1153 [label="Identifier"];
    1153 -> 1154;
    1154[label="Player"];
    1150 -> 1155;
    1155[label=")"];
    1137 -> 1156;
    1156[label=";"];
    1134 -> 1157;
    1157 [label="Statement(Statement { syntax: 1157, statement: Some(1158), semicolon: None })"];
    1157 -> 1158;
    1158 [label="If(If { syntax: 1158, if_: Some(1159), lparen: Some(1160), condition: Some(1161), rparen: Some(1169), body: Some(1170), else_: Some(1191) })"];
    1158 -> 1159;
    1159[label="if"];
    1158 -> 1160;
    1160[label="("];
    1158 -> 1161;
    1161 [label="Expr"];
    1161 -> 1164;
    1164 [label="BinaryOp(BinaryOp { syntax: 1164, lhs: Some(1162), operator: Some(1165), rhs: Some(1166) })"];
    1164 -> 1162;
    1162 [label="Identifier"];
    1162 -> 1163;
    1163[label="BestRun"];
    1164 -> 1165;
    1165[label=">"];
    1164 -> 1166;
    1166 [label="Expr"];
    1166 -> 1167;
    1167 [label="Literal"];
    1167 -> 1168;
    1168[label="0"];
    1158 -> 1169;
    1169[label=")"];
    1158 -> 1170;
    1170 [label="Statement(Statement { syntax: 1170, statement: Some(1185), semicolon: Some(1190) })"];
    1170 -> 1171;
    1171 [label="Expr"];
    1171 -> 1174;
    1174 [label="ArrayAccess(ArrayAccess { syntax: 1174, lhs: Some(1172), lsquare: Some(1175), index: Some(1176), rsquare: Some(1184) })"];
    1174 -> 1172;
    1172 [label="Identifier"];
    1172 -> 1173;
    1173[label="Finished"];
    1174 -> 1175;
    1175[label="["];
    1174 -> 1176;
    1176 [label="Expr"];
    1176 -> 1179;
    1179 [label="BinaryOp(BinaryOp { syntax: 1179, lhs: Some(1177), operator: Some(1180), rhs: Some(1181) })"];
    1179 -> 1177;
    1177 [label="Identifier"];
    1177 -> 1178;
    1178[label="Player"];
    1179 -> 1180;
    1180[label="."];
    1179 -> 1181;
    1181 [label="Expr"];
    1181 -> 1182;
    1182 [label="Identifier"];
    1182 -> 1183;
    1183[label="Id"];
    1174 -> 1184;
    1184[label="]"];
    1170 -> 1185;
    1185 [label="Assignment(Assignment { syntax: 1185, lvalue: Some(1171), operator: Some(1186), rvalue: Some(1187) })"];
    1185 -> 1186;
    1186[label="="];
    1185 -> 1187;
    1187 [label="Expr"];
    1187 -> 1188;
    1188 [label="Identifier"];
    1188 -> 1189;
    1189[label="BestRun"];
    1170 -> 1190;
    1190[label=";"];
    1158 -> 1191;
    1191 [label="Else(Else { syntax: 1191, else_: Some(1192), if_: None, body: Some(1193) })"];
    1191 -> 1192;
    1192[label="else"];
    1191 -> 1193;
    1193 [label="Statement(Statement { syntax: 1193, statement: Some(1194), semicolon: Some(1208) })"];
    1193 -> 1194;
    1194 [label="Expr"];
    1194 -> 1202;
    1202 [label="FunctionCall(FunctionCall { syntax: 1202, lhs: Some(1197), lparen: Some(1203), args: [(1204, None)], rparen: Some(1207) })"];
    1202 -> 1197;
    1197 [label="BinaryOp(BinaryOp { syntax: 1197, lhs: Some(1195), operator: Some(1198), rhs: Some(1199) })"];
    1197 -> 1195;
    1195 [label="Identifier"];
    1195 -> 1196;
    1196[label="Unfinished"];
    1197 -> 1198;
    1198[label="."];
    1197 -> 1199;
    1199 [label="Expr"];
    1199 -> 1200;
    1200 [label="Identifier"];
    1200 -> 1201;
    1201[label="add"];
    1202 -> 1203;
    1203[label="("];
    1202 -> 1204;
    1204 [label="Expr"];
    1204 -> 1205;
    1205 [label="Identifier"];
    1205 -> 1206;
    1206[label="Player"];
    1202 -> 1207;
    1207[label=")"];
    1193 -> 1208;
    1208[label=";"];
    1134 -> 1209;
    1209[label="}"];
    1092 -> 1210;
    1210 [label="Statement(Statement { syntax: 1210, statement: Some(1211), semicolon: None })"];
    1210 -> 1211;
    1211 [label="Foreach(Foreach { syntax: 1211, foreach: Some(1212), lparen: Some(1213), name1: Some(1214), arrow: None, name2: None, in_: Some(1215), value: Some(1216), rparen: Some(1219), body: Some(1220) })"];
    1211 -> 1212;
    1212[label="foreach"];
    1211 -> 1213;
    1213[label="("];
    1211 -> 1214;
    1214[label="Player"];
    1211 -> 1215;
    1215[label="in"];
    1211 -> 1216;
    1216 [label="Expr"];
    1216 -> 1217;
    1217 [label="Identifier"];
    1217 -> 1218;
    1218[label="Unfinished"];
    1211 -> 1219;
    1219[label=")"];
    1211 -> 1220;
    1220 [label="Statement(Statement { syntax: 1220, statement: Some(1221), semicolon: None })"];
    1220 -> 1221;
    1221 [label="Block(Block { syntax: 1221, lbrace: Some(1222), statements: [1223, 1249], rbrace: Some(1274) })"];
    1221 -> 1222;
    1222[label="{"];
    1221 -> 1223;
    1223 [label="Statement(Statement { syntax: 1223, statement: Some(1224), semicolon: None })"];
    1223 -> 1224;
    1224 [label="VarDec(VarDec { syntax: 1224, declare: Some(1225), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1226), as_: None, alias: None, for_: None, target: None, assignment: Some(1228), value: Some(1229) })"];
    1224 -> 1225;
    1225[label="declare"];
    1224 -> 1226;
    1226 [label="Type(Type { syntax: 1226, basename: Some(1227), members: [], arrays: [] })"];
    1226 -> 1227;
    1227[label="Points"];
    1224 -> 1228;
    1228[label="="];
    1224 -> 1229;
    1229 [label="Expr"];
    1229 -> 1243;
    1243 [label="BinaryOp(BinaryOp { syntax: 1243, lhs: Some(1237), operator: Some(1244), rhs: Some(1245) })"];
    1243 -> 1237;
    1237 [label="FunctionCall(FunctionCall { syntax: 1237, lhs: Some(1232), lparen: Some(1238), args: [(1239, None)], rparen: Some(1242) })"];
    1237 -> 1232;
    1232 [label="BinaryOp(BinaryOp { syntax: 1232, lhs: Some(1230), operator: Some(1233), rhs: Some(1234) })"];
    1232 -> 1230;
    1230 [label="Identifier"];
    1230 -> 1231;
    1231[label="Player"];
    1232 -> 1233;
    1233[label="::"];
    1232 -> 1234;
    1234 [label="Expr"];
    1234 -> 1235;
    1235 [label="Identifier"];
    1235 -> 1236;
    1236[label="getLastCPTimes"];
    1237 -> 1238;
    1238[label="("];
    1237 -> 1239;
    1239 [label="Expr"];
    1239 -> 1240;
    1240 [label="Identifier"];
    1240 -> 1241;
    1241[label="Player"];
    1237 -> 1242;
    1242[label=")"];
    1243 -> 1244;
    1244[label="."];
    1243 -> 1245;
    1245 [label="Expr"];
    1245 -> 1246;
    1246 [label="Identifier"];
    1246 -> 1247;
    1247[label="count"];
    1224 -> 1248;
    1248[label=";"];
    1221 -> 1249;
    1249 [label="Statement(Statement { syntax: 1249, statement: Some(1250), semicolon: Some(1273) })"];
    1249 -> 1250;
    1250 [label="Expr"];
    1250 -> 1258;
    1258 [label="FunctionCall(FunctionCall { syntax: 1258, lhs: Some(1253), lparen: Some(1259), args: [(1260, Some(1268)), (1269, None)], rparen: Some(1272) })"];
    1258 -> 1253;
    1253 [label="BinaryOp(BinaryOp { syntax: 1253, lhs: Some(1251), operator: Some(1254), rhs: Some(1255) })"];
    1253 -> 1251;
    1251 [label="Identifier"];
    1251 -> 1252;
    1252[label="Scores"];
    1253 -> 1254;
    1254[label="::"];
    1253 -> 1255;
    1255 [label="Expr"];
    1255 -> 1256;
    1256 [label="Identifier"];
    1256 -> 1257;
    1257[label="SetPlayerMapPoints"];
    1258 -> 1259;
    1259[label="("];
    1258 -> 1260;
    1260 [label="Expr"];
    1260 -> 1263;
    1263 [label="BinaryOp(BinaryOp { syntax: 1263, lhs: Some(1261), operator: Some(1264), rhs: Some(1265) })"];
    1263 -> 1261;
    1261 [label="Identifier"];
    1261 -> 1262;
    1262[label="Player"];
    1263 -> 1264;
    1264[label="."];
    1263 -> 1265;
    1265 [label="Expr"];
    1265 -> 1266;
    1266 [label="Identifier"];
    1266 -> 1267;
    1267[label="Score"];
    1258 -> 1268;
    1268[label=","];
    1258 -> 1269;
    1269 [label="Expr"];
    1269 -> 1270;
    1270 [label="Identifier"];
    1270 -> 1271;
    1271[label="Points"];
    1258 -> 1272;
    1272[label=")"];
    1249 -> 1273;
    1273[label=";"];
    1221 -> 1274;
    1274[label="}"];
    1092 -> 1275;
    1275 [label="Statement(Statement { syntax: 1275, statement: Some(1279), semicolon: Some(1292) })"];
    1275 -> 1276;
    1276 [label="Expr"];
    1276 -> 1277;
    1277 [label="Identifier"];
    1277 -> 1278;
    1278[label="Finished"];
    1275 -> 1279;
    1279 [label="Assignment(Assignment { syntax: 1279, lvalue: Some(1276), operator: Some(1280), rvalue: Some(1281) })"];
    1279 -> 1280;
    1280[label="="];
    1279 -> 1281;
    1281 [label="Expr"];
    1281 -> 1289;
    1289 [label="FunctionCall(FunctionCall { syntax: 1289, lhs: Some(1284), lparen: Some(1290), args: [], rparen: Some(1291) })"];
    1289 -> 1284;
    1284 [label="BinaryOp(BinaryOp { syntax: 1284, lhs: Some(1282), operator: Some(1285), rhs: Some(1286) })"];
    1284 -> 1282;
    1282 [label="Identifier"];
    1282 -> 1283;
    1283[label="Finished"];
    1284 -> 1285;
    1285[label="."];
    1284 -> 1286;
    1286 [label="Expr"];
    1286 -> 1287;
    1287 [label="Identifier"];
    1287 -> 1288;
    1288[label="sort"];
    1289 -> 1290;
    1290[label="("];
    1289 -> 1291;
    1291[label=")"];
    1275 -> 1292;
    1292[label=";"];
    1092 -> 1293;
    1293 [label="Statement(Statement { syntax: 1293, statement: Some(1294), semicolon: None })"];
    1293 -> 1294;
    1294 [label="VarDec(VarDec { syntax: 1294, declare: Some(1295), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1296), as_: None, alias: None, for_: None, target: None, assignment: Some(1298), value: Some(1299) })"];
    1294 -> 1295;
    1295[label="declare"];
    1294 -> 1296;
    1296 [label="Type(Type { syntax: 1296, basename: Some(1297), members: [], arrays: [] })"];
    1296 -> 1297;
    1297[label="rank"];
    1294 -> 1298;
    1298[label="="];
    1294 -> 1299;
    1299 [label="Expr"];
    1299 -> 1300;
    1300 [label="Literal"];
    1300 -> 1301;
    1301[label="0"];
    1294 -> 1302;
    1302[label=";"];
    1092 -> 1303;
    1303 [label="Statement(Statement { syntax: 1303, statement: Some(1304), semicolon: None })"];
    1303 -> 1304;
    1304 [label="Foreach(Foreach { syntax: 1304, foreach: Some(1305), lparen: Some(1306), name1: Some(1307), arrow: Some(1308), name2: Some(1309), in_: Some(1310), value: Some(1311), rparen: Some(1314), body: Some(1315) })"];
    1304 -> 1305;
    1305[label="foreach"];
    1304 -> 1306;
    1306[label="("];
    1304 -> 1307;
    1307[label="Id"];
    1304 -> 1308;
    1308[label="=>"];
    1304 -> 1309;
    1309[label="Time"];
    1304 -> 1310;
    1310[label="in"];
    1304 -> 1311;
    1311 [label="Expr"];
    1311 -> 1312;
    1312 [label="Identifier"];
    1312 -> 1313;
    1313[label="Finished"];
    1304 -> 1314;
    1314[label=")"];
    1304 -> 1315;
    1315 [label="Statement(Statement { syntax: 1315, statement: Some(1316), semicolon: None })"];
    1315 -> 1316;
    1316 [label="Block(Block { syntax: 1316, lbrace: Some(1317), statements: [1318, 1387], rbrace: Some(1397) })"];
    1316 -> 1317;
    1317[label="{"];
    1316 -> 1318;
    1318 [label="Statement(Statement { syntax: 1318, statement: Some(1319), semicolon: None })"];
    1318 -> 1319;
    1319 [label="If(If { syntax: 1319, if_: Some(1320), lparen: Some(1321), condition: Some(1322), rparen: Some(1336), body: Some(1337), else_: None })"];
    1319 -> 1320;
    1320[label="if"];
    1319 -> 1321;
    1321[label="("];
    1319 -> 1322;
    1322 [label="Expr"];
    1322 -> 1330;
    1330 [label="FunctionCall(FunctionCall { syntax: 1330, lhs: Some(1325), lparen: Some(1331), args: [(1332, None)], rparen: Some(1335) })"];
    1330 -> 1325;
    1325 [label="BinaryOp(BinaryOp { syntax: 1325, lhs: Some(1323), operator: Some(1326), rhs: Some(1327) })"];
    1325 -> 1323;
    1323 [label="Identifier"];
    1323 -> 1324;
    1324[label="Players"];
    1325 -> 1326;
    1326[label="."];
    1325 -> 1327;
    1327 [label="Expr"];
    1327 -> 1328;
    1328 [label="Identifier"];
    1328 -> 1329;
    1329[label="existskey"];
    1330 -> 1331;
    1331[label="("];
    1330 -> 1332;
    1332 [label="Expr"];
    1332 -> 1333;
    1333 [label="Identifier"];
    1333 -> 1334;
    1334[label="Id"];
    1330 -> 1335;
    1335[label=")"];
    1319 -> 1336;
    1336[label=")"];
    1319 -> 1337;
    1337 [label="Statement(Statement { syntax: 1337, statement: Some(1338), semicolon: None })"];
    1337 -> 1338;
    1338 [label="Block(Block { syntax: 1338, lbrace: Some(1339), statements: [1340], rbrace: Some(1386) })"];
    1338 -> 1339;
    1339[label="{"];
    1338 -> 1340;
    1340 [label="Statement(Statement { syntax: 1340, statement: Some(1341), semicolon: Some(1385) })"];
    1340 -> 1341;
    1341 [label="Expr"];
    1341 -> 1349;
    1349 [label="FunctionCall(FunctionCall { syntax: 1349, lhs: Some(1344), lparen: Some(1350), args: [(1351, Some(1365)), (1366, None)], rparen: Some(1384) })"];
    1349 -> 1344;
    1344 [label="BinaryOp(BinaryOp { syntax: 1344, lhs: Some(1342), operator: Some(1345), rhs: Some(1346) })"];
    1344 -> 1342;
    1342 [label="Identifier"];
    1342 -> 1343;
    1343[label="Scores"];
    1344 -> 1345;
    1345[label="::"];
    1344 -> 1346;
    1346 [label="Expr"];
    1346 -> 1347;
    1347 [label="Identifier"];
    1347 -> 1348;
    1348[label="SetPlayerMapPoints"];
    1349 -> 1350;
    1350[label="("];
    1349 -> 1351;
    1351 [label="Expr"];
    1351 -> 1360;
    1360 [label="BinaryOp(BinaryOp { syntax: 1360, lhs: Some(1354), operator: Some(1361), rhs: Some(1362) })"];
    1360 -> 1354;
    1354 [label="ArrayAccess(ArrayAccess { syntax: 1354, lhs: Some(1352), lsquare: Some(1355), index: Some(1356), rsquare: Some(1359) })"];
    1354 -> 1352;
    1352 [label="Identifier"];
    1352 -> 1353;
    1353[label="Players"];
    1354 -> 1355;
    1355[label="["];
    1354 -> 1356;
    1356 [label="Expr"];
    1356 -> 1357;
    1357 [label="Identifier"];
    1357 -> 1358;
    1358[label="Id"];
    1354 -> 1359;
    1359[label="]"];
    1360 -> 1361;
    1361[label="."];
    1360 -> 1362;
    1362 [label="Expr"];
    1362 -> 1363;
    1363 [label="Identifier"];
    1363 -> 1364;
    1364[label="Score"];
    1349 -> 1365;
    1365[label=","];
    1349 -> 1366;
    1366 [label="Expr"];
    1366 -> 1369;
    1369 [label="BinaryOp(BinaryOp { syntax: 1369, lhs: Some(1367), operator: Some(1370), rhs: Some(1371) })"];
    1369 -> 1367;
    1367 [label="Identifier"];
    1367 -> 1368;
    1368[label="G_CheckpointsTotal"];
    1369 -> 1370;
    1370[label="+"];
    1369 -> 1371;
    1371 [label="Expr"];
    1371 -> 1379;
    1379 [label="BinaryOp(BinaryOp { syntax: 1379, lhs: Some(1374), operator: Some(1380), rhs: Some(1381) })"];
    1379 -> 1374;
    1374 [label="BinaryOp(BinaryOp { syntax: 1374, lhs: Some(1372), operator: Some(1375), rhs: Some(1376) })"];
    1374 -> 1372;
    1372 [label="Identifier"];
    1372 -> 1373;
    1373[label="Finished"];
    1374 -> 1375;
    1375[label="."];
    1374 -> 1376;
    1376 [label="Expr"];
    1376 -> 1377;
    1377 [label="Identifier"];
    1377 -> 1378;
    1378[label="count"];
    1379 -> 1380;
    1380[label="-"];
    1379 -> 1381;
    1381 [label="Expr"];
    1381 -> 1382;
    1382 [label="Identifier"];
    1382 -> 1383;
    1383[label="rank"];
    1349 -> 1384;
    1384[label=")"];
    1340 -> 1385;
    1385[label=";"];
    1338 -> 1386;
    1386[label="}"];
    1316 -> 1387;
    1387 [label="Statement(Statement { syntax: 1387, statement: Some(1391), semicolon: Some(1396) })"];
    1387 -> 1388;
    1388 [label="Expr"];
    1388 -> 1389;
    1389 [label="Identifier"];
    1389 -> 1390;
    1390[label="rank"];
    1387 -> 1391;
    1391 [label="Assignment(Assignment { syntax: 1391, lvalue: Some(1388), operator: Some(1392), rvalue: Some(1393) })"];
    1391 -> 1392;
    1392[label="+="];
    1391 -> 1393;
    1393 [label="Expr"];
    1393 -> 1394;
    1394 [label="Literal"];
    1394 -> 1395;
    1395[label="1"];
    1387 -> 1396;
    1396[label=";"];
    1316 -> 1397;
    1397[label="}"];
    1092 -> 1398;
    1398[label="}"];
    0 -> 1399;
    1399 [label="FuncDec(FuncDec { syntax: 1399, type_: Some(1400), name: Some(1402), lparen: Some(1403), args: [1404], rparen: Some(1408), body: Some(1409) })"];
    1399 -> 1400;
    1400 [label="Type(Type { syntax: 1400, basename: Some(1401), members: [], arrays: [] })"];
    1400 -> 1401;
    1401[label="Void"];
    1399 -> 1402;
    1402[label="Private_UpdatePlayerBestTime"];
    1399 -> 1403;
    1403[label="("];
    1399 -> 1404;
    1404 [label="FormalArg(FormalArg { syntax: 1404, type_: Some(1405), name: Some(1407), comma: None })"];
    1404 -> 1405;
    1405 [label="Type(Type { syntax: 1405, basename: Some(1406), members: [], arrays: [] })"];
    1405 -> 1406;
    1406[label="CSmPlayer"];
    1404 -> 1407;
    1407[label="_Player"];
    1399 -> 1408;
    1408[label=")"];
    1399 -> 1409;
    1409 [label="Block(Block { syntax: 1409, lbrace: Some(1410), statements: [1411, 1443, 1464, 1485, 1506, 1516, 1611, 1645], rbrace: Some(1653) })"];
    1409 -> 1410;
    1410[label="{"];
    1409 -> 1411;
    1411 [label="Statement(Statement { syntax: 1411, statement: Some(1412), semicolon: None })"];
    1411 -> 1412;
    1412 [label="If(If { syntax: 1412, if_: Some(1413), lparen: Some(1414), condition: Some(1415), rparen: Some(1438), body: Some(1439), else_: None })"];
    1412 -> 1413;
    1413[label="if"];
    1412 -> 1414;
    1414[label="("];
    1412 -> 1415;
    1415 [label="Expr"];
    1415 -> 1423;
    1423 [label="BinaryOp(BinaryOp { syntax: 1423, lhs: Some(1418), operator: Some(1424), rhs: Some(1425) })"];
    1423 -> 1418;
    1418 [label="BinaryOp(BinaryOp { syntax: 1418, lhs: Some(1416), operator: Some(1419), rhs: Some(1420) })"];
    1418 -> 1416;
    1416 [label="Identifier"];
    1416 -> 1417;
    1417[label="Hud"];
    1418 -> 1419;
    1419[label="=="];
    1418 -> 1420;
    1420 [label="Expr"];
    1420 -> 1421;
    1421 [label="Literal"];
    1421 -> 1422;
    1422[label="Null"];
    1423 -> 1424;
    1424[label="||"];
    1423 -> 1425;
    1425 [label="Expr"];
    1425 -> 1433;
    1433 [label="BinaryOp(BinaryOp { syntax: 1433, lhs: Some(1428), operator: Some(1434), rhs: Some(1435) })"];
    1433 -> 1428;
    1428 [label="BinaryOp(BinaryOp { syntax: 1428, lhs: Some(1426), operator: Some(1429), rhs: Some(1430) })"];
    1428 -> 1426;
    1426 [label="Identifier"];
    1426 -> 1427;
    1427[label="Hud"];
    1428 -> 1429;
    1429[label="."];
    1428 -> 1430;
    1430 [label="Expr"];
    1430 -> 1431;
    1431 [label="Identifier"];
    1431 -> 1432;
    1432[label="ScoresTable"];
    1433 -> 1434;
    1434[label="=="];
    1433 -> 1435;
    1435 [label="Expr"];
    1435 -> 1436;
    1436 [label="Literal"];
    1436 -> 1437;
    1437[label="Null"];
    1412 -> 1438;
    1438[label=")"];
    1412 -> 1439;
    1439 [label="Statement(Statement { syntax: 1439, statement: Some(1440), semicolon: Some(1442) })"];
    1439 -> 1440;
    1440 [label="Return(Return { syntax: 1440, return_: Some(1441), value: None })"];
    1440 -> 1441;
    1441[label="return"];
    1439 -> 1442;
    1442[label=";"];
    1409 -> 1443;
    1443 [label="Statement(Statement { syntax: 1443, statement: Some(1444), semicolon: None })"];
    1443 -> 1444;
    1444 [label="VarDec(VarDec { syntax: 1444, declare: Some(1445), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1446), as_: None, alias: None, for_: None, target: None, assignment: Some(1448), value: Some(1449) })"];
    1444 -> 1445;
    1445[label="declare"];
    1444 -> 1446;
    1446 [label="Type(Type { syntax: 1446, basename: Some(1447), members: [], arrays: [] })"];
    1446 -> 1447;
    1447[label="cpProgress"];
    1444 -> 1448;
    1448[label="="];
    1444 -> 1449;
    1449 [label="Expr"];
    1449 -> 1457;
    1457 [label="FunctionCall(FunctionCall { syntax: 1457, lhs: Some(1452), lparen: Some(1458), args: [(1459, None)], rparen: Some(1462) })"];
    1457 -> 1452;
    1452 [label="BinaryOp(BinaryOp { syntax: 1452, lhs: Some(1450), operator: Some(1453), rhs: Some(1454) })"];
    1452 -> 1450;
    1450 [label="Identifier"];
    1450 -> 1451;
    1451[label="Player"];
    1452 -> 1453;
    1453[label="::"];
    1452 -> 1454;
    1454 [label="Expr"];
    1454 -> 1455;
    1455 [label="Identifier"];
    1455 -> 1456;
    1456[label="getCpProgress"];
    1457 -> 1458;
    1458[label="("];
    1457 -> 1459;
    1459 [label="Expr"];
    1459 -> 1460;
    1460 [label="Identifier"];
    1460 -> 1461;
    1461[label="_Player"];
    1457 -> 1462;
    1462[label=")"];
    1444 -> 1463;
    1463[label=";"];
    1409 -> 1464;
    1464 [label="Statement(Statement { syntax: 1464, statement: Some(1465), semicolon: None })"];
    1464 -> 1465;
    1465 [label="VarDec(VarDec { syntax: 1465, declare: Some(1466), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1467), as_: None, alias: None, for_: None, target: None, assignment: Some(1469), value: Some(1470) })"];
    1465 -> 1466;
    1466[label="declare"];
    1465 -> 1467;
    1467 [label="Type(Type { syntax: 1467, basename: Some(1468), members: [], arrays: [] })"];
    1467 -> 1468;
    1468[label="usedJump"];
    1465 -> 1469;
    1469[label="="];
    1465 -> 1470;
    1470 [label="Expr"];
    1470 -> 1478;
    1478 [label="FunctionCall(FunctionCall { syntax: 1478, lhs: Some(1473), lparen: Some(1479), args: [(1480, None)], rparen: Some(1483) })"];
    1478 -> 1473;
    1473 [label="BinaryOp(BinaryOp { syntax: 1473, lhs: Some(1471), operator: Some(1474), rhs: Some(1475) })"];
    1473 -> 1471;
    1471 [label="Identifier"];
    1471 -> 1472;
    1472[label="Player"];
    1473 -> 1474;
    1474[label="::"];
    1473 -> 1475;
    1475 [label="Expr"];
    1475 -> 1476;
    1476 [label="Identifier"];
    1476 -> 1477;
    1477[label="usedJump"];
    1478 -> 1479;
    1479[label="("];
    1478 -> 1480;
    1480 [label="Expr"];
    1480 -> 1481;
    1481 [label="Identifier"];
    1481 -> 1482;
    1482[label="_Player"];
    1478 -> 1483;
    1483[label=")"];
    1465 -> 1484;
    1484[label=";"];
    1409 -> 1485;
    1485 [label="Statement(Statement { syntax: 1485, statement: Some(1486), semicolon: None })"];
    1485 -> 1486;
    1486 [label="VarDec(VarDec { syntax: 1486, declare: Some(1487), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1488), as_: None, alias: None, for_: None, target: None, assignment: Some(1490), value: Some(1491) })"];
    1486 -> 1487;
    1487[label="declare"];
    1486 -> 1488;
    1488 [label="Type(Type { syntax: 1488, basename: Some(1489), members: [], arrays: [] })"];
    1488 -> 1489;
    1489[label="bestRun"];
    1486 -> 1490;
    1490[label="="];
    1486 -> 1491;
    1491 [label="Expr"];
    1491 -> 1499;
    1499 [label="FunctionCall(FunctionCall { syntax: 1499, lhs: Some(1494), lparen: Some(1500), args: [(1501, None)], rparen: Some(1504) })"];
    1499 -> 1494;
    1494 [label="BinaryOp(BinaryOp { syntax: 1494, lhs: Some(1492), operator: Some(1495), rhs: Some(1496) })"];
    1494 -> 1492;
    1492 [label="Identifier"];
    1492 -> 1493;
    1493[label="Player"];
    1494 -> 1495;
    1495[label="::"];
    1494 -> 1496;
    1496 [label="Expr"];
    1496 -> 1497;
    1497 [label="Identifier"];
    1497 -> 1498;
    1498[label="getBestRun"];
    1499 -> 1500;
    1500[label="("];
    1499 -> 1501;
    1501 [label="Expr"];
    1501 -> 1502;
    1502 [label="Identifier"];
    1502 -> 1503;
    1503[label="_Player"];
    1499 -> 1504;
    1504[label=")"];
    1486 -> 1505;
    1505[label=";"];
    1409 -> 1506;
    1506 [label="Statement(Statement { syntax: 1506, statement: Some(1507), semicolon: None })"];
    1506 -> 1507;
    1507 [label="VarDec(VarDec { syntax: 1507, declare: Some(1508), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1509), as_: None, alias: None, for_: None, target: None, assignment: Some(1511), value: Some(1512) })"];
    1507 -> 1508;
    1508[label="declare"];
    1507 -> 1509;
    1509 [label="Type(Type { syntax: 1509, basename: Some(1510), members: [], arrays: [] })"];
    1509 -> 1510;
    1510[label="newBestTime"];
    1507 -> 1511;
    1511[label="="];
    1507 -> 1512;
    1512 [label="Expr"];
    1512 -> 1513;
    1513 [label="Literal"];
    1513 -> 1514;
    1514[label="\"--:--.--\""];
    1507 -> 1515;
    1515[label=";"];
    1409 -> 1516;
    1516 [label="Statement(Statement { syntax: 1516, statement: Some(1517), semicolon: None })"];
    1516 -> 1517;
    1517 [label="If(If { syntax: 1517, if_: Some(1518), lparen: Some(1519), condition: Some(1520), rparen: Some(1528), body: Some(1529), else_: Some(1558) })"];
    1517 -> 1518;
    1518[label="if"];
    1517 -> 1519;
    1519[label="("];
    1517 -> 1520;
    1520 [label="Expr"];
    1520 -> 1523;
    1523 [label="BinaryOp(BinaryOp { syntax: 1523, lhs: Some(1521), operator: Some(1524), rhs: Some(1525) })"];
    1523 -> 1521;
    1521 [label="Identifier"];
    1521 -> 1522;
    1522[label="bestRun"];
    1523 -> 1524;
    1524[label=">"];
    1523 -> 1525;
    1525 [label="Expr"];
    1525 -> 1526;
    1526 [label="Literal"];
    1526 -> 1527;
    1527[label="0"];
    1517 -> 1528;
    1528[label=")"];
    1517 -> 1529;
    1529 [label="Statement(Statement { syntax: 1529, statement: Some(1530), semicolon: None })"];
    1529 -> 1530;
    1530 [label="Block(Block { syntax: 1530, lbrace: Some(1531), statements: [1532], rbrace: Some(1557) })"];
    1530 -> 1531;
    1531[label="{"];
    1530 -> 1532;
    1532 [label="Statement(Statement { syntax: 1532, statement: Some(1536), semicolon: Some(1556) })"];
    1532 -> 1533;
    1533 [label="Expr"];
    1533 -> 1534;
    1534 [label="Identifier"];
    1534 -> 1535;
    1535[label="newBestTime"];
    1532 -> 1536;
    1536 [label="Assignment(Assignment { syntax: 1536, lvalue: Some(1533), operator: Some(1537), rvalue: Some(1538) })"];
    1536 -> 1537;
    1537[label="="];
    1536 -> 1538;
    1538 [label="Expr"];
    1538 -> 1546;
    1546 [label="FunctionCall(FunctionCall { syntax: 1546, lhs: Some(1541), lparen: Some(1547), args: [(1548, Some(1551)), (1552, None)], rparen: Some(1555) })"];
    1546 -> 1541;
    1541 [label="BinaryOp(BinaryOp { syntax: 1541, lhs: Some(1539), operator: Some(1542), rhs: Some(1543) })"];
    1541 -> 1539;
    1539 [label="Identifier"];
    1539 -> 1540;
    1540[label="TL"];
    1541 -> 1542;
    1542[label="::"];
    1541 -> 1543;
    1543 [label="Expr"];
    1543 -> 1544;
    1544 [label="Identifier"];
    1544 -> 1545;
    1545[label="TimeToText"];
    1546 -> 1547;
    1547[label="("];
    1546 -> 1548;
    1548 [label="Expr"];
    1548 -> 1549;
    1549 [label="Identifier"];
    1549 -> 1550;
    1550[label="bestRun"];
    1546 -> 1551;
    1551[label=","];
    1546 -> 1552;
    1552 [label="Expr"];
    1552 -> 1553;
    1553 [label="Literal"];
    1553 -> 1554;
    1554[label="True"];
    1546 -> 1555;
    1555[label=")"];
    1532 -> 1556;
    1556[label=";"];
    1530 -> 1557;
    1557[label="}"];
    1517 -> 1558;
    1558 [label="Else(Else { syntax: 1558, else_: Some(1559), if_: None, body: Some(1560) })"];
    1558 -> 1559;
    1559[label="else"];
    1558 -> 1560;
    1560 [label="Statement(Statement { syntax: 1560, statement: Some(1561), semicolon: None })"];
    1560 -> 1561;
    1561 [label="Block(Block { syntax: 1561, lbrace: Some(1562), statements: [1563, 1578], rbrace: Some(1610) })"];
    1561 -> 1562;
    1562[label="{"];
    1561 -> 1563;
    1563 [label="Statement(Statement { syntax: 1563, statement: Some(1567), semicolon: Some(1577) })"];
    1563 -> 1564;
    1564 [label="Expr"];
    1564 -> 1565;
    1565 [label="Identifier"];
    1565 -> 1566;
    1566[label="newBestTime"];
    1563 -> 1567;
    1567 [label="Assignment(Assignment { syntax: 1567, lvalue: Some(1564), operator: Some(1568), rvalue: Some(1569) })"];
    1567 -> 1568;
    1568[label="="];
    1567 -> 1569;
    1569 [label="Expr"];
    1569 -> 1572;
    1572 [label="BinaryOp(BinaryOp { syntax: 1572, lhs: Some(1570), operator: Some(1573), rhs: Some(1574) })"];
    1572 -> 1570;
    1570 [label="Literal"];
    1570 -> 1571;
    1571[label="\"CP\""];
    1572 -> 1573;
    1573[label="^"];
    1572 -> 1574;
    1574 [label="Expr"];
    1574 -> 1575;
    1575 [label="Identifier"];
    1575 -> 1576;
    1576[label="cpProgress"];
    1563 -> 1577;
    1577[label=";"];
    1561 -> 1578;
    1578 [label="Statement(Statement { syntax: 1578, statement: Some(1579), semicolon: None })"];
    1578 -> 1579;
    1579 [label="If(If { syntax: 1579, if_: Some(1580), lparen: Some(1581), condition: Some(1582), rparen: Some(1585), body: Some(1586), else_: None })"];
    1579 -> 1580;
    1580[label="if"];
    1579 -> 1581;
    1581[label="("];
    1579 -> 1582;
    1582 [label="Expr"];
    1582 -> 1583;
    1583 [label="Identifier"];
    1583 -> 1584;
    1584[label="usedJump"];
    1579 -> 1585;
    1585[label=")"];
    1579 -> 1586;
    1586 [label="Statement(Statement { syntax: 1586, statement: Some(1587), semicolon: None })"];
    1586 -> 1587;
    1587 [label="Block(Block { syntax: 1587, lbrace: Some(1588), statements: [1589], rbrace: Some(1609) })"];
    1587 -> 1588;
    1588[label="{"];
    1587 -> 1589;
    1589 [label="Statement(Statement { syntax: 1589, statement: Some(1593), semicolon: Some(1608) })"];
    1589 -> 1590;
    1590 [label="Expr"];
    1590 -> 1591;
    1591 [label="Identifier"];
    1591 -> 1592;
    1592[label="newBestTime"];
    1589 -> 1593;
    1593 [label="Assignment(Assignment { syntax: 1593, lvalue: Some(1590), operator: Some(1594), rvalue: Some(1595) })"];
    1593 -> 1594;
    1594[label="="];
    1593 -> 1595;
    1595 [label="Expr"];
    1595 -> 1598;
    1598 [label="BinaryOp(BinaryOp { syntax: 1598, lhs: Some(1596), operator: Some(1599), rhs: Some(1600) })"];
    1598 -> 1596;
    1596 [label="Literal"];
    1596 -> 1597;
    1597[label="\"$f33\""];
    1598 -> 1599;
    1599[label="^"];
    1598 -> 1600;
    1600 [label="Expr"];
    1600 -> 1603;
    1603 [label="BinaryOp(BinaryOp { syntax: 1603, lhs: Some(1601), operator: Some(1604), rhs: Some(1605) })"];
    1603 -> 1601;
    1601 [label="Identifier"];
    1601 -> 1602;
    1602[label="newBestTime"];
    1603 -> 1604;
    1604[label="^"];
    1603 -> 1605;
    1605 [label="Expr"];
    1605 -> 1606;
    1606 [label="Literal"];
    1606 -> 1607;
    1607[label="\"$z\""];
    1589 -> 1608;
    1608[label=";"];
    1587 -> 1609;
    1609[label="}"];
    1561 -> 1610;
    1610[label="}"];
    1409 -> 1611;
    1611 [label="Statement(Statement { syntax: 1611, statement: Some(1612), semicolon: Some(1644) })"];
    1611 -> 1612;
    1612 [label="Expr"];
    1612 -> 1625;
    1625 [label="FunctionCall(FunctionCall { syntax: 1625, lhs: Some(1615), lparen: Some(1626), args: [(1627, Some(1635)), (1636, Some(1639)), (1640, None)], rparen: Some(1643) })"];
    1625 -> 1615;
    1615 [label="BinaryOp(BinaryOp { syntax: 1615, lhs: Some(1613), operator: Some(1616), rhs: Some(1617) })"];
    1615 -> 1613;
    1613 [label="Identifier"];
    1613 -> 1614;
    1614[label="Hud"];
    1615 -> 1616;
    1616[label="."];
    1615 -> 1617;
    1617 [label="Expr"];
    1617 -> 1620;
    1620 [label="BinaryOp(BinaryOp { syntax: 1620, lhs: Some(1618), operator: Some(1621), rhs: Some(1622) })"];
    1620 -> 1618;
    1618 [label="Identifier"];
    1618 -> 1619;
    1619[label="ScoresTable"];
    1620 -> 1621;
    1621[label="."];
    1620 -> 1622;
    1622 [label="Expr"];
    1622 -> 1623;
    1623 [label="Identifier"];
    1623 -> 1624;
    1624[label="SetColumnValue"];
    1625 -> 1626;
    1626[label="("];
    1625 -> 1627;
    1627 [label="Expr"];
    1627 -> 1630;
    1630 [label="BinaryOp(BinaryOp { syntax: 1630, lhs: Some(1628), operator: Some(1631), rhs: Some(1632) })"];
    1630 -> 1628;
    1628 [label="Identifier"];
    1628 -> 1629;
    1629[label="_Player"];
    1630 -> 1631;
    1631[label="."];
    1630 -> 1632;
    1632 [label="Expr"];
    1632 -> 1633;
    1633 [label="Identifier"];
    1633 -> 1634;
    1634[label="Score"];
    1625 -> 1635;
    1635[label=","];
    1625 -> 1636;
    1636 [label="Expr"];
    1636 -> 1637;
    1637 [label="Literal"];
    1637 -> 1638;
    1638[label="\"BestTime\""];
    1625 -> 1639;
    1639[label=","];
    1625 -> 1640;
    1640 [label="Expr"];
    1640 -> 1641;
    1641 [label="Identifier"];
    1641 -> 1642;
    1642[label="newBestTime"];
    1625 -> 1643;
    1643[label=")"];
    1611 -> 1644;
    1644[label=";"];
    1409 -> 1645;
    1645 [label="Statement(Statement { syntax: 1645, statement: Some(1646), semicolon: Some(1652) })"];
    1645 -> 1646;
    1646 [label="Expr"];
    1646 -> 1649;
    1649 [label="FunctionCall(FunctionCall { syntax: 1649, lhs: Some(1647), lparen: Some(1650), args: [], rparen: Some(1651) })"];
    1649 -> 1647;
    1647 [label="Identifier"];
    1647 -> 1648;
    1648[label="Private_UpdateRanking"];
    1649 -> 1650;
    1650[label="("];
    1649 -> 1651;
    1651[label=")"];
    1645 -> 1652;
    1652[label=";"];
    1409 -> 1653;
    1653[label="}"];
    0 -> 1654;
    1654 [label="FuncDec(FuncDec { syntax: 1654, type_: Some(1655), name: Some(1657), lparen: Some(1658), args: [1659], rparen: Some(1663), body: Some(1664) })"];
    1654 -> 1655;
    1655 [label="Type(Type { syntax: 1655, basename: Some(1656), members: [], arrays: [] })"];
    1655 -> 1656;
    1656[label="Void"];
    1654 -> 1657;
    1657[label="Private_UpdatePlayerRsCounter"];
    1654 -> 1658;
    1658[label="("];
    1654 -> 1659;
    1659 [label="FormalArg(FormalArg { syntax: 1659, type_: Some(1660), name: Some(1662), comma: None })"];
    1659 -> 1660;
    1660 [label="Type(Type { syntax: 1660, basename: Some(1661), members: [], arrays: [] })"];
    1660 -> 1661;
    1661[label="CSmPlayer"];
    1659 -> 1662;
    1662[label="_Player"];
    1654 -> 1663;
    1663[label=")"];
    1654 -> 1664;
    1664 [label="Block(Block { syntax: 1664, lbrace: Some(1665), statements: [1666, 1698], rbrace: Some(1743) })"];
    1664 -> 1665;
    1665[label="{"];
    1664 -> 1666;
    1666 [label="Statement(Statement { syntax: 1666, statement: Some(1667), semicolon: None })"];
    1666 -> 1667;
    1667 [label="If(If { syntax: 1667, if_: Some(1668), lparen: Some(1669), condition: Some(1670), rparen: Some(1693), body: Some(1694), else_: None })"];
    1667 -> 1668;
    1668[label="if"];
    1667 -> 1669;
    1669[label="("];
    1667 -> 1670;
    1670 [label="Expr"];
    1670 -> 1678;
    1678 [label="BinaryOp(BinaryOp { syntax: 1678, lhs: Some(1673), operator: Some(1679), rhs: Some(1680) })"];
    1678 -> 1673;
    1673 [label="BinaryOp(BinaryOp { syntax: 1673, lhs: Some(1671), operator: Some(1674), rhs: Some(1675) })"];
    1673 -> 1671;
    1671 [label="Identifier"];
    1671 -> 1672;
    1672[label="Hud"];
    1673 -> 1674;
    1674[label="=="];
    1673 -> 1675;
    1675 [label="Expr"];
    1675 -> 1676;
    1676 [label="Literal"];
    1676 -> 1677;
    1677[label="Null"];
    1678 -> 1679;
    1679[label="||"];
    1678 -> 1680;
    1680 [label="Expr"];
    1680 -> 1688;
    1688 [label="BinaryOp(BinaryOp { syntax: 1688, lhs: Some(1683), operator: Some(1689), rhs: Some(1690) })"];
    1688 -> 1683;
    1683 [label="BinaryOp(BinaryOp { syntax: 1683, lhs: Some(1681), operator: Some(1684), rhs: Some(1685) })"];
    1683 -> 1681;
    1681 [label="Identifier"];
    1681 -> 1682;
    1682[label="Hud"];
    1683 -> 1684;
    1684[label="."];
    1683 -> 1685;
    1685 [label="Expr"];
    1685 -> 1686;
    1686 [label="Identifier"];
    1686 -> 1687;
    1687[label="ScoresTable"];
    1688 -> 1689;
    1689[label="=="];
    1688 -> 1690;
    1690 [label="Expr"];
    1690 -> 1691;
    1691 [label="Literal"];
    1691 -> 1692;
    1692[label="Null"];
    1667 -> 1693;
    1693[label=")"];
    1667 -> 1694;
    1694 [label="Statement(Statement { syntax: 1694, statement: Some(1695), semicolon: Some(1697) })"];
    1694 -> 1695;
    1695 [label="Return(Return { syntax: 1695, return_: Some(1696), value: None })"];
    1695 -> 1696;
    1696[label="return"];
    1694 -> 1697;
    1697[label=";"];
    1664 -> 1698;
    1698 [label="Statement(Statement { syntax: 1698, statement: Some(1699), semicolon: Some(1742) })"];
    1698 -> 1699;
    1699 [label="Expr"];
    1699 -> 1712;
    1712 [label="FunctionCall(FunctionCall { syntax: 1712, lhs: Some(1702), lparen: Some(1713), args: [(1714, Some(1722)), (1723, Some(1726)), (1727, None)], rparen: Some(1741) })"];
    1712 -> 1702;
    1702 [label="BinaryOp(BinaryOp { syntax: 1702, lhs: Some(1700), operator: Some(1703), rhs: Some(1704) })"];
    1702 -> 1700;
    1700 [label="Identifier"];
    1700 -> 1701;
    1701[label="Hud"];
    1702 -> 1703;
    1703[label="."];
    1702 -> 1704;
    1704 [label="Expr"];
    1704 -> 1707;
    1707 [label="BinaryOp(BinaryOp { syntax: 1707, lhs: Some(1705), operator: Some(1708), rhs: Some(1709) })"];
    1707 -> 1705;
    1705 [label="Identifier"];
    1705 -> 1706;
    1706[label="ScoresTable"];
    1707 -> 1708;
    1708[label="."];
    1707 -> 1709;
    1709 [label="Expr"];
    1709 -> 1710;
    1710 [label="Identifier"];
    1710 -> 1711;
    1711[label="SetColumnValue"];
    1712 -> 1713;
    1713[label="("];
    1712 -> 1714;
    1714 [label="Expr"];
    1714 -> 1717;
    1717 [label="BinaryOp(BinaryOp { syntax: 1717, lhs: Some(1715), operator: Some(1718), rhs: Some(1719) })"];
    1717 -> 1715;
    1715 [label="Identifier"];
    1715 -> 1716;
    1716[label="_Player"];
    1717 -> 1718;
    1718[label="."];
    1717 -> 1719;
    1719 [label="Expr"];
    1719 -> 1720;
    1720 [label="Identifier"];
    1720 -> 1721;
    1721[label="Score"];
    1712 -> 1722;
    1722[label=","];
    1712 -> 1723;
    1723 [label="Expr"];
    1723 -> 1724;
    1724 [label="Literal"];
    1724 -> 1725;
    1725[label="\"RS\""];
    1712 -> 1726;
    1726[label=","];
    1712 -> 1727;
    1727 [label="Expr"];
    1727 -> 1735;
    1735 [label="FunctionCall(FunctionCall { syntax: 1735, lhs: Some(1730), lparen: Some(1736), args: [(1737, None)], rparen: Some(1740) })"];
    1735 -> 1730;
    1730 [label="BinaryOp(BinaryOp { syntax: 1730, lhs: Some(1728), operator: Some(1731), rhs: Some(1732) })"];
    1730 -> 1728;
    1728 [label="Identifier"];
    1728 -> 1729;
    1729[label="Player"];
    1730 -> 1731;
    1731[label="::"];
    1730 -> 1732;
    1732 [label="Expr"];
    1732 -> 1733;
    1733 [label="Identifier"];
    1733 -> 1734;
    1734[label="getRespawnCount"];
    1735 -> 1736;
    1736[label="("];
    1735 -> 1737;
    1737 [label="Expr"];
    1737 -> 1738;
    1738 [label="Identifier"];
    1738 -> 1739;
    1739[label="_Player"];
    1735 -> 1740;
    1740[label=")"];
    1712 -> 1741;
    1741[label=")"];
    1698 -> 1742;
    1742[label=";"];
    1664 -> 1743;
    1743[label="}"];
    0 -> 1744;
    1744 [label="FuncDec(FuncDec { syntax: 1744, type_: Some(1745), name: Some(1747), lparen: Some(1748), args: [1749, 1754], rparen: Some(1758), body: Some(1759) })"];
    1744 -> 1745;
    1745 [label="Type(Type { syntax: 1745, basename: Some(1746), members: [], arrays: [] })"];
    1745 -> 1746;
    1746[label="Void"];
    1744 -> 1747;
    1747[label="Private_RestartEffect"];
    1744 -> 1748;
    1748[label="("];
    1744 -> 1749;
    1749 [label="FormalArg(FormalArg { syntax: 1749, type_: Some(1750), name: Some(1752), comma: Some(1753) })"];
    1749 -> 1750;
    1750 [label="Type(Type { syntax: 1750, basename: Some(1751), members: [], arrays: [] })"];
    1750 -> 1751;
    1751[label="CSmPlayer"];
    1749 -> 1752;
    1752[label="_Player"];
    1749 -> 1753;
    1753[label=","];
    1744 -> 1754;
    1754 [label="FormalArg(FormalArg { syntax: 1754, type_: Some(1755), name: Some(1757), comma: None })"];
    1754 -> 1755;
    1755 [label="Type(Type { syntax: 1755, basename: Some(1756), members: [], arrays: [] })"];
    1755 -> 1756;
    1756[label="Ident"];
    1754 -> 1757;
    1757[label="_SpawnId"];
    1744 -> 1758;
    1758[label=")"];
    1744 -> 1759;
    1759 [label="Block(Block { syntax: 1759, lbrace: Some(1760), statements: [1761, 1779, 1795], rbrace: Some(1879) })"];
    1759 -> 1760;
    1760[label="{"];
    1759 -> 1761;
    1761 [label="Statement(Statement { syntax: 1761, statement: Some(1762), semicolon: None })"];
    1761 -> 1762;
    1762 [label="VarDec(VarDec { syntax: 1762, declare: Some(1763), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1764), as_: None, alias: None, for_: None, target: None, assignment: Some(1766), value: Some(1767) })"];
    1762 -> 1763;
    1763[label="declare"];
    1762 -> 1764;
    1764 [label="Type(Type { syntax: 1764, basename: Some(1765), members: [], arrays: [] })"];
    1764 -> 1765;
    1765[label="MapVersion"];
    1762 -> 1766;
    1766[label="="];
    1762 -> 1767;
    1767 [label="Expr"];
    1767 -> 1775;
    1775 [label="FunctionCall(FunctionCall { syntax: 1775, lhs: Some(1770), lparen: Some(1776), args: [], rparen: Some(1777) })"];
    1775 -> 1770;
    1770 [label="BinaryOp(BinaryOp { syntax: 1770, lhs: Some(1768), operator: Some(1771), rhs: Some(1772) })"];
    1770 -> 1768;
    1768 [label="Identifier"];
    1768 -> 1769;
    1769[label="Map"];
    1770 -> 1771;
    1771[label="::"];
    1770 -> 1772;
    1772 [label="Expr"];
    1772 -> 1773;
    1773 [label="Identifier"];
    1773 -> 1774;
    1774[label="GetMapTypeVersion"];
    1775 -> 1776;
    1776[label="("];
    1775 -> 1777;
    1777[label=")"];
    1762 -> 1778;
    1778[label=";"];
    1759 -> 1779;
    1779 [label="Statement(Statement { syntax: 1779, statement: Some(1780), semicolon: None })"];
    1779 -> 1780;
    1780 [label="VarDec(VarDec { syntax: 1780, declare: Some(1781), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1782), as_: None, alias: None, for_: None, target: None, assignment: Some(1784), value: Some(1785) })"];
    1780 -> 1781;
    1781[label="declare"];
    1780 -> 1782;
    1782 [label="Type(Type { syntax: 1782, basename: Some(1783), members: [], arrays: [] })"];
    1782 -> 1783;
    1783[label="Spawn"];
    1780 -> 1784;
    1784[label="<=>"];
    1780 -> 1785;
    1785 [label="Expr"];
    1785 -> 1788;
    1788 [label="ArrayAccess(ArrayAccess { syntax: 1788, lhs: Some(1786), lsquare: Some(1789), index: Some(1790), rsquare: Some(1793) })"];
    1788 -> 1786;
    1786 [label="Identifier"];
    1786 -> 1787;
    1787[label="MapLandmarks"];
    1788 -> 1789;
    1789[label="["];
    1788 -> 1790;
    1790 [label="Expr"];
    1790 -> 1791;
    1791 [label="Identifier"];
    1791 -> 1792;
    1792[label="_SpawnId"];
    1788 -> 1793;
    1793[label="]"];
    1780 -> 1794;
    1794[label=";"];
    1759 -> 1795;
    1795 [label="Statement(Statement { syntax: 1795, statement: Some(1796), semicolon: None })"];
    1795 -> 1796;
    1796 [label="If(If { syntax: 1796, if_: Some(1797), lparen: Some(1798), condition: Some(1799), rparen: Some(1807), body: Some(1808), else_: Some(1853) })"];
    1796 -> 1797;
    1797[label="if"];
    1796 -> 1798;
    1798[label="("];
    1796 -> 1799;
    1799 [label="Expr"];
    1799 -> 1802;
    1802 [label="BinaryOp(BinaryOp { syntax: 1802, lhs: Some(1800), operator: Some(1803), rhs: Some(1804) })"];
    1802 -> 1800;
    1800 [label="Identifier"];
    1800 -> 1801;
    1801[label="MapVersion"];
    1802 -> 1803;
    1803[label="<="];
    1802 -> 1804;
    1804 [label="Expr"];
    1804 -> 1805;
    1805 [label="Literal"];
    1805 -> 1806;
    1806[label="2"];
    1796 -> 1807;
    1807[label=")"];
    1796 -> 1808;
    1808 [label="Statement(Statement { syntax: 1808, statement: Some(1809), semicolon: None })"];
    1808 -> 1809;
    1809 [label="Block(Block { syntax: 1809, lbrace: Some(1810), statements: [1811, 1832], rbrace: Some(1852) })"];
    1809 -> 1810;
    1810[label="{"];
    1809 -> 1811;
    1811 [label="Statement(Statement { syntax: 1811, statement: Some(1812), semicolon: None })"];
    1811 -> 1812;
    1812 [label="VarDec(VarDec { syntax: 1812, declare: Some(1813), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1814), as_: None, alias: None, for_: None, target: None, assignment: Some(1816), value: Some(1817) })"];
    1812 -> 1813;
    1813[label="declare"];
    1812 -> 1814;
    1814 [label="Type(Type { syntax: 1814, basename: Some(1815), members: [], arrays: [] })"];
    1814 -> 1815;
    1815[label="WeaponType"];
    1812 -> 1816;
    1816[label="="];
    1812 -> 1817;
    1817 [label="Expr"];
    1817 -> 1825;
    1825 [label="FunctionCall(FunctionCall { syntax: 1825, lhs: Some(1820), lparen: Some(1826), args: [(1827, None)], rparen: Some(1830) })"];
    1825 -> 1820;
    1820 [label="BinaryOp(BinaryOp { syntax: 1820, lhs: Some(1818), operator: Some(1821), rhs: Some(1822) })"];
    1820 -> 1818;
    1818 [label="Identifier"];
    1818 -> 1819;
    1819[label="Tools"];
    1820 -> 1821;
    1821[label="::"];
    1820 -> 1822;
    1822 [label="Expr"];
    1822 -> 1823;
    1823 [label="Identifier"];
    1823 -> 1824;
    1824[label="GetWeaponTypeFromSpawn"];
    1825 -> 1826;
    1826[label="("];
    1825 -> 1827;
    1827 [label="Expr"];
    1827 -> 1828;
    1828 [label="Identifier"];
    1828 -> 1829;
    1829[label="Spawn"];
    1825 -> 1830;
    1830[label=")"];
    1812 -> 1831;
    1831[label=";"];
    1809 -> 1832;
    1832 [label="Statement(Statement { syntax: 1832, statement: Some(1833), semicolon: Some(1851) })"];
    1832 -> 1833;
    1833 [label="Expr"];
    1833 -> 1841;
    1841 [label="FunctionCall(FunctionCall { syntax: 1841, lhs: Some(1836), lparen: Some(1842), args: [(1843, Some(1846)), (1847, None)], rparen: Some(1850) })"];
    1841 -> 1836;
    1836 [label="BinaryOp(BinaryOp { syntax: 1836, lhs: Some(1834), operator: Some(1837), rhs: Some(1838) })"];
    1836 -> 1834;
    1834 [label="Identifier"];
    1834 -> 1835;
    1835[label="Weapons"];
    1836 -> 1837;
    1837[label="::"];
    1836 -> 1838;
    1838 [label="Expr"];
    1838 -> 1839;
    1839 [label="Identifier"];
    1839 -> 1840;
    1840[label="ApplyWeaponForCheckpointType"];
    1841 -> 1842;
    1842[label="("];
    1841 -> 1843;
    1843 [label="Expr"];
    1843 -> 1844;
    1844 [label="Identifier"];
    1844 -> 1845;
    1845[label="_Player"];
    1841 -> 1846;
    1846[label=","];
    1841 -> 1847;
    1847 [label="Expr"];
    1847 -> 1848;
    1848 [label="Identifier"];
    1848 -> 1849;
    1849[label="WeaponType"];
    1841 -> 1850;
    1850[label=")"];
    1832 -> 1851;
    1851[label=";"];
    1809 -> 1852;
    1852[label="}"];
    1796 -> 1853;
    1853 [label="Else(Else { syntax: 1853, else_: Some(1854), if_: None, body: Some(1855) })"];
    1853 -> 1854;
    1854[label="else"];
    1853 -> 1855;
    1855 [label="Statement(Statement { syntax: 1855, statement: Some(1856), semicolon: None })"];
    1855 -> 1856;
    1856 [label="Block(Block { syntax: 1856, lbrace: Some(1857), statements: [1858], rbrace: Some(1878) })"];
    1856 -> 1857;
    1857[label="{"];
    1856 -> 1858;
    1858 [label="Statement(Statement { syntax: 1858, statement: Some(1859), semicolon: Some(1877) })"];
    1858 -> 1859;
    1859 [label="Expr"];
    1859 -> 1867;
    1867 [label="FunctionCall(FunctionCall { syntax: 1867, lhs: Some(1862), lparen: Some(1868), args: [(1869, Some(1872)), (1873, None)], rparen: Some(1876) })"];
    1867 -> 1862;
    1862 [label="BinaryOp(BinaryOp { syntax: 1862, lhs: Some(1860), operator: Some(1863), rhs: Some(1864) })"];
    1862 -> 1860;
    1860 [label="Identifier"];
    1860 -> 1861;
    1861[label="Weapons"];
    1862 -> 1863;
    1863[label="::"];
    1862 -> 1864;
    1864 [label="Expr"];
    1864 -> 1865;
    1865 [label="Identifier"];
    1865 -> 1866;
    1866[label="ApplyEffects"];
    1867 -> 1868;
    1868[label="("];
    1867 -> 1869;
    1869 [label="Expr"];
    1869 -> 1870;
    1870 [label="Identifier"];
    1870 -> 1871;
    1871[label="_Player"];
    1867 -> 1872;
    1872[label=","];
    1867 -> 1873;
    1873 [label="Expr"];
    1873 -> 1874;
    1874 [label="Identifier"];
    1874 -> 1875;
    1875[label="Spawn"];
    1867 -> 1876;
    1876[label=")"];
    1858 -> 1877;
    1877[label=";"];
    1856 -> 1878;
    1878[label="}"];
    1759 -> 1879;
    1879[label="}"];
    0 -> 1880;
    1880 [label="FuncDec(FuncDec { syntax: 1880, type_: Some(1881), name: Some(1883), lparen: Some(1884), args: [1885, 1890, 1895, 1900, 1905], rparen: Some(1909), body: Some(1910) })"];
    1880 -> 1881;
    1881 [label="Type(Type { syntax: 1881, basename: Some(1882), members: [], arrays: [] })"];
    1881 -> 1882;
    1882[label="Void"];
    1880 -> 1883;
    1883[label="Private_CpRestart"];
    1880 -> 1884;
    1884[label="("];
    1880 -> 1885;
    1885 [label="FormalArg(FormalArg { syntax: 1885, type_: Some(1886), name: Some(1888), comma: Some(1889) })"];
    1885 -> 1886;
    1886 [label="Type(Type { syntax: 1886, basename: Some(1887), members: [], arrays: [] })"];
    1886 -> 1887;
    1887[label="CSmPlayer"];
    1885 -> 1888;
    1888[label="_Player"];
    1885 -> 1889;
    1889[label=","];
    1880 -> 1890;
    1890 [label="FormalArg(FormalArg { syntax: 1890, type_: Some(1891), name: Some(1893), comma: Some(1894) })"];
    1890 -> 1891;
    1891 [label="Type(Type { syntax: 1891, basename: Some(1892), members: [], arrays: [] })"];
    1891 -> 1892;
    1892[label="Integer"];
    1890 -> 1893;
    1893[label="_Delay"];
    1890 -> 1894;
    1894[label=","];
    1880 -> 1895;
    1895 [label="FormalArg(FormalArg { syntax: 1895, type_: Some(1896), name: Some(1898), comma: Some(1899) })"];
    1895 -> 1896;
    1896 [label="Type(Type { syntax: 1896, basename: Some(1897), members: [], arrays: [] })"];
    1896 -> 1897;
    1897[label="Ident"];
    1895 -> 1898;
    1898[label="_LastCheckpoint"];
    1895 -> 1899;
    1899[label=","];
    1880 -> 1900;
    1900 [label="FormalArg(FormalArg { syntax: 1900, type_: Some(1901), name: Some(1903), comma: Some(1904) })"];
    1900 -> 1901;
    1901 [label="Type(Type { syntax: 1901, basename: Some(1902), members: [], arrays: [] })"];
    1901 -> 1902;
    1902[label="Ident"];
    1900 -> 1903;
    1903[label="_CPSpawn"];
    1900 -> 1904;
    1904[label=","];
    1880 -> 1905;
    1905 [label="FormalArg(FormalArg { syntax: 1905, type_: Some(1906), name: Some(1908), comma: None })"];
    1905 -> 1906;
    1906 [label="Type(Type { syntax: 1906, basename: Some(1907), members: [], arrays: [] })"];
    1906 -> 1907;
    1907[label="Boolean"];
    1905 -> 1908;
    1908[label="_Increment"];
    1880 -> 1909;
    1909[label=")"];
    1880 -> 1910;
    1910 [label="Block(Block { syntax: 1910, lbrace: Some(1911), statements: [1912, 1936, 1952, 1968, 1978, 2054, 2142], rbrace: Some(2172) })"];
    1910 -> 1911;
    1911[label="{"];
    1910 -> 1912;
    1912 [label="Statement(Statement { syntax: 1912, statement: Some(1913), semicolon: None })"];
    1912 -> 1913;
    1913 [label="If(If { syntax: 1913, if_: Some(1914), lparen: Some(1915), condition: Some(1916), rparen: Some(1919), body: Some(1920), else_: None })"];
    1913 -> 1914;
    1914[label="if"];
    1913 -> 1915;
    1915[label="("];
    1913 -> 1916;
    1916 [label="Expr"];
    1916 -> 1917;
    1917 [label="Identifier"];
    1917 -> 1918;
    1918[label="_Increment"];
    1913 -> 1919;
    1919[label=")"];
    1913 -> 1920;
    1920 [label="Statement(Statement { syntax: 1920, statement: Some(1921), semicolon: Some(1935) })"];
    1920 -> 1921;
    1921 [label="Expr"];
    1921 -> 1929;
    1929 [label="FunctionCall(FunctionCall { syntax: 1929, lhs: Some(1924), lparen: Some(1930), args: [(1931, None)], rparen: Some(1934) })"];
    1929 -> 1924;
    1924 [label="BinaryOp(BinaryOp { syntax: 1924, lhs: Some(1922), operator: Some(1925), rhs: Some(1926) })"];
    1924 -> 1922;
    1922 [label="Identifier"];
    1922 -> 1923;
    1923[label="Player"];
    1924 -> 1925;
    1925[label="::"];
    1924 -> 1926;
    1926 [label="Expr"];
    1926 -> 1927;
    1927 [label="Identifier"];
    1927 -> 1928;
    1928[label="incrementRespawnCount"];
    1929 -> 1930;
    1930[label="("];
    1929 -> 1931;
    1931 [label="Expr"];
    1931 -> 1932;
    1932 [label="Identifier"];
    1932 -> 1933;
    1933[label="_Player"];
    1929 -> 1934;
    1934[label=")"];
    1920 -> 1935;
    1935[label=";"];
    1910 -> 1936;
    1936 [label="Statement(Statement { syntax: 1936, statement: Some(1937), semicolon: None })"];
    1936 -> 1937;
    1937 [label="VarDec(VarDec { syntax: 1937, declare: Some(1938), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1939), as_: None, alias: None, for_: None, target: None, assignment: Some(1941), value: Some(1942) })"];
    1937 -> 1938;
    1938[label="declare"];
    1937 -> 1939;
    1939 [label="Type(Type { syntax: 1939, basename: Some(1940), members: [], arrays: [] })"];
    1939 -> 1940;
    1940[label="Checkpoint"];
    1937 -> 1941;
    1941[label="<=>"];
    1937 -> 1942;
    1942 [label="Expr"];
    1942 -> 1945;
    1945 [label="ArrayAccess(ArrayAccess { syntax: 1945, lhs: Some(1943), lsquare: Some(1946), index: Some(1947), rsquare: Some(1950) })"];
    1945 -> 1943;
    1943 [label="Identifier"];
    1943 -> 1944;
    1944[label="MapLandmarks"];
    1945 -> 1946;
    1946[label="["];
    1945 -> 1947;
    1947 [label="Expr"];
    1947 -> 1948;
    1948 [label="Identifier"];
    1948 -> 1949;
    1949[label="_LastCheckpoint"];
    1945 -> 1950;
    1950[label="]"];
    1937 -> 1951;
    1951[label=";"];
    1910 -> 1952;
    1952 [label="Statement(Statement { syntax: 1952, statement: Some(1953), semicolon: None })"];
    1952 -> 1953;
    1953 [label="VarDec(VarDec { syntax: 1953, declare: Some(1954), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1955), as_: None, alias: None, for_: None, target: None, assignment: Some(1957), value: Some(1958) })"];
    1953 -> 1954;
    1954[label="declare"];
    1953 -> 1955;
    1955 [label="Type(Type { syntax: 1955, basename: Some(1956), members: [], arrays: [] })"];
    1955 -> 1956;
    1956[label="Spawn"];
    1953 -> 1957;
    1957[label="<=>"];
    1953 -> 1958;
    1958 [label="Expr"];
    1958 -> 1961;
    1961 [label="ArrayAccess(ArrayAccess { syntax: 1961, lhs: Some(1959), lsquare: Some(1962), index: Some(1963), rsquare: Some(1966) })"];
    1961 -> 1959;
    1959 [label="Identifier"];
    1959 -> 1960;
    1960[label="MapLandmarks_PlayerSpawn"];
    1961 -> 1962;
    1962[label="["];
    1961 -> 1963;
    1963 [label="Expr"];
    1963 -> 1964;
    1964 [label="Identifier"];
    1964 -> 1965;
    1965[label="_CPSpawn"];
    1961 -> 1966;
    1966[label="]"];
    1953 -> 1967;
    1967[label=";"];
    1910 -> 1968;
    1968 [label="Statement(Statement { syntax: 1968, statement: Some(1969), semicolon: None })"];
    1968 -> 1969;
    1969 [label="VarDec(VarDec { syntax: 1969, declare: Some(1970), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1971), as_: None, alias: None, for_: None, target: None, assignment: Some(1973), value: Some(1974) })"];
    1969 -> 1970;
    1970[label="declare"];
    1969 -> 1971;
    1971 [label="Type(Type { syntax: 1971, basename: Some(1972), members: [], arrays: [] })"];
    1971 -> 1972;
    1972[label="CanFastRespawn"];
    1969 -> 1973;
    1973[label="="];
    1969 -> 1974;
    1974 [label="Expr"];
    1974 -> 1975;
    1975 [label="Identifier"];
    1975 -> 1976;
    1976[label="G_FastRespawn"];
    1969 -> 1977;
    1977[label=";"];
    1910 -> 1978;
    1978 [label="Statement(Statement { syntax: 1978, statement: Some(1979), semicolon: None })"];
    1978 -> 1979;
    1979 [label="If(If { syntax: 1979, if_: Some(1980), lparen: Some(1981), condition: Some(1982), rparen: Some(1985), body: Some(1986), else_: None })"];
    1979 -> 1980;
    1980[label="if"];
    1979 -> 1981;
    1981[label="("];
    1979 -> 1982;
    1982 [label="Expr"];
    1982 -> 1983;
    1983 [label="Identifier"];
    1983 -> 1984;
    1984[label="CanFastRespawn"];
    1979 -> 1985;
    1985[label=")"];
    1979 -> 1986;
    1986 [label="Statement(Statement { syntax: 1986, statement: Some(1987), semicolon: None })"];
    1986 -> 1987;
    1987 [label="Block(Block { syntax: 1987, lbrace: Some(1988), statements: [1989, 2004], rbrace: Some(2053) })"];
    1987 -> 1988;
    1988[label="{"];
    1987 -> 1989;
    1989 [label="Statement(Statement { syntax: 1989, statement: Some(1990), semicolon: None })"];
    1989 -> 1990;
    1990 [label="VarDec(VarDec { syntax: 1990, declare: Some(1991), netread: None, netwrite: None, persistent: None, metadata: Some(1992), type_: None, name: Some(1993), as_: None, alias: None, for_: Some(1995), target: Some(1996), assignment: Some(1999), value: Some(2000) })"];
    1990 -> 1991;
    1991[label="declare"];
    1990 -> 1992;
    1992[label="metadata"];
    1990 -> 1993;
    1993 [label="Type(Type { syntax: 1993, basename: Some(1994), members: [], arrays: [] })"];
    1993 -> 1994;
    1994[label="DefaultTag"];
    1990 -> 1995;
    1995[label="for"];
    1990 -> 1996;
    1996 [label="Expr"];
    1996 -> 1997;
    1997 [label="Identifier"];
    1997 -> 1998;
    1998[label="Checkpoint"];
    1990 -> 1999;
    1999[label="="];
    1990 -> 2000;
    2000 [label="Expr"];
    2000 -> 2001;
    2001 [label="Literal"];
    2001 -> 2002;
    2002[label="\"\""];
    1990 -> 2003;
    2003[label=";"];
    1987 -> 2004;
    2004 [label="Statement(Statement { syntax: 2004, statement: Some(2005), semicolon: None })"];
    2004 -> 2005;
    2005 [label="If(If { syntax: 2005, if_: Some(2006), lparen: Some(2007), condition: Some(2008), rparen: Some(2042), body: Some(2043), else_: None })"];
    2005 -> 2006;
    2006[label="if"];
    2005 -> 2007;
    2007[label="("];
    2005 -> 2008;
    2008 [label="Expr"];
    2008 -> 2036;
    2036 [label="FunctionCall(FunctionCall { syntax: 2036, lhs: Some(2016), lparen: Some(2037), args: [(2038, None)], rparen: Some(2041) })"];
    2036 -> 2016;
    2016 [label="BinaryOp(BinaryOp { syntax: 2016, lhs: Some(2011), operator: Some(2017), rhs: Some(2018) })"];
    2016 -> 2011;
    2011 [label="BinaryOp(BinaryOp { syntax: 2011, lhs: Some(2009), operator: Some(2012), rhs: Some(2013) })"];
    2011 -> 2009;
    2009 [label="Identifier"];
    2009 -> 2010;
    2010[label="DefaultTag"];
    2011 -> 2012;
    2012[label="!="];
    2011 -> 2013;
    2013 [label="Expr"];
    2013 -> 2014;
    2014 [label="Literal"];
    2014 -> 2015;
    2015[label="\"Checkpoint\""];
    2016 -> 2017;
    2017[label="&&"];
    2016 -> 2018;
    2018 [label="Expr"];
    2018 -> 2026;
    2026 [label="BinaryOp(BinaryOp { syntax: 2026, lhs: Some(2021), operator: Some(2027), rhs: Some(2028) })"];
    2026 -> 2021;
    2021 [label="BinaryOp(BinaryOp { syntax: 2021, lhs: Some(2019), operator: Some(2022), rhs: Some(2023) })"];
    2021 -> 2019;
    2019 [label="Identifier"];
    2019 -> 2020;
    2020[label="DefaultTag"];
    2021 -> 2022;
    2022[label="!="];
    2021 -> 2023;
    2023 [label="Expr"];
    2023 -> 2024;
    2024 [label="Literal"];
    2024 -> 2025;
    2025[label="\"\""];
    2026 -> 2027;
    2027[label="||"];
    2026 -> 2028;
    2028 [label="Expr"];
    2028 -> 2031;
    2031 [label="BinaryOp(BinaryOp { syntax: 2031, lhs: Some(2029), operator: Some(2032), rhs: Some(2033) })"];
    2031 -> 2029;
    2029 [label="Identifier"];
    2029 -> 2030;
    2030[label="Tools"];
    2031 -> 2032;
    2032[label="::"];
    2031 -> 2033;
    2033 [label="Expr"];
    2033 -> 2034;
    2034 [label="Identifier"];
    2034 -> 2035;
    2035[label="IsPortal"];
    2036 -> 2037;
    2037[label="("];
    2036 -> 2038;
    2038 [label="Expr"];
    2038 -> 2039;
    2039 [label="Identifier"];
    2039 -> 2040;
    2040[label="Checkpoint"];
    2036 -> 2041;
    2041[label=")"];
    2005 -> 2042;
    2042[label=")"];
    2005 -> 2043;
    2043 [label="Statement(Statement { syntax: 2043, statement: Some(2047), semicolon: Some(2052) })"];
    2043 -> 2044;
    2044 [label="Expr"];
    2044 -> 2045;
    2045 [label="Identifier"];
    2045 -> 2046;
    2046[label="CanFastRespawn"];
    2043 -> 2047;
    2047 [label="Assignment(Assignment { syntax: 2047, lvalue: Some(2044), operator: Some(2048), rvalue: Some(2049) })"];
    2047 -> 2048;
    2048[label="="];
    2047 -> 2049;
    2049 [label="Expr"];
    2049 -> 2050;
    2050 [label="Literal"];
    2050 -> 2051;
    2051[label="False"];
    2043 -> 2052;
    2052[label=";"];
    1987 -> 2053;
    2053[label="}"];
    1910 -> 2054;
    2054 [label="Statement(Statement { syntax: 2054, statement: Some(2055), semicolon: None })"];
    2054 -> 2055;
    2055 [label="If(If { syntax: 2055, if_: Some(2056), lparen: Some(2057), condition: Some(2058), rparen: Some(2086), body: Some(2087), else_: Some(2102) })"];
    2055 -> 2056;
    2056[label="if"];
    2055 -> 2057;
    2057[label="("];
    2055 -> 2058;
    2058 [label="Expr"];
    2058 -> 2081;
    2081 [label="BinaryOp(BinaryOp { syntax: 2081, lhs: Some(2066), operator: Some(2082), rhs: Some(2083) })"];
    2081 -> 2066;
    2066 [label="BinaryOp(BinaryOp { syntax: 2066, lhs: Some(2061), operator: Some(2067), rhs: Some(2068) })"];
    2066 -> 2061;
    2061 [label="BinaryOp(BinaryOp { syntax: 2061, lhs: Some(2059), operator: Some(2062), rhs: Some(2063) })"];
    2061 -> 2059;
    2059 [label="Identifier"];
    2059 -> 2060;
    2060[label="_Player"];
    2061 -> 2062;
    2062[label="."];
    2061 -> 2063;
    2063 [label="Expr"];
    2063 -> 2064;
    2064 [label="Identifier"];
    2064 -> 2065;
    2065[label="SpawnStatus"];
    2066 -> 2067;
    2067[label="=="];
    2066 -> 2068;
    2068 [label="Expr"];
    2068 -> 2071;
    2071 [label="BinaryOp(BinaryOp { syntax: 2071, lhs: Some(2069), operator: Some(2072), rhs: Some(2073) })"];
    2071 -> 2069;
    2069 [label="Identifier"];
    2069 -> 2070;
    2070[label="CSmPlayer"];
    2071 -> 2072;
    2072[label="::"];
    2071 -> 2073;
    2073 [label="Expr"];
    2073 -> 2076;
    2076 [label="BinaryOp(BinaryOp { syntax: 2076, lhs: Some(2074), operator: Some(2077), rhs: Some(2078) })"];
    2076 -> 2074;
    2074 [label="Identifier"];
    2074 -> 2075;
    2075[label="ESpawnStatus"];
    2076 -> 2077;
    2077[label="::"];
    2076 -> 2078;
    2078 [label="Expr"];
    2078 -> 2079;
    2079 [label="Identifier"];
    2079 -> 2080;
    2080[label="Spawned"];
    2081 -> 2082;
    2082[label="&&"];
    2081 -> 2083;
    2083 [label="Expr"];
    2083 -> 2084;
    2084 [label="Identifier"];
    2084 -> 2085;
    2085[label="CanFastRespawn"];
    2055 -> 2086;
    2086[label=")"];
    2055 -> 2087;
    2087 [label="Statement(Statement { syntax: 2087, statement: Some(2088), semicolon: Some(2101) })"];
    2087 -> 2088;
    2088 [label="Expr"];
    2088 -> 2091;
    2091 [label="FunctionCall(FunctionCall { syntax: 2091, lhs: Some(2089), lparen: Some(2092), args: [(2093, Some(2096)), (2097, None)], rparen: Some(2100) })"];
    2091 -> 2089;
    2089 [label="Identifier"];
    2089 -> 2090;
    2090[label="RespawnPlayer"];
    2091 -> 2092;
    2092[label="("];
    2091 -> 2093;
    2093 [label="Expr"];
    2093 -> 2094;
    2094 [label="Identifier"];
    2094 -> 2095;
    2095[label="_Player"];
    2091 -> 2096;
    2096[label=","];
    2091 -> 2097;
    2097 [label="Expr"];
    2097 -> 2098;
    2098 [label="Identifier"];
    2098 -> 2099;
    2099[label="Checkpoint"];
    2091 -> 2100;
    2100[label=")"];
    2087 -> 2101;
    2101[label=";"];
    2055 -> 2102;
    2102 [label="Else(Else { syntax: 2102, else_: Some(2103), if_: None, body: Some(2104) })"];
    2102 -> 2103;
    2103[label="else"];
    2102 -> 2104;
    2104 [label="Statement(Statement { syntax: 2104, statement: Some(2105), semicolon: Some(2141) })"];
    2104 -> 2105;
    2105 [label="Expr"];
    2105 -> 2113;
    2113 [label="FunctionCall(FunctionCall { syntax: 2113, lhs: Some(2108), lparen: Some(2114), args: [(2115, Some(2118)), (2119, Some(2122)), (2123, Some(2131)), (2132, None)], rparen: Some(2140) })"];
    2113 -> 2108;
    2108 [label="BinaryOp(BinaryOp { syntax: 2108, lhs: Some(2106), operator: Some(2109), rhs: Some(2110) })"];
    2108 -> 2106;
    2106 [label="Identifier"];
    2106 -> 2107;
    2107[label="SM"];
    2108 -> 2109;
    2109[label="::"];
    2108 -> 2110;
    2110 [label="Expr"];
    2110 -> 2111;
    2111 [label="Identifier"];
    2111 -> 2112;
    2112[label="SpawnNoLadder"];
    2113 -> 2114;
    2114[label="("];
    2113 -> 2115;
    2115 [label="Expr"];
    2115 -> 2116;
    2116 [label="Identifier"];
    2116 -> 2117;
    2117[label="_Player"];
    2113 -> 2118;
    2118[label=","];
    2113 -> 2119;
    2119 [label="Expr"];
    2119 -> 2120;
    2120 [label="Literal"];
    2120 -> 2121;
    2121[label="0"];
    2113 -> 2122;
    2122[label=","];
    2113 -> 2123;
    2123 [label="Expr"];
    2123 -> 2126;
    2126 [label="BinaryOp(BinaryOp { syntax: 2126, lhs: Some(2124), operator: Some(2127), rhs: Some(2128) })"];
    2126 -> 2124;
    2124 [label="Identifier"];
    2124 -> 2125;
    2125[label="Spawn"];
    2126 -> 2127;
    2127[label="."];
    2126 -> 2128;
    2128 [label="Expr"];
    2128 -> 2129;
    2129 [label="Identifier"];
    2129 -> 2130;
    2130[label="PlayerSpawn"];
    2113 -> 2131;
    2131[label=","];
    2113 -> 2132;
    2132 [label="Expr"];
    2132 -> 2135;
    2135 [label="BinaryOp(BinaryOp { syntax: 2135, lhs: Some(2133), operator: Some(2136), rhs: Some(2137) })"];
    2135 -> 2133;
    2133 [label="Identifier"];
    2133 -> 2134;
    2134[label="Now"];
    2135 -> 2136;
    2136[label="+"];
    2135 -> 2137;
    2137 [label="Expr"];
    2137 -> 2138;
    2138 [label="Identifier"];
    2138 -> 2139;
    2139[label="_Delay"];
    2113 -> 2140;
    2140[label=")"];
    2104 -> 2141;
    2141[label=";"];
    1910 -> 2142;
    2142 [label="Statement(Statement { syntax: 2142, statement: Some(2143), semicolon: Some(2171) })"];
    2142 -> 2143;
    2143 [label="Expr"];
    2143 -> 2151;
    2151 [label="FunctionCall(FunctionCall { syntax: 2151, lhs: Some(2146), lparen: Some(2152), args: [(2153, Some(2156)), (2157, None)], rparen: Some(2170) })"];
    2151 -> 2146;
    2146 [label="BinaryOp(BinaryOp { syntax: 2146, lhs: Some(2144), operator: Some(2147), rhs: Some(2148) })"];
    2146 -> 2144;
    2144 [label="Identifier"];
    2144 -> 2145;
    2145[label="XmlRpc"];
    2146 -> 2147;
    2147[label="."];
    2146 -> 2148;
    2148 [label="Expr"];
    2148 -> 2149;
    2149 [label="Identifier"];
    2149 -> 2150;
    2150[label="SendCallback"];
    2151 -> 2152;
    2152[label="("];
    2151 -> 2153;
    2153 [label="Expr"];
    2153 -> 2154;
    2154 [label="Literal"];
    2154 -> 2155;
    2155[label="\"OnRespawn\""];
    2151 -> 2156;
    2156[label=","];
    2151 -> 2157;
    2157 [label="Expr"];
    2157 -> 2160;
    2160 [label="BinaryOp(BinaryOp { syntax: 2160, lhs: Some(2158), operator: Some(2161), rhs: Some(2162) })"];
    2160 -> 2158;
    2158 [label="Identifier"];
    2158 -> 2159;
    2159[label="_Player"];
    2160 -> 2161;
    2161[label="."];
    2160 -> 2162;
    2162 [label="Expr"];
    2162 -> 2165;
    2165 [label="BinaryOp(BinaryOp { syntax: 2165, lhs: Some(2163), operator: Some(2166), rhs: Some(2167) })"];
    2165 -> 2163;
    2163 [label="Identifier"];
    2163 -> 2164;
    2164[label="User"];
    2165 -> 2166;
    2166[label="."];
    2165 -> 2167;
    2167 [label="Expr"];
    2167 -> 2168;
    2168 [label="Identifier"];
    2168 -> 2169;
    2169[label="Login"];
    2151 -> 2170;
    2170[label=")"];
    2142 -> 2171;
    2171[label=";"];
    1910 -> 2172;
    2172[label="}"];
    0 -> 2173;
    2173 [label="FuncDec(FuncDec { syntax: 2173, type_: Some(2174), name: Some(2176), lparen: Some(2177), args: [2178, 2183, 2188, 2193], rparen: Some(2197), body: Some(2198) })"];
    2173 -> 2174;
    2174 [label="Type(Type { syntax: 2174, basename: Some(2175), members: [], arrays: [] })"];
    2174 -> 2175;
    2175[label="Void"];
    2173 -> 2176;
    2176[label="Private_CpRestart"];
    2173 -> 2177;
    2177[label="("];
    2173 -> 2178;
    2178 [label="FormalArg(FormalArg { syntax: 2178, type_: Some(2179), name: Some(2181), comma: Some(2182) })"];
    2178 -> 2179;
    2179 [label="Type(Type { syntax: 2179, basename: Some(2180), members: [], arrays: [] })"];
    2179 -> 2180;
    2180[label="CSmPlayer"];
    2178 -> 2181;
    2181[label="_Player"];
    2178 -> 2182;
    2182[label=","];
    2173 -> 2183;
    2183 [label="FormalArg(FormalArg { syntax: 2183, type_: Some(2184), name: Some(2186), comma: Some(2187) })"];
    2183 -> 2184;
    2184 [label="Type(Type { syntax: 2184, basename: Some(2185), members: [], arrays: [] })"];
    2184 -> 2185;
    2185[label="Integer"];
    2183 -> 2186;
    2186[label="_Delay"];
    2183 -> 2187;
    2187[label=","];
    2173 -> 2188;
    2188 [label="FormalArg(FormalArg { syntax: 2188, type_: Some(2189), name: Some(2191), comma: Some(2192) })"];
    2188 -> 2189;
    2189 [label="Type(Type { syntax: 2189, basename: Some(2190), members: [], arrays: [] })"];
    2189 -> 2190;
    2190[label="Ident"];
    2188 -> 2191;
    2191[label="_LastCheckpointId"];
    2188 -> 2192;
    2192[label=","];
    2173 -> 2193;
    2193 [label="FormalArg(FormalArg { syntax: 2193, type_: Some(2194), name: Some(2196), comma: None })"];
    2193 -> 2194;
    2194 [label="Type(Type { syntax: 2194, basename: Some(2195), members: [], arrays: [] })"];
    2194 -> 2195;
    2195[label="Ident"];
    2193 -> 2196;
    2196[label="_CPSpawnId"];
    2173 -> 2197;
    2197[label=")"];
    2173 -> 2198;
    2198 [label="Block(Block { syntax: 2198, lbrace: Some(2199), statements: [2200], rbrace: Some(2227) })"];
    2198 -> 2199;
    2199[label="{"];
    2198 -> 2200;
    2200 [label="Statement(Statement { syntax: 2200, statement: Some(2201), semicolon: Some(2226) })"];
    2200 -> 2201;
    2201 [label="Expr"];
    2201 -> 2204;
    2204 [label="FunctionCall(FunctionCall { syntax: 2204, lhs: Some(2202), lparen: Some(2205), args: [(2206, Some(2209)), (2210, Some(2213)), (2214, Some(2217)), (2218, Some(2221)), (2222, None)], rparen: Some(2225) })"];
    2204 -> 2202;
    2202 [label="Identifier"];
    2202 -> 2203;
    2203[label="Private_CpRestart"];
    2204 -> 2205;
    2205[label="("];
    2204 -> 2206;
    2206 [label="Expr"];
    2206 -> 2207;
    2207 [label="Identifier"];
    2207 -> 2208;
    2208[label="_Player"];
    2204 -> 2209;
    2209[label=","];
    2204 -> 2210;
    2210 [label="Expr"];
    2210 -> 2211;
    2211 [label="Identifier"];
    2211 -> 2212;
    2212[label="_Delay"];
    2204 -> 2213;
    2213[label=","];
    2204 -> 2214;
    2214 [label="Expr"];
    2214 -> 2215;
    2215 [label="Identifier"];
    2215 -> 2216;
    2216[label="_LastCheckpointId"];
    2204 -> 2217;
    2217[label=","];
    2204 -> 2218;
    2218 [label="Expr"];
    2218 -> 2219;
    2219 [label="Identifier"];
    2219 -> 2220;
    2220[label="_CPSpawnId"];
    2204 -> 2221;
    2221[label=","];
    2204 -> 2222;
    2222 [label="Expr"];
    2222 -> 2223;
    2223 [label="Literal"];
    2223 -> 2224;
    2224[label="True"];
    2204 -> 2225;
    2225[label=")"];
    2200 -> 2226;
    2226[label=";"];
    2198 -> 2227;
    2227[label="}"];
    0 -> 2228;
    2228 [label="FuncDec(FuncDec { syntax: 2228, type_: Some(2229), name: Some(2231), lparen: Some(2232), args: [2233, 2238], rparen: Some(2242), body: Some(2243) })"];
    2228 -> 2229;
    2229 [label="Type(Type { syntax: 2229, basename: Some(2230), members: [], arrays: [] })"];
    2229 -> 2230;
    2230[label="Void"];
    2228 -> 2231;
    2231[label="Private_FullRestart"];
    2228 -> 2232;
    2232[label="("];
    2228 -> 2233;
    2233 [label="FormalArg(FormalArg { syntax: 2233, type_: Some(2234), name: Some(2236), comma: Some(2237) })"];
    2233 -> 2234;
    2234 [label="Type(Type { syntax: 2234, basename: Some(2235), members: [], arrays: [] })"];
    2234 -> 2235;
    2235[label="CSmPlayer"];
    2233 -> 2236;
    2236[label="_Player"];
    2233 -> 2237;
    2237[label=","];
    2228 -> 2238;
    2238 [label="FormalArg(FormalArg { syntax: 2238, type_: Some(2239), name: Some(2241), comma: None })"];
    2238 -> 2239;
    2239 [label="Type(Type { syntax: 2239, basename: Some(2240), members: [], arrays: [] })"];
    2239 -> 2240;
    2240[label="Integer"];
    2238 -> 2241;
    2241[label="_Delay"];
    2228 -> 2242;
    2242[label=")"];
    2228 -> 2243;
    2243 [label="Block(Block { syntax: 2243, lbrace: Some(2244), statements: [2245, 2261, 2299, 2319, 2344, 2364, 2384, 2404, 2424, 2440], rbrace: Some(2470) })"];
    2243 -> 2244;
    2244[label="{"];
    2243 -> 2245;
    2245 [label="Statement(Statement { syntax: 2245, statement: Some(2246), semicolon: None })"];
    2245 -> 2246;
    2246 [label="VarDec(VarDec { syntax: 2246, declare: Some(2247), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2248), as_: None, alias: None, for_: None, target: None, assignment: Some(2250), value: Some(2251) })"];
    2246 -> 2247;
    2247[label="declare"];
    2246 -> 2248;
    2248 [label="Type(Type { syntax: 2248, basename: Some(2249), members: [], arrays: [] })"];
    2248 -> 2249;
    2249[label="Spawn"];
    2246 -> 2250;
    2250[label="<=>"];
    2246 -> 2251;
    2251 [label="Expr"];
    2251 -> 2254;
    2254 [label="ArrayAccess(ArrayAccess { syntax: 2254, lhs: Some(2252), lsquare: Some(2255), index: Some(2256), rsquare: Some(2259) })"];
    2254 -> 2252;
    2252 [label="Identifier"];
    2252 -> 2253;
    2253[label="MapLandmarks_PlayerSpawn"];
    2254 -> 2255;
    2255[label="["];
    2254 -> 2256;
    2256 [label="Expr"];
    2256 -> 2257;
    2257 [label="Identifier"];
    2257 -> 2258;
    2258[label="G_StartSpawnId"];
    2254 -> 2259;
    2259[label="]"];
    2246 -> 2260;
    2260[label=";"];
    2243 -> 2261;
    2261 [label="Statement(Statement { syntax: 2261, statement: Some(2262), semicolon: Some(2298) })"];
    2261 -> 2262;
    2262 [label="Expr"];
    2262 -> 2270;
    2270 [label="FunctionCall(FunctionCall { syntax: 2270, lhs: Some(2265), lparen: Some(2271), args: [(2272, Some(2275)), (2276, Some(2279)), (2280, Some(2288)), (2289, None)], rparen: Some(2297) })"];
    2270 -> 2265;
    2265 [label="BinaryOp(BinaryOp { syntax: 2265, lhs: Some(2263), operator: Some(2266), rhs: Some(2267) })"];
    2265 -> 2263;
    2263 [label="Identifier"];
    2263 -> 2264;
    2264[label="SM"];
    2265 -> 2266;
    2266[label="::"];
    2265 -> 2267;
    2267 [label="Expr"];
    2267 -> 2268;
    2268 [label="Identifier"];
    2268 -> 2269;
    2269[label="SpawnNoLadder"];
    2270 -> 2271;
    2271[label="("];
    2270 -> 2272;
    2272 [label="Expr"];
    2272 -> 2273;
    2273 [label="Identifier"];
    2273 -> 2274;
    2274[label="_Player"];
    2270 -> 2275;
    2275[label=","];
    2270 -> 2276;
    2276 [label="Expr"];
    2276 -> 2277;
    2277 [label="Literal"];
    2277 -> 2278;
    2278[label="0"];
    2270 -> 2279;
    2279[label=","];
    2270 -> 2280;
    2280 [label="Expr"];
    2280 -> 2283;
    2283 [label="BinaryOp(BinaryOp { syntax: 2283, lhs: Some(2281), operator: Some(2284), rhs: Some(2285) })"];
    2283 -> 2281;
    2281 [label="Identifier"];
    2281 -> 2282;
    2282[label="Spawn"];
    2283 -> 2284;
    2284[label="."];
    2283 -> 2285;
    2285 [label="Expr"];
    2285 -> 2286;
    2286 [label="Identifier"];
    2286 -> 2287;
    2287[label="PlayerSpawn"];
    2270 -> 2288;
    2288[label=","];
    2270 -> 2289;
    2289 [label="Expr"];
    2289 -> 2292;
    2292 [label="BinaryOp(BinaryOp { syntax: 2292, lhs: Some(2290), operator: Some(2293), rhs: Some(2294) })"];
    2292 -> 2290;
    2290 [label="Identifier"];
    2290 -> 2291;
    2291[label="Now"];
    2292 -> 2293;
    2293[label="+"];
    2292 -> 2294;
    2294 [label="Expr"];
    2294 -> 2295;
    2295 [label="Identifier"];
    2295 -> 2296;
    2296[label="_Delay"];
    2270 -> 2297;
    2297[label=")"];
    2261 -> 2298;
    2298[label=";"];
    2243 -> 2299;
    2299 [label="Statement(Statement { syntax: 2299, statement: Some(2300), semicolon: Some(2318) })"];
    2299 -> 2300;
    2300 [label="Expr"];
    2300 -> 2303;
    2303 [label="FunctionCall(FunctionCall { syntax: 2303, lhs: Some(2301), lparen: Some(2304), args: [(2305, Some(2308)), (2309, None)], rparen: Some(2317) })"];
    2303 -> 2301;
    2301 [label="Identifier"];
    2301 -> 2302;
    2302[label="Private_RestartEffect"];
    2303 -> 2304;
    2304[label="("];
    2303 -> 2305;
    2305 [label="Expr"];
    2305 -> 2306;
    2306 [label="Identifier"];
    2306 -> 2307;
    2307[label="_Player"];
    2303 -> 2308;
    2308[label=","];
    2303 -> 2309;
    2309 [label="Expr"];
    2309 -> 2312;
    2312 [label="BinaryOp(BinaryOp { syntax: 2312, lhs: Some(2310), operator: Some(2313), rhs: Some(2314) })"];
    2312 -> 2310;
    2310 [label="Identifier"];
    2310 -> 2311;
    2311[label="Spawn"];
    2312 -> 2313;
    2313[label="."];
    2312 -> 2314;
    2314 [label="Expr"];
    2314 -> 2315;
    2315 [label="Identifier"];
    2315 -> 2316;
    2316[label="Id"];
    2303 -> 2317;
    2317[label=")"];
    2299 -> 2318;
    2318[label=";"];
    2243 -> 2319;
    2319 [label="Statement(Statement { syntax: 2319, statement: Some(2320), semicolon: Some(2343) })"];
    2319 -> 2320;
    2320 [label="Expr"];
    2320 -> 2328;
    2328 [label="FunctionCall(FunctionCall { syntax: 2328, lhs: Some(2323), lparen: Some(2329), args: [(2330, Some(2333)), (2334, None)], rparen: Some(2342) })"];
    2328 -> 2323;
    2323 [label="BinaryOp(BinaryOp { syntax: 2323, lhs: Some(2321), operator: Some(2324), rhs: Some(2325) })"];
    2323 -> 2321;
    2321 [label="Identifier"];
    2321 -> 2322;
    2322[label="Player"];
    2323 -> 2324;
    2324[label="::"];
    2323 -> 2325;
    2325 [label="Expr"];
    2325 -> 2326;
    2326 [label="Identifier"];
    2326 -> 2327;
    2327[label="setStartTime"];
    2328 -> 2329;
    2329[label="("];
    2328 -> 2330;
    2330 [label="Expr"];
    2330 -> 2331;
    2331 [label="Identifier"];
    2331 -> 2332;
    2332[label="_Player"];
    2328 -> 2333;
    2333[label=","];
    2328 -> 2334;
    2334 [label="Expr"];
    2334 -> 2337;
    2337 [label="BinaryOp(BinaryOp { syntax: 2337, lhs: Some(2335), operator: Some(2338), rhs: Some(2339) })"];
    2337 -> 2335;
    2335 [label="Identifier"];
    2335 -> 2336;
    2336[label="_Player"];
    2337 -> 2338;
    2338[label="."];
    2337 -> 2339;
    2339 [label="Expr"];
    2339 -> 2340;
    2340 [label="Identifier"];
    2340 -> 2341;
    2341[label="StartTime"];
    2328 -> 2342;
    2342[label=")"];
    2319 -> 2343;
    2343[label=";"];
    2243 -> 2344;
    2344 [label="Statement(Statement { syntax: 2344, statement: Some(2345), semicolon: Some(2363) })"];
    2344 -> 2345;
    2345 [label="Expr"];
    2345 -> 2353;
    2353 [label="FunctionCall(FunctionCall { syntax: 2353, lhs: Some(2348), lparen: Some(2354), args: [(2355, Some(2358)), (2359, None)], rparen: Some(2362) })"];
    2353 -> 2348;
    2348 [label="BinaryOp(BinaryOp { syntax: 2348, lhs: Some(2346), operator: Some(2349), rhs: Some(2350) })"];
    2348 -> 2346;
    2346 [label="Identifier"];
    2346 -> 2347;
    2347[label="Player"];
    2348 -> 2349;
    2349[label="::"];
    2348 -> 2350;
    2350 [label="Expr"];
    2350 -> 2351;
    2351 [label="Identifier"];
    2351 -> 2352;
    2352[label="setCpProgress"];
    2353 -> 2354;
    2354[label="("];
    2353 -> 2355;
    2355 [label="Expr"];
    2355 -> 2356;
    2356 [label="Identifier"];
    2356 -> 2357;
    2357[label="_Player"];
    2353 -> 2358;
    2358[label=","];
    2353 -> 2359;
    2359 [label="Expr"];
    2359 -> 2360;
    2360 [label="Literal"];
    2360 -> 2361;
    2361[label="0"];
    2353 -> 2362;
    2362[label=")"];
    2344 -> 2363;
    2363[label=";"];
    2243 -> 2364;
    2364 [label="Statement(Statement { syntax: 2364, statement: Some(2365), semicolon: Some(2383) })"];
    2364 -> 2365;
    2365 [label="Expr"];
    2365 -> 2373;
    2373 [label="FunctionCall(FunctionCall { syntax: 2373, lhs: Some(2368), lparen: Some(2374), args: [(2375, Some(2378)), (2379, None)], rparen: Some(2382) })"];
    2373 -> 2368;
    2368 [label="BinaryOp(BinaryOp { syntax: 2368, lhs: Some(2366), operator: Some(2369), rhs: Some(2370) })"];
    2368 -> 2366;
    2366 [label="Identifier"];
    2366 -> 2367;
    2367[label="Player"];
    2368 -> 2369;
    2369[label="::"];
    2368 -> 2370;
    2370 [label="Expr"];
    2370 -> 2371;
    2371 [label="Identifier"];
    2371 -> 2372;
    2372[label="setUsedJump"];
    2373 -> 2374;
    2374[label="("];
    2373 -> 2375;
    2375 [label="Expr"];
    2375 -> 2376;
    2376 [label="Identifier"];
    2376 -> 2377;
    2377[label="_Player"];
    2373 -> 2378;
    2378[label=","];
    2373 -> 2379;
    2379 [label="Expr"];
    2379 -> 2380;
    2380 [label="Literal"];
    2380 -> 2381;
    2381[label="False"];
    2373 -> 2382;
    2382[label=")"];
    2364 -> 2383;
    2383[label=";"];
    2243 -> 2384;
    2384 [label="Statement(Statement { syntax: 2384, statement: Some(2385), semicolon: Some(2403) })"];
    2384 -> 2385;
    2385 [label="Expr"];
    2385 -> 2393;
    2393 [label="FunctionCall(FunctionCall { syntax: 2393, lhs: Some(2388), lparen: Some(2394), args: [(2395, Some(2398)), (2399, None)], rparen: Some(2402) })"];
    2393 -> 2388;
    2388 [label="BinaryOp(BinaryOp { syntax: 2388, lhs: Some(2386), operator: Some(2389), rhs: Some(2390) })"];
    2388 -> 2386;
    2386 [label="Identifier"];
    2386 -> 2387;
    2387[label="Player"];
    2388 -> 2389;
    2389[label="::"];
    2388 -> 2390;
    2390 [label="Expr"];
    2390 -> 2391;
    2391 [label="Identifier"];
    2391 -> 2392;
    2392[label="setRespawnCount"];
    2393 -> 2394;
    2394[label="("];
    2393 -> 2395;
    2395 [label="Expr"];
    2395 -> 2396;
    2396 [label="Identifier"];
    2396 -> 2397;
    2397[label="_Player"];
    2393 -> 2398;
    2398[label=","];
    2393 -> 2399;
    2399 [label="Expr"];
    2399 -> 2400;
    2400 [label="Literal"];
    2400 -> 2401;
    2401[label="0"];
    2393 -> 2402;
    2402[label=")"];
    2384 -> 2403;
    2403[label=";"];
    2243 -> 2404;
    2404 [label="Statement(Statement { syntax: 2404, statement: Some(2405), semicolon: Some(2423) })"];
    2404 -> 2405;
    2405 [label="Expr"];
    2405 -> 2413;
    2413 [label="FunctionCall(FunctionCall { syntax: 2413, lhs: Some(2408), lparen: Some(2414), args: [(2415, Some(2418)), (2419, None)], rparen: Some(2422) })"];
    2413 -> 2408;
    2408 [label="BinaryOp(BinaryOp { syntax: 2408, lhs: Some(2406), operator: Some(2409), rhs: Some(2410) })"];
    2408 -> 2406;
    2406 [label="Identifier"];
    2406 -> 2407;
    2407[label="Player"];
    2408 -> 2409;
    2409[label="::"];
    2408 -> 2410;
    2410 [label="Expr"];
    2410 -> 2411;
    2411 [label="Identifier"];
    2411 -> 2412;
    2412[label="setLastCheckpoint"];
    2413 -> 2414;
    2414[label="("];
    2413 -> 2415;
    2415 [label="Expr"];
    2415 -> 2416;
    2416 [label="Identifier"];
    2416 -> 2417;
    2417[label="_Player"];
    2413 -> 2418;
    2418[label=","];
    2413 -> 2419;
    2419 [label="Expr"];
    2419 -> 2420;
    2420 [label="Literal"];
    2420 -> 2421;
    2421[label="NullId"];
    2413 -> 2422;
    2422[label=")"];
    2404 -> 2423;
    2423[label=";"];
    2243 -> 2424;
    2424 [label="Statement(Statement { syntax: 2424, statement: Some(2425), semicolon: Some(2439) })"];
    2424 -> 2425;
    2425 [label="Expr"];
    2425 -> 2433;
    2433 [label="FunctionCall(FunctionCall { syntax: 2433, lhs: Some(2428), lparen: Some(2434), args: [(2435, None)], rparen: Some(2438) })"];
    2433 -> 2428;
    2428 [label="BinaryOp(BinaryOp { syntax: 2428, lhs: Some(2426), operator: Some(2429), rhs: Some(2430) })"];
    2428 -> 2426;
    2426 [label="Identifier"];
    2426 -> 2427;
    2427[label="Player"];
    2428 -> 2429;
    2429[label="::"];
    2428 -> 2430;
    2430 [label="Expr"];
    2430 -> 2431;
    2431 [label="Identifier"];
    2431 -> 2432;
    2432[label="clearLastCPTimes"];
    2433 -> 2434;
    2434[label="("];
    2433 -> 2435;
    2435 [label="Expr"];
    2435 -> 2436;
    2436 [label="Identifier"];
    2436 -> 2437;
    2437[label="_Player"];
    2433 -> 2438;
    2438[label=")"];
    2424 -> 2439;
    2439[label=";"];
    2243 -> 2440;
    2440 [label="Statement(Statement { syntax: 2440, statement: Some(2441), semicolon: Some(2469) })"];
    2440 -> 2441;
    2441 [label="Expr"];
    2441 -> 2449;
    2449 [label="FunctionCall(FunctionCall { syntax: 2449, lhs: Some(2444), lparen: Some(2450), args: [(2451, Some(2454)), (2455, None)], rparen: Some(2468) })"];
    2449 -> 2444;
    2444 [label="BinaryOp(BinaryOp { syntax: 2444, lhs: Some(2442), operator: Some(2445), rhs: Some(2446) })"];
    2444 -> 2442;
    2442 [label="Identifier"];
    2442 -> 2443;
    2443[label="XmlRpc"];
    2444 -> 2445;
    2445[label="."];
    2444 -> 2446;
    2446 [label="Expr"];
    2446 -> 2447;
    2447 [label="Identifier"];
    2447 -> 2448;
    2448[label="SendCallback"];
    2449 -> 2450;
    2450[label="("];
    2449 -> 2451;
    2451 [label="Expr"];
    2451 -> 2452;
    2452 [label="Literal"];
    2452 -> 2453;
    2453[label="\"OnRestart\""];
    2449 -> 2454;
    2454[label=","];
    2449 -> 2455;
    2455 [label="Expr"];
    2455 -> 2458;
    2458 [label="BinaryOp(BinaryOp { syntax: 2458, lhs: Some(2456), operator: Some(2459), rhs: Some(2460) })"];
    2458 -> 2456;
    2456 [label="Identifier"];
    2456 -> 2457;
    2457[label="_Player"];
    2458 -> 2459;
    2459[label="."];
    2458 -> 2460;
    2460 [label="Expr"];
    2460 -> 2463;
    2463 [label="BinaryOp(BinaryOp { syntax: 2463, lhs: Some(2461), operator: Some(2464), rhs: Some(2465) })"];
    2463 -> 2461;
    2461 [label="Identifier"];
    2461 -> 2462;
    2462[label="User"];
    2463 -> 2464;
    2464[label="."];
    2463 -> 2465;
    2465 [label="Expr"];
    2465 -> 2466;
    2466 [label="Identifier"];
    2466 -> 2467;
    2467[label="Login"];
    2449 -> 2468;
    2468[label=")"];
    2440 -> 2469;
    2469[label=";"];
    2243 -> 2470;
    2470[label="}"];
    0 -> 2471;
    2471 [label="FuncDec(FuncDec { syntax: 2471, type_: Some(2472), name: Some(2474), lparen: Some(2475), args: [2476, 2481], rparen: Some(2485), body: Some(2486) })"];
    2471 -> 2472;
    2472 [label="Type(Type { syntax: 2472, basename: Some(2473), members: [], arrays: [] })"];
    2472 -> 2473;
    2473[label="Void"];
    2471 -> 2474;
    2474[label="RespawnPlayer"];
    2471 -> 2475;
    2475[label="("];
    2471 -> 2476;
    2476 [label="FormalArg(FormalArg { syntax: 2476, type_: Some(2477), name: Some(2479), comma: Some(2480) })"];
    2476 -> 2477;
    2477 [label="Type(Type { syntax: 2477, basename: Some(2478), members: [], arrays: [] })"];
    2477 -> 2478;
    2478[label="CSmPlayer"];
    2476 -> 2479;
    2479[label="_Player"];
    2476 -> 2480;
    2480[label=","];
    2471 -> 2481;
    2481 [label="FormalArg(FormalArg { syntax: 2481, type_: Some(2482), name: Some(2484), comma: None })"];
    2481 -> 2482;
    2482 [label="Type(Type { syntax: 2482, basename: Some(2483), members: [], arrays: [] })"];
    2482 -> 2483;
    2483[label="Boolean"];
    2481 -> 2484;
    2484[label="_forceRestart"];
    2471 -> 2485;
    2485[label=")"];
    2471 -> 2486;
    2486 [label="Block(Block { syntax: 2486, lbrace: Some(2487), statements: [2488, 2505, 2538, 2563, 2584, 2597, 2607, 2641, 2674, 2735, 2746, 2785, 2801], rbrace: Some(2829) })"];
    2486 -> 2487;
    2487[label="{"];
    2486 -> 2488;
    2488 [label="Statement(Statement { syntax: 2488, statement: Some(2489), semicolon: None })"];
    2488 -> 2489;
    2489 [label="If(If { syntax: 2489, if_: Some(2490), lparen: Some(2491), condition: Some(2492), rparen: Some(2500), body: Some(2501), else_: None })"];
    2489 -> 2490;
    2490[label="if"];
    2489 -> 2491;
    2491[label="("];
    2489 -> 2492;
    2492 [label="Expr"];
    2492 -> 2495;
    2495 [label="BinaryOp(BinaryOp { syntax: 2495, lhs: Some(2493), operator: Some(2496), rhs: Some(2497) })"];
    2495 -> 2493;
    2493 [label="Identifier"];
    2493 -> 2494;
    2494[label="_Player"];
    2495 -> 2496;
    2496[label="."];
    2495 -> 2497;
    2497 [label="Expr"];
    2497 -> 2498;
    2498 [label="Identifier"];
    2498 -> 2499;
    2499[label="RequestsSpectate"];
    2489 -> 2500;
    2500[label=")"];
    2489 -> 2501;
    2501 [label="Statement(Statement { syntax: 2501, statement: Some(2502), semicolon: Some(2504) })"];
    2501 -> 2502;
    2502 [label="Return(Return { syntax: 2502, return_: Some(2503), value: None })"];
    2502 -> 2503;
    2503[label="return"];
    2501 -> 2504;
    2504[label=";"];
    2486 -> 2505;
    2505 [label="Statement(Statement { syntax: 2505, statement: Some(2506), semicolon: None })"];
    2505 -> 2506;
    2506 [label="If(If { syntax: 2506, if_: Some(2507), lparen: Some(2508), condition: Some(2509), rparen: Some(2526), body: Some(2527), else_: None })"];
    2506 -> 2507;
    2507[label="if"];
    2506 -> 2508;
    2508[label="("];
    2506 -> 2509;
    2509 [label="Expr"];
    2509 -> 2520;
    2520 [label="FunctionCall(FunctionCall { syntax: 2520, lhs: Some(2510), lparen: Some(2521), args: [(2522, None)], rparen: Some(2525) })"];
    2520 -> 2510;
    2510 [label="UnOp(UnOp { syntax: 2510, operator: Some(2511), operand: Some(2512) })"];
    2510 -> 2511;
    2511[label="!"];
    2510 -> 2512;
    2512 [label="Expr"];
    2512 -> 2515;
    2515 [label="BinaryOp(BinaryOp { syntax: 2515, lhs: Some(2513), operator: Some(2516), rhs: Some(2517) })"];
    2515 -> 2513;
    2513 [label="Identifier"];
    2513 -> 2514;
    2514[label="Player"];
    2515 -> 2516;
    2516[label="::"];
    2515 -> 2517;
    2517 [label="Expr"];
    2517 -> 2518;
    2518 [label="Identifier"];
    2518 -> 2519;
    2519[label="isInitialized"];
    2520 -> 2521;
    2521[label="("];
    2520 -> 2522;
    2522 [label="Expr"];
    2522 -> 2523;
    2523 [label="Identifier"];
    2523 -> 2524;
    2524[label="_Player"];
    2520 -> 2525;
    2525[label=")"];
    2506 -> 2526;
    2526[label=")"];
    2506 -> 2527;
    2527 [label="Statement(Statement { syntax: 2527, statement: Some(2528), semicolon: Some(2537) })"];
    2527 -> 2528;
    2528 [label="Expr"];
    2528 -> 2531;
    2531 [label="FunctionCall(FunctionCall { syntax: 2531, lhs: Some(2529), lparen: Some(2532), args: [(2533, None)], rparen: Some(2536) })"];
    2531 -> 2529;
    2529 [label="Identifier"];
    2529 -> 2530;
    2530[label="NewPlayer"];
    2531 -> 2532;
    2532[label="("];
    2531 -> 2533;
    2533 [label="Expr"];
    2533 -> 2534;
    2534 [label="Identifier"];
    2534 -> 2535;
    2535[label="_Player"];
    2531 -> 2536;
    2536[label=")"];
    2527 -> 2537;
    2537[label=";"];
    2486 -> 2538;
    2538 [label="Statement(Statement { syntax: 2538, statement: Some(2539), semicolon: None })"];
    2538 -> 2539;
    2539 [label="VarDec(VarDec { syntax: 2539, declare: Some(2540), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2541), as_: None, alias: None, for_: None, target: None, assignment: Some(2543), value: Some(2544) })"];
    2539 -> 2540;
    2540[label="declare"];
    2539 -> 2541;
    2541 [label="Type(Type { syntax: 2541, basename: Some(2542), members: [], arrays: [] })"];
    2541 -> 2542;
    2542[label="shouldRestart"];
    2539 -> 2543;
    2543[label="="];
    2539 -> 2544;
    2544 [label="Expr"];
    2544 -> 2552;
    2552 [label="FunctionCall(FunctionCall { syntax: 2552, lhs: Some(2547), lparen: Some(2553), args: [(2554, Some(2557)), (2558, None)], rparen: Some(2561) })"];
    2552 -> 2547;
    2547 [label="BinaryOp(BinaryOp { syntax: 2547, lhs: Some(2545), operator: Some(2548), rhs: Some(2549) })"];
    2547 -> 2545;
    2545 [label="Identifier"];
    2545 -> 2546;
    2546[label="Player"];
    2547 -> 2548;
    2548[label="::"];
    2547 -> 2549;
    2549 [label="Expr"];
    2549 -> 2550;
    2550 [label="Identifier"];
    2550 -> 2551;
    2551[label="wantsRestart"];
    2552 -> 2553;
    2553[label="("];
    2552 -> 2554;
    2554 [label="Expr"];
    2554 -> 2555;
    2555 [label="Identifier"];
    2555 -> 2556;
    2556[label="_Player"];
    2552 -> 2557;
    2557[label=","];
    2552 -> 2558;
    2558 [label="Expr"];
    2558 -> 2559;
    2559 [label="Identifier"];
    2559 -> 2560;
    2560[label="_forceRestart"];
    2552 -> 2561;
    2561[label=")"];
    2539 -> 2562;
    2562[label=";"];
    2486 -> 2563;
    2563 [label="Statement(Statement { syntax: 2563, statement: Some(2564), semicolon: None })"];
    2563 -> 2564;
    2564 [label="VarDec(VarDec { syntax: 2564, declare: Some(2565), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2566), as_: None, alias: None, for_: None, target: None, assignment: Some(2568), value: Some(2569) })"];
    2564 -> 2565;
    2565[label="declare"];
    2564 -> 2566;
    2566 [label="Type(Type { syntax: 2566, basename: Some(2567), members: [], arrays: [] })"];
    2566 -> 2567;
    2567[label="LastCP"];
    2564 -> 2568;
    2568[label="="];
    2564 -> 2569;
    2569 [label="Expr"];
    2569 -> 2577;
    2577 [label="FunctionCall(FunctionCall { syntax: 2577, lhs: Some(2572), lparen: Some(2578), args: [(2579, None)], rparen: Some(2582) })"];
    2577 -> 2572;
    2572 [label="BinaryOp(BinaryOp { syntax: 2572, lhs: Some(2570), operator: Some(2573), rhs: Some(2574) })"];
    2572 -> 2570;
    2570 [label="Identifier"];
    2570 -> 2571;
    2571[label="Player"];
    2572 -> 2573;
    2573[label="::"];
    2572 -> 2574;
    2574 [label="Expr"];
    2574 -> 2575;
    2575 [label="Identifier"];
    2575 -> 2576;
    2576[label="getLastCheckpoint"];
    2577 -> 2578;
    2578[label="("];
    2577 -> 2579;
    2579 [label="Expr"];
    2579 -> 2580;
    2580 [label="Identifier"];
    2580 -> 2581;
    2581[label="_Player"];
    2577 -> 2582;
    2582[label=")"];
    2564 -> 2583;
    2583[label=";"];
    2486 -> 2584;
    2584 [label="Statement(Statement { syntax: 2584, statement: Some(2585), semicolon: None })"];
    2584 -> 2585;
    2585 [label="VarDec(VarDec { syntax: 2585, declare: Some(2586), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2587), as_: None, alias: None, for_: None, target: None, assignment: Some(2589), value: Some(2590) })"];
    2585 -> 2586;
    2586[label="declare"];
    2585 -> 2587;
    2587 [label="Type(Type { syntax: 2587, basename: Some(2588), members: [], arrays: [] })"];
    2587 -> 2588;
    2588[label="Delay"];
    2585 -> 2589;
    2589[label="="];
    2585 -> 2590;
    2590 [label="Expr"];
    2590 -> 2591;
    2591 [label="UnOp(UnOp { syntax: 2591, operator: Some(2592), operand: Some(2593) })"];
    2591 -> 2592;
    2592[label="-"];
    2591 -> 2593;
    2593 [label="Expr"];
    2593 -> 2594;
    2594 [label="Literal"];
    2594 -> 2595;
    2595[label="1"];
    2585 -> 2596;
    2596[label=";"];
    2486 -> 2597;
    2597 [label="Statement(Statement { syntax: 2597, statement: Some(2598), semicolon: None })"];
    2597 -> 2598;
    2598 [label="VarDec(VarDec { syntax: 2598, declare: Some(2599), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2600), as_: None, alias: None, for_: None, target: None, assignment: Some(2602), value: Some(2603) })"];
    2598 -> 2599;
    2599[label="declare"];
    2598 -> 2600;
    2600 [label="Type(Type { syntax: 2600, basename: Some(2601), members: [], arrays: [] })"];
    2600 -> 2601;
    2601[label="CPSpawnId"];
    2598 -> 2602;
    2602[label="="];
    2598 -> 2603;
    2603 [label="Expr"];
    2603 -> 2604;
    2604 [label="Literal"];
    2604 -> 2605;
    2605[label="NullId"];
    2598 -> 2606;
    2606[label=";"];
    2486 -> 2607;
    2607 [label="Statement(Statement { syntax: 2607, statement: Some(2608), semicolon: None })"];
    2607 -> 2608;
    2608 [label="If(If { syntax: 2608, if_: Some(2609), lparen: Some(2610), condition: Some(2611), rparen: Some(2619), body: Some(2620), else_: None })"];
    2608 -> 2609;
    2609[label="if"];
    2608 -> 2610;
    2610[label="("];
    2608 -> 2611;
    2611 [label="Expr"];
    2611 -> 2614;
    2614 [label="BinaryOp(BinaryOp { syntax: 2614, lhs: Some(2612), operator: Some(2615), rhs: Some(2616) })"];
    2614 -> 2612;
    2612 [label="Identifier"];
    2612 -> 2613;
    2613[label="LastCP"];
    2614 -> 2615;
    2615[label="!="];
    2614 -> 2616;
    2616 [label="Expr"];
    2616 -> 2617;
    2617 [label="Literal"];
    2617 -> 2618;
    2618[label="NullId"];
    2608 -> 2619;
    2619[label=")"];
    2608 -> 2620;
    2620 [label="Statement(Statement { syntax: 2620, statement: Some(2624), semicolon: Some(2640) })"];
    2620 -> 2621;
    2621 [label="Expr"];
    2621 -> 2622;
    2622 [label="Identifier"];
    2622 -> 2623;
    2623[label="CPSpawnId"];
    2620 -> 2624;
    2624 [label="Assignment(Assignment { syntax: 2624, lvalue: Some(2621), operator: Some(2625), rvalue: Some(2626) })"];
    2624 -> 2625;
    2625[label="="];
    2624 -> 2626;
    2626 [label="Expr"];
    2626 -> 2634;
    2634 [label="FunctionCall(FunctionCall { syntax: 2634, lhs: Some(2629), lparen: Some(2635), args: [(2636, None)], rparen: Some(2639) })"];
    2634 -> 2629;
    2629 [label="BinaryOp(BinaryOp { syntax: 2629, lhs: Some(2627), operator: Some(2630), rhs: Some(2631) })"];
    2629 -> 2627;
    2627 [label="Identifier"];
    2627 -> 2628;
    2628[label="Tools"];
    2629 -> 2630;
    2630[label="::"];
    2629 -> 2631;
    2631 [label="Expr"];
    2631 -> 2632;
    2632 [label="Identifier"];
    2632 -> 2633;
    2633[label="GetClosestSpawn"];
    2634 -> 2635;
    2635[label="("];
    2634 -> 2636;
    2636 [label="Expr"];
    2636 -> 2637;
    2637 [label="Identifier"];
    2637 -> 2638;
    2638[label="LastCP"];
    2634 -> 2639;
    2639[label=")"];
    2620 -> 2640;
    2640[label=";"];
    2486 -> 2641;
    2641 [label="Statement(Statement { syntax: 2641, statement: Some(2642), semicolon: None })"];
    2641 -> 2642;
    2642 [label="If(If { syntax: 2642, if_: Some(2643), lparen: Some(2644), condition: Some(2645), rparen: Some(2658), body: Some(2659), else_: None })"];
    2642 -> 2643;
    2643[label="if"];
    2642 -> 2644;
    2644[label="("];
    2642 -> 2645;
    2645 [label="Expr"];
    2645 -> 2648;
    2648 [label="BinaryOp(BinaryOp { syntax: 2648, lhs: Some(2646), operator: Some(2649), rhs: Some(2650) })"];
    2648 -> 2646;
    2646 [label="Identifier"];
    2646 -> 2647;
    2647[label="StartTime"];
    2648 -> 2649;
    2649[label=">"];
    2648 -> 2650;
    2650 [label="Expr"];
    2650 -> 2653;
    2653 [label="BinaryOp(BinaryOp { syntax: 2653, lhs: Some(2651), operator: Some(2654), rhs: Some(2655) })"];
    2653 -> 2651;
    2651 [label="Identifier"];
    2651 -> 2652;
    2652[label="Now"];
    2653 -> 2654;
    2654[label="+"];
    2653 -> 2655;
    2655 [label="Expr"];
    2655 -> 2656;
    2656 [label="Identifier"];
    2656 -> 2657;
    2657[label="Delay"];
    2642 -> 2658;
    2658[label=")"];
    2642 -> 2659;
    2659 [label="Statement(Statement { syntax: 2659, statement: Some(2663), semicolon: Some(2673) })"];
    2659 -> 2660;
    2660 [label="Expr"];
    2660 -> 2661;
    2661 [label="Identifier"];
    2661 -> 2662;
    2662[label="Delay"];
    2659 -> 2663;
    2663 [label="Assignment(Assignment { syntax: 2663, lvalue: Some(2660), operator: Some(2664), rvalue: Some(2665) })"];
    2663 -> 2664;
    2664[label="="];
    2663 -> 2665;
    2665 [label="Expr"];
    2665 -> 2668;
    2668 [label="BinaryOp(BinaryOp { syntax: 2668, lhs: Some(2666), operator: Some(2669), rhs: Some(2670) })"];
    2668 -> 2666;
    2666 [label="Identifier"];
    2666 -> 2667;
    2667[label="StartTime"];
    2668 -> 2669;
    2669[label="-"];
    2668 -> 2670;
    2670 [label="Expr"];
    2670 -> 2671;
    2671 [label="Identifier"];
    2671 -> 2672;
    2672[label="Now"];
    2659 -> 2673;
    2673[label=";"];
    2486 -> 2674;
    2674 [label="Statement(Statement { syntax: 2674, statement: Some(2675), semicolon: None })"];
    2674 -> 2675;
    2675 [label="If(If { syntax: 2675, if_: Some(2676), lparen: Some(2677), condition: Some(2678), rparen: Some(2694), body: Some(2695), else_: Some(2718) })"];
    2675 -> 2676;
    2676[label="if"];
    2675 -> 2677;
    2677[label="("];
    2675 -> 2678;
    2678 [label="Expr"];
    2678 -> 2686;
    2686 [label="BinaryOp(BinaryOp { syntax: 2686, lhs: Some(2681), operator: Some(2687), rhs: Some(2688) })"];
    2686 -> 2681;
    2681 [label="BinaryOp(BinaryOp { syntax: 2681, lhs: Some(2679), operator: Some(2682), rhs: Some(2683) })"];
    2681 -> 2679;
    2679 [label="Identifier"];
    2679 -> 2680;
    2680[label="CPSpawnId"];
    2681 -> 2682;
    2682[label="!="];
    2681 -> 2683;
    2683 [label="Expr"];
    2683 -> 2684;
    2684 [label="Literal"];
    2684 -> 2685;
    2685[label="NullId"];
    2686 -> 2687;
    2687[label="&&"];
    2686 -> 2688;
    2688 [label="Expr"];
    2688 -> 2689;
    2689 [label="UnOp(UnOp { syntax: 2689, operator: Some(2690), operand: Some(2691) })"];
    2689 -> 2690;
    2690[label="!"];
    2689 -> 2691;
    2691 [label="Expr"];
    2691 -> 2692;
    2692 [label="Identifier"];
    2692 -> 2693;
    2693[label="shouldRestart"];
    2675 -> 2694;
    2694[label=")"];
    2675 -> 2695;
    2695 [label="Statement(Statement { syntax: 2695, statement: Some(2696), semicolon: Some(2717) })"];
    2695 -> 2696;
    2696 [label="Expr"];
    2696 -> 2699;
    2699 [label="FunctionCall(FunctionCall { syntax: 2699, lhs: Some(2697), lparen: Some(2700), args: [(2701, Some(2704)), (2705, Some(2708)), (2709, Some(2712)), (2713, None)], rparen: Some(2716) })"];
    2699 -> 2697;
    2697 [label="Identifier"];
    2697 -> 2698;
    2698[label="Private_CpRestart"];
    2699 -> 2700;
    2700[label="("];
    2699 -> 2701;
    2701 [label="Expr"];
    2701 -> 2702;
    2702 [label="Identifier"];
    2702 -> 2703;
    2703[label="_Player"];
    2699 -> 2704;
    2704[label=","];
    2699 -> 2705;
    2705 [label="Expr"];
    2705 -> 2706;
    2706 [label="Identifier"];
    2706 -> 2707;
    2707[label="Delay"];
    2699 -> 2708;
    2708[label=","];
    2699 -> 2709;
    2709 [label="Expr"];
    2709 -> 2710;
    2710 [label="Identifier"];
    2710 -> 2711;
    2711[label="LastCP"];
    2699 -> 2712;
    2712[label=","];
    2699 -> 2713;
    2713 [label="Expr"];
    2713 -> 2714;
    2714 [label="Identifier"];
    2714 -> 2715;
    2715[label="CPSpawnId"];
    2699 -> 2716;
    2716[label=")"];
    2695 -> 2717;
    2717[label=";"];
    2675 -> 2718;
    2718 [label="Else(Else { syntax: 2718, else_: Some(2719), if_: None, body: Some(2720) })"];
    2718 -> 2719;
    2719[label="else"];
    2718 -> 2720;
    2720 [label="Statement(Statement { syntax: 2720, statement: Some(2721), semicolon: Some(2734) })"];
    2720 -> 2721;
    2721 [label="Expr"];
    2721 -> 2724;
    2724 [label="FunctionCall(FunctionCall { syntax: 2724, lhs: Some(2722), lparen: Some(2725), args: [(2726, Some(2729)), (2730, None)], rparen: Some(2733) })"];
    2724 -> 2722;
    2722 [label="Identifier"];
    2722 -> 2723;
    2723[label="Private_FullRestart"];
    2724 -> 2725;
    2725[label="("];
    2724 -> 2726;
    2726 [label="Expr"];
    2726 -> 2727;
    2727 [label="Identifier"];
    2727 -> 2728;
    2728[label="_Player"];
    2724 -> 2729;
    2729[label=","];
    2724 -> 2730;
    2730 [label="Expr"];
    2730 -> 2731;
    2731 [label="Identifier"];
    2731 -> 2732;
    2732[label="Delay"];
    2724 -> 2733;
    2733[label=")"];
    2720 -> 2734;
    2734[label=";"];
    2486 -> 2735;
    2735 [label="Statement(Statement { syntax: 2735, statement: Some(2736), semicolon: Some(2745) })"];
    2735 -> 2736;
    2736 [label="Expr"];
    2736 -> 2739;
    2739 [label="FunctionCall(FunctionCall { syntax: 2739, lhs: Some(2737), lparen: Some(2740), args: [(2741, None)], rparen: Some(2744) })"];
    2739 -> 2737;
    2737 [label="Identifier"];
    2737 -> 2738;
    2738[label="Private_UpdatePlayerBestTime"];
    2739 -> 2740;
    2740[label="("];
    2739 -> 2741;
    2741 [label="Expr"];
    2741 -> 2742;
    2742 [label="Identifier"];
    2742 -> 2743;
    2743[label="_Player"];
    2739 -> 2744;
    2744[label=")"];
    2735 -> 2745;
    2745[label=";"];
    2486 -> 2746;
    2746 [label="Statement(Statement { syntax: 2746, statement: Some(2747), semicolon: None })"];
    2746 -> 2747;
    2747 [label="If(If { syntax: 2747, if_: Some(2748), lparen: Some(2749), condition: Some(2750), rparen: Some(2769), body: Some(2770), else_: None })"];
    2747 -> 2748;
    2748[label="if"];
    2747 -> 2749;
    2749[label="("];
    2747 -> 2750;
    2750 [label="Expr"];
    2750 -> 2764;
    2764 [label="BinaryOp(BinaryOp { syntax: 2764, lhs: Some(2758), operator: Some(2765), rhs: Some(2766) })"];
    2764 -> 2758;
    2758 [label="FunctionCall(FunctionCall { syntax: 2758, lhs: Some(2753), lparen: Some(2759), args: [(2760, None)], rparen: Some(2763) })"];
    2758 -> 2753;
    2753 [label="BinaryOp(BinaryOp { syntax: 2753, lhs: Some(2751), operator: Some(2754), rhs: Some(2755) })"];
    2753 -> 2751;
    2751 [label="Identifier"];
    2751 -> 2752;
    2752[label="Player"];
    2753 -> 2754;
    2754[label="::"];
    2753 -> 2755;
    2755 [label="Expr"];
    2755 -> 2756;
    2756 [label="Identifier"];
    2756 -> 2757;
    2757[label="getBestRun"];
    2758 -> 2759;
    2759[label="("];
    2758 -> 2760;
    2760 [label="Expr"];
    2760 -> 2761;
    2761 [label="Identifier"];
    2761 -> 2762;
    2762[label="_Player"];
    2758 -> 2763;
    2763[label=")"];
    2764 -> 2765;
    2765[label="<"];
    2764 -> 2766;
    2766 [label="Expr"];
    2766 -> 2767;
    2767 [label="Literal"];
    2767 -> 2768;
    2768[label="0"];
    2747 -> 2769;
    2769[label=")"];
    2747 -> 2770;
    2770 [label="Statement(Statement { syntax: 2770, statement: Some(2771), semicolon: None })"];
    2770 -> 2771;
    2771 [label="Block(Block { syntax: 2771, lbrace: Some(2772), statements: [2773], rbrace: Some(2784) })"];
    2771 -> 2772;
    2772[label="{"];
    2771 -> 2773;
    2773 [label="Statement(Statement { syntax: 2773, statement: Some(2774), semicolon: Some(2783) })"];
    2773 -> 2774;
    2774 [label="Expr"];
    2774 -> 2777;
    2777 [label="FunctionCall(FunctionCall { syntax: 2777, lhs: Some(2775), lparen: Some(2778), args: [(2779, None)], rparen: Some(2782) })"];
    2777 -> 2775;
    2775 [label="Identifier"];
    2775 -> 2776;
    2776[label="Private_UpdatePlayerRsCounter"];
    2777 -> 2778;
    2778[label="("];
    2777 -> 2779;
    2779 [label="Expr"];
    2779 -> 2780;
    2780 [label="Identifier"];
    2780 -> 2781;
    2781[label="_Player"];
    2777 -> 2782;
    2782[label=")"];
    2773 -> 2783;
    2783[label=";"];
    2771 -> 2784;
    2784[label="}"];
    2486 -> 2785;
    2785 [label="Statement(Statement { syntax: 2785, statement: Some(2786), semicolon: Some(2800) })"];
    2785 -> 2786;
    2786 [label="Expr"];
    2786 -> 2794;
    2794 [label="FunctionCall(FunctionCall { syntax: 2794, lhs: Some(2789), lparen: Some(2795), args: [(2796, None)], rparen: Some(2799) })"];
    2794 -> 2789;
    2789 [label="BinaryOp(BinaryOp { syntax: 2789, lhs: Some(2787), operator: Some(2790), rhs: Some(2791) })"];
    2789 -> 2787;
    2787 [label="Identifier"];
    2787 -> 2788;
    2788[label="Player"];
    2789 -> 2790;
    2790[label="::"];
    2789 -> 2791;
    2791 [label="Expr"];
    2791 -> 2792;
    2792 [label="Identifier"];
    2792 -> 2793;
    2793[label="clearBuffTimes"];
    2794 -> 2795;
    2795[label="("];
    2794 -> 2796;
    2796 [label="Expr"];
    2796 -> 2797;
    2797 [label="Identifier"];
    2797 -> 2798;
    2798[label="_Player"];
    2794 -> 2799;
    2799[label=")"];
    2785 -> 2800;
    2800[label=";"];
    2486 -> 2801;
    2801 [label="Statement(Statement { syntax: 2801, statement: Some(2802), semicolon: None })"];
    2801 -> 2802;
    2802 [label="If(If { syntax: 2802, if_: Some(2803), lparen: Some(2804), condition: Some(2805), rparen: Some(2808), body: Some(2809), else_: None })"];
    2802 -> 2803;
    2803[label="if"];
    2802 -> 2804;
    2804[label="("];
    2802 -> 2805;
    2805 [label="Expr"];
    2805 -> 2806;
    2806 [label="Identifier"];
    2806 -> 2807;
    2807[label="G_FullAmmoSpawn"];
    2802 -> 2808;
    2808[label=")"];
    2802 -> 2809;
    2809 [label="Statement(Statement { syntax: 2809, statement: Some(2810), semicolon: None })"];
    2809 -> 2810;
    2810 [label="Block(Block { syntax: 2810, lbrace: Some(2811), statements: [2812], rbrace: Some(2828) })"];
    2810 -> 2811;
    2811[label="{"];
    2810 -> 2812;
    2812 [label="Statement(Statement { syntax: 2812, statement: Some(2813), semicolon: Some(2827) })"];
    2812 -> 2813;
    2813 [label="Expr"];
    2813 -> 2821;
    2821 [label="FunctionCall(FunctionCall { syntax: 2821, lhs: Some(2816), lparen: Some(2822), args: [(2823, None)], rparen: Some(2826) })"];
    2821 -> 2816;
    2816 [label="BinaryOp(BinaryOp { syntax: 2816, lhs: Some(2814), operator: Some(2817), rhs: Some(2818) })"];
    2816 -> 2814;
    2814 [label="Identifier"];
    2814 -> 2815;
    2815[label="Weapons"];
    2816 -> 2817;
    2817[label="::"];
    2816 -> 2818;
    2818 [label="Expr"];
    2818 -> 2819;
    2819 [label="Identifier"];
    2819 -> 2820;
    2820[label="FillUpPlayerAmmo"];
    2821 -> 2822;
    2822[label="("];
    2821 -> 2823;
    2823 [label="Expr"];
    2823 -> 2824;
    2824 [label="Identifier"];
    2824 -> 2825;
    2825[label="_Player"];
    2821 -> 2826;
    2826[label=")"];
    2812 -> 2827;
    2827[label=";"];
    2810 -> 2828;
    2828[label="}"];
    2486 -> 2829;
    2829[label="}"];
    0 -> 2830;
    2830 [label="FuncDec(FuncDec { syntax: 2830, type_: Some(2831), name: Some(2833), lparen: Some(2834), args: [2835], rparen: Some(2839), body: Some(2840) })"];
    2830 -> 2831;
    2831 [label="Type(Type { syntax: 2831, basename: Some(2832), members: [], arrays: [] })"];
    2831 -> 2832;
    2832[label="Void"];
    2830 -> 2833;
    2833[label="RespawnPlayer"];
    2830 -> 2834;
    2834[label="("];
    2830 -> 2835;
    2835 [label="FormalArg(FormalArg { syntax: 2835, type_: Some(2836), name: Some(2838), comma: None })"];
    2835 -> 2836;
    2836 [label="Type(Type { syntax: 2836, basename: Some(2837), members: [], arrays: [] })"];
    2836 -> 2837;
    2837[label="CSmPlayer"];
    2835 -> 2838;
    2838[label="_Player"];
    2830 -> 2839;
    2839[label=")"];
    2830 -> 2840;
    2840 [label="Block(Block { syntax: 2840, lbrace: Some(2841), statements: [2842], rbrace: Some(2857) })"];
    2840 -> 2841;
    2841[label="{"];
    2840 -> 2842;
    2842 [label="Statement(Statement { syntax: 2842, statement: Some(2843), semicolon: Some(2856) })"];
    2842 -> 2843;
    2843 [label="Expr"];
    2843 -> 2846;
    2846 [label="FunctionCall(FunctionCall { syntax: 2846, lhs: Some(2844), lparen: Some(2847), args: [(2848, Some(2851)), (2852, None)], rparen: Some(2855) })"];
    2846 -> 2844;
    2844 [label="Identifier"];
    2844 -> 2845;
    2845[label="RespawnPlayer"];
    2846 -> 2847;
    2847[label="("];
    2846 -> 2848;
    2848 [label="Expr"];
    2848 -> 2849;
    2849 [label="Identifier"];
    2849 -> 2850;
    2850[label="_Player"];
    2846 -> 2851;
    2851[label=","];
    2846 -> 2852;
    2852 [label="Expr"];
    2852 -> 2853;
    2853 [label="Literal"];
    2853 -> 2854;
    2854[label="False"];
    2846 -> 2855;
    2855[label=")"];
    2842 -> 2856;
    2856[label=";"];
    2840 -> 2857;
    2857[label="}"];
    0 -> 2858;
    2858 [label="FuncDec(FuncDec { syntax: 2858, type_: Some(2859), name: Some(2861), lparen: Some(2862), args: [2863, 2868], rparen: Some(2872), body: Some(2873) })"];
    2858 -> 2859;
    2859 [label="Type(Type { syntax: 2859, basename: Some(2860), members: [], arrays: [] })"];
    2859 -> 2860;
    2860[label="Void"];
    2858 -> 2861;
    2861[label="Private_UsePortal"];
    2858 -> 2862;
    2862[label="("];
    2858 -> 2863;
    2863 [label="FormalArg(FormalArg { syntax: 2863, type_: Some(2864), name: Some(2866), comma: Some(2867) })"];
    2863 -> 2864;
    2864 [label="Type(Type { syntax: 2864, basename: Some(2865), members: [], arrays: [] })"];
    2864 -> 2865;
    2865[label="CSmPlayer"];
    2863 -> 2866;
    2866[label="_Player"];
    2863 -> 2867;
    2867[label=","];
    2858 -> 2868;
    2868 [label="FormalArg(FormalArg { syntax: 2868, type_: Some(2869), name: Some(2871), comma: None })"];
    2868 -> 2869;
    2869 [label="Type(Type { syntax: 2869, basename: Some(2870), members: [], arrays: [] })"];
    2869 -> 2870;
    2870[label="Ident"];
    2868 -> 2871;
    2871[label="_Portal"];
    2858 -> 2872;
    2872[label=")"];
    2858 -> 2873;
    2873 [label="Block(Block { syntax: 2873, lbrace: Some(2874), statements: [2875, 2896, 2922, 2957], rbrace: Some(2991) })"];
    2873 -> 2874;
    2874[label="{"];
    2873 -> 2875;
    2875 [label="Statement(Statement { syntax: 2875, statement: Some(2876), semicolon: None })"];
    2875 -> 2876;
    2876 [label="VarDec(VarDec { syntax: 2876, declare: Some(2877), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2878), as_: None, alias: None, for_: None, target: None, assignment: Some(2880), value: Some(2881) })"];
    2876 -> 2877;
    2877[label="declare"];
    2876 -> 2878;
    2878 [label="Type(Type { syntax: 2878, basename: Some(2879), members: [], arrays: [] })"];
    2878 -> 2879;
    2879[label="SpawnId"];
    2876 -> 2880;
    2880[label="="];
    2876 -> 2881;
    2881 [label="Expr"];
    2881 -> 2889;
    2889 [label="FunctionCall(FunctionCall { syntax: 2889, lhs: Some(2884), lparen: Some(2890), args: [(2891, None)], rparen: Some(2894) })"];
    2889 -> 2884;
    2884 [label="BinaryOp(BinaryOp { syntax: 2884, lhs: Some(2882), operator: Some(2885), rhs: Some(2886) })"];
    2884 -> 2882;
    2882 [label="Identifier"];
    2882 -> 2883;
    2883[label="Tools"];
    2884 -> 2885;
    2885[label="::"];
    2884 -> 2886;
    2886 [label="Expr"];
    2886 -> 2887;
    2887 [label="Identifier"];
    2887 -> 2888;
    2888[label="GetClosestSpawn"];
    2889 -> 2890;
    2890[label="("];
    2889 -> 2891;
    2891 [label="Expr"];
    2891 -> 2892;
    2892 [label="Identifier"];
    2892 -> 2893;
    2893[label="_Portal"];
    2889 -> 2894;
    2894[label=")"];
    2876 -> 2895;
    2895[label=";"];
    2873 -> 2896;
    2896 [label="Statement(Statement { syntax: 2896, statement: Some(2897), semicolon: None })"];
    2896 -> 2897;
    2897 [label="If(If { syntax: 2897, if_: Some(2898), lparen: Some(2899), condition: Some(2900), rparen: Some(2917), body: Some(2918), else_: None })"];
    2897 -> 2898;
    2898[label="if"];
    2897 -> 2899;
    2899[label="("];
    2897 -> 2900;
    2900 [label="Expr"];
    2900 -> 2911;
    2911 [label="FunctionCall(FunctionCall { syntax: 2911, lhs: Some(2901), lparen: Some(2912), args: [(2913, None)], rparen: Some(2916) })"];
    2911 -> 2901;
    2901 [label="UnOp(UnOp { syntax: 2901, operator: Some(2902), operand: Some(2903) })"];
    2901 -> 2902;
    2902[label="!"];
    2901 -> 2903;
    2903 [label="Expr"];
    2903 -> 2906;
    2906 [label="BinaryOp(BinaryOp { syntax: 2906, lhs: Some(2904), operator: Some(2907), rhs: Some(2908) })"];
    2906 -> 2904;
    2904 [label="Identifier"];
    2904 -> 2905;
    2905[label="MapLandmarks_PlayerSpawn"];
    2906 -> 2907;
    2907[label="."];
    2906 -> 2908;
    2908 [label="Expr"];
    2908 -> 2909;
    2909 [label="Identifier"];
    2909 -> 2910;
    2910[label="existskey"];
    2911 -> 2912;
    2912[label="("];
    2911 -> 2913;
    2913 [label="Expr"];
    2913 -> 2914;
    2914 [label="Identifier"];
    2914 -> 2915;
    2915[label="SpawnId"];
    2911 -> 2916;
    2916[label=")"];
    2897 -> 2917;
    2917[label=")"];
    2897 -> 2918;
    2918 [label="Statement(Statement { syntax: 2918, statement: Some(2919), semicolon: Some(2921) })"];
    2918 -> 2919;
    2919 [label="Return(Return { syntax: 2919, return_: Some(2920), value: None })"];
    2919 -> 2920;
    2920[label="return"];
    2918 -> 2921;
    2921[label=";"];
    2873 -> 2922;
    2922 [label="Statement(Statement { syntax: 2922, statement: Some(2923), semicolon: Some(2956) })"];
    2922 -> 2923;
    2923 [label="Expr"];
    2923 -> 2931;
    2931 [label="FunctionCall(FunctionCall { syntax: 2931, lhs: Some(2926), lparen: Some(2932), args: [(2933, Some(2936)), (2937, Some(2940)), (2941, None)], rparen: Some(2955) })"];
    2931 -> 2926;
    2926 [label="BinaryOp(BinaryOp { syntax: 2926, lhs: Some(2924), operator: Some(2927), rhs: Some(2928) })"];
    2926 -> 2924;
    2924 [label="Identifier"];
    2924 -> 2925;
    2925[label="SM"];
    2926 -> 2927;
    2927[label="::"];
    2926 -> 2928;
    2928 [label="Expr"];
    2928 -> 2929;
    2929 [label="Identifier"];
    2929 -> 2930;
    2930[label="SpawnNoLadder"];
    2931 -> 2932;
    2932[label="("];
    2931 -> 2933;
    2933 [label="Expr"];
    2933 -> 2934;
    2934 [label="Identifier"];
    2934 -> 2935;
    2935[label="_Player"];
    2931 -> 2936;
    2936[label=","];
    2931 -> 2937;
    2937 [label="Expr"];
    2937 -> 2938;
    2938 [label="Literal"];
    2938 -> 2939;
    2939[label="0"];
    2931 -> 2940;
    2940[label=","];
    2931 -> 2941;
    2941 [label="Expr"];
    2941 -> 2950;
    2950 [label="BinaryOp(BinaryOp { syntax: 2950, lhs: Some(2944), operator: Some(2951), rhs: Some(2952) })"];
    2950 -> 2944;
    2944 [label="ArrayAccess(ArrayAccess { syntax: 2944, lhs: Some(2942), lsquare: Some(2945), index: Some(2946), rsquare: Some(2949) })"];
    2944 -> 2942;
    2942 [label="Identifier"];
    2942 -> 2943;
    2943[label="MapLandmarks_PlayerSpawn"];
    2944 -> 2945;
    2945[label="["];
    2944 -> 2946;
    2946 [label="Expr"];
    2946 -> 2947;
    2947 [label="Identifier"];
    2947 -> 2948;
    2948[label="SpawnId"];
    2944 -> 2949;
    2949[label="]"];
    2950 -> 2951;
    2951[label="."];
    2950 -> 2952;
    2952 [label="Expr"];
    2952 -> 2953;
    2953 [label="Identifier"];
    2953 -> 2954;
    2954[label="PlayerSpawn"];
    2931 -> 2955;
    2955[label=")"];
    2922 -> 2956;
    2956[label=";"];
    2873 -> 2957;
    2957 [label="Statement(Statement { syntax: 2957, statement: Some(2958), semicolon: Some(2990) })"];
    2957 -> 2958;
    2958 [label="Expr"];
    2958 -> 2966;
    2966 [label="FunctionCall(FunctionCall { syntax: 2966, lhs: Some(2961), lparen: Some(2967), args: [(2968, Some(2971)), (2972, Some(2981)), (2982, Some(2985)), (2986, None)], rparen: Some(2989) })"];
    2966 -> 2961;
    2961 [label="BinaryOp(BinaryOp { syntax: 2961, lhs: Some(2959), operator: Some(2962), rhs: Some(2963) })"];
    2961 -> 2959;
    2959 [label="Identifier"];
    2959 -> 2960;
    2960[label="Message"];
    2961 -> 2962;
    2962[label="::"];
    2961 -> 2963;
    2963 [label="Expr"];
    2963 -> 2964;
    2964 [label="Identifier"];
    2964 -> 2965;
    2965[label="SendBigMessage"];
    2966 -> 2967;
    2967[label="("];
    2966 -> 2968;
    2968 [label="Expr"];
    2968 -> 2969;
    2969 [label="Identifier"];
    2969 -> 2970;
    2970[label="_Player"];
    2966 -> 2971;
    2971[label=","];
    2966 -> 2972;
    2972 [label="Expr"];
    2972 -> 2975;
    2975 [label="FunctionCall(FunctionCall { syntax: 2975, lhs: Some(2973), lparen: Some(2976), args: [(2977, None)], rparen: Some(2980) })"];
    2975 -> 2973;
    2973 [label="Identifier"];
    2973 -> 2974;
    2974[label="_"];
    2975 -> 2976;
    2976[label="("];
    2975 -> 2977;
    2977 [label="Expr"];
    2977 -> 2978;
    2978 [label="Literal"];
    2978 -> 2979;
    2979[label="\"Portal!\""];
    2975 -> 2980;
    2980[label=")"];
    2966 -> 2981;
    2981[label=","];
    2966 -> 2982;
    2982 [label="Expr"];
    2982 -> 2983;
    2983 [label="Literal"];
    2983 -> 2984;
    2984[label="2500"];
    2966 -> 2985;
    2985[label=","];
    2966 -> 2986;
    2986 [label="Expr"];
    2986 -> 2987;
    2987 [label="Literal"];
    2987 -> 2988;
    2988[label="0"];
    2966 -> 2989;
    2989[label=")"];
    2957 -> 2990;
    2990[label=";"];
    2873 -> 2991;
    2991[label="}"];
    0 -> 2992;
    2992 [label="FuncDec(FuncDec { syntax: 2992, type_: Some(2993), name: Some(2995), lparen: Some(2996), args: [2997, 3002], rparen: Some(3006), body: Some(3007) })"];
    2992 -> 2993;
    2993 [label="Type(Type { syntax: 2993, basename: Some(2994), members: [], arrays: [] })"];
    2993 -> 2994;
    2994[label="Void"];
    2992 -> 2995;
    2995[label="JumpToCheckpoint"];
    2992 -> 2996;
    2996[label="("];
    2992 -> 2997;
    2997 [label="FormalArg(FormalArg { syntax: 2997, type_: Some(2998), name: Some(3000), comma: Some(3001) })"];
    2997 -> 2998;
    2998 [label="Type(Type { syntax: 2998, basename: Some(2999), members: [], arrays: [] })"];
    2998 -> 2999;
    2999[label="CSmPlayer"];
    2997 -> 3000;
    3000[label="_Player"];
    2997 -> 3001;
    3001[label=","];
    2992 -> 3002;
    3002 [label="FormalArg(FormalArg { syntax: 3002, type_: Some(3003), name: Some(3005), comma: None })"];
    3002 -> 3003;
    3003 [label="Type(Type { syntax: 3003, basename: Some(3004), members: [], arrays: [] })"];
    3003 -> 3004;
    3004[label="Integer"];
    3002 -> 3005;
    3005[label="_Target"];
    2992 -> 3006;
    3006[label=")"];
    2992 -> 3007;
    3007 [label="Block(Block { syntax: 3007, lbrace: Some(3008), statements: [3009, 3030, 3072, 3107, 3118, 3184, 3282, 3329, 3355, 3402, 3428, 3448, 3473, 3505, 3521], rbrace: Some(3549) })"];
    3007 -> 3008;
    3008[label="{"];
    3007 -> 3009;
    3009 [label="Statement(Statement { syntax: 3009, statement: Some(3010), semicolon: None })"];
    3009 -> 3010;
    3010 [label="VarDec(VarDec { syntax: 3010, declare: Some(3011), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3012), as_: None, alias: None, for_: None, target: None, assignment: Some(3014), value: Some(3015) })"];
    3010 -> 3011;
    3011[label="declare"];
    3010 -> 3012;
    3012 [label="Type(Type { syntax: 3012, basename: Some(3013), members: [], arrays: [] })"];
    3012 -> 3013;
    3013[label="UI"];
    3010 -> 3014;
    3014[label="<=>"];
    3010 -> 3015;
    3015 [label="Expr"];
    3015 -> 3023;
    3023 [label="FunctionCall(FunctionCall { syntax: 3023, lhs: Some(3018), lparen: Some(3024), args: [(3025, None)], rparen: Some(3028) })"];
    3023 -> 3018;
    3018 [label="BinaryOp(BinaryOp { syntax: 3018, lhs: Some(3016), operator: Some(3019), rhs: Some(3020) })"];
    3018 -> 3016;
    3016 [label="Identifier"];
    3016 -> 3017;
    3017[label="UIManager"];
    3018 -> 3019;
    3019[label="."];
    3018 -> 3020;
    3020 [label="Expr"];
    3020 -> 3021;
    3021 [label="Identifier"];
    3021 -> 3022;
    3022[label="GetUI"];
    3023 -> 3024;
    3024[label="("];
    3023 -> 3025;
    3025 [label="Expr"];
    3025 -> 3026;
    3026 [label="Identifier"];
    3026 -> 3027;
    3027[label="_Player"];
    3023 -> 3028;
    3028[label=")"];
    3010 -> 3029;
    3029[label=";"];
    3007 -> 3030;
    3030 [label="Statement(Statement { syntax: 3030, statement: Some(3031), semicolon: None })"];
    3030 -> 3031;
    3031 [label="If(If { syntax: 3031, if_: Some(3032), lparen: Some(3033), condition: Some(3034), rparen: Some(3067), body: Some(3068), else_: None })"];
    3031 -> 3032;
    3032[label="if"];
    3031 -> 3033;
    3033[label="("];
    3031 -> 3034;
    3034 [label="Expr"];
    3034 -> 3057;
    3057 [label="BinaryOp(BinaryOp { syntax: 3057, lhs: Some(3042), operator: Some(3058), rhs: Some(3059) })"];
    3057 -> 3042;
    3042 [label="BinaryOp(BinaryOp { syntax: 3042, lhs: Some(3037), operator: Some(3043), rhs: Some(3044) })"];
    3042 -> 3037;
    3037 [label="BinaryOp(BinaryOp { syntax: 3037, lhs: Some(3035), operator: Some(3038), rhs: Some(3039) })"];
    3037 -> 3035;
    3035 [label="Identifier"];
    3035 -> 3036;
    3036[label="_Player"];
    3037 -> 3038;
    3038[label="."];
    3037 -> 3039;
    3039 [label="Expr"];
    3039 -> 3040;
    3040 [label="Identifier"];
    3040 -> 3041;
    3041[label="SpawnStatus"];
    3042 -> 3043;
    3043[label="!="];
    3042 -> 3044;
    3044 [label="Expr"];
    3044 -> 3047;
    3047 [label="BinaryOp(BinaryOp { syntax: 3047, lhs: Some(3045), operator: Some(3048), rhs: Some(3049) })"];
    3047 -> 3045;
    3045 [label="Identifier"];
    3045 -> 3046;
    3046[label="CSmPlayer"];
    3047 -> 3048;
    3048[label="::"];
    3047 -> 3049;
    3049 [label="Expr"];
    3049 -> 3052;
    3052 [label="BinaryOp(BinaryOp { syntax: 3052, lhs: Some(3050), operator: Some(3053), rhs: Some(3054) })"];
    3052 -> 3050;
    3050 [label="Identifier"];
    3050 -> 3051;
    3051[label="ESpawnStatus"];
    3052 -> 3053;
    3053[label="::"];
    3052 -> 3054;
    3054 [label="Expr"];
    3054 -> 3055;
    3055 [label="Identifier"];
    3055 -> 3056;
    3056[label="Spawned"];
    3057 -> 3058;
    3058[label="||"];
    3057 -> 3059;
    3059 [label="Expr"];
    3059 -> 3062;
    3062 [label="BinaryOp(BinaryOp { syntax: 3062, lhs: Some(3060), operator: Some(3063), rhs: Some(3064) })"];
    3062 -> 3060;
    3060 [label="Identifier"];
    3060 -> 3061;
    3061[label="UI"];
    3062 -> 3063;
    3063[label="=="];
    3062 -> 3064;
    3064 [label="Expr"];
    3064 -> 3065;
    3065 [label="Literal"];
    3065 -> 3066;
    3066[label="Null"];
    3031 -> 3067;
    3067[label=")"];
    3031 -> 3068;
    3068 [label="Statement(Statement { syntax: 3068, statement: Some(3069), semicolon: Some(3071) })"];
    3068 -> 3069;
    3069 [label="Return(Return { syntax: 3069, return_: Some(3070), value: None })"];
    3069 -> 3070;
    3070[label="return"];
    3068 -> 3071;
    3071[label=";"];
    3007 -> 3072;
    3072 [label="Statement(Statement { syntax: 3072, statement: Some(3073), semicolon: None })"];
    3072 -> 3073;
    3073 [label="If(If { syntax: 3073, if_: Some(3074), lparen: Some(3075), condition: Some(3076), rparen: Some(3082), body: Some(3083), else_: None })"];
    3073 -> 3074;
    3074[label="if"];
    3073 -> 3075;
    3075[label="("];
    3073 -> 3076;
    3076 [label="Expr"];
    3076 -> 3077;
    3077 [label="UnOp(UnOp { syntax: 3077, operator: Some(3078), operand: Some(3079) })"];
    3077 -> 3078;
    3078[label="!"];
    3077 -> 3079;
    3079 [label="Expr"];
    3079 -> 3080;
    3080 [label="Identifier"];
    3080 -> 3081;
    3081[label="G_AllowJump"];
    3073 -> 3082;
    3082[label=")"];
    3073 -> 3083;
    3083 [label="Statement(Statement { syntax: 3083, statement: Some(3084), semicolon: None })"];
    3083 -> 3084;
    3084 [label="Block(Block { syntax: 3084, lbrace: Some(3085), statements: [3086, 3102], rbrace: Some(3106) })"];
    3084 -> 3085;
    3085[label="{"];
    3084 -> 3086;
    3086 [label="Statement(Statement { syntax: 3086, statement: Some(3087), semicolon: Some(3101) })"];
    3086 -> 3087;
    3087 [label="Expr"];
    3087 -> 3095;
    3095 [label="FunctionCall(FunctionCall { syntax: 3095, lhs: Some(3090), lparen: Some(3096), args: [(3097, None)], rparen: Some(3100) })"];
    3095 -> 3090;
    3090 [label="BinaryOp(BinaryOp { syntax: 3090, lhs: Some(3088), operator: Some(3091), rhs: Some(3092) })"];
    3090 -> 3088;
    3088 [label="Identifier"];
    3088 -> 3089;
    3089[label="UI"];
    3090 -> 3091;
    3091[label="."];
    3090 -> 3092;
    3092 [label="Expr"];
    3092 -> 3093;
    3093 [label="Identifier"];
    3093 -> 3094;
    3094[label="SendChat"];
    3095 -> 3096;
    3096[label="("];
    3095 -> 3097;
    3097 [label="Expr"];
    3097 -> 3098;
    3098 [label="Literal"];
    3098 -> 3099;
    3099[label="\"$f00Jumping is disabled!$z\""];
    3095 -> 3100;
    3100[label=")"];
    3086 -> 3101;
    3101[label=";"];
    3084 -> 3102;
    3102 [label="Statement(Statement { syntax: 3102, statement: Some(3103), semicolon: Some(3105) })"];
    3102 -> 3103;
    3103 [label="Return(Return { syntax: 3103, return_: Some(3104), value: None })"];
    3103 -> 3104;
    3104[label="return"];
    3102 -> 3105;
    3105[label=";"];
    3084 -> 3106;
    3106[label="}"];
    3007 -> 3107;
    3107 [label="Statement(Statement { syntax: 3107, statement: Some(3108), semicolon: None })"];
    3107 -> 3108;
    3108 [label="VarDec(VarDec { syntax: 3108, declare: Some(3109), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(3110), name: Some(3112), as_: None, alias: None, for_: None, target: None, assignment: Some(3113), value: Some(3114) })"];
    3108 -> 3109;
    3109[label="declare"];
    3108 -> 3110;
    3110 [label="Type(Type { syntax: 3110, basename: Some(3111), members: [], arrays: [] })"];
    3110 -> 3111;
    3111[label="CSmMapLandmark"];
    3108 -> 3112;
    3112[label="Target"];
    3108 -> 3113;
    3113[label="<=>"];
    3108 -> 3114;
    3114 [label="Expr"];
    3114 -> 3115;
    3115 [label="Literal"];
    3115 -> 3116;
    3116[label="Null"];
    3108 -> 3117;
    3117[label=";"];
    3007 -> 3118;
    3118 [label="Statement(Statement { syntax: 3118, statement: Some(3119), semicolon: None })"];
    3118 -> 3119;
    3119 [label="Foreach(Foreach { syntax: 3119, foreach: Some(3120), lparen: Some(3121), name1: Some(3122), arrow: None, name2: None, in_: Some(3123), value: Some(3124), rparen: Some(3127), body: Some(3128) })"];
    3119 -> 3120;
    3120[label="foreach"];
    3119 -> 3121;
    3121[label="("];
    3119 -> 3122;
    3122[label="Landmark"];
    3119 -> 3123;
    3123[label="in"];
    3119 -> 3124;
    3124 [label="Expr"];
    3124 -> 3125;
    3125 [label="Identifier"];
    3125 -> 3126;
    3126[label="MapLandmarks"];
    3119 -> 3127;
    3127[label=")"];
    3119 -> 3128;
    3128 [label="Statement(Statement { syntax: 3128, statement: Some(3129), semicolon: None })"];
    3128 -> 3129;
    3129 [label="Block(Block { syntax: 3129, lbrace: Some(3130), statements: [3131], rbrace: Some(3183) })"];
    3129 -> 3130;
    3130[label="{"];
    3129 -> 3131;
    3131 [label="Statement(Statement { syntax: 3131, statement: Some(3132), semicolon: None })"];
    3131 -> 3132;
    3132 [label="If(If { syntax: 3132, if_: Some(3133), lparen: Some(3134), condition: Some(3135), rparen: Some(3164), body: Some(3165), else_: None })"];
    3132 -> 3133;
    3133[label="if"];
    3132 -> 3134;
    3134[label="("];
    3132 -> 3135;
    3135 [label="Expr"];
    3135 -> 3149;
    3149 [label="BinaryOp(BinaryOp { syntax: 3149, lhs: Some(3143), operator: Some(3150), rhs: Some(3151) })"];
    3149 -> 3143;
    3143 [label="FunctionCall(FunctionCall { syntax: 3143, lhs: Some(3138), lparen: Some(3144), args: [(3145, None)], rparen: Some(3148) })"];
    3143 -> 3138;
    3138 [label="BinaryOp(BinaryOp { syntax: 3138, lhs: Some(3136), operator: Some(3139), rhs: Some(3140) })"];
    3138 -> 3136;
    3136 [label="Identifier"];
    3136 -> 3137;
    3137[label="Tools"];
    3138 -> 3139;
    3139[label="::"];
    3138 -> 3140;
    3140 [label="Expr"];
    3140 -> 3141;
    3141 [label="Identifier"];
    3141 -> 3142;
    3142[label="IsCheckpoint"];
    3143 -> 3144;
    3144[label="("];
    3143 -> 3145;
    3145 [label="Expr"];
    3145 -> 3146;
    3146 [label="Identifier"];
    3146 -> 3147;
    3147[label="Landmark"];
    3143 -> 3148;
    3148[label=")"];
    3149 -> 3150;
    3150[label="&&"];
    3149 -> 3151;
    3151 [label="Expr"];
    3151 -> 3159;
    3159 [label="BinaryOp(BinaryOp { syntax: 3159, lhs: Some(3154), operator: Some(3160), rhs: Some(3161) })"];
    3159 -> 3154;
    3154 [label="BinaryOp(BinaryOp { syntax: 3154, lhs: Some(3152), operator: Some(3155), rhs: Some(3156) })"];
    3154 -> 3152;
    3152 [label="Identifier"];
    3152 -> 3153;
    3153[label="Landmark"];
    3154 -> 3155;
    3155[label="."];
    3154 -> 3156;
    3156 [label="Expr"];
    3156 -> 3157;
    3157 [label="Identifier"];
    3157 -> 3158;
    3158[label="Order"];
    3159 -> 3160;
    3160[label="=="];
    3159 -> 3161;
    3161 [label="Expr"];
    3161 -> 3162;
    3162 [label="Identifier"];
    3162 -> 3163;
    3163[label="_Target"];
    3132 -> 3164;
    3164[label=")"];
    3132 -> 3165;
    3165 [label="Statement(Statement { syntax: 3165, statement: Some(3166), semicolon: None })"];
    3165 -> 3166;
    3166 [label="Block(Block { syntax: 3166, lbrace: Some(3167), statements: [3168, 3178], rbrace: Some(3182) })"];
    3166 -> 3167;
    3167[label="{"];
    3166 -> 3168;
    3168 [label="Statement(Statement { syntax: 3168, statement: Some(3172), semicolon: Some(3177) })"];
    3168 -> 3169;
    3169 [label="Expr"];
    3169 -> 3170;
    3170 [label="Identifier"];
    3170 -> 3171;
    3171[label="Target"];
    3168 -> 3172;
    3172 [label="Assignment(Assignment { syntax: 3172, lvalue: Some(3169), operator: Some(3173), rvalue: Some(3174) })"];
    3172 -> 3173;
    3173[label="<=>"];
    3172 -> 3174;
    3174 [label="Expr"];
    3174 -> 3175;
    3175 [label="Identifier"];
    3175 -> 3176;
    3176[label="Landmark"];
    3168 -> 3177;
    3177[label=";"];
    3166 -> 3178;
    3178 [label="Statement(Statement { syntax: 3178, statement: Some(3179), semicolon: Some(3181) })"];
    3178 -> 3179;
    3179 [label="Break"];
    3179 -> 3180;
    3180[label="break"];
    3178 -> 3181;
    3181[label=";"];
    3166 -> 3182;
    3182[label="}"];
    3129 -> 3183;
    3183[label="}"];
    3007 -> 3184;
    3184 [label="Statement(Statement { syntax: 3184, statement: Some(3185), semicolon: None })"];
    3184 -> 3185;
    3185 [label="If(If { syntax: 3185, if_: Some(3186), lparen: Some(3187), condition: Some(3188), rparen: Some(3196), body: Some(3197), else_: None })"];
    3185 -> 3186;
    3186[label="if"];
    3185 -> 3187;
    3187[label="("];
    3185 -> 3188;
    3188 [label="Expr"];
    3188 -> 3191;
    3191 [label="BinaryOp(BinaryOp { syntax: 3191, lhs: Some(3189), operator: Some(3192), rhs: Some(3193) })"];
    3191 -> 3189;
    3189 [label="Identifier"];
    3189 -> 3190;
    3190[label="Target"];
    3191 -> 3192;
    3192[label="=="];
    3191 -> 3193;
    3193 [label="Expr"];
    3193 -> 3194;
    3194 [label="Literal"];
    3194 -> 3195;
    3195[label="Null"];
    3185 -> 3196;
    3196[label=")"];
    3185 -> 3197;
    3197 [label="Statement(Statement { syntax: 3197, statement: Some(3198), semicolon: None })"];
    3197 -> 3198;
    3198 [label="Block(Block { syntax: 3198, lbrace: Some(3199), statements: [3200, 3210], rbrace: Some(3281) })"];
    3198 -> 3199;
    3199[label="{"];
    3198 -> 3200;
    3200 [label="Statement(Statement { syntax: 3200, statement: Some(3201), semicolon: None })"];
    3200 -> 3201;
    3201 [label="VarDec(VarDec { syntax: 3201, declare: Some(3202), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3203), as_: None, alias: None, for_: None, target: None, assignment: Some(3205), value: Some(3206) })"];
    3201 -> 3202;
    3202[label="declare"];
    3201 -> 3203;
    3203 [label="Type(Type { syntax: 3203, basename: Some(3204), members: [], arrays: [] })"];
    3203 -> 3204;
    3204[label="PoleIndex"];
    3201 -> 3205;
    3205[label="="];
    3201 -> 3206;
    3206 [label="Expr"];
    3206 -> 3207;
    3207 [label="Literal"];
    3207 -> 3208;
    3208[label="0"];
    3201 -> 3209;
    3209[label=";"];
    3198 -> 3210;
    3210 [label="Statement(Statement { syntax: 3210, statement: Some(3211), semicolon: None })"];
    3210 -> 3211;
    3211 [label="Foreach(Foreach { syntax: 3211, foreach: Some(3212), lparen: Some(3213), name1: Some(3214), arrow: None, name2: None, in_: Some(3215), value: Some(3216), rparen: Some(3219), body: Some(3220) })"];
    3211 -> 3212;
    3212[label="foreach"];
    3211 -> 3213;
    3213[label="("];
    3211 -> 3214;
    3214[label="Landmark"];
    3211 -> 3215;
    3215[label="in"];
    3211 -> 3216;
    3216 [label="Expr"];
    3216 -> 3217;
    3217 [label="Identifier"];
    3217 -> 3218;
    3218[label="MapLandmarks"];
    3211 -> 3219;
    3219[label=")"];
    3211 -> 3220;
    3220 [label="Statement(Statement { syntax: 3220, statement: Some(3221), semicolon: None })"];
    3220 -> 3221;
    3221 [label="Block(Block { syntax: 3221, lbrace: Some(3222), statements: [3223, 3270], rbrace: Some(3280) })"];
    3221 -> 3222;
    3222[label="{"];
    3221 -> 3223;
    3223 [label="Statement(Statement { syntax: 3223, statement: Some(3224), semicolon: None })"];
    3223 -> 3224;
    3224 [label="If(If { syntax: 3224, if_: Some(3225), lparen: Some(3226), condition: Some(3227), rparen: Some(3251), body: Some(3252), else_: None })"];
    3224 -> 3225;
    3225[label="if"];
    3224 -> 3226;
    3226[label="("];
    3224 -> 3227;
    3227 [label="Expr"];
    3227 -> 3241;
    3241 [label="BinaryOp(BinaryOp { syntax: 3241, lhs: Some(3235), operator: Some(3242), rhs: Some(3243) })"];
    3241 -> 3235;
    3235 [label="FunctionCall(FunctionCall { syntax: 3235, lhs: Some(3230), lparen: Some(3236), args: [(3237, None)], rparen: Some(3240) })"];
    3235 -> 3230;
    3230 [label="BinaryOp(BinaryOp { syntax: 3230, lhs: Some(3228), operator: Some(3231), rhs: Some(3232) })"];
    3230 -> 3228;
    3228 [label="Identifier"];
    3228 -> 3229;
    3229[label="Tools"];
    3230 -> 3231;
    3231[label="::"];
    3230 -> 3232;
    3232 [label="Expr"];
    3232 -> 3233;
    3233 [label="Identifier"];
    3233 -> 3234;
    3234[label="IsCheckpoint"];
    3235 -> 3236;
    3236[label="("];
    3235 -> 3237;
    3237 [label="Expr"];
    3237 -> 3238;
    3238 [label="Identifier"];
    3238 -> 3239;
    3239[label="Landmark"];
    3235 -> 3240;
    3240[label=")"];
    3241 -> 3242;
    3242[label="&&"];
    3241 -> 3243;
    3243 [label="Expr"];
    3243 -> 3246;
    3246 [label="BinaryOp(BinaryOp { syntax: 3246, lhs: Some(3244), operator: Some(3247), rhs: Some(3248) })"];
    3246 -> 3244;
    3244 [label="Identifier"];
    3244 -> 3245;
    3245[label="PoleIndex"];
    3246 -> 3247;
    3247[label="=="];
    3246 -> 3248;
    3248 [label="Expr"];
    3248 -> 3249;
    3249 [label="Identifier"];
    3249 -> 3250;
    3250[label="_Target"];
    3224 -> 3251;
    3251[label=")"];
    3224 -> 3252;
    3252 [label="Statement(Statement { syntax: 3252, statement: Some(3253), semicolon: None })"];
    3252 -> 3253;
    3253 [label="Block(Block { syntax: 3253, lbrace: Some(3254), statements: [3255, 3265], rbrace: Some(3269) })"];
    3253 -> 3254;
    3254[label="{"];
    3253 -> 3255;
    3255 [label="Statement(Statement { syntax: 3255, statement: Some(3259), semicolon: Some(3264) })"];
    3255 -> 3256;
    3256 [label="Expr"];
    3256 -> 3257;
    3257 [label="Identifier"];
    3257 -> 3258;
    3258[label="Target"];
    3255 -> 3259;
    3259 [label="Assignment(Assignment { syntax: 3259, lvalue: Some(3256), operator: Some(3260), rvalue: Some(3261) })"];
    3259 -> 3260;
    3260[label="<=>"];
    3259 -> 3261;
    3261 [label="Expr"];
    3261 -> 3262;
    3262 [label="Identifier"];
    3262 -> 3263;
    3263[label="Landmark"];
    3255 -> 3264;
    3264[label=";"];
    3253 -> 3265;
    3265 [label="Statement(Statement { syntax: 3265, statement: Some(3266), semicolon: Some(3268) })"];
    3265 -> 3266;
    3266 [label="Break"];
    3266 -> 3267;
    3267[label="break"];
    3265 -> 3268;
    3268[label=";"];
    3253 -> 3269;
    3269[label="}"];
    3221 -> 3270;
    3270 [label="Statement(Statement { syntax: 3270, statement: Some(3274), semicolon: Some(3279) })"];
    3270 -> 3271;
    3271 [label="Expr"];
    3271 -> 3272;
    3272 [label="Identifier"];
    3272 -> 3273;
    3273[label="PoleIndex"];
    3270 -> 3274;
    3274 [label="Assignment(Assignment { syntax: 3274, lvalue: Some(3271), operator: Some(3275), rvalue: Some(3276) })"];
    3274 -> 3275;
    3275[label="+="];
    3274 -> 3276;
    3276 [label="Expr"];
    3276 -> 3277;
    3277 [label="Literal"];
    3277 -> 3278;
    3278[label="1"];
    3270 -> 3279;
    3279[label=";"];
    3221 -> 3280;
    3280[label="}"];
    3198 -> 3281;
    3281[label="}"];
    3007 -> 3282;
    3282 [label="Statement(Statement { syntax: 3282, statement: Some(3283), semicolon: None })"];
    3282 -> 3283;
    3283 [label="If(If { syntax: 3283, if_: Some(3284), lparen: Some(3285), condition: Some(3286), rparen: Some(3294), body: Some(3295), else_: None })"];
    3283 -> 3284;
    3284[label="if"];
    3283 -> 3285;
    3285[label="("];
    3283 -> 3286;
    3286 [label="Expr"];
    3286 -> 3289;
    3289 [label="BinaryOp(BinaryOp { syntax: 3289, lhs: Some(3287), operator: Some(3290), rhs: Some(3291) })"];
    3289 -> 3287;
    3287 [label="Identifier"];
    3287 -> 3288;
    3288[label="Target"];
    3289 -> 3290;
    3290[label="=="];
    3289 -> 3291;
    3291 [label="Expr"];
    3291 -> 3292;
    3292 [label="Literal"];
    3292 -> 3293;
    3293[label="Null"];
    3283 -> 3294;
    3294[label=")"];
    3283 -> 3295;
    3295 [label="Statement(Statement { syntax: 3295, statement: Some(3296), semicolon: None })"];
    3295 -> 3296;
    3296 [label="Block(Block { syntax: 3296, lbrace: Some(3297), statements: [3298, 3324], rbrace: Some(3328) })"];
    3296 -> 3297;
    3297[label="{"];
    3296 -> 3298;
    3298 [label="Statement(Statement { syntax: 3298, statement: Some(3299), semicolon: Some(3323) })"];
    3298 -> 3299;
    3299 [label="Expr"];
    3299 -> 3307;
    3307 [label="FunctionCall(FunctionCall { syntax: 3307, lhs: Some(3302), lparen: Some(3308), args: [(3309, None)], rparen: Some(3322) })"];
    3307 -> 3302;
    3302 [label="BinaryOp(BinaryOp { syntax: 3302, lhs: Some(3300), operator: Some(3303), rhs: Some(3304) })"];
    3302 -> 3300;
    3300 [label="Identifier"];
    3300 -> 3301;
    3301[label="UI"];
    3302 -> 3303;
    3303[label="."];
    3302 -> 3304;
    3304 [label="Expr"];
    3304 -> 3305;
    3305 [label="Identifier"];
    3305 -> 3306;
    3306[label="SendChat"];
    3307 -> 3308;
    3308[label="("];
    3307 -> 3309;
    3309 [label="Expr"];
    3309 -> 3312;
    3312 [label="BinaryOp(BinaryOp { syntax: 3312, lhs: Some(3310), operator: Some(3313), rhs: Some(3314) })"];
    3312 -> 3310;
    3310 [label="Literal"];
    3310 -> 3311;
    3311[label="\"$f11Cannot find Checkpoint \""];
    3312 -> 3313;
    3313[label="^"];
    3312 -> 3314;
    3314 [label="Expr"];
    3314 -> 3317;
    3317 [label="BinaryOp(BinaryOp { syntax: 3317, lhs: Some(3315), operator: Some(3318), rhs: Some(3319) })"];
    3317 -> 3315;
    3315 [label="Identifier"];
    3315 -> 3316;
    3316[label="_Target"];
    3317 -> 3318;
    3318[label="^"];
    3317 -> 3319;
    3319 [label="Expr"];
    3319 -> 3320;
    3320 [label="Literal"];
    3320 -> 3321;
    3321[label="\"!$z\""];
    3307 -> 3322;
    3322[label=")"];
    3298 -> 3323;
    3323[label=";"];
    3296 -> 3324;
    3324 [label="Statement(Statement { syntax: 3324, statement: Some(3325), semicolon: Some(3327) })"];
    3324 -> 3325;
    3325 [label="Return(Return { syntax: 3325, return_: Some(3326), value: None })"];
    3325 -> 3326;
    3326[label="return"];
    3324 -> 3327;
    3327[label=";"];
    3296 -> 3328;
    3328[label="}"];
    3007 -> 3329;
    3329 [label="Statement(Statement { syntax: 3329, statement: Some(3330), semicolon: None })"];
    3329 -> 3330;
    3330 [label="VarDec(VarDec { syntax: 3330, declare: Some(3331), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3332), as_: None, alias: None, for_: None, target: None, assignment: Some(3334), value: Some(3335) })"];
    3330 -> 3331;
    3331[label="declare"];
    3330 -> 3332;
    3332 [label="Type(Type { syntax: 3332, basename: Some(3333), members: [], arrays: [] })"];
    3332 -> 3333;
    3333[label="Spawn"];
    3330 -> 3334;
    3334[label="="];
    3330 -> 3335;
    3335 [label="Expr"];
    3335 -> 3343;
    3343 [label="FunctionCall(FunctionCall { syntax: 3343, lhs: Some(3338), lparen: Some(3344), args: [(3345, None)], rparen: Some(3353) })"];
    3343 -> 3338;
    3338 [label="BinaryOp(BinaryOp { syntax: 3338, lhs: Some(3336), operator: Some(3339), rhs: Some(3340) })"];
    3338 -> 3336;
    3336 [label="Identifier"];
    3336 -> 3337;
    3337[label="Tools"];
    3338 -> 3339;
    3339[label="::"];
    3338 -> 3340;
    3340 [label="Expr"];
    3340 -> 3341;
    3341 [label="Identifier"];
    3341 -> 3342;
    3342[label="GetClosestSpawn"];
    3343 -> 3344;
    3344[label="("];
    3343 -> 3345;
    3345 [label="Expr"];
    3345 -> 3348;
    3348 [label="BinaryOp(BinaryOp { syntax: 3348, lhs: Some(3346), operator: Some(3349), rhs: Some(3350) })"];
    3348 -> 3346;
    3346 [label="Identifier"];
    3346 -> 3347;
    3347[label="Target"];
    3348 -> 3349;
    3349[label="."];
    3348 -> 3350;
    3350 [label="Expr"];
    3350 -> 3351;
    3351 [label="Identifier"];
    3351 -> 3352;
    3352[label="Id"];
    3343 -> 3353;
    3353[label=")"];
    3330 -> 3354;
    3354[label=";"];
    3007 -> 3355;
    3355 [label="Statement(Statement { syntax: 3355, statement: Some(3356), semicolon: None })"];
    3355 -> 3356;
    3356 [label="If(If { syntax: 3356, if_: Some(3357), lparen: Some(3358), condition: Some(3359), rparen: Some(3367), body: Some(3368), else_: None })"];
    3356 -> 3357;
    3357[label="if"];
    3356 -> 3358;
    3358[label="("];
    3356 -> 3359;
    3359 [label="Expr"];
    3359 -> 3362;
    3362 [label="BinaryOp(BinaryOp { syntax: 3362, lhs: Some(3360), operator: Some(3363), rhs: Some(3364) })"];
    3362 -> 3360;
    3360 [label="Identifier"];
    3360 -> 3361;
    3361[label="Spawn"];
    3362 -> 3363;
    3363[label="=="];
    3362 -> 3364;
    3364 [label="Expr"];
    3364 -> 3365;
    3365 [label="Literal"];
    3365 -> 3366;
    3366[label="NullId"];
    3356 -> 3367;
    3367[label=")"];
    3356 -> 3368;
    3368 [label="Statement(Statement { syntax: 3368, statement: Some(3369), semicolon: None })"];
    3368 -> 3369;
    3369 [label="Block(Block { syntax: 3369, lbrace: Some(3370), statements: [3371, 3397], rbrace: Some(3401) })"];
    3369 -> 3370;
    3370[label="{"];
    3369 -> 3371;
    3371 [label="Statement(Statement { syntax: 3371, statement: Some(3372), semicolon: Some(3396) })"];
    3371 -> 3372;
    3372 [label="Expr"];
    3372 -> 3380;
    3380 [label="FunctionCall(FunctionCall { syntax: 3380, lhs: Some(3375), lparen: Some(3381), args: [(3382, None)], rparen: Some(3395) })"];
    3380 -> 3375;
    3375 [label="BinaryOp(BinaryOp { syntax: 3375, lhs: Some(3373), operator: Some(3376), rhs: Some(3377) })"];
    3375 -> 3373;
    3373 [label="Identifier"];
    3373 -> 3374;
    3374[label="UI"];
    3375 -> 3376;
    3376[label="."];
    3375 -> 3377;
    3377 [label="Expr"];
    3377 -> 3378;
    3378 [label="Identifier"];
    3378 -> 3379;
    3379[label="SendChat"];
    3380 -> 3381;
    3381[label="("];
    3380 -> 3382;
    3382 [label="Expr"];
    3382 -> 3385;
    3385 [label="BinaryOp(BinaryOp { syntax: 3385, lhs: Some(3383), operator: Some(3386), rhs: Some(3387) })"];
    3385 -> 3383;
    3383 [label="Literal"];
    3383 -> 3384;
    3384[label="\"$f11Cannot find Spawn for Checkpoint \""];
    3385 -> 3386;
    3386[label="^"];
    3385 -> 3387;
    3387 [label="Expr"];
    3387 -> 3390;
    3390 [label="BinaryOp(BinaryOp { syntax: 3390, lhs: Some(3388), operator: Some(3391), rhs: Some(3392) })"];
    3390 -> 3388;
    3388 [label="Identifier"];
    3388 -> 3389;
    3389[label="_Target"];
    3390 -> 3391;
    3391[label="^"];
    3390 -> 3392;
    3392 [label="Expr"];
    3392 -> 3393;
    3393 [label="Literal"];
    3393 -> 3394;
    3394[label="\"!$z\""];
    3380 -> 3395;
    3395[label=")"];
    3371 -> 3396;
    3396[label=";"];
    3369 -> 3397;
    3397 [label="Statement(Statement { syntax: 3397, statement: Some(3398), semicolon: Some(3400) })"];
    3397 -> 3398;
    3398 [label="Return(Return { syntax: 3398, return_: Some(3399), value: None })"];
    3398 -> 3399;
    3399[label="return"];
    3397 -> 3400;
    3400[label=";"];
    3369 -> 3401;
    3401[label="}"];
    3007 -> 3402;
    3402 [label="Statement(Statement { syntax: 3402, statement: Some(3403), semicolon: Some(3427) })"];
    3402 -> 3403;
    3403 [label="Expr"];
    3403 -> 3411;
    3411 [label="FunctionCall(FunctionCall { syntax: 3411, lhs: Some(3406), lparen: Some(3412), args: [(3413, None)], rparen: Some(3426) })"];
    3411 -> 3406;
    3406 [label="BinaryOp(BinaryOp { syntax: 3406, lhs: Some(3404), operator: Some(3407), rhs: Some(3408) })"];
    3406 -> 3404;
    3404 [label="Identifier"];
    3404 -> 3405;
    3405[label="UI"];
    3406 -> 3407;
    3407[label="."];
    3406 -> 3408;
    3408 [label="Expr"];
    3408 -> 3409;
    3409 [label="Identifier"];
    3409 -> 3410;
    3410[label="SendChat"];
    3411 -> 3412;
    3412[label="("];
    3411 -> 3413;
    3413 [label="Expr"];
    3413 -> 3416;
    3416 [label="BinaryOp(BinaryOp { syntax: 3416, lhs: Some(3414), operator: Some(3417), rhs: Some(3418) })"];
    3416 -> 3414;
    3414 [label="Literal"];
    3414 -> 3415;
    3415[label="\"$1f1Jumping to Checkpoint \""];
    3416 -> 3417;
    3417[label="^"];
    3416 -> 3418;
    3418 [label="Expr"];
    3418 -> 3421;
    3421 [label="BinaryOp(BinaryOp { syntax: 3421, lhs: Some(3419), operator: Some(3422), rhs: Some(3423) })"];
    3421 -> 3419;
    3419 [label="Identifier"];
    3419 -> 3420;
    3420[label="_Target"];
    3421 -> 3422;
    3422[label="^"];
    3421 -> 3423;
    3423 [label="Expr"];
    3423 -> 3424;
    3424 [label="Literal"];
    3424 -> 3425;
    3425[label="\"!\""];
    3411 -> 3426;
    3426[label=")"];
    3402 -> 3427;
    3427[label=";"];
    3007 -> 3428;
    3428 [label="Statement(Statement { syntax: 3428, statement: Some(3429), semicolon: Some(3447) })"];
    3428 -> 3429;
    3429 [label="Expr"];
    3429 -> 3437;
    3437 [label="FunctionCall(FunctionCall { syntax: 3437, lhs: Some(3432), lparen: Some(3438), args: [(3439, Some(3442)), (3443, None)], rparen: Some(3446) })"];
    3437 -> 3432;
    3432 [label="BinaryOp(BinaryOp { syntax: 3432, lhs: Some(3430), operator: Some(3433), rhs: Some(3434) })"];
    3432 -> 3430;
    3430 [label="Identifier"];
    3430 -> 3431;
    3431[label="Player"];
    3432 -> 3433;
    3433[label="::"];
    3432 -> 3434;
    3434 [label="Expr"];
    3434 -> 3435;
    3435 [label="Identifier"];
    3435 -> 3436;
    3436[label="setUsedJump"];
    3437 -> 3438;
    3438[label="("];
    3437 -> 3439;
    3439 [label="Expr"];
    3439 -> 3440;
    3440 [label="Identifier"];
    3440 -> 3441;
    3441[label="_Player"];
    3437 -> 3442;
    3442[label=","];
    3437 -> 3443;
    3443 [label="Expr"];
    3443 -> 3444;
    3444 [label="Literal"];
    3444 -> 3445;
    3445[label="True"];
    3437 -> 3446;
    3446[label=")"];
    3428 -> 3447;
    3447[label=";"];
    3007 -> 3448;
    3448 [label="Statement(Statement { syntax: 3448, statement: Some(3449), semicolon: Some(3472) })"];
    3448 -> 3449;
    3449 [label="Expr"];
    3449 -> 3457;
    3457 [label="FunctionCall(FunctionCall { syntax: 3457, lhs: Some(3452), lparen: Some(3458), args: [(3459, Some(3462)), (3463, None)], rparen: Some(3471) })"];
    3457 -> 3452;
    3452 [label="BinaryOp(BinaryOp { syntax: 3452, lhs: Some(3450), operator: Some(3453), rhs: Some(3454) })"];
    3452 -> 3450;
    3450 [label="Identifier"];
    3450 -> 3451;
    3451[label="Player"];
    3452 -> 3453;
    3453[label="::"];
    3452 -> 3454;
    3454 [label="Expr"];
    3454 -> 3455;
    3455 [label="Identifier"];
    3455 -> 3456;
    3456[label="setLastCheckpoint"];
    3457 -> 3458;
    3458[label="("];
    3457 -> 3459;
    3459 [label="Expr"];
    3459 -> 3460;
    3460 [label="Identifier"];
    3460 -> 3461;
    3461[label="_Player"];
    3457 -> 3462;
    3462[label=","];
    3457 -> 3463;
    3463 [label="Expr"];
    3463 -> 3466;
    3466 [label="BinaryOp(BinaryOp { syntax: 3466, lhs: Some(3464), operator: Some(3467), rhs: Some(3468) })"];
    3466 -> 3464;
    3464 [label="Identifier"];
    3464 -> 3465;
    3465[label="Target"];
    3466 -> 3467;
    3467[label="."];
    3466 -> 3468;
    3468 [label="Expr"];
    3468 -> 3469;
    3469 [label="Identifier"];
    3469 -> 3470;
    3470[label="Id"];
    3457 -> 3471;
    3471[label=")"];
    3448 -> 3472;
    3472[label=";"];
    3007 -> 3473;
    3473 [label="Statement(Statement { syntax: 3473, statement: Some(3474), semicolon: Some(3504) })"];
    3473 -> 3474;
    3474 [label="Expr"];
    3474 -> 3477;
    3477 [label="FunctionCall(FunctionCall { syntax: 3477, lhs: Some(3475), lparen: Some(3478), args: [(3479, Some(3482)), (3483, Some(3486)), (3487, Some(3495)), (3496, Some(3499)), (3500, None)], rparen: Some(3503) })"];
    3477 -> 3475;
    3475 [label="Identifier"];
    3475 -> 3476;
    3476[label="Private_CpRestart"];
    3477 -> 3478;
    3478[label="("];
    3477 -> 3479;
    3479 [label="Expr"];
    3479 -> 3480;
    3480 [label="Identifier"];
    3480 -> 3481;
    3481[label="_Player"];
    3477 -> 3482;
    3482[label=","];
    3477 -> 3483;
    3483 [label="Expr"];
    3483 -> 3484;
    3484 [label="Literal"];
    3484 -> 3485;
    3485[label="3500"];
    3477 -> 3486;
    3486[label=","];
    3477 -> 3487;
    3487 [label="Expr"];
    3487 -> 3490;
    3490 [label="BinaryOp(BinaryOp { syntax: 3490, lhs: Some(3488), operator: Some(3491), rhs: Some(3492) })"];
    3490 -> 3488;
    3488 [label="Identifier"];
    3488 -> 3489;
    3489[label="Target"];
    3490 -> 3491;
    3491[label="."];
    3490 -> 3492;
    3492 [label="Expr"];
    3492 -> 3493;
    3493 [label="Identifier"];
    3493 -> 3494;
    3494[label="Id"];
    3477 -> 3495;
    3495[label=","];
    3477 -> 3496;
    3496 [label="Expr"];
    3496 -> 3497;
    3497 [label="Identifier"];
    3497 -> 3498;
    3498[label="Spawn"];
    3477 -> 3499;
    3499[label=","];
    3477 -> 3500;
    3500 [label="Expr"];
    3500 -> 3501;
    3501 [label="Literal"];
    3501 -> 3502;
    3502[label="False"];
    3477 -> 3503;
    3503[label=")"];
    3473 -> 3504;
    3504[label=";"];
    3007 -> 3505;
    3505 [label="Statement(Statement { syntax: 3505, statement: Some(3506), semicolon: Some(3520) })"];
    3505 -> 3506;
    3506 [label="Expr"];
    3506 -> 3514;
    3514 [label="FunctionCall(FunctionCall { syntax: 3514, lhs: Some(3509), lparen: Some(3515), args: [(3516, None)], rparen: Some(3519) })"];
    3514 -> 3509;
    3509 [label="BinaryOp(BinaryOp { syntax: 3509, lhs: Some(3507), operator: Some(3510), rhs: Some(3511) })"];
    3509 -> 3507;
    3507 [label="Identifier"];
    3507 -> 3508;
    3508[label="Player"];
    3509 -> 3510;
    3510[label="::"];
    3509 -> 3511;
    3511 [label="Expr"];
    3511 -> 3512;
    3512 [label="Identifier"];
    3512 -> 3513;
    3513[label="clearBuffTimes"];
    3514 -> 3515;
    3515[label="("];
    3514 -> 3516;
    3516 [label="Expr"];
    3516 -> 3517;
    3517 [label="Identifier"];
    3517 -> 3518;
    3518[label="_Player"];
    3514 -> 3519;
    3519[label=")"];
    3505 -> 3520;
    3520[label=";"];
    3007 -> 3521;
    3521 [label="Statement(Statement { syntax: 3521, statement: Some(3522), semicolon: None })"];
    3521 -> 3522;
    3522 [label="If(If { syntax: 3522, if_: Some(3523), lparen: Some(3524), condition: Some(3525), rparen: Some(3528), body: Some(3529), else_: None })"];
    3522 -> 3523;
    3523[label="if"];
    3522 -> 3524;
    3524[label="("];
    3522 -> 3525;
    3525 [label="Expr"];
    3525 -> 3526;
    3526 [label="Identifier"];
    3526 -> 3527;
    3527[label="G_FullAmmoSpawn"];
    3522 -> 3528;
    3528[label=")"];
    3522 -> 3529;
    3529 [label="Statement(Statement { syntax: 3529, statement: Some(3530), semicolon: None })"];
    3529 -> 3530;
    3530 [label="Block(Block { syntax: 3530, lbrace: Some(3531), statements: [3532], rbrace: Some(3548) })"];
    3530 -> 3531;
    3531[label="{"];
    3530 -> 3532;
    3532 [label="Statement(Statement { syntax: 3532, statement: Some(3533), semicolon: Some(3547) })"];
    3532 -> 3533;
    3533 [label="Expr"];
    3533 -> 3541;
    3541 [label="FunctionCall(FunctionCall { syntax: 3541, lhs: Some(3536), lparen: Some(3542), args: [(3543, None)], rparen: Some(3546) })"];
    3541 -> 3536;
    3536 [label="BinaryOp(BinaryOp { syntax: 3536, lhs: Some(3534), operator: Some(3537), rhs: Some(3538) })"];
    3536 -> 3534;
    3534 [label="Identifier"];
    3534 -> 3535;
    3535[label="Weapons"];
    3536 -> 3537;
    3537[label="::"];
    3536 -> 3538;
    3538 [label="Expr"];
    3538 -> 3539;
    3539 [label="Identifier"];
    3539 -> 3540;
    3540[label="FillUpPlayerAmmo"];
    3541 -> 3542;
    3542[label="("];
    3541 -> 3543;
    3543 [label="Expr"];
    3543 -> 3544;
    3544 [label="Identifier"];
    3544 -> 3545;
    3545[label="_Player"];
    3541 -> 3546;
    3546[label=")"];
    3532 -> 3547;
    3547[label=";"];
    3530 -> 3548;
    3548[label="}"];
    3007 -> 3549;
    3549[label="}"];
    0 -> 3550;
    3550 [label="FuncDec(FuncDec { syntax: 3550, type_: Some(3551), name: Some(3553), lparen: Some(3554), args: [3555, 3560], rparen: Some(3564), body: Some(3565) })"];
    3550 -> 3551;
    3551 [label="Type(Type { syntax: 3551, basename: Some(3552), members: [], arrays: [] })"];
    3551 -> 3552;
    3552[label="Void"];
    3550 -> 3553;
    3553[label="Private_HandleFinish"];
    3550 -> 3554;
    3554[label="("];
    3550 -> 3555;
    3555 [label="FormalArg(FormalArg { syntax: 3555, type_: Some(3556), name: Some(3558), comma: Some(3559) })"];
    3555 -> 3556;
    3556 [label="Type(Type { syntax: 3556, basename: Some(3557), members: [], arrays: [] })"];
    3556 -> 3557;
    3557[label="CSmPlayer"];
    3555 -> 3558;
    3558[label="_Player"];
    3555 -> 3559;
    3559[label=","];
    3550 -> 3560;
    3560 [label="FormalArg(FormalArg { syntax: 3560, type_: Some(3561), name: Some(3563), comma: None })"];
    3560 -> 3561;
    3561 [label="Type(Type { syntax: 3561, basename: Some(3562), members: [], arrays: [] })"];
    3561 -> 3562;
    3562[label="Ident"];
    3560 -> 3563;
    3563[label="_GoalId"];
    3550 -> 3564;
    3564[label=")"];
    3550 -> 3565;
    3565 [label="Block(Block { syntax: 3565, lbrace: Some(3566), statements: [3567, 3588, 3609, 3625, 3646, 3667, 3692, 3721, 3745, 3849, 3868, 3899, 3920, 4150], rbrace: Some(4165) })"];
    3565 -> 3566;
    3566[label="{"];
    3565 -> 3567;
    3567 [label="Statement(Statement { syntax: 3567, statement: Some(3568), semicolon: None })"];
    3567 -> 3568;
    3568 [label="VarDec(VarDec { syntax: 3568, declare: Some(3569), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3570), as_: None, alias: None, for_: None, target: None, assignment: Some(3572), value: Some(3573) })"];
    3568 -> 3569;
    3569[label="declare"];
    3568 -> 3570;
    3570 [label="Type(Type { syntax: 3570, basename: Some(3571), members: [], arrays: [] })"];
    3570 -> 3571;
    3571[label="LastCPTimes"];
    3568 -> 3572;
    3572[label="="];
    3568 -> 3573;
    3573 [label="Expr"];
    3573 -> 3581;
    3581 [label="FunctionCall(FunctionCall { syntax: 3581, lhs: Some(3576), lparen: Some(3582), args: [(3583, None)], rparen: Some(3586) })"];
    3581 -> 3576;
    3576 [label="BinaryOp(BinaryOp { syntax: 3576, lhs: Some(3574), operator: Some(3577), rhs: Some(3578) })"];
    3576 -> 3574;
    3574 [label="Identifier"];
    3574 -> 3575;
    3575[label="Player"];
    3576 -> 3577;
    3577[label="::"];
    3576 -> 3578;
    3578 [label="Expr"];
    3578 -> 3579;
    3579 [label="Identifier"];
    3579 -> 3580;
    3580[label="getLastCPTimes"];
    3581 -> 3582;
    3582[label="("];
    3581 -> 3583;
    3583 [label="Expr"];
    3583 -> 3584;
    3584 [label="Identifier"];
    3584 -> 3585;
    3585[label="_Player"];
    3581 -> 3586;
    3586[label=")"];
    3568 -> 3587;
    3587[label=";"];
    3565 -> 3588;
    3588 [label="Statement(Statement { syntax: 3588, statement: Some(3589), semicolon: None })"];
    3588 -> 3589;
    3589 [label="VarDec(VarDec { syntax: 3589, declare: Some(3590), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3591), as_: None, alias: None, for_: None, target: None, assignment: Some(3593), value: Some(3594) })"];
    3589 -> 3590;
    3590[label="declare"];
    3589 -> 3591;
    3591 [label="Type(Type { syntax: 3591, basename: Some(3592), members: [], arrays: [] })"];
    3591 -> 3592;
    3592[label="BestCPTimes"];
    3589 -> 3593;
    3593[label="="];
    3589 -> 3594;
    3594 [label="Expr"];
    3594 -> 3602;
    3602 [label="FunctionCall(FunctionCall { syntax: 3602, lhs: Some(3597), lparen: Some(3603), args: [(3604, None)], rparen: Some(3607) })"];
    3602 -> 3597;
    3597 [label="BinaryOp(BinaryOp { syntax: 3597, lhs: Some(3595), operator: Some(3598), rhs: Some(3599) })"];
    3597 -> 3595;
    3595 [label="Identifier"];
    3595 -> 3596;
    3596[label="Player"];
    3597 -> 3598;
    3598[label="::"];
    3597 -> 3599;
    3599 [label="Expr"];
    3599 -> 3600;
    3600 [label="Identifier"];
    3600 -> 3601;
    3601[label="getBestCPTimes"];
    3602 -> 3603;
    3603[label="("];
    3602 -> 3604;
    3604 [label="Expr"];
    3604 -> 3605;
    3605 [label="Identifier"];
    3605 -> 3606;
    3606[label="_Player"];
    3602 -> 3607;
    3607[label=")"];
    3589 -> 3608;
    3608[label=";"];
    3565 -> 3609;
    3609 [label="Statement(Statement { syntax: 3609, statement: Some(3610), semicolon: None })"];
    3609 -> 3610;
    3610 [label="VarDec(VarDec { syntax: 3610, declare: Some(3611), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3612), as_: None, alias: None, for_: None, target: None, assignment: Some(3614), value: Some(3615) })"];
    3610 -> 3611;
    3611[label="declare"];
    3610 -> 3612;
    3612 [label="Type(Type { syntax: 3612, basename: Some(3613), members: [], arrays: [] })"];
    3612 -> 3613;
    3613[label="Goal"];
    3610 -> 3614;
    3614[label="<=>"];
    3610 -> 3615;
    3615 [label="Expr"];
    3615 -> 3618;
    3618 [label="ArrayAccess(ArrayAccess { syntax: 3618, lhs: Some(3616), lsquare: Some(3619), index: Some(3620), rsquare: Some(3623) })"];
    3618 -> 3616;
    3616 [label="Identifier"];
    3616 -> 3617;
    3617[label="MapLandmarks"];
    3618 -> 3619;
    3619[label="["];
    3618 -> 3620;
    3620 [label="Expr"];
    3620 -> 3621;
    3621 [label="Identifier"];
    3621 -> 3622;
    3622[label="_GoalId"];
    3618 -> 3623;
    3623[label="]"];
    3610 -> 3624;
    3624[label=";"];
    3565 -> 3625;
    3625 [label="Statement(Statement { syntax: 3625, statement: Some(3626), semicolon: None })"];
    3625 -> 3626;
    3626 [label="VarDec(VarDec { syntax: 3626, declare: Some(3627), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3628), as_: None, alias: None, for_: None, target: None, assignment: Some(3630), value: Some(3631) })"];
    3626 -> 3627;
    3627[label="declare"];
    3626 -> 3628;
    3628 [label="Type(Type { syntax: 3628, basename: Some(3629), members: [], arrays: [] })"];
    3628 -> 3629;
    3629[label="BestRun"];
    3626 -> 3630;
    3630[label="="];
    3626 -> 3631;
    3631 [label="Expr"];
    3631 -> 3639;
    3639 [label="FunctionCall(FunctionCall { syntax: 3639, lhs: Some(3634), lparen: Some(3640), args: [(3641, None)], rparen: Some(3644) })"];
    3639 -> 3634;
    3634 [label="BinaryOp(BinaryOp { syntax: 3634, lhs: Some(3632), operator: Some(3635), rhs: Some(3636) })"];
    3634 -> 3632;
    3632 [label="Identifier"];
    3632 -> 3633;
    3633[label="Player"];
    3634 -> 3635;
    3635[label="::"];
    3634 -> 3636;
    3636 [label="Expr"];
    3636 -> 3637;
    3637 [label="Identifier"];
    3637 -> 3638;
    3638[label="getBestRun"];
    3639 -> 3640;
    3640[label="("];
    3639 -> 3641;
    3641 [label="Expr"];
    3641 -> 3642;
    3642 [label="Identifier"];
    3642 -> 3643;
    3643[label="_Player"];
    3639 -> 3644;
    3644[label=")"];
    3626 -> 3645;
    3645[label=";"];
    3565 -> 3646;
    3646 [label="Statement(Statement { syntax: 3646, statement: Some(3647), semicolon: None })"];
    3646 -> 3647;
    3647 [label="VarDec(VarDec { syntax: 3647, declare: Some(3648), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3649), as_: None, alias: None, for_: None, target: None, assignment: Some(3651), value: Some(3652) })"];
    3647 -> 3648;
    3648[label="declare"];
    3647 -> 3649;
    3649 [label="Type(Type { syntax: 3649, basename: Some(3650), members: [], arrays: [] })"];
    3649 -> 3650;
    3650[label="time"];
    3647 -> 3651;
    3651[label="="];
    3647 -> 3652;
    3652 [label="Expr"];
    3652 -> 3660;
    3660 [label="FunctionCall(FunctionCall { syntax: 3660, lhs: Some(3655), lparen: Some(3661), args: [(3662, None)], rparen: Some(3665) })"];
    3660 -> 3655;
    3655 [label="BinaryOp(BinaryOp { syntax: 3655, lhs: Some(3653), operator: Some(3656), rhs: Some(3657) })"];
    3655 -> 3653;
    3653 [label="Identifier"];
    3653 -> 3654;
    3654[label="Player"];
    3655 -> 3656;
    3656[label="::"];
    3655 -> 3657;
    3657 [label="Expr"];
    3657 -> 3658;
    3658 [label="Identifier"];
    3658 -> 3659;
    3659[label="getTime"];
    3660 -> 3661;
    3661[label="("];
    3660 -> 3662;
    3662 [label="Expr"];
    3662 -> 3663;
    3663 [label="Identifier"];
    3663 -> 3664;
    3664[label="_Player"];
    3660 -> 3665;
    3665[label=")"];
    3647 -> 3666;
    3666[label=";"];
    3565 -> 3667;
    3667 [label="Statement(Statement { syntax: 3667, statement: Some(3668), semicolon: None })"];
    3667 -> 3668;
    3668 [label="VarDec(VarDec { syntax: 3668, declare: Some(3669), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3670), as_: None, alias: None, for_: None, target: None, assignment: Some(3672), value: Some(3673) })"];
    3668 -> 3669;
    3669[label="declare"];
    3668 -> 3670;
    3670 [label="Type(Type { syntax: 3670, basename: Some(3671), members: [], arrays: [] })"];
    3670 -> 3671;
    3671[label="LastRun"];
    3668 -> 3672;
    3672[label="="];
    3668 -> 3673;
    3673 [label="Expr"];
    3673 -> 3681;
    3681 [label="FunctionCall(FunctionCall { syntax: 3681, lhs: Some(3676), lparen: Some(3682), args: [(3683, Some(3686)), (3687, None)], rparen: Some(3690) })"];
    3681 -> 3676;
    3676 [label="BinaryOp(BinaryOp { syntax: 3676, lhs: Some(3674), operator: Some(3677), rhs: Some(3678) })"];
    3676 -> 3674;
    3674 [label="Identifier"];
    3674 -> 3675;
    3675[label="Player"];
    3676 -> 3677;
    3677[label="::"];
    3676 -> 3678;
    3678 [label="Expr"];
    3678 -> 3679;
    3679 [label="Identifier"];
    3679 -> 3680;
    3680[label="setLastRun"];
    3681 -> 3682;
    3682[label="("];
    3681 -> 3683;
    3683 [label="Expr"];
    3683 -> 3684;
    3684 [label="Identifier"];
    3684 -> 3685;
    3685[label="_Player"];
    3681 -> 3686;
    3686[label=","];
    3681 -> 3687;
    3687 [label="Expr"];
    3687 -> 3688;
    3688 [label="Identifier"];
    3688 -> 3689;
    3689[label="time"];
    3681 -> 3690;
    3690[label=")"];
    3668 -> 3691;
    3691[label=";"];
    3565 -> 3692;
    3692 [label="Statement(Statement { syntax: 3692, statement: Some(3696), semicolon: Some(3720) })"];
    3692 -> 3693;
    3693 [label="Expr"];
    3693 -> 3694;
    3694 [label="Identifier"];
    3694 -> 3695;
    3695[label="LastCPTimes"];
    3692 -> 3696;
    3696 [label="Assignment(Assignment { syntax: 3696, lvalue: Some(3693), operator: Some(3697), rvalue: Some(3698) })"];
    3696 -> 3697;
    3697[label="="];
    3696 -> 3698;
    3698 [label="Expr"];
    3698 -> 3706;
    3706 [label="FunctionCall(FunctionCall { syntax: 3706, lhs: Some(3701), lparen: Some(3707), args: [(3708, Some(3711)), (3712, Some(3715)), (3716, None)], rparen: Some(3719) })"];
    3706 -> 3701;
    3701 [label="BinaryOp(BinaryOp { syntax: 3701, lhs: Some(3699), operator: Some(3702), rhs: Some(3703) })"];
    3701 -> 3699;
    3699 [label="Identifier"];
    3699 -> 3700;
    3700[label="Player"];
    3701 -> 3702;
    3702[label="::"];
    3701 -> 3703;
    3703 [label="Expr"];
    3703 -> 3704;
    3704 [label="Identifier"];
    3704 -> 3705;
    3705[label="setLastCPTimes"];
    3706 -> 3707;
    3707[label="("];
    3706 -> 3708;
    3708 [label="Expr"];
    3708 -> 3709;
    3709 [label="Identifier"];
    3709 -> 3710;
    3710[label="_Player"];
    3706 -> 3711;
    3711[label=","];
    3706 -> 3712;
    3712 [label="Expr"];
    3712 -> 3713;
    3713 [label="Identifier"];
    3713 -> 3714;
    3714[label="_GoalId"];
    3706 -> 3715;
    3715[label=","];
    3706 -> 3716;
    3716 [label="Expr"];
    3716 -> 3717;
    3717 [label="Identifier"];
    3717 -> 3718;
    3718[label="time"];
    3706 -> 3719;
    3719[label=")"];
    3692 -> 3720;
    3720[label=";"];
    3565 -> 3721;
    3721 [label="Statement(Statement { syntax: 3721, statement: Some(3722), semicolon: Some(3744) })"];
    3721 -> 3722;
    3722 [label="Expr"];
    3722 -> 3730;
    3730 [label="FunctionCall(FunctionCall { syntax: 3730, lhs: Some(3725), lparen: Some(3731), args: [(3732, Some(3735)), (3736, Some(3739)), (3740, None)], rparen: Some(3743) })"];
    3730 -> 3725;
    3725 [label="BinaryOp(BinaryOp { syntax: 3725, lhs: Some(3723), operator: Some(3726), rhs: Some(3727) })"];
    3725 -> 3723;
    3723 [label="Identifier"];
    3723 -> 3724;
    3724[label="TimeDiff"];
    3725 -> 3726;
    3726[label="::"];
    3725 -> 3727;
    3727 [label="Expr"];
    3727 -> 3728;
    3728 [label="Identifier"];
    3728 -> 3729;
    3729[label="UpdateLayer"];
    3730 -> 3731;
    3731[label="("];
    3730 -> 3732;
    3732 [label="Expr"];
    3732 -> 3733;
    3733 [label="Identifier"];
    3733 -> 3734;
    3734[label="_Player"];
    3730 -> 3735;
    3735[label=","];
    3730 -> 3736;
    3736 [label="Expr"];
    3736 -> 3737;
    3737 [label="Identifier"];
    3737 -> 3738;
    3738[label="LastRun"];
    3730 -> 3739;
    3739[label=","];
    3730 -> 3740;
    3740 [label="Expr"];
    3740 -> 3741;
    3741 [label="Identifier"];
    3741 -> 3742;
    3742[label="BestRun"];
    3730 -> 3743;
    3743[label=")"];
    3721 -> 3744;
    3744[label=";"];
    3565 -> 3745;
    3745 [label="Statement(Statement { syntax: 3745, statement: Some(3746), semicolon: None })"];
    3745 -> 3746;
    3746 [label="If(If { syntax: 3746, if_: Some(3747), lparen: Some(3748), condition: Some(3749), rparen: Some(3767), body: Some(3768), else_: None })"];
    3746 -> 3747;
    3747[label="if"];
    3746 -> 3748;
    3748[label="("];
    3746 -> 3749;
    3749 [label="Expr"];
    3749 -> 3757;
    3757 [label="BinaryOp(BinaryOp { syntax: 3757, lhs: Some(3752), operator: Some(3758), rhs: Some(3759) })"];
    3757 -> 3752;
    3752 [label="BinaryOp(BinaryOp { syntax: 3752, lhs: Some(3750), operator: Some(3753), rhs: Some(3754) })"];
    3752 -> 3750;
    3750 [label="Identifier"];
    3750 -> 3751;
    3751[label="LastRun"];
    3752 -> 3753;
    3753[label="<"];
    3752 -> 3754;
    3754 [label="Expr"];
    3754 -> 3755;
    3755 [label="Identifier"];
    3755 -> 3756;
    3756[label="BestRun"];
    3757 -> 3758;
    3758[label="||"];
    3757 -> 3759;
    3759 [label="Expr"];
    3759 -> 3762;
    3762 [label="BinaryOp(BinaryOp { syntax: 3762, lhs: Some(3760), operator: Some(3763), rhs: Some(3764) })"];
    3762 -> 3760;
    3760 [label="Identifier"];
    3760 -> 3761;
    3761[label="BestRun"];
    3762 -> 3763;
    3763[label="<"];
    3762 -> 3764;
    3764 [label="Expr"];
    3764 -> 3765;
    3765 [label="Literal"];
    3765 -> 3766;
    3766[label="0"];
    3746 -> 3767;
    3767[label=")"];
    3746 -> 3768;
    3768 [label="Statement(Statement { syntax: 3768, statement: Some(3769), semicolon: None })"];
    3768 -> 3769;
    3769 [label="Block(Block { syntax: 3769, lbrace: Some(3770), statements: [3771, 3796, 3821, 3837], rbrace: Some(3848) })"];
    3769 -> 3770;
    3770[label="{"];
    3769 -> 3771;
    3771 [label="Statement(Statement { syntax: 3771, statement: Some(3775), semicolon: Some(3795) })"];
    3771 -> 3772;
    3772 [label="Expr"];
    3772 -> 3773;
    3773 [label="Identifier"];
    3773 -> 3774;
    3774[label="BestRun"];
    3771 -> 3775;
    3775 [label="Assignment(Assignment { syntax: 3775, lvalue: Some(3772), operator: Some(3776), rvalue: Some(3777) })"];
    3775 -> 3776;
    3776[label="="];
    3775 -> 3777;
    3777 [label="Expr"];
    3777 -> 3785;
    3785 [label="FunctionCall(FunctionCall { syntax: 3785, lhs: Some(3780), lparen: Some(3786), args: [(3787, Some(3790)), (3791, None)], rparen: Some(3794) })"];
    3785 -> 3780;
    3780 [label="BinaryOp(BinaryOp { syntax: 3780, lhs: Some(3778), operator: Some(3781), rhs: Some(3782) })"];
    3780 -> 3778;
    3778 [label="Identifier"];
    3778 -> 3779;
    3779[label="Player"];
    3780 -> 3781;
    3781[label="::"];
    3780 -> 3782;
    3782 [label="Expr"];
    3782 -> 3783;
    3783 [label="Identifier"];
    3783 -> 3784;
    3784[label="setBestRun"];
    3785 -> 3786;
    3786[label="("];
    3785 -> 3787;
    3787 [label="Expr"];
    3787 -> 3788;
    3788 [label="Identifier"];
    3788 -> 3789;
    3789[label="_Player"];
    3785 -> 3790;
    3790[label=","];
    3785 -> 3791;
    3791 [label="Expr"];
    3791 -> 3792;
    3792 [label="Identifier"];
    3792 -> 3793;
    3793[label="LastRun"];
    3785 -> 3794;
    3794[label=")"];
    3771 -> 3795;
    3795[label=";"];
    3769 -> 3796;
    3796 [label="Statement(Statement { syntax: 3796, statement: Some(3800), semicolon: Some(3820) })"];
    3796 -> 3797;
    3797 [label="Expr"];
    3797 -> 3798;
    3798 [label="Identifier"];
    3798 -> 3799;
    3799[label="BestCPTimes"];
    3796 -> 3800;
    3800 [label="Assignment(Assignment { syntax: 3800, lvalue: Some(3797), operator: Some(3801), rvalue: Some(3802) })"];
    3800 -> 3801;
    3801[label="="];
    3800 -> 3802;
    3802 [label="Expr"];
    3802 -> 3810;
    3810 [label="FunctionCall(FunctionCall { syntax: 3810, lhs: Some(3805), lparen: Some(3811), args: [(3812, Some(3815)), (3816, None)], rparen: Some(3819) })"];
    3810 -> 3805;
    3805 [label="BinaryOp(BinaryOp { syntax: 3805, lhs: Some(3803), operator: Some(3806), rhs: Some(3807) })"];
    3805 -> 3803;
    3803 [label="Identifier"];
    3803 -> 3804;
    3804[label="Player"];
    3805 -> 3806;
    3806[label="::"];
    3805 -> 3807;
    3807 [label="Expr"];
    3807 -> 3808;
    3808 [label="Identifier"];
    3808 -> 3809;
    3809[label="setBestCPTimes"];
    3810 -> 3811;
    3811[label="("];
    3810 -> 3812;
    3812 [label="Expr"];
    3812 -> 3813;
    3813 [label="Identifier"];
    3813 -> 3814;
    3814[label="_Player"];
    3810 -> 3815;
    3815[label=","];
    3810 -> 3816;
    3816 [label="Expr"];
    3816 -> 3817;
    3817 [label="Identifier"];
    3817 -> 3818;
    3818[label="LastCPTimes"];
    3810 -> 3819;
    3819[label=")"];
    3796 -> 3820;
    3820[label=";"];
    3769 -> 3821;
    3821 [label="Statement(Statement { syntax: 3821, statement: Some(3822), semicolon: Some(3836) })"];
    3821 -> 3822;
    3822 [label="Expr"];
    3822 -> 3830;
    3830 [label="FunctionCall(FunctionCall { syntax: 3830, lhs: Some(3825), lparen: Some(3831), args: [(3832, None)], rparen: Some(3835) })"];
    3830 -> 3825;
    3825 [label="BinaryOp(BinaryOp { syntax: 3825, lhs: Some(3823), operator: Some(3826), rhs: Some(3827) })"];
    3825 -> 3823;
    3823 [label="Identifier"];
    3823 -> 3824;
    3824[label="CPTimes"];
    3825 -> 3826;
    3826[label="::"];
    3825 -> 3827;
    3827 [label="Expr"];
    3827 -> 3828;
    3828 [label="Identifier"];
    3828 -> 3829;
    3829[label="UpdateLayer"];
    3830 -> 3831;
    3831[label="("];
    3830 -> 3832;
    3832 [label="Expr"];
    3832 -> 3833;
    3833 [label="Identifier"];
    3833 -> 3834;
    3834[label="_Player"];
    3830 -> 3835;
    3835[label=")"];
    3821 -> 3836;
    3836[label=";"];
    3769 -> 3837;
    3837 [label="Statement(Statement { syntax: 3837, statement: Some(3838), semicolon: Some(3847) })"];
    3837 -> 3838;
    3838 [label="Expr"];
    3838 -> 3841;
    3841 [label="FunctionCall(FunctionCall { syntax: 3841, lhs: Some(3839), lparen: Some(3842), args: [(3843, None)], rparen: Some(3846) })"];
    3841 -> 3839;
    3839 [label="Identifier"];
    3839 -> 3840;
    3840[label="Private_UpdatePlayerRsCounter"];
    3841 -> 3842;
    3842[label="("];
    3841 -> 3843;
    3843 [label="Expr"];
    3843 -> 3844;
    3844 [label="Identifier"];
    3844 -> 3845;
    3845[label="_Player"];
    3841 -> 3846;
    3846[label=")"];
    3837 -> 3847;
    3847[label=";"];
    3769 -> 3848;
    3848[label="}"];
    3565 -> 3849;
    3849 [label="Statement(Statement { syntax: 3849, statement: Some(3850), semicolon: Some(3867) })"];
    3849 -> 3850;
    3850 [label="Expr"];
    3850 -> 3853;
    3853 [label="FunctionCall(FunctionCall { syntax: 3853, lhs: Some(3851), lparen: Some(3854), args: [(3855, Some(3858)), (3859, Some(3862)), (3863, None)], rparen: Some(3866) })"];
    3853 -> 3851;
    3851 [label="Identifier"];
    3851 -> 3852;
    3852[label="Private_SendFinishedRun"];
    3853 -> 3854;
    3854[label="("];
    3853 -> 3855;
    3855 [label="Expr"];
    3855 -> 3856;
    3856 [label="Identifier"];
    3856 -> 3857;
    3857[label="_Player"];
    3853 -> 3858;
    3858[label=","];
    3853 -> 3859;
    3859 [label="Expr"];
    3859 -> 3860;
    3860 [label="Identifier"];
    3860 -> 3861;
    3861[label="LastRun"];
    3853 -> 3862;
    3862[label=","];
    3853 -> 3863;
    3863 [label="Expr"];
    3863 -> 3864;
    3864 [label="Identifier"];
    3864 -> 3865;
    3865[label="_GoalId"];
    3853 -> 3866;
    3866[label=")"];
    3849 -> 3867;
    3867[label=";"];
    3565 -> 3868;
    3868 [label="Statement(Statement { syntax: 3868, statement: Some(3869), semicolon: Some(3898) })"];
    3868 -> 3869;
    3869 [label="Expr"];
    3869 -> 3877;
    3877 [label="FunctionCall(FunctionCall { syntax: 3877, lhs: Some(3872), lparen: Some(3878), args: [(3879, Some(3882)), (3883, None)], rparen: Some(3897) })"];
    3877 -> 3872;
    3872 [label="BinaryOp(BinaryOp { syntax: 3872, lhs: Some(3870), operator: Some(3873), rhs: Some(3874) })"];
    3872 -> 3870;
    3870 [label="Identifier"];
    3870 -> 3871;
    3871[label="XmlRpc"];
    3872 -> 3873;
    3873[label="."];
    3872 -> 3874;
    3874 [label="Expr"];
    3874 -> 3875;
    3875 [label="Identifier"];
    3875 -> 3876;
    3876[label="SendCallback"];
    3877 -> 3878;
    3878[label="("];
    3877 -> 3879;
    3879 [label="Expr"];
    3879 -> 3880;
    3880 [label="Literal"];
    3880 -> 3881;
    3881[label="\"Obstacle_OnFinish\""];
    3877 -> 3882;
    3882[label=","];
    3877 -> 3883;
    3883 [label="Expr"];
    3883 -> 3891;
    3891 [label="FunctionCall(FunctionCall { syntax: 3891, lhs: Some(3886), lparen: Some(3892), args: [(3893, None)], rparen: Some(3896) })"];
    3891 -> 3886;
    3886 [label="BinaryOp(BinaryOp { syntax: 3886, lhs: Some(3884), operator: Some(3887), rhs: Some(3888) })"];
    3886 -> 3884;
    3884 [label="Identifier"];
    3884 -> 3885;
    3885[label="Player"];
    3886 -> 3887;
    3887[label="::"];
    3886 -> 3888;
    3888 [label="Expr"];
    3888 -> 3889;
    3889 [label="Identifier"];
    3889 -> 3890;
    3890[label="ToJSON"];
    3891 -> 3892;
    3892[label="("];
    3891 -> 3893;
    3893 [label="Expr"];
    3893 -> 3894;
    3894 [label="Identifier"];
    3894 -> 3895;
    3895[label="_Player"];
    3891 -> 3896;
    3896[label=")"];
    3877 -> 3897;
    3897[label=")"];
    3868 -> 3898;
    3898[label=";"];
    3565 -> 3899;
    3899 [label="Statement(Statement { syntax: 3899, statement: Some(3900), semicolon: None })"];
    3899 -> 3900;
    3900 [label="VarDec(VarDec { syntax: 3900, declare: Some(3901), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3902), as_: None, alias: None, for_: None, target: None, assignment: Some(3904), value: Some(3905) })"];
    3900 -> 3901;
    3901[label="declare"];
    3900 -> 3902;
    3902 [label="Type(Type { syntax: 3902, basename: Some(3903), members: [], arrays: [] })"];
    3902 -> 3903;
    3903[label="UI"];
    3900 -> 3904;
    3904[label="<=>"];
    3900 -> 3905;
    3905 [label="Expr"];
    3905 -> 3913;
    3913 [label="FunctionCall(FunctionCall { syntax: 3913, lhs: Some(3908), lparen: Some(3914), args: [(3915, None)], rparen: Some(3918) })"];
    3913 -> 3908;
    3908 [label="BinaryOp(BinaryOp { syntax: 3908, lhs: Some(3906), operator: Some(3909), rhs: Some(3910) })"];
    3908 -> 3906;
    3906 [label="Identifier"];
    3906 -> 3907;
    3907[label="UIManager"];
    3908 -> 3909;
    3909[label="."];
    3908 -> 3910;
    3910 [label="Expr"];
    3910 -> 3911;
    3911 [label="Identifier"];
    3911 -> 3912;
    3912[label="GetUI"];
    3913 -> 3914;
    3914[label="("];
    3913 -> 3915;
    3915 [label="Expr"];
    3915 -> 3916;
    3916 [label="Identifier"];
    3916 -> 3917;
    3917[label="_Player"];
    3913 -> 3918;
    3918[label=")"];
    3900 -> 3919;
    3919[label=";"];
    3565 -> 3920;
    3920 [label="Statement(Statement { syntax: 3920, statement: Some(3921), semicolon: None })"];
    3920 -> 3921;
    3921 [label="If(If { syntax: 3921, if_: Some(3922), lparen: Some(3923), condition: Some(3924), rparen: Some(3932), body: Some(3933), else_: None })"];
    3921 -> 3922;
    3922[label="if"];
    3921 -> 3923;
    3923[label="("];
    3921 -> 3924;
    3924 [label="Expr"];
    3924 -> 3927;
    3927 [label="BinaryOp(BinaryOp { syntax: 3927, lhs: Some(3925), operator: Some(3928), rhs: Some(3929) })"];
    3927 -> 3925;
    3925 [label="Identifier"];
    3925 -> 3926;
    3926[label="UI"];
    3927 -> 3928;
    3928[label="!="];
    3927 -> 3929;
    3929 [label="Expr"];
    3929 -> 3930;
    3930 [label="Literal"];
    3930 -> 3931;
    3931[label="Null"];
    3921 -> 3932;
    3932[label=")"];
    3921 -> 3933;
    3933 [label="Statement(Statement { syntax: 3933, statement: Some(3934), semicolon: None })"];
    3933 -> 3934;
    3934 [label="Block(Block { syntax: 3934, lbrace: Some(3935), statements: [3936, 3961, 3971, 3981, 3991, 4044], rbrace: Some(4149) })"];
    3934 -> 3935;
    3935[label="{"];
    3934 -> 3936;
    3936 [label="Statement(Statement { syntax: 3936, statement: Some(3937), semicolon: None })"];
    3936 -> 3937;
    3937 [label="VarDec(VarDec { syntax: 3937, declare: Some(3938), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3939), as_: None, alias: None, for_: None, target: None, assignment: Some(3941), value: Some(3942) })"];
    3937 -> 3938;
    3938[label="declare"];
    3937 -> 3939;
    3939 [label="Type(Type { syntax: 3939, basename: Some(3940), members: [], arrays: [] })"];
    3939 -> 3940;
    3940[label="Time"];
    3937 -> 3941;
    3941[label="="];
    3937 -> 3942;
    3942 [label="Expr"];
    3942 -> 3950;
    3950 [label="FunctionCall(FunctionCall { syntax: 3950, lhs: Some(3945), lparen: Some(3951), args: [(3952, Some(3955)), (3956, None)], rparen: Some(3959) })"];
    3950 -> 3945;
    3945 [label="BinaryOp(BinaryOp { syntax: 3945, lhs: Some(3943), operator: Some(3946), rhs: Some(3947) })"];
    3945 -> 3943;
    3943 [label="Identifier"];
    3943 -> 3944;
    3944[label="TL"];
    3945 -> 3946;
    3946[label="::"];
    3945 -> 3947;
    3947 [label="Expr"];
    3947 -> 3948;
    3948 [label="Identifier"];
    3948 -> 3949;
    3949[label="TimeToText"];
    3950 -> 3951;
    3951[label="("];
    3950 -> 3952;
    3952 [label="Expr"];
    3952 -> 3953;
    3953 [label="Identifier"];
    3953 -> 3954;
    3954[label="LastRun"];
    3950 -> 3955;
    3955[label=","];
    3950 -> 3956;
    3956 [label="Expr"];
    3956 -> 3957;
    3957 [label="Literal"];
    3957 -> 3958;
    3958[label="True"];
    3950 -> 3959;
    3959[label=")"];
    3937 -> 3960;
    3960[label=";"];
    3934 -> 3961;
    3961 [label="Statement(Statement { syntax: 3961, statement: Some(3962), semicolon: None })"];
    3961 -> 3962;
    3962 [label="VarDec(VarDec { syntax: 3962, declare: Some(3963), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3964), as_: None, alias: None, for_: None, target: None, assignment: Some(3966), value: Some(3967) })"];
    3962 -> 3963;
    3963[label="declare"];
    3962 -> 3964;
    3964 [label="Type(Type { syntax: 3964, basename: Some(3965), members: [], arrays: [] })"];
    3964 -> 3965;
    3965[label="Variant"];
    3962 -> 3966;
    3966[label="="];
    3962 -> 3967;
    3967 [label="Expr"];
    3967 -> 3968;
    3968 [label="Literal"];
    3968 -> 3969;
    3969[label="1"];
    3962 -> 3970;
    3970[label=";"];
    3934 -> 3971;
    3971 [label="Statement(Statement { syntax: 3971, statement: Some(3972), semicolon: None })"];
    3971 -> 3972;
    3972 [label="VarDec(VarDec { syntax: 3972, declare: Some(3973), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3974), as_: None, alias: None, for_: None, target: None, assignment: Some(3976), value: Some(3977) })"];
    3972 -> 3973;
    3973[label="declare"];
    3972 -> 3974;
    3974 [label="Type(Type { syntax: 3974, basename: Some(3975), members: [], arrays: [] })"];
    3974 -> 3975;
    3975[label="Color"];
    3972 -> 3976;
    3976[label="="];
    3972 -> 3977;
    3977 [label="Expr"];
    3977 -> 3978;
    3978 [label="Literal"];
    3978 -> 3979;
    3979[label="\"$f00\""];
    3972 -> 3980;
    3980[label=";"];
    3934 -> 3981;
    3981 [label="Statement(Statement { syntax: 3981, statement: Some(3982), semicolon: None })"];
    3981 -> 3982;
    3982 [label="VarDec(VarDec { syntax: 3982, declare: Some(3983), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(3984), as_: None, alias: None, for_: None, target: None, assignment: Some(3986), value: Some(3987) })"];
    3982 -> 3983;
    3983[label="declare"];
    3982 -> 3984;
    3984 [label="Type(Type { syntax: 3984, basename: Some(3985), members: [], arrays: [] })"];
    3984 -> 3985;
    3985[label="message"];
    3982 -> 3986;
    3986[label="="];
    3982 -> 3987;
    3987 [label="Expr"];
    3987 -> 3988;
    3988 [label="Literal"];
    3988 -> 3989;
    3989[label="\"\""];
    3982 -> 3990;
    3990[label=";"];
    3934 -> 3991;
    3991 [label="Statement(Statement { syntax: 3991, statement: Some(3992), semicolon: None })"];
    3991 -> 3992;
    3992 [label="If(If { syntax: 3992, if_: Some(3993), lparen: Some(3994), condition: Some(3995), rparen: Some(4003), body: Some(4004), else_: None })"];
    3992 -> 3993;
    3993[label="if"];
    3992 -> 3994;
    3994[label="("];
    3992 -> 3995;
    3995 [label="Expr"];
    3995 -> 3998;
    3998 [label="BinaryOp(BinaryOp { syntax: 3998, lhs: Some(3996), operator: Some(3999), rhs: Some(4000) })"];
    3998 -> 3996;
    3996 [label="Identifier"];
    3996 -> 3997;
    3997[label="BestRun"];
    3998 -> 3999;
    3999[label="=="];
    3998 -> 4000;
    4000 [label="Expr"];
    4000 -> 4001;
    4001 [label="Identifier"];
    4001 -> 4002;
    4002[label="LastRun"];
    3992 -> 4003;
    4003[label=")"];
    3992 -> 4004;
    4004 [label="Statement(Statement { syntax: 4004, statement: Some(4005), semicolon: None })"];
    4004 -> 4005;
    4005 [label="Block(Block { syntax: 4005, lbrace: Some(4006), statements: [4007, 4017, 4027], rbrace: Some(4043) })"];
    4005 -> 4006;
    4006[label="{"];
    4005 -> 4007;
    4007 [label="Statement(Statement { syntax: 4007, statement: Some(4011), semicolon: Some(4016) })"];
    4007 -> 4008;
    4008 [label="Expr"];
    4008 -> 4009;
    4009 [label="Identifier"];
    4009 -> 4010;
    4010[label="Variant"];
    4007 -> 4011;
    4011 [label="Assignment(Assignment { syntax: 4011, lvalue: Some(4008), operator: Some(4012), rvalue: Some(4013) })"];
    4011 -> 4012;
    4012[label="="];
    4011 -> 4013;
    4013 [label="Expr"];
    4013 -> 4014;
    4014 [label="Literal"];
    4014 -> 4015;
    4015[label="0"];
    4007 -> 4016;
    4016[label=";"];
    4005 -> 4017;
    4017 [label="Statement(Statement { syntax: 4017, statement: Some(4021), semicolon: Some(4026) })"];
    4017 -> 4018;
    4018 [label="Expr"];
    4018 -> 4019;
    4019 [label="Identifier"];
    4019 -> 4020;
    4020[label="Color"];
    4017 -> 4021;
    4021 [label="Assignment(Assignment { syntax: 4021, lvalue: Some(4018), operator: Some(4022), rvalue: Some(4023) })"];
    4021 -> 4022;
    4022[label="="];
    4021 -> 4023;
    4023 [label="Expr"];
    4023 -> 4024;
    4024 [label="Literal"];
    4024 -> 4025;
    4025[label="\"$00f\""];
    4017 -> 4026;
    4026[label=";"];
    4005 -> 4027;
    4027 [label="Statement(Statement { syntax: 4027, statement: Some(4031), semicolon: Some(4042) })"];
    4027 -> 4028;
    4028 [label="Expr"];
    4028 -> 4029;
    4029 [label="Identifier"];
    4029 -> 4030;
    4030[label="message"];
    4027 -> 4031;
    4031 [label="Assignment(Assignment { syntax: 4031, lvalue: Some(4028), operator: Some(4032), rvalue: Some(4033) })"];
    4031 -> 4032;
    4032[label="="];
    4031 -> 4033;
    4033 [label="Expr"];
    4033 -> 4036;
    4036 [label="FunctionCall(FunctionCall { syntax: 4036, lhs: Some(4034), lparen: Some(4037), args: [(4038, None)], rparen: Some(4041) })"];
    4036 -> 4034;
    4034 [label="Identifier"];
    4034 -> 4035;
    4035[label="_"];
    4036 -> 4037;
    4037[label="("];
    4036 -> 4038;
    4038 [label="Expr"];
    4038 -> 4039;
    4039 [label="Literal"];
    4039 -> 4040;
    4040[label="\"(New Best Time!)\""];
    4036 -> 4041;
    4041[label=")"];
    4027 -> 4042;
    4042[label=";"];
    4005 -> 4043;
    4043[label="}"];
    3934 -> 4044;
    4044 [label="Statement(Statement { syntax: 4044, statement: Some(4045), semicolon: Some(4148) })"];
    4044 -> 4045;
    4045 [label="Expr"];
    4045 -> 4053;
    4053 [label="FunctionCall(FunctionCall { syntax: 4053, lhs: Some(4048), lparen: Some(4054), args: [(4055, Some(4092)), (4093, Some(4106)), (4107, Some(4115)), (4116, Some(4129)), (4130, Some(4143)), (4144, None)], rparen: Some(4147) })"];
    4053 -> 4048;
    4048 [label="BinaryOp(BinaryOp { syntax: 4048, lhs: Some(4046), operator: Some(4049), rhs: Some(4050) })"];
    4048 -> 4046;
    4046 [label="Identifier"];
    4046 -> 4047;
    4047[label="UI"];
    4048 -> 4049;
    4049[label="."];
    4048 -> 4050;
    4050 [label="Expr"];
    4050 -> 4051;
    4051 [label="Identifier"];
    4051 -> 4052;
    4052[label="SendNotice"];
    4053 -> 4054;
    4054[label="("];
    4053 -> 4055;
    4055 [label="Expr"];
    4055 -> 4063;
    4063 [label="FunctionCall(FunctionCall { syntax: 4063, lhs: Some(4058), lparen: Some(4064), args: [(4065, Some(4068)), (4069, Some(4078)), (4079, Some(4087)), (4088, None)], rparen: Some(4091) })"];
    4063 -> 4058;
    4058 [label="BinaryOp(BinaryOp { syntax: 4058, lhs: Some(4056), operator: Some(4059), rhs: Some(4060) })"];
    4058 -> 4056;
    4056 [label="Identifier"];
    4056 -> 4057;
    4057[label="TL"];
    4058 -> 4059;
    4059[label="::"];
    4058 -> 4060;
    4060 [label="Expr"];
    4060 -> 4061;
    4061 [label="Identifier"];
    4061 -> 4062;
    4062[label="Compose"];
    4063 -> 4064;
    4064[label="("];
    4063 -> 4065;
    4065 [label="Expr"];
    4065 -> 4066;
    4066 [label="Literal"];
    4066 -> 4067;
    4067[label="\"%1: $<%2$> %3\""];
    4063 -> 4068;
    4068[label=","];
    4063 -> 4069;
    4069 [label="Expr"];
    4069 -> 4072;
    4072 [label="FunctionCall(FunctionCall { syntax: 4072, lhs: Some(4070), lparen: Some(4073), args: [(4074, None)], rparen: Some(4077) })"];
    4072 -> 4070;
    4070 [label="Identifier"];
    4070 -> 4071;
    4071[label="_"];
    4072 -> 4073;
    4073[label="("];
    4072 -> 4074;
    4074 [label="Expr"];
    4074 -> 4075;
    4075 [label="Literal"];
    4075 -> 4076;
    4076[label="\"|Goal|Finish\""];
    4072 -> 4077;
    4077[label=")"];
    4063 -> 4078;
    4078[label=","];
    4063 -> 4079;
    4079 [label="Expr"];
    4079 -> 4082;
    4082 [label="BinaryOp(BinaryOp { syntax: 4082, lhs: Some(4080), operator: Some(4083), rhs: Some(4084) })"];
    4082 -> 4080;
    4080 [label="Identifier"];
    4080 -> 4081;
    4081[label="Color"];
    4082 -> 4083;
    4083[label="^"];
    4082 -> 4084;
    4084 [label="Expr"];
    4084 -> 4085;
    4085 [label="Identifier"];
    4085 -> 4086;
    4086[label="Time"];
    4063 -> 4087;
    4087[label=","];
    4063 -> 4088;
    4088 [label="Expr"];
    4088 -> 4089;
    4089 [label="Identifier"];
    4089 -> 4090;
    4090[label="message"];
    4063 -> 4091;
    4091[label=")"];
    4053 -> 4092;
    4092[label=","];
    4053 -> 4093;
    4093 [label="Expr"];
    4093 -> 4096;
    4096 [label="BinaryOp(BinaryOp { syntax: 4096, lhs: Some(4094), operator: Some(4097), rhs: Some(4098) })"];
    4096 -> 4094;
    4094 [label="Identifier"];
    4094 -> 4095;
    4095[label="CUIConfig"];
    4096 -> 4097;
    4097[label="::"];
    4096 -> 4098;
    4098 [label="Expr"];
    4098 -> 4101;
    4101 [label="BinaryOp(BinaryOp { syntax: 4101, lhs: Some(4099), operator: Some(4102), rhs: Some(4103) })"];
    4101 -> 4099;
    4099 [label="Identifier"];
    4099 -> 4100;
    4100[label="ENoticeLevel"];
    4101 -> 4102;
    4102[label="::"];
    4101 -> 4103;
    4103 [label="Expr"];
    4103 -> 4104;
    4104 [label="Identifier"];
    4104 -> 4105;
    4105[label="PlayerInfo"];
    4053 -> 4106;
    4106[label=","];
    4053 -> 4107;
    4107 [label="Expr"];
    4107 -> 4110;
    4110 [label="BinaryOp(BinaryOp { syntax: 4110, lhs: Some(4108), operator: Some(4111), rhs: Some(4112) })"];
    4110 -> 4108;
    4108 [label="Identifier"];
    4108 -> 4109;
    4109[label="_Player"];
    4110 -> 4111;
    4111[label="."];
    4110 -> 4112;
    4112 [label="Expr"];
    4112 -> 4113;
    4113 [label="Identifier"];
    4113 -> 4114;
    4114[label="User"];
    4053 -> 4115;
    4115[label=","];
    4053 -> 4116;
    4116 [label="Expr"];
    4116 -> 4119;
    4119 [label="BinaryOp(BinaryOp { syntax: 4119, lhs: Some(4117), operator: Some(4120), rhs: Some(4121) })"];
    4119 -> 4117;
    4117 [label="Identifier"];
    4117 -> 4118;
    4118[label="CUIConfig"];
    4119 -> 4120;
    4120[label="::"];
    4119 -> 4121;
    4121 [label="Expr"];
    4121 -> 4124;
    4124 [label="BinaryOp(BinaryOp { syntax: 4124, lhs: Some(4122), operator: Some(4125), rhs: Some(4126) })"];
    4124 -> 4122;
    4122 [label="Identifier"];
    4122 -> 4123;
    4123[label="EAvatarVariant"];
    4124 -> 4125;
    4125[label="::"];
    4124 -> 4126;
    4126 [label="Expr"];
    4126 -> 4127;
    4127 [label="Identifier"];
    4127 -> 4128;
    4128[label="Default"];
    4053 -> 4129;
    4129[label=","];
    4053 -> 4130;
    4130 [label="Expr"];
    4130 -> 4133;
    4133 [label="BinaryOp(BinaryOp { syntax: 4133, lhs: Some(4131), operator: Some(4134), rhs: Some(4135) })"];
    4133 -> 4131;
    4131 [label="Identifier"];
    4131 -> 4132;
    4132[label="CUIConfig"];
    4133 -> 4134;
    4134[label="::"];
    4133 -> 4135;
    4135 [label="Expr"];
    4135 -> 4138;
    4138 [label="BinaryOp(BinaryOp { syntax: 4138, lhs: Some(4136), operator: Some(4139), rhs: Some(4140) })"];
    4138 -> 4136;
    4136 [label="Identifier"];
    4136 -> 4137;
    4137[label="EUISound"];
    4138 -> 4139;
    4139[label="::"];
    4138 -> 4140;
    4140 [label="Expr"];
    4140 -> 4141;
    4141 [label="Identifier"];
    4141 -> 4142;
    4142[label="Finish"];
    4053 -> 4143;
    4143[label=","];
    4053 -> 4144;
    4144 [label="Expr"];
    4144 -> 4145;
    4145 [label="Identifier"];
    4145 -> 4146;
    4146[label="Variant"];
    4053 -> 4147;
    4147[label=")"];
    4044 -> 4148;
    4148[label=";"];
    3934 -> 4149;
    4149[label="}"];
    3565 -> 4150;
    4150 [label="Statement(Statement { syntax: 4150, statement: Some(4151), semicolon: Some(4164) })"];
    4150 -> 4151;
    4151 [label="Expr"];
    4151 -> 4154;
    4154 [label="FunctionCall(FunctionCall { syntax: 4154, lhs: Some(4152), lparen: Some(4155), args: [(4156, Some(4159)), (4160, None)], rparen: Some(4163) })"];
    4154 -> 4152;
    4152 [label="Identifier"];
    4152 -> 4153;
    4153[label="RespawnPlayer"];
    4154 -> 4155;
    4155[label="("];
    4154 -> 4156;
    4156 [label="Expr"];
    4156 -> 4157;
    4157 [label="Identifier"];
    4157 -> 4158;
    4158[label="_Player"];
    4154 -> 4159;
    4159[label=","];
    4154 -> 4160;
    4160 [label="Expr"];
    4160 -> 4161;
    4161 [label="Literal"];
    4161 -> 4162;
    4162[label="True"];
    4154 -> 4163;
    4163[label=")"];
    4150 -> 4164;
    4164[label=";"];
    3565 -> 4165;
    4165[label="}"];
    0 -> 4166;
    4166 [label="FuncDec(FuncDec { syntax: 4166, type_: Some(4167), name: Some(4169), lparen: Some(4170), args: [4171, 4176], rparen: Some(4180), body: Some(4181) })"];
    4166 -> 4167;
    4167 [label="Type(Type { syntax: 4167, basename: Some(4168), members: [], arrays: [] })"];
    4167 -> 4168;
    4168[label="Void"];
    4166 -> 4169;
    4169[label="Private_CheckpointEffect"];
    4166 -> 4170;
    4170[label="("];
    4166 -> 4171;
    4171 [label="FormalArg(FormalArg { syntax: 4171, type_: Some(4172), name: Some(4174), comma: Some(4175) })"];
    4171 -> 4172;
    4172 [label="Type(Type { syntax: 4172, basename: Some(4173), members: [], arrays: [] })"];
    4172 -> 4173;
    4173[label="CSmPlayer"];
    4171 -> 4174;
    4174[label="_Player"];
    4171 -> 4175;
    4175[label=","];
    4166 -> 4176;
    4176 [label="FormalArg(FormalArg { syntax: 4176, type_: Some(4177), name: Some(4179), comma: None })"];
    4176 -> 4177;
    4177 [label="Type(Type { syntax: 4177, basename: Some(4178), members: [], arrays: [] })"];
    4177 -> 4178;
    4178[label="Ident"];
    4176 -> 4179;
    4179[label="_CheckpointId"];
    4166 -> 4180;
    4180[label=")"];
    4166 -> 4181;
    4181 [label="Block(Block { syntax: 4181, lbrace: Some(4182), statements: [4183, 4201, 4217, 4232], rbrace: Some(4474) })"];
    4181 -> 4182;
    4182[label="{"];
    4181 -> 4183;
    4183 [label="Statement(Statement { syntax: 4183, statement: Some(4184), semicolon: None })"];
    4183 -> 4184;
    4184 [label="VarDec(VarDec { syntax: 4184, declare: Some(4185), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4186), as_: None, alias: None, for_: None, target: None, assignment: Some(4188), value: Some(4189) })"];
    4184 -> 4185;
    4185[label="declare"];
    4184 -> 4186;
    4186 [label="Type(Type { syntax: 4186, basename: Some(4187), members: [], arrays: [] })"];
    4186 -> 4187;
    4187[label="MapVersion"];
    4184 -> 4188;
    4188[label="="];
    4184 -> 4189;
    4189 [label="Expr"];
    4189 -> 4197;
    4197 [label="FunctionCall(FunctionCall { syntax: 4197, lhs: Some(4192), lparen: Some(4198), args: [], rparen: Some(4199) })"];
    4197 -> 4192;
    4192 [label="BinaryOp(BinaryOp { syntax: 4192, lhs: Some(4190), operator: Some(4193), rhs: Some(4194) })"];
    4192 -> 4190;
    4190 [label="Identifier"];
    4190 -> 4191;
    4191[label="Map"];
    4192 -> 4193;
    4193[label="::"];
    4192 -> 4194;
    4194 [label="Expr"];
    4194 -> 4195;
    4195 [label="Identifier"];
    4195 -> 4196;
    4196[label="GetMapTypeVersion"];
    4197 -> 4198;
    4198[label="("];
    4197 -> 4199;
    4199[label=")"];
    4184 -> 4200;
    4200[label=";"];
    4181 -> 4201;
    4201 [label="Statement(Statement { syntax: 4201, statement: Some(4202), semicolon: None })"];
    4201 -> 4202;
    4202 [label="VarDec(VarDec { syntax: 4202, declare: Some(4203), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4204), as_: None, alias: None, for_: None, target: None, assignment: Some(4206), value: Some(4207) })"];
    4202 -> 4203;
    4203[label="declare"];
    4202 -> 4204;
    4204 [label="Type(Type { syntax: 4204, basename: Some(4205), members: [], arrays: [] })"];
    4204 -> 4205;
    4205[label="Checkpoint"];
    4202 -> 4206;
    4206[label="<=>"];
    4202 -> 4207;
    4207 [label="Expr"];
    4207 -> 4210;
    4210 [label="ArrayAccess(ArrayAccess { syntax: 4210, lhs: Some(4208), lsquare: Some(4211), index: Some(4212), rsquare: Some(4215) })"];
    4210 -> 4208;
    4208 [label="Identifier"];
    4208 -> 4209;
    4209[label="MapLandmarks"];
    4210 -> 4211;
    4211[label="["];
    4210 -> 4212;
    4212 [label="Expr"];
    4212 -> 4213;
    4213 [label="Identifier"];
    4213 -> 4214;
    4214[label="_CheckpointId"];
    4210 -> 4215;
    4215[label="]"];
    4202 -> 4216;
    4216[label=";"];
    4181 -> 4217;
    4217 [label="Statement(Statement { syntax: 4217, statement: Some(4218), semicolon: None })"];
    4217 -> 4218;
    4218 [label="VarDec(VarDec { syntax: 4218, declare: Some(4219), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4220), as_: None, alias: None, for_: None, target: None, assignment: Some(4222), value: Some(4223) })"];
    4218 -> 4219;
    4219[label="declare"];
    4218 -> 4220;
    4220 [label="Type(Type { syntax: 4220, basename: Some(4221), members: [], arrays: [] })"];
    4220 -> 4221;
    4221[label="CheckpointName"];
    4218 -> 4222;
    4222[label="="];
    4218 -> 4223;
    4223 [label="Expr"];
    4223 -> 4226;
    4226 [label="BinaryOp(BinaryOp { syntax: 4226, lhs: Some(4224), operator: Some(4227), rhs: Some(4228) })"];
    4226 -> 4224;
    4224 [label="Identifier"];
    4224 -> 4225;
    4225[label="Checkpoint"];
    4226 -> 4227;
    4227[label="."];
    4226 -> 4228;
    4228 [label="Expr"];
    4228 -> 4229;
    4229 [label="Identifier"];
    4229 -> 4230;
    4230[label="Tag"];
    4218 -> 4231;
    4231[label=";"];
    4181 -> 4232;
    4232 [label="Statement(Statement { syntax: 4232, statement: Some(4233), semicolon: None })"];
    4232 -> 4233;
    4233 [label="If(If { syntax: 4233, if_: Some(4234), lparen: Some(4235), condition: Some(4236), rparen: Some(4244), body: Some(4245), else_: Some(4405) })"];
    4233 -> 4234;
    4234[label="if"];
    4233 -> 4235;
    4235[label="("];
    4233 -> 4236;
    4236 [label="Expr"];
    4236 -> 4239;
    4239 [label="BinaryOp(BinaryOp { syntax: 4239, lhs: Some(4237), operator: Some(4240), rhs: Some(4241) })"];
    4239 -> 4237;
    4237 [label="Identifier"];
    4237 -> 4238;
    4238[label="MapVersion"];
    4239 -> 4240;
    4240[label="<="];
    4239 -> 4241;
    4241 [label="Expr"];
    4241 -> 4242;
    4242 [label="Literal"];
    4242 -> 4243;
    4243[label="2"];
    4233 -> 4244;
    4244[label=")"];
    4233 -> 4245;
    4245 [label="Statement(Statement { syntax: 4245, statement: Some(4246), semicolon: None })"];
    4245 -> 4246;
    4246 [label="Block(Block { syntax: 4246, lbrace: Some(4247), statements: [4248], rbrace: Some(4404) })"];
    4246 -> 4247;
    4247[label="{"];
    4246 -> 4248;
    4248 [label="Statement(Statement { syntax: 4248, statement: Some(4249), semicolon: None })"];
    4248 -> 4249;
    4249 [label="If(If { syntax: 4249, if_: Some(4250), lparen: Some(4251), condition: Some(4252), rparen: Some(4271), body: Some(4272), else_: Some(4378) })"];
    4249 -> 4250;
    4250[label="if"];
    4249 -> 4251;
    4251[label="("];
    4249 -> 4252;
    4252 [label="Expr"];
    4252 -> 4266;
    4266 [label="BinaryOp(BinaryOp { syntax: 4266, lhs: Some(4260), operator: Some(4267), rhs: Some(4268) })"];
    4266 -> 4260;
    4260 [label="FunctionCall(FunctionCall { syntax: 4260, lhs: Some(4255), lparen: Some(4261), args: [(4262, None)], rparen: Some(4265) })"];
    4260 -> 4255;
    4255 [label="BinaryOp(BinaryOp { syntax: 4255, lhs: Some(4253), operator: Some(4256), rhs: Some(4257) })"];
    4255 -> 4253;
    4253 [label="Identifier"];
    4253 -> 4254;
    4254[label="TL"];
    4255 -> 4256;
    4256[label="::"];
    4255 -> 4257;
    4257 [label="Expr"];
    4257 -> 4258;
    4258 [label="Identifier"];
    4258 -> 4259;
    4259[label="Length"];
    4260 -> 4261;
    4261[label="("];
    4260 -> 4262;
    4262 [label="Expr"];
    4262 -> 4263;
    4263 [label="Identifier"];
    4263 -> 4264;
    4264[label="CheckpointName"];
    4260 -> 4265;
    4265[label=")"];
    4266 -> 4267;
    4267[label=">"];
    4266 -> 4268;
    4268 [label="Expr"];
    4268 -> 4269;
    4269 [label="Literal"];
    4269 -> 4270;
    4270[label="10"];
    4249 -> 4271;
    4271[label=")"];
    4249 -> 4272;
    4272 [label="Statement(Statement { syntax: 4272, statement: Some(4273), semicolon: None })"];
    4272 -> 4273;
    4273 [label="Block(Block { syntax: 4273, lbrace: Some(4274), statements: [4275, 4315], rbrace: Some(4377) })"];
    4273 -> 4274;
    4274[label="{"];
    4273 -> 4275;
    4275 [label="Statement(Statement { syntax: 4275, statement: Some(4276), semicolon: None })"];
    4275 -> 4276;
    4276 [label="VarDec(VarDec { syntax: 4276, declare: Some(4277), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4278), as_: None, alias: None, for_: None, target: None, assignment: Some(4280), value: Some(4281) })"];
    4276 -> 4277;
    4277[label="declare"];
    4276 -> 4278;
    4278 [label="Type(Type { syntax: 4278, basename: Some(4279), members: [], arrays: [] })"];
    4278 -> 4279;
    4279[label="CheckPointType"];
    4276 -> 4280;
    4280[label="="];
    4276 -> 4281;
    4281 [label="Expr"];
    4281 -> 4289;
    4289 [label="FunctionCall(FunctionCall { syntax: 4289, lhs: Some(4284), lparen: Some(4290), args: [(4291, None)], rparen: Some(4313) })"];
    4289 -> 4284;
    4284 [label="BinaryOp(BinaryOp { syntax: 4284, lhs: Some(4282), operator: Some(4285), rhs: Some(4286) })"];
    4284 -> 4282;
    4282 [label="Identifier"];
    4282 -> 4283;
    4283[label="TL"];
    4284 -> 4285;
    4285[label="::"];
    4284 -> 4286;
    4286 [label="Expr"];
    4286 -> 4287;
    4287 [label="Identifier"];
    4287 -> 4288;
    4288[label="ToInteger"];
    4289 -> 4290;
    4290[label="("];
    4289 -> 4291;
    4291 [label="Expr"];
    4291 -> 4299;
    4299 [label="FunctionCall(FunctionCall { syntax: 4299, lhs: Some(4294), lparen: Some(4300), args: [(4301, Some(4304)), (4305, Some(4308)), (4309, None)], rparen: Some(4312) })"];
    4299 -> 4294;
    4294 [label="BinaryOp(BinaryOp { syntax: 4294, lhs: Some(4292), operator: Some(4295), rhs: Some(4296) })"];
    4294 -> 4292;
    4292 [label="Identifier"];
    4292 -> 4293;
    4293[label="TL"];
    4294 -> 4295;
    4295[label="::"];
    4294 -> 4296;
    4296 [label="Expr"];
    4296 -> 4297;
    4297 [label="Identifier"];
    4297 -> 4298;
    4298[label="SubString"];
    4299 -> 4300;
    4300[label="("];
    4299 -> 4301;
    4301 [label="Expr"];
    4301 -> 4302;
    4302 [label="Identifier"];
    4302 -> 4303;
    4303[label="CheckpointName"];
    4299 -> 4304;
    4304[label=","];
    4299 -> 4305;
    4305 [label="Expr"];
    4305 -> 4306;
    4306 [label="Literal"];
    4306 -> 4307;
    4307[label="14"];
    4299 -> 4308;
    4308[label=","];
    4299 -> 4309;
    4309 [label="Expr"];
    4309 -> 4310;
    4310 [label="Literal"];
    4310 -> 4311;
    4311[label="1"];
    4299 -> 4312;
    4312[label=")"];
    4289 -> 4313;
    4313[label=")"];
    4276 -> 4314;
    4314[label=";"];
    4273 -> 4315;
    4315 [label="Statement(Statement { syntax: 4315, statement: Some(4316), semicolon: None })"];
    4315 -> 4316;
    4316 [label="Switch(Switch { syntax: 4316, switch: Some(4317), lparen: Some(4318), value: Some(4319), rparen: Some(4322), lbrace: Some(4323), cases: [4324], default: Some(4349), rbrace: Some(4376), is_type: false })"];
    4316 -> 4317;
    4317[label="switch"];
    4316 -> 4318;
    4318[label="("];
    4316 -> 4319;
    4319 [label="Expr"];
    4319 -> 4320;
    4320 [label="Identifier"];
    4320 -> 4321;
    4321[label="CheckPointType"];
    4316 -> 4322;
    4322[label=")"];
    4316 -> 4323;
    4323[label="{"];
    4316 -> 4324;
    4324 [label="Case(Case { syntax: 4324, case: Some(4325), value: Some(4326), colon: Some(4329), statement: Some(4330) })"];
    4324 -> 4325;
    4325[label="case"];
    4324 -> 4326;
    4326 [label="Expr"];
    4326 -> 4327;
    4327 [label="Literal"];
    4327 -> 4328;
    4328[label="3"];
    4324 -> 4329;
    4329[label=":"];
    4324 -> 4330;
    4330 [label="Statement(Statement { syntax: 4330, statement: Some(4331), semicolon: None })"];
    4330 -> 4331;
    4331 [label="Block(Block { syntax: 4331, lbrace: Some(4332), statements: [4333], rbrace: Some(4348) })"];
    4331 -> 4332;
    4332[label="{"];
    4331 -> 4333;
    4333 [label="Statement(Statement { syntax: 4333, statement: Some(4334), semicolon: Some(4347) })"];
    4333 -> 4334;
    4334 [label="Expr"];
    4334 -> 4337;
    4337 [label="FunctionCall(FunctionCall { syntax: 4337, lhs: Some(4335), lparen: Some(4338), args: [(4339, Some(4342)), (4343, None)], rparen: Some(4346) })"];
    4337 -> 4335;
    4335 [label="Identifier"];
    4335 -> 4336;
    4336[label="Private_UsePortal"];
    4337 -> 4338;
    4338[label="("];
    4337 -> 4339;
    4339 [label="Expr"];
    4339 -> 4340;
    4340 [label="Identifier"];
    4340 -> 4341;
    4341[label="_Player"];
    4337 -> 4342;
    4342[label=","];
    4337 -> 4343;
    4343 [label="Expr"];
    4343 -> 4344;
    4344 [label="Identifier"];
    4344 -> 4345;
    4345[label="_CheckpointId"];
    4337 -> 4346;
    4346[label=")"];
    4333 -> 4347;
    4347[label=";"];
    4331 -> 4348;
    4348[label="}"];
    4316 -> 4349;
    4349 [label="Default(DefaultCase { syntax: 4349, default: Some(4350), colon: Some(4351), statement: Some(4352) })"];
    4349 -> 4350;
    4350[label="default"];
    4349 -> 4351;
    4351[label=":"];
    4349 -> 4352;
    4352 [label="Statement(Statement { syntax: 4352, statement: Some(4353), semicolon: None })"];
    4352 -> 4353;
    4353 [label="Block(Block { syntax: 4353, lbrace: Some(4354), statements: [4355], rbrace: Some(4375) })"];
    4353 -> 4354;
    4354[label="{"];
    4353 -> 4355;
    4355 [label="Statement(Statement { syntax: 4355, statement: Some(4356), semicolon: Some(4374) })"];
    4355 -> 4356;
    4356 [label="Expr"];
    4356 -> 4364;
    4364 [label="FunctionCall(FunctionCall { syntax: 4364, lhs: Some(4359), lparen: Some(4365), args: [(4366, Some(4369)), (4370, None)], rparen: Some(4373) })"];
    4364 -> 4359;
    4359 [label="BinaryOp(BinaryOp { syntax: 4359, lhs: Some(4357), operator: Some(4360), rhs: Some(4361) })"];
    4359 -> 4357;
    4357 [label="Identifier"];
    4357 -> 4358;
    4358[label="Weapons"];
    4359 -> 4360;
    4360[label="::"];
    4359 -> 4361;
    4361 [label="Expr"];
    4361 -> 4362;
    4362 [label="Identifier"];
    4362 -> 4363;
    4363[label="ApplyWeaponForCheckpointType"];
    4364 -> 4365;
    4365[label="("];
    4364 -> 4366;
    4366 [label="Expr"];
    4366 -> 4367;
    4367 [label="Identifier"];
    4367 -> 4368;
    4368[label="_Player"];
    4364 -> 4369;
    4369[label=","];
    4364 -> 4370;
    4370 [label="Expr"];
    4370 -> 4371;
    4371 [label="Identifier"];
    4371 -> 4372;
    4372[label="CheckPointType"];
    4364 -> 4373;
    4373[label=")"];
    4355 -> 4374;
    4374[label=";"];
    4353 -> 4375;
    4375[label="}"];
    4316 -> 4376;
    4376[label="}"];
    4273 -> 4377;
    4377[label="}"];
    4249 -> 4378;
    4378 [label="Else(Else { syntax: 4378, else_: Some(4379), if_: None, body: Some(4380) })"];
    4378 -> 4379;
    4379[label="else"];
    4378 -> 4380;
    4380 [label="Statement(Statement { syntax: 4380, statement: Some(4381), semicolon: None })"];
    4380 -> 4381;
    4381 [label="Block(Block { syntax: 4381, lbrace: Some(4382), statements: [4383], rbrace: Some(4403) })"];
    4381 -> 4382;
    4382[label="{"];
    4381 -> 4383;
    4383 [label="Statement(Statement { syntax: 4383, statement: Some(4384), semicolon: Some(4402) })"];
    4383 -> 4384;
    4384 [label="Expr"];
    4384 -> 4392;
    4392 [label="FunctionCall(FunctionCall { syntax: 4392, lhs: Some(4387), lparen: Some(4393), args: [(4394, Some(4397)), (4398, None)], rparen: Some(4401) })"];
    4392 -> 4387;
    4387 [label="BinaryOp(BinaryOp { syntax: 4387, lhs: Some(4385), operator: Some(4388), rhs: Some(4389) })"];
    4387 -> 4385;
    4385 [label="Identifier"];
    4385 -> 4386;
    4386[label="Weapons"];
    4387 -> 4388;
    4388[label="::"];
    4387 -> 4389;
    4389 [label="Expr"];
    4389 -> 4390;
    4390 [label="Identifier"];
    4390 -> 4391;
    4391[label="ApplyWeaponForCheckpointType"];
    4392 -> 4393;
    4393[label="("];
    4392 -> 4394;
    4394 [label="Expr"];
    4394 -> 4395;
    4395 [label="Identifier"];
    4395 -> 4396;
    4396[label="_Player"];
    4392 -> 4397;
    4397[label=","];
    4392 -> 4398;
    4398 [label="Expr"];
    4398 -> 4399;
    4399 [label="Literal"];
    4399 -> 4400;
    4400[label="0"];
    4392 -> 4401;
    4401[label=")"];
    4383 -> 4402;
    4402[label=";"];
    4381 -> 4403;
    4403[label="}"];
    4246 -> 4404;
    4404[label="}"];
    4233 -> 4405;
    4405 [label="Else(Else { syntax: 4405, else_: Some(4406), if_: None, body: Some(4407) })"];
    4405 -> 4406;
    4406[label="else"];
    4405 -> 4407;
    4407 [label="Statement(Statement { syntax: 4407, statement: Some(4408), semicolon: None })"];
    4407 -> 4408;
    4408 [label="Block(Block { syntax: 4408, lbrace: Some(4409), statements: [4410, 4430, 4445], rbrace: Some(4473) })"];
    4408 -> 4409;
    4409[label="{"];
    4408 -> 4410;
    4410 [label="Statement(Statement { syntax: 4410, statement: Some(4411), semicolon: Some(4429) })"];
    4410 -> 4411;
    4411 [label="Expr"];
    4411 -> 4419;
    4419 [label="FunctionCall(FunctionCall { syntax: 4419, lhs: Some(4414), lparen: Some(4420), args: [(4421, Some(4424)), (4425, None)], rparen: Some(4428) })"];
    4419 -> 4414;
    4414 [label="BinaryOp(BinaryOp { syntax: 4414, lhs: Some(4412), operator: Some(4415), rhs: Some(4416) })"];
    4414 -> 4412;
    4412 [label="Identifier"];
    4412 -> 4413;
    4413[label="Weapons"];
    4414 -> 4415;
    4415[label="::"];
    4414 -> 4416;
    4416 [label="Expr"];
    4416 -> 4417;
    4417 [label="Identifier"];
    4417 -> 4418;
    4418[label="ApplyEffects"];
    4419 -> 4420;
    4420[label="("];
    4419 -> 4421;
    4421 [label="Expr"];
    4421 -> 4422;
    4422 [label="Identifier"];
    4422 -> 4423;
    4423[label="_Player"];
    4419 -> 4424;
    4424[label=","];
    4419 -> 4425;
    4425 [label="Expr"];
    4425 -> 4426;
    4426 [label="Identifier"];
    4426 -> 4427;
    4427[label="Checkpoint"];
    4419 -> 4428;
    4428[label=")"];
    4410 -> 4429;
    4429[label=";"];
    4408 -> 4430;
    4430 [label="Statement(Statement { syntax: 4430, statement: Some(4431), semicolon: None })"];
    4430 -> 4431;
    4431 [label="VarDec(VarDec { syntax: 4431, declare: Some(4432), netread: None, netwrite: None, persistent: None, metadata: Some(4433), type_: None, name: Some(4434), as_: None, alias: None, for_: Some(4436), target: Some(4437), assignment: Some(4440), value: Some(4441) })"];
    4431 -> 4432;
    4432[label="declare"];
    4431 -> 4433;
    4433[label="metadata"];
    4431 -> 4434;
    4434 [label="Type(Type { syntax: 4434, basename: Some(4435), members: [], arrays: [] })"];
    4434 -> 4435;
    4435[label="Meta_IsPortal"];
    4431 -> 4436;
    4436[label="for"];
    4431 -> 4437;
    4437 [label="Expr"];
    4437 -> 4438;
    4438 [label="Identifier"];
    4438 -> 4439;
    4439[label="Checkpoint"];
    4431 -> 4440;
    4440[label="="];
    4431 -> 4441;
    4441 [label="Expr"];
    4441 -> 4442;
    4442 [label="Literal"];
    4442 -> 4443;
    4443[label="False"];
    4431 -> 4444;
    4444[label=";"];
    4408 -> 4445;
    4445 [label="Statement(Statement { syntax: 4445, statement: Some(4446), semicolon: None })"];
    4445 -> 4446;
    4446 [label="If(If { syntax: 4446, if_: Some(4447), lparen: Some(4448), condition: Some(4449), rparen: Some(4452), body: Some(4453), else_: None })"];
    4446 -> 4447;
    4447[label="if"];
    4446 -> 4448;
    4448[label="("];
    4446 -> 4449;
    4449 [label="Expr"];
    4449 -> 4450;
    4450 [label="Identifier"];
    4450 -> 4451;
    4451[label="Meta_IsPortal"];
    4446 -> 4452;
    4452[label=")"];
    4446 -> 4453;
    4453 [label="Statement(Statement { syntax: 4453, statement: Some(4454), semicolon: Some(4472) })"];
    4453 -> 4454;
    4454 [label="Expr"];
    4454 -> 4457;
    4457 [label="FunctionCall(FunctionCall { syntax: 4457, lhs: Some(4455), lparen: Some(4458), args: [(4459, Some(4462)), (4463, None)], rparen: Some(4471) })"];
    4457 -> 4455;
    4455 [label="Identifier"];
    4455 -> 4456;
    4456[label="Private_UsePortal"];
    4457 -> 4458;
    4458[label="("];
    4457 -> 4459;
    4459 [label="Expr"];
    4459 -> 4460;
    4460 [label="Identifier"];
    4460 -> 4461;
    4461[label="_Player"];
    4457 -> 4462;
    4462[label=","];
    4457 -> 4463;
    4463 [label="Expr"];
    4463 -> 4466;
    4466 [label="BinaryOp(BinaryOp { syntax: 4466, lhs: Some(4464), operator: Some(4467), rhs: Some(4468) })"];
    4466 -> 4464;
    4464 [label="Identifier"];
    4464 -> 4465;
    4465[label="Checkpoint"];
    4466 -> 4467;
    4467[label="."];
    4466 -> 4468;
    4468 [label="Expr"];
    4468 -> 4469;
    4469 [label="Identifier"];
    4469 -> 4470;
    4470[label="Id"];
    4457 -> 4471;
    4471[label=")"];
    4453 -> 4472;
    4472[label=";"];
    4408 -> 4473;
    4473[label="}"];
    4181 -> 4474;
    4474[label="}"];
    0 -> 4475;
    4475 [label="FuncDec(FuncDec { syntax: 4475, type_: Some(4476), name: Some(4478), lparen: Some(4479), args: [4480, 4485], rparen: Some(4489), body: Some(4490) })"];
    4475 -> 4476;
    4476 [label="Type(Type { syntax: 4476, basename: Some(4477), members: [], arrays: [] })"];
    4476 -> 4477;
    4477[label="Void"];
    4475 -> 4478;
    4478[label="Private_HandleCheckpoint"];
    4475 -> 4479;
    4479[label="("];
    4475 -> 4480;
    4480 [label="FormalArg(FormalArg { syntax: 4480, type_: Some(4481), name: Some(4483), comma: Some(4484) })"];
    4480 -> 4481;
    4481 [label="Type(Type { syntax: 4481, basename: Some(4482), members: [], arrays: [] })"];
    4481 -> 4482;
    4482[label="CSmPlayer"];
    4480 -> 4483;
    4483[label="_Player"];
    4480 -> 4484;
    4484[label=","];
    4475 -> 4485;
    4485 [label="FormalArg(FormalArg { syntax: 4485, type_: Some(4486), name: Some(4488), comma: None })"];
    4485 -> 4486;
    4486 [label="Type(Type { syntax: 4486, basename: Some(4487), members: [], arrays: [] })"];
    4486 -> 4487;
    4487[label="Ident"];
    4485 -> 4488;
    4488[label="_CheckpointId"];
    4475 -> 4489;
    4489[label=")"];
    4475 -> 4490;
    4490 [label="Block(Block { syntax: 4490, lbrace: Some(4491), statements: [4492, 4508, 4529, 4550, 4571, 4595, 4686, 4706, 4721, 4752, 4763, 4784, 4806, 4816, 4841, 4864, 4888], rbrace: Some(4959) })"];
    4490 -> 4491;
    4491[label="{"];
    4490 -> 4492;
    4492 [label="Statement(Statement { syntax: 4492, statement: Some(4493), semicolon: None })"];
    4492 -> 4493;
    4493 [label="VarDec(VarDec { syntax: 4493, declare: Some(4494), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4495), as_: None, alias: None, for_: None, target: None, assignment: Some(4497), value: Some(4498) })"];
    4493 -> 4494;
    4494[label="declare"];
    4493 -> 4495;
    4495 [label="Type(Type { syntax: 4495, basename: Some(4496), members: [], arrays: [] })"];
    4495 -> 4496;
    4496[label="Checkpoint"];
    4493 -> 4497;
    4497[label="<=>"];
    4493 -> 4498;
    4498 [label="Expr"];
    4498 -> 4501;
    4501 [label="ArrayAccess(ArrayAccess { syntax: 4501, lhs: Some(4499), lsquare: Some(4502), index: Some(4503), rsquare: Some(4506) })"];
    4501 -> 4499;
    4499 [label="Identifier"];
    4499 -> 4500;
    4500[label="MapLandmarks"];
    4501 -> 4502;
    4502[label="["];
    4501 -> 4503;
    4503 [label="Expr"];
    4503 -> 4504;
    4504 [label="Identifier"];
    4504 -> 4505;
    4505[label="_CheckpointId"];
    4501 -> 4506;
    4506[label="]"];
    4493 -> 4507;
    4507[label=";"];
    4490 -> 4508;
    4508 [label="Statement(Statement { syntax: 4508, statement: Some(4509), semicolon: None })"];
    4508 -> 4509;
    4509 [label="VarDec(VarDec { syntax: 4509, declare: Some(4510), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4511), as_: None, alias: None, for_: None, target: None, assignment: Some(4513), value: Some(4514) })"];
    4509 -> 4510;
    4510[label="declare"];
    4509 -> 4511;
    4511 [label="Type(Type { syntax: 4511, basename: Some(4512), members: [], arrays: [] })"];
    4511 -> 4512;
    4512[label="LastCPTimes"];
    4509 -> 4513;
    4513[label="="];
    4509 -> 4514;
    4514 [label="Expr"];
    4514 -> 4522;
    4522 [label="FunctionCall(FunctionCall { syntax: 4522, lhs: Some(4517), lparen: Some(4523), args: [(4524, None)], rparen: Some(4527) })"];
    4522 -> 4517;
    4517 [label="BinaryOp(BinaryOp { syntax: 4517, lhs: Some(4515), operator: Some(4518), rhs: Some(4519) })"];
    4517 -> 4515;
    4515 [label="Identifier"];
    4515 -> 4516;
    4516[label="Player"];
    4517 -> 4518;
    4518[label="::"];
    4517 -> 4519;
    4519 [label="Expr"];
    4519 -> 4520;
    4520 [label="Identifier"];
    4520 -> 4521;
    4521[label="getLastCPTimes"];
    4522 -> 4523;
    4523[label="("];
    4522 -> 4524;
    4524 [label="Expr"];
    4524 -> 4525;
    4525 [label="Identifier"];
    4525 -> 4526;
    4526[label="_Player"];
    4522 -> 4527;
    4527[label=")"];
    4509 -> 4528;
    4528[label=";"];
    4490 -> 4529;
    4529 [label="Statement(Statement { syntax: 4529, statement: Some(4530), semicolon: None })"];
    4529 -> 4530;
    4530 [label="VarDec(VarDec { syntax: 4530, declare: Some(4531), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4532), as_: None, alias: None, for_: None, target: None, assignment: Some(4534), value: Some(4535) })"];
    4530 -> 4531;
    4531[label="declare"];
    4530 -> 4532;
    4532 [label="Type(Type { syntax: 4532, basename: Some(4533), members: [], arrays: [] })"];
    4532 -> 4533;
    4533[label="BestCPTimes"];
    4530 -> 4534;
    4534[label="="];
    4530 -> 4535;
    4535 [label="Expr"];
    4535 -> 4543;
    4543 [label="FunctionCall(FunctionCall { syntax: 4543, lhs: Some(4538), lparen: Some(4544), args: [(4545, None)], rparen: Some(4548) })"];
    4543 -> 4538;
    4538 [label="BinaryOp(BinaryOp { syntax: 4538, lhs: Some(4536), operator: Some(4539), rhs: Some(4540) })"];
    4538 -> 4536;
    4536 [label="Identifier"];
    4536 -> 4537;
    4537[label="Player"];
    4538 -> 4539;
    4539[label="::"];
    4538 -> 4540;
    4540 [label="Expr"];
    4540 -> 4541;
    4541 [label="Identifier"];
    4541 -> 4542;
    4542[label="getBestCPTimes"];
    4543 -> 4544;
    4544[label="("];
    4543 -> 4545;
    4545 [label="Expr"];
    4545 -> 4546;
    4546 [label="Identifier"];
    4546 -> 4547;
    4547[label="_Player"];
    4543 -> 4548;
    4548[label=")"];
    4530 -> 4549;
    4549[label=";"];
    4490 -> 4550;
    4550 [label="Statement(Statement { syntax: 4550, statement: Some(4551), semicolon: None })"];
    4550 -> 4551;
    4551 [label="VarDec(VarDec { syntax: 4551, declare: Some(4552), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4553), as_: None, alias: None, for_: None, target: None, assignment: Some(4555), value: Some(4556) })"];
    4551 -> 4552;
    4552[label="declare"];
    4551 -> 4553;
    4553 [label="Type(Type { syntax: 4553, basename: Some(4554), members: [], arrays: [] })"];
    4553 -> 4554;
    4554[label="time"];
    4551 -> 4555;
    4555[label="="];
    4551 -> 4556;
    4556 [label="Expr"];
    4556 -> 4564;
    4564 [label="FunctionCall(FunctionCall { syntax: 4564, lhs: Some(4559), lparen: Some(4565), args: [(4566, None)], rparen: Some(4569) })"];
    4564 -> 4559;
    4559 [label="BinaryOp(BinaryOp { syntax: 4559, lhs: Some(4557), operator: Some(4560), rhs: Some(4561) })"];
    4559 -> 4557;
    4557 [label="Identifier"];
    4557 -> 4558;
    4558[label="Player"];
    4559 -> 4560;
    4560[label="::"];
    4559 -> 4561;
    4561 [label="Expr"];
    4561 -> 4562;
    4562 [label="Identifier"];
    4562 -> 4563;
    4563[label="getTime"];
    4564 -> 4565;
    4565[label="("];
    4564 -> 4566;
    4566 [label="Expr"];
    4566 -> 4567;
    4567 [label="Identifier"];
    4567 -> 4568;
    4568[label="_Player"];
    4564 -> 4569;
    4569[label=")"];
    4551 -> 4570;
    4570[label=";"];
    4490 -> 4571;
    4571 [label="Statement(Statement { syntax: 4571, statement: Some(4572), semicolon: Some(4594) })"];
    4571 -> 4572;
    4572 [label="Expr"];
    4572 -> 4580;
    4580 [label="FunctionCall(FunctionCall { syntax: 4580, lhs: Some(4575), lparen: Some(4581), args: [(4582, Some(4585)), (4586, Some(4589)), (4590, None)], rparen: Some(4593) })"];
    4580 -> 4575;
    4575 [label="BinaryOp(BinaryOp { syntax: 4575, lhs: Some(4573), operator: Some(4576), rhs: Some(4577) })"];
    4575 -> 4573;
    4573 [label="Identifier"];
    4573 -> 4574;
    4574[label="Player"];
    4575 -> 4576;
    4576[label="::"];
    4575 -> 4577;
    4577 [label="Expr"];
    4577 -> 4578;
    4578 [label="Identifier"];
    4578 -> 4579;
    4579[label="setLastCPTimes"];
    4580 -> 4581;
    4581[label="("];
    4580 -> 4582;
    4582 [label="Expr"];
    4582 -> 4583;
    4583 [label="Identifier"];
    4583 -> 4584;
    4584[label="_Player"];
    4580 -> 4585;
    4585[label=","];
    4580 -> 4586;
    4586 [label="Expr"];
    4586 -> 4587;
    4587 [label="Identifier"];
    4587 -> 4588;
    4588[label="_CheckpointId"];
    4580 -> 4589;
    4589[label=","];
    4580 -> 4590;
    4590 [label="Expr"];
    4590 -> 4591;
    4591 [label="Identifier"];
    4591 -> 4592;
    4592[label="time"];
    4580 -> 4593;
    4593[label=")"];
    4571 -> 4594;
    4594[label=";"];
    4490 -> 4595;
    4595 [label="Statement(Statement { syntax: 4595, statement: Some(4596), semicolon: None })"];
    4595 -> 4596;
    4596 [label="If(If { syntax: 4596, if_: Some(4597), lparen: Some(4598), condition: Some(4599), rparen: Some(4628), body: Some(4629), else_: Some(4654) })"];
    4596 -> 4597;
    4597[label="if"];
    4596 -> 4598;
    4598[label="("];
    4596 -> 4599;
    4599 [label="Expr"];
    4599 -> 4613;
    4613 [label="BinaryOp(BinaryOp { syntax: 4613, lhs: Some(4607), operator: Some(4614), rhs: Some(4615) })"];
    4613 -> 4607;
    4607 [label="FunctionCall(FunctionCall { syntax: 4607, lhs: Some(4602), lparen: Some(4608), args: [(4609, None)], rparen: Some(4612) })"];
    4607 -> 4602;
    4602 [label="BinaryOp(BinaryOp { syntax: 4602, lhs: Some(4600), operator: Some(4603), rhs: Some(4604) })"];
    4602 -> 4600;
    4600 [label="Identifier"];
    4600 -> 4601;
    4601[label="Player"];
    4602 -> 4603;
    4603[label="::"];
    4602 -> 4604;
    4604 [label="Expr"];
    4604 -> 4605;
    4605 [label="Identifier"];
    4605 -> 4606;
    4606[label="usedJump"];
    4607 -> 4608;
    4608[label="("];
    4607 -> 4609;
    4609 [label="Expr"];
    4609 -> 4610;
    4610 [label="Identifier"];
    4610 -> 4611;
    4611[label="_Player"];
    4607 -> 4612;
    4612[label=")"];
    4613 -> 4614;
    4614[label="&&"];
    4613 -> 4615;
    4615 [label="Expr"];
    4615 -> 4623;
    4623 [label="BinaryOp(BinaryOp { syntax: 4623, lhs: Some(4618), operator: Some(4624), rhs: Some(4625) })"];
    4623 -> 4618;
    4618 [label="BinaryOp(BinaryOp { syntax: 4618, lhs: Some(4616), operator: Some(4619), rhs: Some(4620) })"];
    4618 -> 4616;
    4616 [label="Identifier"];
    4616 -> 4617;
    4617[label="Checkpoint"];
    4618 -> 4619;
    4619[label="."];
    4618 -> 4620;
    4620 [label="Expr"];
    4620 -> 4621;
    4621 [label="Identifier"];
    4621 -> 4622;
    4622[label="Order"];
    4623 -> 4624;
    4624[label="!="];
    4623 -> 4625;
    4625 [label="Expr"];
    4625 -> 4626;
    4626 [label="Literal"];
    4626 -> 4627;
    4627[label="0"];
    4596 -> 4628;
    4628[label=")"];
    4596 -> 4629;
    4629 [label="Statement(Statement { syntax: 4629, statement: Some(4630), semicolon: Some(4653) })"];
    4629 -> 4630;
    4630 [label="Expr"];
    4630 -> 4638;
    4638 [label="FunctionCall(FunctionCall { syntax: 4638, lhs: Some(4633), lparen: Some(4639), args: [(4640, Some(4643)), (4644, None)], rparen: Some(4652) })"];
    4638 -> 4633;
    4633 [label="BinaryOp(BinaryOp { syntax: 4633, lhs: Some(4631), operator: Some(4634), rhs: Some(4635) })"];
    4633 -> 4631;
    4631 [label="Identifier"];
    4631 -> 4632;
    4632[label="Player"];
    4633 -> 4634;
    4634[label="::"];
    4633 -> 4635;
    4635 [label="Expr"];
    4635 -> 4636;
    4636 [label="Identifier"];
    4636 -> 4637;
    4637[label="setCpProgress"];
    4638 -> 4639;
    4639[label="("];
    4638 -> 4640;
    4640 [label="Expr"];
    4640 -> 4641;
    4641 [label="Identifier"];
    4641 -> 4642;
    4642[label="_Player"];
    4638 -> 4643;
    4643[label=","];
    4638 -> 4644;
    4644 [label="Expr"];
    4644 -> 4647;
    4647 [label="BinaryOp(BinaryOp { syntax: 4647, lhs: Some(4645), operator: Some(4648), rhs: Some(4649) })"];
    4647 -> 4645;
    4645 [label="Identifier"];
    4645 -> 4646;
    4646[label="Checkpoint"];
    4647 -> 4648;
    4648[label="."];
    4647 -> 4649;
    4649 [label="Expr"];
    4649 -> 4650;
    4650 [label="Identifier"];
    4650 -> 4651;
    4651[label="Order"];
    4638 -> 4652;
    4652[label=")"];
    4629 -> 4653;
    4653[label=";"];
    4596 -> 4654;
    4654 [label="Else(Else { syntax: 4654, else_: Some(4655), if_: None, body: Some(4656) })"];
    4654 -> 4655;
    4655[label="else"];
    4654 -> 4656;
    4656 [label="Statement(Statement { syntax: 4656, statement: Some(4657), semicolon: Some(4685) })"];
    4656 -> 4657;
    4657 [label="Expr"];
    4657 -> 4665;
    4665 [label="FunctionCall(FunctionCall { syntax: 4665, lhs: Some(4660), lparen: Some(4666), args: [(4667, Some(4670)), (4671, None)], rparen: Some(4684) })"];
    4665 -> 4660;
    4660 [label="BinaryOp(BinaryOp { syntax: 4660, lhs: Some(4658), operator: Some(4661), rhs: Some(4662) })"];
    4660 -> 4658;
    4658 [label="Identifier"];
    4658 -> 4659;
    4659[label="Player"];
    4660 -> 4661;
    4661[label="::"];
    4660 -> 4662;
    4662 [label="Expr"];
    4662 -> 4663;
    4663 [label="Identifier"];
    4663 -> 4664;
    4664[label="setCpProgress"];
    4665 -> 4666;
    4666[label="("];
    4665 -> 4667;
    4667 [label="Expr"];
    4667 -> 4668;
    4668 [label="Identifier"];
    4668 -> 4669;
    4669[label="_Player"];
    4665 -> 4670;
    4670[label=","];
    4665 -> 4671;
    4671 [label="Expr"];
    4671 -> 4679;
    4679 [label="BinaryOp(BinaryOp { syntax: 4679, lhs: Some(4674), operator: Some(4680), rhs: Some(4681) })"];
    4679 -> 4674;
    4674 [label="BinaryOp(BinaryOp { syntax: 4674, lhs: Some(4672), operator: Some(4675), rhs: Some(4676) })"];
    4674 -> 4672;
    4672 [label="Identifier"];
    4672 -> 4673;
    4673[label="LastCPTimes"];
    4674 -> 4675;
    4675[label="."];
    4674 -> 4676;
    4676 [label="Expr"];
    4676 -> 4677;
    4677 [label="Identifier"];
    4677 -> 4678;
    4678[label="count"];
    4679 -> 4680;
    4680[label="+"];
    4679 -> 4681;
    4681 [label="Expr"];
    4681 -> 4682;
    4682 [label="Literal"];
    4682 -> 4683;
    4683[label="1"];
    4665 -> 4684;
    4684[label=")"];
    4656 -> 4685;
    4685[label=";"];
    4490 -> 4686;
    4686 [label="Statement(Statement { syntax: 4686, statement: Some(4687), semicolon: Some(4705) })"];
    4686 -> 4687;
    4687 [label="Expr"];
    4687 -> 4695;
    4695 [label="FunctionCall(FunctionCall { syntax: 4695, lhs: Some(4690), lparen: Some(4696), args: [(4697, Some(4700)), (4701, None)], rparen: Some(4704) })"];
    4695 -> 4690;
    4690 [label="BinaryOp(BinaryOp { syntax: 4690, lhs: Some(4688), operator: Some(4691), rhs: Some(4692) })"];
    4690 -> 4688;
    4688 [label="Identifier"];
    4688 -> 4689;
    4689[label="Player"];
    4690 -> 4691;
    4691[label="::"];
    4690 -> 4692;
    4692 [label="Expr"];
    4692 -> 4693;
    4693 [label="Identifier"];
    4693 -> 4694;
    4694[label="setLastCheckpoint"];
    4695 -> 4696;
    4696[label="("];
    4695 -> 4697;
    4697 [label="Expr"];
    4697 -> 4698;
    4698 [label="Identifier"];
    4698 -> 4699;
    4699[label="_Player"];
    4695 -> 4700;
    4700[label=","];
    4695 -> 4701;
    4701 [label="Expr"];
    4701 -> 4702;
    4702 [label="Identifier"];
    4702 -> 4703;
    4703[label="_CheckpointId"];
    4695 -> 4704;
    4704[label=")"];
    4686 -> 4705;
    4705[label=";"];
    4490 -> 4706;
    4706 [label="Statement(Statement { syntax: 4706, statement: Some(4707), semicolon: Some(4720) })"];
    4706 -> 4707;
    4707 [label="Expr"];
    4707 -> 4710;
    4710 [label="FunctionCall(FunctionCall { syntax: 4710, lhs: Some(4708), lparen: Some(4711), args: [(4712, Some(4715)), (4716, None)], rparen: Some(4719) })"];
    4710 -> 4708;
    4708 [label="Identifier"];
    4708 -> 4709;
    4709[label="Private_CheckpointEffect"];
    4710 -> 4711;
    4711[label="("];
    4710 -> 4712;
    4712 [label="Expr"];
    4712 -> 4713;
    4713 [label="Identifier"];
    4713 -> 4714;
    4714[label="_Player"];
    4710 -> 4715;
    4715[label=","];
    4710 -> 4716;
    4716 [label="Expr"];
    4716 -> 4717;
    4717 [label="Identifier"];
    4717 -> 4718;
    4718[label="_CheckpointId"];
    4710 -> 4719;
    4719[label=")"];
    4706 -> 4720;
    4720[label=";"];
    4490 -> 4721;
    4721 [label="Statement(Statement { syntax: 4721, statement: Some(4722), semicolon: Some(4751) })"];
    4721 -> 4722;
    4722 [label="Expr"];
    4722 -> 4730;
    4730 [label="FunctionCall(FunctionCall { syntax: 4730, lhs: Some(4725), lparen: Some(4731), args: [(4732, Some(4735)), (4736, None)], rparen: Some(4750) })"];
    4730 -> 4725;
    4725 [label="BinaryOp(BinaryOp { syntax: 4725, lhs: Some(4723), operator: Some(4726), rhs: Some(4727) })"];
    4725 -> 4723;
    4723 [label="Identifier"];
    4723 -> 4724;
    4724[label="XmlRpc"];
    4725 -> 4726;
    4726[label="."];
    4725 -> 4727;
    4727 [label="Expr"];
    4727 -> 4728;
    4728 [label="Identifier"];
    4728 -> 4729;
    4729[label="SendCallback"];
    4730 -> 4731;
    4731[label="("];
    4730 -> 4732;
    4732 [label="Expr"];
    4732 -> 4733;
    4733 [label="Literal"];
    4733 -> 4734;
    4734[label="\"Obstacle_OnCheckpoint\""];
    4730 -> 4735;
    4735[label=","];
    4730 -> 4736;
    4736 [label="Expr"];
    4736 -> 4744;
    4744 [label="FunctionCall(FunctionCall { syntax: 4744, lhs: Some(4739), lparen: Some(4745), args: [(4746, None)], rparen: Some(4749) })"];
    4744 -> 4739;
    4739 [label="BinaryOp(BinaryOp { syntax: 4739, lhs: Some(4737), operator: Some(4740), rhs: Some(4741) })"];
    4739 -> 4737;
    4737 [label="Identifier"];
    4737 -> 4738;
    4738[label="Player"];
    4739 -> 4740;
    4740[label="::"];
    4739 -> 4741;
    4741 [label="Expr"];
    4741 -> 4742;
    4742 [label="Identifier"];
    4742 -> 4743;
    4743[label="ToJSON"];
    4744 -> 4745;
    4745[label="("];
    4744 -> 4746;
    4746 [label="Expr"];
    4746 -> 4747;
    4747 [label="Identifier"];
    4747 -> 4748;
    4748[label="_Player"];
    4744 -> 4749;
    4749[label=")"];
    4730 -> 4750;
    4750[label=")"];
    4721 -> 4751;
    4751[label=";"];
    4490 -> 4752;
    4752 [label="Statement(Statement { syntax: 4752, statement: Some(4753), semicolon: Some(4762) })"];
    4752 -> 4753;
    4753 [label="Expr"];
    4753 -> 4756;
    4756 [label="FunctionCall(FunctionCall { syntax: 4756, lhs: Some(4754), lparen: Some(4757), args: [(4758, None)], rparen: Some(4761) })"];
    4756 -> 4754;
    4754 [label="Identifier"];
    4754 -> 4755;
    4755[label="Private_UpdatePlayerBestTime"];
    4756 -> 4757;
    4757[label="("];
    4756 -> 4758;
    4758 [label="Expr"];
    4758 -> 4759;
    4759 [label="Identifier"];
    4759 -> 4760;
    4760[label="_Player"];
    4756 -> 4761;
    4761[label=")"];
    4752 -> 4762;
    4762[label=";"];
    4490 -> 4763;
    4763 [label="Statement(Statement { syntax: 4763, statement: Some(4764), semicolon: None })"];
    4763 -> 4764;
    4764 [label="VarDec(VarDec { syntax: 4764, declare: Some(4765), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4766), as_: None, alias: None, for_: None, target: None, assignment: Some(4768), value: Some(4769) })"];
    4764 -> 4765;
    4765[label="declare"];
    4764 -> 4766;
    4766 [label="Type(Type { syntax: 4766, basename: Some(4767), members: [], arrays: [] })"];
    4766 -> 4767;
    4767[label="UI"];
    4764 -> 4768;
    4768[label="<=>"];
    4764 -> 4769;
    4769 [label="Expr"];
    4769 -> 4777;
    4777 [label="FunctionCall(FunctionCall { syntax: 4777, lhs: Some(4772), lparen: Some(4778), args: [(4779, None)], rparen: Some(4782) })"];
    4777 -> 4772;
    4772 [label="BinaryOp(BinaryOp { syntax: 4772, lhs: Some(4770), operator: Some(4773), rhs: Some(4774) })"];
    4772 -> 4770;
    4770 [label="Identifier"];
    4770 -> 4771;
    4771[label="UIManager"];
    4772 -> 4773;
    4773[label="."];
    4772 -> 4774;
    4774 [label="Expr"];
    4774 -> 4775;
    4775 [label="Identifier"];
    4775 -> 4776;
    4776[label="GetUI"];
    4777 -> 4778;
    4778[label="("];
    4777 -> 4779;
    4779 [label="Expr"];
    4779 -> 4780;
    4780 [label="Identifier"];
    4780 -> 4781;
    4781[label="_Player"];
    4777 -> 4782;
    4782[label=")"];
    4764 -> 4783;
    4783[label=";"];
    4490 -> 4784;
    4784 [label="Statement(Statement { syntax: 4784, statement: Some(4785), semicolon: None })"];
    4784 -> 4785;
    4785 [label="If(If { syntax: 4785, if_: Some(4786), lparen: Some(4787), condition: Some(4788), rparen: Some(4801), body: Some(4802), else_: None })"];
    4785 -> 4786;
    4786[label="if"];
    4785 -> 4787;
    4787[label="("];
    4785 -> 4788;
    4788 [label="Expr"];
    4788 -> 4796;
    4796 [label="BinaryOp(BinaryOp { syntax: 4796, lhs: Some(4791), operator: Some(4797), rhs: Some(4798) })"];
    4796 -> 4791;
    4791 [label="BinaryOp(BinaryOp { syntax: 4791, lhs: Some(4789), operator: Some(4792), rhs: Some(4793) })"];
    4791 -> 4789;
    4789 [label="Identifier"];
    4789 -> 4790;
    4790[label="_Player"];
    4791 -> 4792;
    4792[label="."];
    4791 -> 4793;
    4793 [label="Expr"];
    4793 -> 4794;
    4794 [label="Identifier"];
    4794 -> 4795;
    4795[label="Score"];
    4796 -> 4797;
    4797[label="=="];
    4796 -> 4798;
    4798 [label="Expr"];
    4798 -> 4799;
    4799 [label="Literal"];
    4799 -> 4800;
    4800[label="Null"];
    4785 -> 4801;
    4801[label=")"];
    4785 -> 4802;
    4802 [label="Statement(Statement { syntax: 4802, statement: Some(4803), semicolon: Some(4805) })"];
    4802 -> 4803;
    4803 [label="Return(Return { syntax: 4803, return_: Some(4804), value: None })"];
    4803 -> 4804;
    4804[label="return"];
    4802 -> 4805;
    4805[label=";"];
    4490 -> 4806;
    4806 [label="Statement(Statement { syntax: 4806, statement: Some(4807), semicolon: None })"];
    4806 -> 4807;
    4807 [label="VarDec(VarDec { syntax: 4807, declare: Some(4808), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4809), as_: None, alias: None, for_: None, target: None, assignment: Some(4811), value: Some(4812) })"];
    4807 -> 4808;
    4808[label="declare"];
    4807 -> 4809;
    4809 [label="Type(Type { syntax: 4809, basename: Some(4810), members: [], arrays: [] })"];
    4809 -> 4810;
    4810[label="Variant"];
    4807 -> 4811;
    4811[label="="];
    4807 -> 4812;
    4812 [label="Expr"];
    4812 -> 4813;
    4813 [label="Literal"];
    4813 -> 4814;
    4814[label="0"];
    4807 -> 4815;
    4815[label=";"];
    4490 -> 4816;
    4816 [label="Statement(Statement { syntax: 4816, statement: Some(4817), semicolon: None })"];
    4816 -> 4817;
    4817 [label="VarDec(VarDec { syntax: 4817, declare: Some(4818), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4819), as_: None, alias: None, for_: None, target: None, assignment: Some(4821), value: Some(4822) })"];
    4817 -> 4818;
    4818[label="declare"];
    4817 -> 4819;
    4819 [label="Type(Type { syntax: 4819, basename: Some(4820), members: [], arrays: [] })"];
    4819 -> 4820;
    4820[label="BestTime"];
    4817 -> 4821;
    4821[label="="];
    4817 -> 4822;
    4822 [label="Expr"];
    4822 -> 4830;
    4830 [label="FunctionCall(FunctionCall { syntax: 4830, lhs: Some(4825), lparen: Some(4831), args: [(4832, Some(4835)), (4836, None)], rparen: Some(4839) })"];
    4830 -> 4825;
    4825 [label="BinaryOp(BinaryOp { syntax: 4825, lhs: Some(4823), operator: Some(4826), rhs: Some(4827) })"];
    4825 -> 4823;
    4823 [label="Identifier"];
    4823 -> 4824;
    4824[label="Player"];
    4825 -> 4826;
    4826[label="::"];
    4825 -> 4827;
    4827 [label="Expr"];
    4827 -> 4828;
    4828 [label="Identifier"];
    4828 -> 4829;
    4829[label="getBestTime"];
    4830 -> 4831;
    4831[label="("];
    4830 -> 4832;
    4832 [label="Expr"];
    4832 -> 4833;
    4833 [label="Identifier"];
    4833 -> 4834;
    4834[label="_Player"];
    4830 -> 4835;
    4835[label=","];
    4830 -> 4836;
    4836 [label="Expr"];
    4836 -> 4837;
    4837 [label="Identifier"];
    4837 -> 4838;
    4838[label="_CheckpointId"];
    4830 -> 4839;
    4839[label=")"];
    4817 -> 4840;
    4840[label=";"];
    4490 -> 4841;
    4841 [label="Statement(Statement { syntax: 4841, statement: Some(4842), semicolon: None })"];
    4841 -> 4842;
    4842 [label="If(If { syntax: 4842, if_: Some(4843), lparen: Some(4844), condition: Some(4845), rparen: Some(4853), body: Some(4854), else_: None })"];
    4842 -> 4843;
    4843[label="if"];
    4842 -> 4844;
    4844[label="("];
    4842 -> 4845;
    4845 [label="Expr"];
    4845 -> 4848;
    4848 [label="BinaryOp(BinaryOp { syntax: 4848, lhs: Some(4846), operator: Some(4849), rhs: Some(4850) })"];
    4848 -> 4846;
    4846 [label="Identifier"];
    4846 -> 4847;
    4847[label="time"];
    4848 -> 4849;
    4849[label=">"];
    4848 -> 4850;
    4850 [label="Expr"];
    4850 -> 4851;
    4851 [label="Identifier"];
    4851 -> 4852;
    4852[label="BestTime"];
    4842 -> 4853;
    4853[label=")"];
    4842 -> 4854;
    4854 [label="Statement(Statement { syntax: 4854, statement: Some(4858), semicolon: Some(4863) })"];
    4854 -> 4855;
    4855 [label="Expr"];
    4855 -> 4856;
    4856 [label="Identifier"];
    4856 -> 4857;
    4857[label="Variant"];
    4854 -> 4858;
    4858 [label="Assignment(Assignment { syntax: 4858, lvalue: Some(4855), operator: Some(4859), rvalue: Some(4860) })"];
    4858 -> 4859;
    4859[label="="];
    4858 -> 4860;
    4860 [label="Expr"];
    4860 -> 4861;
    4861 [label="Literal"];
    4861 -> 4862;
    4862[label="1"];
    4854 -> 4863;
    4863[label=";"];
    4490 -> 4864;
    4864 [label="Statement(Statement { syntax: 4864, statement: Some(4865), semicolon: Some(4887) })"];
    4864 -> 4865;
    4865 [label="Expr"];
    4865 -> 4873;
    4873 [label="FunctionCall(FunctionCall { syntax: 4873, lhs: Some(4868), lparen: Some(4874), args: [(4875, Some(4878)), (4879, Some(4882)), (4883, None)], rparen: Some(4886) })"];
    4873 -> 4868;
    4868 [label="BinaryOp(BinaryOp { syntax: 4868, lhs: Some(4866), operator: Some(4869), rhs: Some(4870) })"];
    4868 -> 4866;
    4866 [label="Identifier"];
    4866 -> 4867;
    4867[label="TimeDiff"];
    4868 -> 4869;
    4869[label="::"];
    4868 -> 4870;
    4870 [label="Expr"];
    4870 -> 4871;
    4871 [label="Identifier"];
    4871 -> 4872;
    4872[label="UpdateLayer"];
    4873 -> 4874;
    4874[label="("];
    4873 -> 4875;
    4875 [label="Expr"];
    4875 -> 4876;
    4876 [label="Identifier"];
    4876 -> 4877;
    4877[label="_Player"];
    4873 -> 4878;
    4878[label=","];
    4873 -> 4879;
    4879 [label="Expr"];
    4879 -> 4880;
    4880 [label="Identifier"];
    4880 -> 4881;
    4881[label="time"];
    4873 -> 4882;
    4882[label=","];
    4873 -> 4883;
    4883 [label="Expr"];
    4883 -> 4884;
    4884 [label="Identifier"];
    4884 -> 4885;
    4885[label="BestTime"];
    4873 -> 4886;
    4886[label=")"];
    4864 -> 4887;
    4887[label=";"];
    4490 -> 4888;
    4888 [label="Statement(Statement { syntax: 4888, statement: Some(4889), semicolon: Some(4958) })"];
    4888 -> 4889;
    4889 [label="Expr"];
    4889 -> 4897;
    4897 [label="FunctionCall(FunctionCall { syntax: 4897, lhs: Some(4892), lparen: Some(4898), args: [(4899, Some(4902)), (4903, Some(4916)), (4917, Some(4925)), (4926, Some(4939)), (4940, Some(4953)), (4954, None)], rparen: Some(4957) })"];
    4897 -> 4892;
    4892 [label="BinaryOp(BinaryOp { syntax: 4892, lhs: Some(4890), operator: Some(4893), rhs: Some(4894) })"];
    4892 -> 4890;
    4890 [label="Identifier"];
    4890 -> 4891;
    4891[label="UI"];
    4892 -> 4893;
    4893[label="."];
    4892 -> 4894;
    4894 [label="Expr"];
    4894 -> 4895;
    4895 [label="Identifier"];
    4895 -> 4896;
    4896[label="SendNotice"];
    4897 -> 4898;
    4898[label="("];
    4897 -> 4899;
    4899 [label="Expr"];
    4899 -> 4900;
    4900 [label="Literal"];
    4900 -> 4901;
    4901[label="\"\""];
    4897 -> 4902;
    4902[label=","];
    4897 -> 4903;
    4903 [label="Expr"];
    4903 -> 4906;
    4906 [label="BinaryOp(BinaryOp { syntax: 4906, lhs: Some(4904), operator: Some(4907), rhs: Some(4908) })"];
    4906 -> 4904;
    4904 [label="Identifier"];
    4904 -> 4905;
    4905[label="CUIConfig"];
    4906 -> 4907;
    4907[label="::"];
    4906 -> 4908;
    4908 [label="Expr"];
    4908 -> 4911;
    4911 [label="BinaryOp(BinaryOp { syntax: 4911, lhs: Some(4909), operator: Some(4912), rhs: Some(4913) })"];
    4911 -> 4909;
    4909 [label="Identifier"];
    4909 -> 4910;
    4910[label="ENoticeLevel"];
    4911 -> 4912;
    4912[label="::"];
    4911 -> 4913;
    4913 [label="Expr"];
    4913 -> 4914;
    4914 [label="Identifier"];
    4914 -> 4915;
    4915[label="PlayerInfo"];
    4897 -> 4916;
    4916[label=","];
    4897 -> 4917;
    4917 [label="Expr"];
    4917 -> 4920;
    4920 [label="BinaryOp(BinaryOp { syntax: 4920, lhs: Some(4918), operator: Some(4921), rhs: Some(4922) })"];
    4920 -> 4918;
    4918 [label="Identifier"];
    4918 -> 4919;
    4919[label="_Player"];
    4920 -> 4921;
    4921[label="."];
    4920 -> 4922;
    4922 [label="Expr"];
    4922 -> 4923;
    4923 [label="Identifier"];
    4923 -> 4924;
    4924[label="User"];
    4897 -> 4925;
    4925[label=","];
    4897 -> 4926;
    4926 [label="Expr"];
    4926 -> 4929;
    4929 [label="BinaryOp(BinaryOp { syntax: 4929, lhs: Some(4927), operator: Some(4930), rhs: Some(4931) })"];
    4929 -> 4927;
    4927 [label="Identifier"];
    4927 -> 4928;
    4928[label="CUIConfig"];
    4929 -> 4930;
    4930[label="::"];
    4929 -> 4931;
    4931 [label="Expr"];
    4931 -> 4934;
    4934 [label="BinaryOp(BinaryOp { syntax: 4934, lhs: Some(4932), operator: Some(4935), rhs: Some(4936) })"];
    4934 -> 4932;
    4932 [label="Identifier"];
    4932 -> 4933;
    4933[label="EAvatarVariant"];
    4934 -> 4935;
    4935[label="::"];
    4934 -> 4936;
    4936 [label="Expr"];
    4936 -> 4937;
    4937 [label="Identifier"];
    4937 -> 4938;
    4938[label="Default"];
    4897 -> 4939;
    4939[label=","];
    4897 -> 4940;
    4940 [label="Expr"];
    4940 -> 4943;
    4943 [label="BinaryOp(BinaryOp { syntax: 4943, lhs: Some(4941), operator: Some(4944), rhs: Some(4945) })"];
    4943 -> 4941;
    4941 [label="Identifier"];
    4941 -> 4942;
    4942[label="CUIConfig"];
    4943 -> 4944;
    4944[label="::"];
    4943 -> 4945;
    4945 [label="Expr"];
    4945 -> 4948;
    4948 [label="BinaryOp(BinaryOp { syntax: 4948, lhs: Some(4946), operator: Some(4949), rhs: Some(4950) })"];
    4948 -> 4946;
    4946 [label="Identifier"];
    4946 -> 4947;
    4947[label="EUISound"];
    4948 -> 4949;
    4949[label="::"];
    4948 -> 4950;
    4950 [label="Expr"];
    4950 -> 4951;
    4951 [label="Identifier"];
    4951 -> 4952;
    4952[label="Checkpoint"];
    4897 -> 4953;
    4953[label=","];
    4897 -> 4954;
    4954 [label="Expr"];
    4954 -> 4955;
    4955 [label="Identifier"];
    4955 -> 4956;
    4956[label="Variant"];
    4897 -> 4957;
    4957[label=")"];
    4888 -> 4958;
    4958[label=";"];
    4490 -> 4959;
    4959[label="}"];
    0 -> 4960;
    4960 [label="FuncDec(FuncDec { syntax: 4960, type_: Some(4961), name: Some(4963), lparen: Some(4964), args: [4965], rparen: Some(4969), body: Some(4970) })"];
    4960 -> 4961;
    4961 [label="Type(Type { syntax: 4961, basename: Some(4962), members: [], arrays: [] })"];
    4961 -> 4962;
    4962[label="Void"];
    4960 -> 4963;
    4963[label="HandleCapture"];
    4960 -> 4964;
    4964[label="("];
    4960 -> 4965;
    4965 [label="FormalArg(FormalArg { syntax: 4965, type_: Some(4966), name: Some(4968), comma: None })"];
    4965 -> 4966;
    4966 [label="Type(Type { syntax: 4966, basename: Some(4967), members: [], arrays: [] })"];
    4966 -> 4967;
    4967[label="CSmPlayer"];
    4965 -> 4968;
    4968[label="_Player"];
    4960 -> 4969;
    4969[label=")"];
    4960 -> 4970;
    4970 [label="Block(Block { syntax: 4970, lbrace: Some(4971), statements: [4972, 4987, 5005, 5026, 5047, 5057, 5083, 5104, 5140, 5586, 5600], rbrace: Some(5688) })"];
    4970 -> 4971;
    4971[label="{"];
    4970 -> 4972;
    4972 [label="Statement(Statement { syntax: 4972, statement: Some(4973), semicolon: None })"];
    4972 -> 4973;
    4973 [label="VarDec(VarDec { syntax: 4973, declare: Some(4974), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4975), as_: None, alias: None, for_: None, target: None, assignment: Some(4977), value: Some(4978) })"];
    4973 -> 4974;
    4974[label="declare"];
    4973 -> 4975;
    4975 [label="Type(Type { syntax: 4975, basename: Some(4976), members: [], arrays: [] })"];
    4975 -> 4976;
    4976[label="Landmark"];
    4973 -> 4977;
    4977[label="<=>"];
    4973 -> 4978;
    4978 [label="Expr"];
    4978 -> 4981;
    4981 [label="BinaryOp(BinaryOp { syntax: 4981, lhs: Some(4979), operator: Some(4982), rhs: Some(4983) })"];
    4981 -> 4979;
    4979 [label="Identifier"];
    4979 -> 4980;
    4980[label="_Player"];
    4981 -> 4982;
    4982[label="."];
    4981 -> 4983;
    4983 [label="Expr"];
    4983 -> 4984;
    4984 [label="Identifier"];
    4984 -> 4985;
    4985[label="CapturedLandmark"];
    4973 -> 4986;
    4986[label=";"];
    4970 -> 4987;
    4987 [label="Statement(Statement { syntax: 4987, statement: Some(4988), semicolon: None })"];
    4987 -> 4988;
    4988 [label="VarDec(VarDec { syntax: 4988, declare: Some(4989), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4990), as_: None, alias: None, for_: None, target: None, assignment: Some(4992), value: Some(4993) })"];
    4988 -> 4989;
    4989[label="declare"];
    4988 -> 4990;
    4990 [label="Type(Type { syntax: 4990, basename: Some(4991), members: [], arrays: [] })"];
    4990 -> 4991;
    4991[label="MapVersion"];
    4988 -> 4992;
    4992[label="="];
    4988 -> 4993;
    4993 [label="Expr"];
    4993 -> 5001;
    5001 [label="FunctionCall(FunctionCall { syntax: 5001, lhs: Some(4996), lparen: Some(5002), args: [], rparen: Some(5003) })"];
    5001 -> 4996;
    4996 [label="BinaryOp(BinaryOp { syntax: 4996, lhs: Some(4994), operator: Some(4997), rhs: Some(4998) })"];
    4996 -> 4994;
    4994 [label="Identifier"];
    4994 -> 4995;
    4995[label="Map"];
    4996 -> 4997;
    4997[label="::"];
    4996 -> 4998;
    4998 [label="Expr"];
    4998 -> 4999;
    4999 [label="Identifier"];
    4999 -> 5000;
    5000[label="GetMapTypeVersion"];
    5001 -> 5002;
    5002[label="("];
    5001 -> 5003;
    5003[label=")"];
    4988 -> 5004;
    5004[label=";"];
    4970 -> 5005;
    5005 [label="Statement(Statement { syntax: 5005, statement: Some(5006), semicolon: None })"];
    5005 -> 5006;
    5006 [label="VarDec(VarDec { syntax: 5006, declare: Some(5007), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5008), as_: None, alias: None, for_: None, target: None, assignment: Some(5010), value: Some(5011) })"];
    5006 -> 5007;
    5007[label="declare"];
    5006 -> 5008;
    5008 [label="Type(Type { syntax: 5008, basename: Some(5009), members: [], arrays: [] })"];
    5008 -> 5009;
    5009[label="CpProgress"];
    5006 -> 5010;
    5010[label="="];
    5006 -> 5011;
    5011 [label="Expr"];
    5011 -> 5019;
    5019 [label="FunctionCall(FunctionCall { syntax: 5019, lhs: Some(5014), lparen: Some(5020), args: [(5021, None)], rparen: Some(5024) })"];
    5019 -> 5014;
    5014 [label="BinaryOp(BinaryOp { syntax: 5014, lhs: Some(5012), operator: Some(5015), rhs: Some(5016) })"];
    5014 -> 5012;
    5012 [label="Identifier"];
    5012 -> 5013;
    5013[label="Player"];
    5014 -> 5015;
    5015[label="::"];
    5014 -> 5016;
    5016 [label="Expr"];
    5016 -> 5017;
    5017 [label="Identifier"];
    5017 -> 5018;
    5018[label="getCpProgress"];
    5019 -> 5020;
    5020[label="("];
    5019 -> 5021;
    5021 [label="Expr"];
    5021 -> 5022;
    5022 [label="Identifier"];
    5022 -> 5023;
    5023[label="_Player"];
    5019 -> 5024;
    5024[label=")"];
    5006 -> 5025;
    5025[label=";"];
    4970 -> 5026;
    5026 [label="Statement(Statement { syntax: 5026, statement: Some(5027), semicolon: None })"];
    5026 -> 5027;
    5027 [label="VarDec(VarDec { syntax: 5027, declare: Some(5028), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5029), as_: None, alias: None, for_: None, target: None, assignment: Some(5031), value: Some(5032) })"];
    5027 -> 5028;
    5028[label="declare"];
    5027 -> 5029;
    5029 [label="Type(Type { syntax: 5029, basename: Some(5030), members: [], arrays: [] })"];
    5029 -> 5030;
    5030[label="HasJumped"];
    5027 -> 5031;
    5031[label="="];
    5027 -> 5032;
    5032 [label="Expr"];
    5032 -> 5040;
    5040 [label="FunctionCall(FunctionCall { syntax: 5040, lhs: Some(5035), lparen: Some(5041), args: [(5042, None)], rparen: Some(5045) })"];
    5040 -> 5035;
    5035 [label="BinaryOp(BinaryOp { syntax: 5035, lhs: Some(5033), operator: Some(5036), rhs: Some(5037) })"];
    5035 -> 5033;
    5033 [label="Identifier"];
    5033 -> 5034;
    5034[label="Player"];
    5035 -> 5036;
    5036[label="::"];
    5035 -> 5037;
    5037 [label="Expr"];
    5037 -> 5038;
    5038 [label="Identifier"];
    5038 -> 5039;
    5039[label="usedJump"];
    5040 -> 5041;
    5041[label="("];
    5040 -> 5042;
    5042 [label="Expr"];
    5042 -> 5043;
    5043 [label="Identifier"];
    5043 -> 5044;
    5044[label="_Player"];
    5040 -> 5045;
    5045[label=")"];
    5027 -> 5046;
    5046[label=";"];
    4970 -> 5047;
    5047 [label="Statement(Statement { syntax: 5047, statement: Some(5048), semicolon: None })"];
    5047 -> 5048;
    5048 [label="VarDec(VarDec { syntax: 5048, declare: Some(5049), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5050), as_: None, alias: None, for_: None, target: None, assignment: Some(5052), value: Some(5053) })"];
    5048 -> 5049;
    5049[label="declare"];
    5048 -> 5050;
    5050 [label="Type(Type { syntax: 5050, basename: Some(5051), members: [], arrays: [] })"];
    5050 -> 5051;
    5051[label="MessageToShow"];
    5048 -> 5052;
    5052[label="="];
    5048 -> 5053;
    5053 [label="Expr"];
    5053 -> 5054;
    5054 [label="Literal"];
    5054 -> 5055;
    5055[label="\"\""];
    5048 -> 5056;
    5056[label=";"];
    4970 -> 5057;
    5057 [label="Statement(Statement { syntax: 5057, statement: Some(5058), semicolon: None })"];
    5057 -> 5058;
    5058 [label="If(If { syntax: 5058, if_: Some(5059), lparen: Some(5060), condition: Some(5061), rparen: Some(5078), body: Some(5079), else_: None })"];
    5058 -> 5059;
    5059[label="if"];
    5058 -> 5060;
    5060[label="("];
    5058 -> 5061;
    5061 [label="Expr"];
    5061 -> 5072;
    5072 [label="FunctionCall(FunctionCall { syntax: 5072, lhs: Some(5062), lparen: Some(5073), args: [(5074, None)], rparen: Some(5077) })"];
    5072 -> 5062;
    5062 [label="UnOp(UnOp { syntax: 5062, operator: Some(5063), operand: Some(5064) })"];
    5062 -> 5063;
    5063[label="!"];
    5062 -> 5064;
    5064 [label="Expr"];
    5064 -> 5067;
    5067 [label="BinaryOp(BinaryOp { syntax: 5067, lhs: Some(5065), operator: Some(5068), rhs: Some(5069) })"];
    5067 -> 5065;
    5065 [label="Identifier"];
    5065 -> 5066;
    5066[label="Tools"];
    5067 -> 5068;
    5068[label="::"];
    5067 -> 5069;
    5069 [label="Expr"];
    5069 -> 5070;
    5070 [label="Identifier"];
    5070 -> 5071;
    5071[label="IsEnabled"];
    5072 -> 5073;
    5073[label="("];
    5072 -> 5074;
    5074 [label="Expr"];
    5074 -> 5075;
    5075 [label="Identifier"];
    5075 -> 5076;
    5076[label="Landmark"];
    5072 -> 5077;
    5077[label=")"];
    5058 -> 5078;
    5078[label=")"];
    5058 -> 5079;
    5079 [label="Statement(Statement { syntax: 5079, statement: Some(5080), semicolon: Some(5082) })"];
    5079 -> 5080;
    5080 [label="Return(Return { syntax: 5080, return_: Some(5081), value: None })"];
    5080 -> 5081;
    5081[label="return"];
    5079 -> 5082;
    5082[label=";"];
    4970 -> 5083;
    5083 [label="Statement(Statement { syntax: 5083, statement: Some(5084), semicolon: None })"];
    5083 -> 5084;
    5084 [label="VarDec(VarDec { syntax: 5084, declare: Some(5085), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5086), as_: None, alias: None, for_: None, target: None, assignment: Some(5088), value: Some(5089) })"];
    5084 -> 5085;
    5085[label="declare"];
    5084 -> 5086;
    5086 [label="Type(Type { syntax: 5086, basename: Some(5087), members: [], arrays: [] })"];
    5086 -> 5087;
    5087[label="time"];
    5084 -> 5088;
    5088[label="="];
    5084 -> 5089;
    5089 [label="Expr"];
    5089 -> 5097;
    5097 [label="FunctionCall(FunctionCall { syntax: 5097, lhs: Some(5092), lparen: Some(5098), args: [(5099, None)], rparen: Some(5102) })"];
    5097 -> 5092;
    5092 [label="BinaryOp(BinaryOp { syntax: 5092, lhs: Some(5090), operator: Some(5093), rhs: Some(5094) })"];
    5092 -> 5090;
    5090 [label="Identifier"];
    5090 -> 5091;
    5091[label="Player"];
    5092 -> 5093;
    5093[label="::"];
    5092 -> 5094;
    5094 [label="Expr"];
    5094 -> 5095;
    5095 [label="Identifier"];
    5095 -> 5096;
    5096[label="getTime"];
    5097 -> 5098;
    5098[label="("];
    5097 -> 5099;
    5099 [label="Expr"];
    5099 -> 5100;
    5100 [label="Identifier"];
    5100 -> 5101;
    5101[label="_Player"];
    5097 -> 5102;
    5102[label=")"];
    5084 -> 5103;
    5103[label=";"];
    4970 -> 5104;
    5104 [label="Statement(Statement { syntax: 5104, statement: Some(5105), semicolon: None })"];
    5104 -> 5105;
    5105 [label="If(If { syntax: 5105, if_: Some(5106), lparen: Some(5107), condition: Some(5108), rparen: Some(5116), body: Some(5117), else_: None })"];
    5105 -> 5106;
    5106[label="if"];
    5105 -> 5107;
    5107[label="("];
    5105 -> 5108;
    5108 [label="Expr"];
    5108 -> 5111;
    5111 [label="BinaryOp(BinaryOp { syntax: 5111, lhs: Some(5109), operator: Some(5112), rhs: Some(5113) })"];
    5111 -> 5109;
    5109 [label="Identifier"];
    5109 -> 5110;
    5110[label="time"];
    5111 -> 5112;
    5112[label="<"];
    5111 -> 5113;
    5113 [label="Expr"];
    5113 -> 5114;
    5114 [label="Literal"];
    5114 -> 5115;
    5115[label="0"];
    5105 -> 5116;
    5116[label=")"];
    5105 -> 5117;
    5117 [label="Statement(Statement { syntax: 5117, statement: Some(5118), semicolon: None })"];
    5117 -> 5118;
    5118 [label="Block(Block { syntax: 5118, lbrace: Some(5119), statements: [5120, 5135], rbrace: Some(5139) })"];
    5118 -> 5119;
    5119[label="{"];
    5118 -> 5120;
    5120 [label="Statement(Statement { syntax: 5120, statement: Some(5121), semicolon: Some(5134) })"];
    5120 -> 5121;
    5121 [label="Expr"];
    5121 -> 5124;
    5124 [label="FunctionCall(FunctionCall { syntax: 5124, lhs: Some(5122), lparen: Some(5125), args: [(5126, Some(5129)), (5130, None)], rparen: Some(5133) })"];
    5124 -> 5122;
    5122 [label="Identifier"];
    5122 -> 5123;
    5123[label="RespawnPlayer"];
    5124 -> 5125;
    5125[label="("];
    5124 -> 5126;
    5126 [label="Expr"];
    5126 -> 5127;
    5127 [label="Identifier"];
    5127 -> 5128;
    5128[label="_Player"];
    5124 -> 5129;
    5129[label=","];
    5124 -> 5130;
    5130 [label="Expr"];
    5130 -> 5131;
    5131 [label="Literal"];
    5131 -> 5132;
    5132[label="True"];
    5124 -> 5133;
    5133[label=")"];
    5120 -> 5134;
    5134[label=";"];
    5118 -> 5135;
    5135 [label="Statement(Statement { syntax: 5135, statement: Some(5136), semicolon: Some(5138) })"];
    5135 -> 5136;
    5136 [label="Return(Return { syntax: 5136, return_: Some(5137), value: None })"];
    5136 -> 5137;
    5137[label="return"];
    5135 -> 5138;
    5138[label=";"];
    5118 -> 5139;
    5139[label="}"];
    4970 -> 5140;
    5140 [label="Statement(Statement { syntax: 5140, statement: Some(5141), semicolon: None })"];
    5140 -> 5141;
    5141 [label="If(If { syntax: 5141, if_: Some(5142), lparen: Some(5143), condition: Some(5144), rparen: Some(5158), body: Some(5159), else_: Some(5267) })"];
    5141 -> 5142;
    5142[label="if"];
    5141 -> 5143;
    5143[label="("];
    5141 -> 5144;
    5144 [label="Expr"];
    5144 -> 5152;
    5152 [label="FunctionCall(FunctionCall { syntax: 5152, lhs: Some(5147), lparen: Some(5153), args: [(5154, None)], rparen: Some(5157) })"];
    5152 -> 5147;
    5147 [label="BinaryOp(BinaryOp { syntax: 5147, lhs: Some(5145), operator: Some(5148), rhs: Some(5149) })"];
    5147 -> 5145;
    5145 [label="Identifier"];
    5145 -> 5146;
    5146[label="Tools"];
    5147 -> 5148;
    5148[label="::"];
    5147 -> 5149;
    5149 [label="Expr"];
    5149 -> 5150;
    5150 [label="Identifier"];
    5150 -> 5151;
    5151[label="IsGoal"];
    5152 -> 5153;
    5153[label="("];
    5152 -> 5154;
    5154 [label="Expr"];
    5154 -> 5155;
    5155 [label="Identifier"];
    5155 -> 5156;
    5156[label="Landmark"];
    5152 -> 5157;
    5157[label=")"];
    5141 -> 5158;
    5158[label=")"];
    5141 -> 5159;
    5159 [label="Statement(Statement { syntax: 5159, statement: Some(5160), semicolon: None })"];
    5159 -> 5160;
    5160 [label="Block(Block { syntax: 5160, lbrace: Some(5161), statements: [5162], rbrace: Some(5266) })"];
    5160 -> 5161;
    5161[label="{"];
    5160 -> 5162;
    5162 [label="Statement(Statement { syntax: 5162, statement: Some(5163), semicolon: None })"];
    5162 -> 5163;
    5163 [label="If(If { syntax: 5163, if_: Some(5164), lparen: Some(5165), condition: Some(5166), rparen: Some(5169), body: Some(5170), else_: Some(5190) })"];
    5163 -> 5164;
    5164[label="if"];
    5163 -> 5165;
    5165[label="("];
    5163 -> 5166;
    5166 [label="Expr"];
    5166 -> 5167;
    5167 [label="Identifier"];
    5167 -> 5168;
    5168[label="HasJumped"];
    5163 -> 5169;
    5169[label=")"];
    5163 -> 5170;
    5170 [label="Statement(Statement { syntax: 5170, statement: Some(5171), semicolon: None })"];
    5170 -> 5171;
    5171 [label="Block(Block { syntax: 5171, lbrace: Some(5172), statements: [5173], rbrace: Some(5189) })"];
    5171 -> 5172;
    5172[label="{"];
    5171 -> 5173;
    5173 [label="Statement(Statement { syntax: 5173, statement: Some(5177), semicolon: Some(5188) })"];
    5173 -> 5174;
    5174 [label="Expr"];
    5174 -> 5175;
    5175 [label="Identifier"];
    5175 -> 5176;
    5176[label="MessageToShow"];
    5173 -> 5177;
    5177 [label="Assignment(Assignment { syntax: 5177, lvalue: Some(5174), operator: Some(5178), rvalue: Some(5179) })"];
    5177 -> 5178;
    5178[label="="];
    5177 -> 5179;
    5179 [label="Expr"];
    5179 -> 5182;
    5182 [label="FunctionCall(FunctionCall { syntax: 5182, lhs: Some(5180), lparen: Some(5183), args: [(5184, None)], rparen: Some(5187) })"];
    5182 -> 5180;
    5180 [label="Identifier"];
    5180 -> 5181;
    5181[label="_"];
    5182 -> 5183;
    5183[label="("];
    5182 -> 5184;
    5184 [label="Expr"];
    5184 -> 5185;
    5185 [label="Literal"];
    5185 -> 5186;
    5186[label="\"You used a Jump! Your Time is invalid.\""];
    5182 -> 5187;
    5187[label=")"];
    5173 -> 5188;
    5188[label=";"];
    5171 -> 5189;
    5189[label="}"];
    5163 -> 5190;
    5190 [label="Else(Else { syntax: 5190, else_: Some(5191), if_: None, body: Some(5192) })"];
    5190 -> 5191;
    5191[label="else"];
    5190 -> 5192;
    5192 [label="Statement(Statement { syntax: 5192, statement: Some(5193), semicolon: None })"];
    5192 -> 5193;
    5193 [label="Block(Block { syntax: 5193, lbrace: Some(5194), statements: [5195, 5210], rbrace: Some(5265) })"];
    5193 -> 5194;
    5194[label="{"];
    5193 -> 5195;
    5195 [label="Statement(Statement { syntax: 5195, statement: Some(5196), semicolon: None })"];
    5195 -> 5196;
    5196 [label="VarDec(VarDec { syntax: 5196, declare: Some(5197), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5198), as_: None, alias: None, for_: None, target: None, assignment: Some(5200), value: Some(5201) })"];
    5196 -> 5197;
    5197[label="declare"];
    5196 -> 5198;
    5198 [label="Type(Type { syntax: 5198, basename: Some(5199), members: [], arrays: [] })"];
    5198 -> 5199;
    5199[label="CpMissing"];
    5196 -> 5200;
    5200[label="="];
    5196 -> 5201;
    5201 [label="Expr"];
    5201 -> 5204;
    5204 [label="BinaryOp(BinaryOp { syntax: 5204, lhs: Some(5202), operator: Some(5205), rhs: Some(5206) })"];
    5204 -> 5202;
    5202 [label="Identifier"];
    5202 -> 5203;
    5203[label="G_CheckpointsTotal"];
    5204 -> 5205;
    5205[label="-"];
    5204 -> 5206;
    5206 [label="Expr"];
    5206 -> 5207;
    5207 [label="Identifier"];
    5207 -> 5208;
    5208[label="CpProgress"];
    5196 -> 5209;
    5209[label=";"];
    5193 -> 5210;
    5210 [label="Statement(Statement { syntax: 5210, statement: Some(5211), semicolon: None })"];
    5210 -> 5211;
    5211 [label="If(If { syntax: 5211, if_: Some(5212), lparen: Some(5213), condition: Some(5214), rparen: Some(5222), body: Some(5223), else_: Some(5243) })"];
    5211 -> 5212;
    5212[label="if"];
    5211 -> 5213;
    5213[label="("];
    5211 -> 5214;
    5214 [label="Expr"];
    5214 -> 5217;
    5217 [label="BinaryOp(BinaryOp { syntax: 5217, lhs: Some(5215), operator: Some(5218), rhs: Some(5219) })"];
    5217 -> 5215;
    5215 [label="Identifier"];
    5215 -> 5216;
    5216[label="CpMissing"];
    5217 -> 5218;
    5218[label="=="];
    5217 -> 5219;
    5219 [label="Expr"];
    5219 -> 5220;
    5220 [label="Literal"];
    5220 -> 5221;
    5221[label="0"];
    5211 -> 5222;
    5222[label=")"];
    5211 -> 5223;
    5223 [label="Statement(Statement { syntax: 5223, statement: Some(5224), semicolon: Some(5242) })"];
    5223 -> 5224;
    5224 [label="Expr"];
    5224 -> 5227;
    5227 [label="FunctionCall(FunctionCall { syntax: 5227, lhs: Some(5225), lparen: Some(5228), args: [(5229, Some(5232)), (5233, None)], rparen: Some(5241) })"];
    5227 -> 5225;
    5225 [label="Identifier"];
    5225 -> 5226;
    5226[label="Private_HandleFinish"];
    5227 -> 5228;
    5228[label="("];
    5227 -> 5229;
    5229 [label="Expr"];
    5229 -> 5230;
    5230 [label="Identifier"];
    5230 -> 5231;
    5231[label="_Player"];
    5227 -> 5232;
    5232[label=","];
    5227 -> 5233;
    5233 [label="Expr"];
    5233 -> 5236;
    5236 [label="BinaryOp(BinaryOp { syntax: 5236, lhs: Some(5234), operator: Some(5237), rhs: Some(5238) })"];
    5236 -> 5234;
    5234 [label="Identifier"];
    5234 -> 5235;
    5235[label="Landmark"];
    5236 -> 5237;
    5237[label="."];
    5236 -> 5238;
    5238 [label="Expr"];
    5238 -> 5239;
    5239 [label="Identifier"];
    5239 -> 5240;
    5240[label="Id"];
    5227 -> 5241;
    5241[label=")"];
    5223 -> 5242;
    5242[label=";"];
    5211 -> 5243;
    5243 [label="Else(Else { syntax: 5243, else_: Some(5244), if_: None, body: Some(5245) })"];
    5243 -> 5244;
    5244[label="else"];
    5243 -> 5245;
    5245 [label="Statement(Statement { syntax: 5245, statement: Some(5249), semicolon: Some(5264) })"];
    5245 -> 5246;
    5246 [label="Expr"];
    5246 -> 5247;
    5247 [label="Identifier"];
    5247 -> 5248;
    5248[label="MessageToShow"];
    5245 -> 5249;
    5249 [label="Assignment(Assignment { syntax: 5249, lvalue: Some(5246), operator: Some(5250), rvalue: Some(5251) })"];
    5249 -> 5250;
    5250[label="="];
    5249 -> 5251;
    5251 [label="Expr"];
    5251 -> 5254;
    5254 [label="BinaryOp(BinaryOp { syntax: 5254, lhs: Some(5252), operator: Some(5255), rhs: Some(5256) })"];
    5254 -> 5252;
    5252 [label="Literal"];
    5252 -> 5253;
    5253[label="\"Missing \""];
    5254 -> 5255;
    5255[label="^"];
    5254 -> 5256;
    5256 [label="Expr"];
    5256 -> 5259;
    5259 [label="BinaryOp(BinaryOp { syntax: 5259, lhs: Some(5257), operator: Some(5260), rhs: Some(5261) })"];
    5259 -> 5257;
    5257 [label="Identifier"];
    5257 -> 5258;
    5258[label="CpMissing"];
    5259 -> 5260;
    5260[label="^"];
    5259 -> 5261;
    5261 [label="Expr"];
    5261 -> 5262;
    5262 [label="Literal"];
    5262 -> 5263;
    5263[label="\" checkpoint(s)!\""];
    5245 -> 5264;
    5264[label=";"];
    5193 -> 5265;
    5265[label="}"];
    5160 -> 5266;
    5266[label="}"];
    5141 -> 5267;
    5267 [label="Else(Else { syntax: 5267, else_: Some(5268), if_: Some(5269), body: None })"];
    5267 -> 5268;
    5268[label="else"];
    5267 -> 5269;
    5269 [label="If(If { syntax: 5269, if_: Some(5270), lparen: Some(5271), condition: Some(5272), rparen: Some(5286), body: Some(5287), else_: Some(5542) })"];
    5269 -> 5270;
    5270[label="if"];
    5269 -> 5271;
    5271[label="("];
    5269 -> 5272;
    5272 [label="Expr"];
    5272 -> 5280;
    5280 [label="FunctionCall(FunctionCall { syntax: 5280, lhs: Some(5275), lparen: Some(5281), args: [(5282, None)], rparen: Some(5285) })"];
    5280 -> 5275;
    5275 [label="BinaryOp(BinaryOp { syntax: 5275, lhs: Some(5273), operator: Some(5276), rhs: Some(5277) })"];
    5275 -> 5273;
    5273 [label="Identifier"];
    5273 -> 5274;
    5274[label="Tools"];
    5275 -> 5276;
    5276[label="::"];
    5275 -> 5277;
    5277 [label="Expr"];
    5277 -> 5278;
    5278 [label="Identifier"];
    5278 -> 5279;
    5279[label="IsCheckpoint"];
    5280 -> 5281;
    5281[label="("];
    5280 -> 5282;
    5282 [label="Expr"];
    5282 -> 5283;
    5283 [label="Identifier"];
    5283 -> 5284;
    5284[label="Landmark"];
    5280 -> 5285;
    5285[label=")"];
    5269 -> 5286;
    5286[label=")"];
    5269 -> 5287;
    5287 [label="Statement(Statement { syntax: 5287, statement: Some(5288), semicolon: None })"];
    5287 -> 5288;
    5288 [label="Block(Block { syntax: 5288, lbrace: Some(5289), statements: [5290], rbrace: Some(5541) })"];
    5288 -> 5289;
    5289[label="{"];
    5288 -> 5290;
    5290 [label="Statement(Statement { syntax: 5290, statement: Some(5291), semicolon: None })"];
    5290 -> 5291;
    5291 [label="If(If { syntax: 5291, if_: Some(5292), lparen: Some(5293), condition: Some(5294), rparen: Some(5297), body: Some(5298), else_: Some(5344) })"];
    5291 -> 5292;
    5292[label="if"];
    5291 -> 5293;
    5293[label="("];
    5291 -> 5294;
    5294 [label="Expr"];
    5294 -> 5295;
    5295 [label="Identifier"];
    5295 -> 5296;
    5296[label="HasJumped"];
    5291 -> 5297;
    5297[label=")"];
    5291 -> 5298;
    5298 [label="Statement(Statement { syntax: 5298, statement: Some(5299), semicolon: None })"];
    5298 -> 5299;
    5299 [label="Block(Block { syntax: 5299, lbrace: Some(5300), statements: [5301], rbrace: Some(5343) })"];
    5299 -> 5300;
    5300[label="{"];
    5299 -> 5301;
    5301 [label="Statement(Statement { syntax: 5301, statement: Some(5302), semicolon: None })"];
    5301 -> 5302;
    5302 [label="If(If { syntax: 5302, if_: Some(5303), lparen: Some(5304), condition: Some(5305), rparen: Some(5318), body: Some(5319), else_: None })"];
    5302 -> 5303;
    5303[label="if"];
    5302 -> 5304;
    5304[label="("];
    5302 -> 5305;
    5305 [label="Expr"];
    5305 -> 5313;
    5313 [label="BinaryOp(BinaryOp { syntax: 5313, lhs: Some(5308), operator: Some(5314), rhs: Some(5315) })"];
    5313 -> 5308;
    5308 [label="BinaryOp(BinaryOp { syntax: 5308, lhs: Some(5306), operator: Some(5309), rhs: Some(5310) })"];
    5308 -> 5306;
    5306 [label="Identifier"];
    5306 -> 5307;
    5307[label="Landmark"];
    5308 -> 5309;
    5309[label="."];
    5308 -> 5310;
    5310 [label="Expr"];
    5310 -> 5311;
    5311 [label="Identifier"];
    5311 -> 5312;
    5312[label="Order"];
    5313 -> 5314;
    5314[label="!="];
    5313 -> 5315;
    5315 [label="Expr"];
    5315 -> 5316;
    5316 [label="Identifier"];
    5316 -> 5317;
    5317[label="CpProgress"];
    5302 -> 5318;
    5318[label=")"];
    5302 -> 5319;
    5319 [label="Statement(Statement { syntax: 5319, statement: Some(5320), semicolon: None })"];
    5319 -> 5320;
    5320 [label="Block(Block { syntax: 5320, lbrace: Some(5321), statements: [5322], rbrace: Some(5342) })"];
    5320 -> 5321;
    5321[label="{"];
    5320 -> 5322;
    5322 [label="Statement(Statement { syntax: 5322, statement: Some(5323), semicolon: Some(5341) })"];
    5322 -> 5323;
    5323 [label="Expr"];
    5323 -> 5326;
    5326 [label="FunctionCall(FunctionCall { syntax: 5326, lhs: Some(5324), lparen: Some(5327), args: [(5328, Some(5331)), (5332, None)], rparen: Some(5340) })"];
    5326 -> 5324;
    5324 [label="Identifier"];
    5324 -> 5325;
    5325[label="Private_HandleCheckpoint"];
    5326 -> 5327;
    5327[label="("];
    5326 -> 5328;
    5328 [label="Expr"];
    5328 -> 5329;
    5329 [label="Identifier"];
    5329 -> 5330;
    5330[label="_Player"];
    5326 -> 5331;
    5331[label=","];
    5326 -> 5332;
    5332 [label="Expr"];
    5332 -> 5335;
    5335 [label="BinaryOp(BinaryOp { syntax: 5335, lhs: Some(5333), operator: Some(5336), rhs: Some(5337) })"];
    5335 -> 5333;
    5333 [label="Identifier"];
    5333 -> 5334;
    5334[label="Landmark"];
    5335 -> 5336;
    5336[label="."];
    5335 -> 5337;
    5337 [label="Expr"];
    5337 -> 5338;
    5338 [label="Identifier"];
    5338 -> 5339;
    5339[label="Id"];
    5326 -> 5340;
    5340[label=")"];
    5322 -> 5341;
    5341[label=";"];
    5320 -> 5342;
    5342[label="}"];
    5299 -> 5343;
    5343[label="}"];
    5291 -> 5344;
    5344 [label="Else(Else { syntax: 5344, else_: Some(5345), if_: None, body: Some(5346) })"];
    5344 -> 5345;
    5345[label="else"];
    5344 -> 5346;
    5346 [label="Statement(Statement { syntax: 5346, statement: Some(5347), semicolon: None })"];
    5346 -> 5347;
    5347 [label="Block(Block { syntax: 5347, lbrace: Some(5348), statements: [5349, 5370, 5391, 5401, 5483], rbrace: Some(5540) })"];
    5347 -> 5348;
    5348[label="{"];
    5347 -> 5349;
    5349 [label="Statement(Statement { syntax: 5349, statement: Some(5350), semicolon: None })"];
    5349 -> 5350;
    5350 [label="VarDec(VarDec { syntax: 5350, declare: Some(5351), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5352), as_: None, alias: None, for_: None, target: None, assignment: Some(5354), value: Some(5355) })"];
    5350 -> 5351;
    5351[label="declare"];
    5350 -> 5352;
    5352 [label="Type(Type { syntax: 5352, basename: Some(5353), members: [], arrays: [] })"];
    5352 -> 5353;
    5353[label="LastCpTimes"];
    5350 -> 5354;
    5354[label="="];
    5350 -> 5355;
    5355 [label="Expr"];
    5355 -> 5363;
    5363 [label="FunctionCall(FunctionCall { syntax: 5363, lhs: Some(5358), lparen: Some(5364), args: [(5365, None)], rparen: Some(5368) })"];
    5363 -> 5358;
    5358 [label="BinaryOp(BinaryOp { syntax: 5358, lhs: Some(5356), operator: Some(5359), rhs: Some(5360) })"];
    5358 -> 5356;
    5356 [label="Identifier"];
    5356 -> 5357;
    5357[label="Player"];
    5358 -> 5359;
    5359[label="::"];
    5358 -> 5360;
    5360 [label="Expr"];
    5360 -> 5361;
    5361 [label="Identifier"];
    5361 -> 5362;
    5362[label="getLastCPTimes"];
    5363 -> 5364;
    5364[label="("];
    5363 -> 5365;
    5365 [label="Expr"];
    5365 -> 5366;
    5366 [label="Identifier"];
    5366 -> 5367;
    5367[label="_Player"];
    5363 -> 5368;
    5368[label=")"];
    5350 -> 5369;
    5369[label=";"];
    5347 -> 5370;
    5370 [label="Statement(Statement { syntax: 5370, statement: Some(5371), semicolon: None })"];
    5370 -> 5371;
    5371 [label="VarDec(VarDec { syntax: 5371, declare: Some(5372), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5373), as_: None, alias: None, for_: None, target: None, assignment: Some(5375), value: Some(5376) })"];
    5371 -> 5372;
    5372[label="declare"];
    5371 -> 5373;
    5373 [label="Type(Type { syntax: 5373, basename: Some(5374), members: [], arrays: [] })"];
    5373 -> 5374;
    5374[label="LastCheckpoint"];
    5371 -> 5375;
    5375[label="="];
    5371 -> 5376;
    5376 [label="Expr"];
    5376 -> 5384;
    5384 [label="FunctionCall(FunctionCall { syntax: 5384, lhs: Some(5379), lparen: Some(5385), args: [(5386, None)], rparen: Some(5389) })"];
    5384 -> 5379;
    5379 [label="BinaryOp(BinaryOp { syntax: 5379, lhs: Some(5377), operator: Some(5380), rhs: Some(5381) })"];
    5379 -> 5377;
    5377 [label="Identifier"];
    5377 -> 5378;
    5378[label="Player"];
    5379 -> 5380;
    5380[label="::"];
    5379 -> 5381;
    5381 [label="Expr"];
    5381 -> 5382;
    5382 [label="Identifier"];
    5382 -> 5383;
    5383[label="getLastCheckpoint"];
    5384 -> 5385;
    5385[label="("];
    5384 -> 5386;
    5386 [label="Expr"];
    5386 -> 5387;
    5387 [label="Identifier"];
    5387 -> 5388;
    5388[label="_Player"];
    5384 -> 5389;
    5389[label=")"];
    5371 -> 5390;
    5390[label=";"];
    5347 -> 5391;
    5391 [label="Statement(Statement { syntax: 5391, statement: Some(5392), semicolon: None })"];
    5391 -> 5392;
    5392 [label="VarDec(VarDec { syntax: 5392, declare: Some(5393), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5394), as_: None, alias: None, for_: None, target: None, assignment: Some(5396), value: Some(5397) })"];
    5392 -> 5393;
    5393[label="declare"];
    5392 -> 5394;
    5394 [label="Type(Type { syntax: 5394, basename: Some(5395), members: [], arrays: [] })"];
    5394 -> 5395;
    5395[label="isNextCp"];
    5392 -> 5396;
    5396[label="="];
    5392 -> 5397;
    5397 [label="Expr"];
    5397 -> 5398;
    5398 [label="Literal"];
    5398 -> 5399;
    5399[label="True"];
    5392 -> 5400;
    5400[label=";"];
    5347 -> 5401;
    5401 [label="Statement(Statement { syntax: 5401, statement: Some(5402), semicolon: None })"];
    5401 -> 5402;
    5402 [label="If(If { syntax: 5402, if_: Some(5403), lparen: Some(5404), condition: Some(5405), rparen: Some(5418), body: Some(5419), else_: Some(5452) })"];
    5402 -> 5403;
    5403[label="if"];
    5402 -> 5404;
    5404[label="("];
    5402 -> 5405;
    5405 [label="Expr"];
    5405 -> 5413;
    5413 [label="BinaryOp(BinaryOp { syntax: 5413, lhs: Some(5408), operator: Some(5414), rhs: Some(5415) })"];
    5413 -> 5408;
    5408 [label="BinaryOp(BinaryOp { syntax: 5408, lhs: Some(5406), operator: Some(5409), rhs: Some(5410) })"];
    5408 -> 5406;
    5406 [label="Identifier"];
    5406 -> 5407;
    5407[label="Landmark"];
    5408 -> 5409;
    5409[label="."];
    5408 -> 5410;
    5410 [label="Expr"];
    5410 -> 5411;
    5411 [label="Identifier"];
    5411 -> 5412;
    5412[label="Order"];
    5413 -> 5414;
    5414[label="=="];
    5413 -> 5415;
    5415 [label="Expr"];
    5415 -> 5416;
    5416 [label="Literal"];
    5416 -> 5417;
    5417[label="0"];
    5402 -> 5418;
    5418[label=")"];
    5402 -> 5419;
    5419 [label="Statement(Statement { syntax: 5419, statement: Some(5420), semicolon: None })"];
    5419 -> 5420;
    5420 [label="Block(Block { syntax: 5420, lbrace: Some(5421), statements: [5422], rbrace: Some(5451) })"];
    5420 -> 5421;
    5421[label="{"];
    5420 -> 5422;
    5422 [label="Statement(Statement { syntax: 5422, statement: Some(5426), semicolon: Some(5450) })"];
    5422 -> 5423;
    5423 [label="Expr"];
    5423 -> 5424;
    5424 [label="Identifier"];
    5424 -> 5425;
    5425[label="isNextCp"];
    5422 -> 5426;
    5426 [label="Assignment(Assignment { syntax: 5426, lvalue: Some(5423), operator: Some(5427), rvalue: Some(5428) })"];
    5426 -> 5427;
    5427[label="="];
    5426 -> 5428;
    5428 [label="Expr"];
    5428 -> 5439;
    5439 [label="FunctionCall(FunctionCall { syntax: 5439, lhs: Some(5429), lparen: Some(5440), args: [(5441, None)], rparen: Some(5449) })"];
    5439 -> 5429;
    5429 [label="UnOp(UnOp { syntax: 5429, operator: Some(5430), operand: Some(5431) })"];
    5429 -> 5430;
    5430[label="!"];
    5429 -> 5431;
    5431 [label="Expr"];
    5431 -> 5434;
    5434 [label="BinaryOp(BinaryOp { syntax: 5434, lhs: Some(5432), operator: Some(5435), rhs: Some(5436) })"];
    5434 -> 5432;
    5432 [label="Identifier"];
    5432 -> 5433;
    5433[label="LastCpTimes"];
    5434 -> 5435;
    5435[label="."];
    5434 -> 5436;
    5436 [label="Expr"];
    5436 -> 5437;
    5437 [label="Identifier"];
    5437 -> 5438;
    5438[label="existskey"];
    5439 -> 5440;
    5440[label="("];
    5439 -> 5441;
    5441 [label="Expr"];
    5441 -> 5444;
    5444 [label="BinaryOp(BinaryOp { syntax: 5444, lhs: Some(5442), operator: Some(5445), rhs: Some(5446) })"];
    5444 -> 5442;
    5442 [label="Identifier"];
    5442 -> 5443;
    5443[label="Landmark"];
    5444 -> 5445;
    5445[label="."];
    5444 -> 5446;
    5446 [label="Expr"];
    5446 -> 5447;
    5447 [label="Identifier"];
    5447 -> 5448;
    5448[label="Id"];
    5439 -> 5449;
    5449[label=")"];
    5422 -> 5450;
    5450[label=";"];
    5420 -> 5451;
    5451[label="}"];
    5402 -> 5452;
    5452 [label="Else(Else { syntax: 5452, else_: Some(5453), if_: None, body: Some(5454) })"];
    5452 -> 5453;
    5453[label="else"];
    5452 -> 5454;
    5454 [label="Statement(Statement { syntax: 5454, statement: Some(5455), semicolon: None })"];
    5454 -> 5455;
    5455 [label="Block(Block { syntax: 5455, lbrace: Some(5456), statements: [5457], rbrace: Some(5482) })"];
    5455 -> 5456;
    5456[label="{"];
    5455 -> 5457;
    5457 [label="Statement(Statement { syntax: 5457, statement: Some(5461), semicolon: Some(5481) })"];
    5457 -> 5458;
    5458 [label="Expr"];
    5458 -> 5459;
    5459 [label="Identifier"];
    5459 -> 5460;
    5460[label="isNextCp"];
    5457 -> 5461;
    5461 [label="Assignment(Assignment { syntax: 5461, lvalue: Some(5458), operator: Some(5462), rvalue: Some(5463) })"];
    5461 -> 5462;
    5462[label="="];
    5461 -> 5463;
    5463 [label="Expr"];
    5463 -> 5471;
    5471 [label="BinaryOp(BinaryOp { syntax: 5471, lhs: Some(5466), operator: Some(5472), rhs: Some(5473) })"];
    5471 -> 5466;
    5466 [label="BinaryOp(BinaryOp { syntax: 5466, lhs: Some(5464), operator: Some(5467), rhs: Some(5468) })"];
    5466 -> 5464;
    5464 [label="Identifier"];
    5464 -> 5465;
    5465[label="Landmark"];
    5466 -> 5467;
    5467[label="."];
    5466 -> 5468;
    5468 [label="Expr"];
    5468 -> 5469;
    5469 [label="Identifier"];
    5469 -> 5470;
    5470[label="Order"];
    5471 -> 5472;
    5472[label="=="];
    5471 -> 5473;
    5473 [label="Expr"];
    5473 -> 5476;
    5476 [label="BinaryOp(BinaryOp { syntax: 5476, lhs: Some(5474), operator: Some(5477), rhs: Some(5478) })"];
    5476 -> 5474;
    5474 [label="Identifier"];
    5474 -> 5475;
    5475[label="CpProgress"];
    5476 -> 5477;
    5477[label="+"];
    5476 -> 5478;
    5478 [label="Expr"];
    5478 -> 5479;
    5479 [label="Literal"];
    5479 -> 5480;
    5480[label="1"];
    5457 -> 5481;
    5481[label=";"];
    5455 -> 5482;
    5482[label="}"];
    5347 -> 5483;
    5483 [label="Statement(Statement { syntax: 5483, statement: Some(5484), semicolon: None })"];
    5483 -> 5484;
    5484 [label="If(If { syntax: 5484, if_: Some(5485), lparen: Some(5486), condition: Some(5487), rparen: Some(5490), body: Some(5491), else_: Some(5511) })"];
    5484 -> 5485;
    5485[label="if"];
    5484 -> 5486;
    5486[label="("];
    5484 -> 5487;
    5487 [label="Expr"];
    5487 -> 5488;
    5488 [label="Identifier"];
    5488 -> 5489;
    5489[label="isNextCp"];
    5484 -> 5490;
    5490[label=")"];
    5484 -> 5491;
    5491 [label="Statement(Statement { syntax: 5491, statement: Some(5492), semicolon: Some(5510) })"];
    5491 -> 5492;
    5492 [label="Expr"];
    5492 -> 5495;
    5495 [label="FunctionCall(FunctionCall { syntax: 5495, lhs: Some(5493), lparen: Some(5496), args: [(5497, Some(5500)), (5501, None)], rparen: Some(5509) })"];
    5495 -> 5493;
    5493 [label="Identifier"];
    5493 -> 5494;
    5494[label="Private_HandleCheckpoint"];
    5495 -> 5496;
    5496[label="("];
    5495 -> 5497;
    5497 [label="Expr"];
    5497 -> 5498;
    5498 [label="Identifier"];
    5498 -> 5499;
    5499[label="_Player"];
    5495 -> 5500;
    5500[label=","];
    5495 -> 5501;
    5501 [label="Expr"];
    5501 -> 5504;
    5504 [label="BinaryOp(BinaryOp { syntax: 5504, lhs: Some(5502), operator: Some(5505), rhs: Some(5506) })"];
    5504 -> 5502;
    5502 [label="Identifier"];
    5502 -> 5503;
    5503[label="Landmark"];
    5504 -> 5505;
    5505[label="."];
    5504 -> 5506;
    5506 [label="Expr"];
    5506 -> 5507;
    5507 [label="Identifier"];
    5507 -> 5508;
    5508[label="Id"];
    5495 -> 5509;
    5509[label=")"];
    5491 -> 5510;
    5510[label=";"];
    5484 -> 5511;
    5511 [label="Else(Else { syntax: 5511, else_: Some(5512), if_: Some(5513), body: None })"];
    5511 -> 5512;
    5512[label="else"];
    5511 -> 5513;
    5513 [label="If(If { syntax: 5513, if_: Some(5514), lparen: Some(5515), condition: Some(5516), rparen: Some(5529), body: Some(5530), else_: None })"];
    5513 -> 5514;
    5514[label="if"];
    5513 -> 5515;
    5515[label="("];
    5513 -> 5516;
    5516 [label="Expr"];
    5516 -> 5524;
    5524 [label="BinaryOp(BinaryOp { syntax: 5524, lhs: Some(5519), operator: Some(5525), rhs: Some(5526) })"];
    5524 -> 5519;
    5519 [label="BinaryOp(BinaryOp { syntax: 5519, lhs: Some(5517), operator: Some(5520), rhs: Some(5521) })"];
    5519 -> 5517;
    5517 [label="Identifier"];
    5517 -> 5518;
    5518[label="Landmark"];
    5519 -> 5520;
    5520[label="."];
    5519 -> 5521;
    5521 [label="Expr"];
    5521 -> 5522;
    5522 [label="Identifier"];
    5522 -> 5523;
    5523[label="Id"];
    5524 -> 5525;
    5525[label="!="];
    5524 -> 5526;
    5526 [label="Expr"];
    5526 -> 5527;
    5527 [label="Identifier"];
    5527 -> 5528;
    5528[label="LastCheckpoint"];
    5513 -> 5529;
    5529[label=")"];
    5513 -> 5530;
    5530 [label="Statement(Statement { syntax: 5530, statement: Some(5534), semicolon: Some(5539) })"];
    5530 -> 5531;
    5531 [label="Expr"];
    5531 -> 5532;
    5532 [label="Identifier"];
    5532 -> 5533;
    5533[label="MessageToShow"];
    5530 -> 5534;
    5534 [label="Assignment(Assignment { syntax: 5534, lvalue: Some(5531), operator: Some(5535), rvalue: Some(5536) })"];
    5534 -> 5535;
    5535[label="="];
    5534 -> 5536;
    5536 [label="Expr"];
    5536 -> 5537;
    5537 [label="Literal"];
    5537 -> 5538;
    5538[label="\"Wrong checkpoint !\""];
    5530 -> 5539;
    5539[label=";"];
    5347 -> 5540;
    5540[label="}"];
    5288 -> 5541;
    5541[label="}"];
    5269 -> 5542;
    5542 [label="Else(Else { syntax: 5542, else_: Some(5543), if_: Some(5544), body: None })"];
    5542 -> 5543;
    5543[label="else"];
    5542 -> 5544;
    5544 [label="If(If { syntax: 5544, if_: Some(5545), lparen: Some(5546), condition: Some(5547), rparen: Some(5561), body: Some(5562), else_: None })"];
    5544 -> 5545;
    5545[label="if"];
    5544 -> 5546;
    5546[label="("];
    5544 -> 5547;
    5547 [label="Expr"];
    5547 -> 5555;
    5555 [label="FunctionCall(FunctionCall { syntax: 5555, lhs: Some(5550), lparen: Some(5556), args: [(5557, None)], rparen: Some(5560) })"];
    5555 -> 5550;
    5550 [label="BinaryOp(BinaryOp { syntax: 5550, lhs: Some(5548), operator: Some(5551), rhs: Some(5552) })"];
    5550 -> 5548;
    5548 [label="Identifier"];
    5548 -> 5549;
    5549[label="Tools"];
    5550 -> 5551;
    5551[label="::"];
    5550 -> 5552;
    5552 [label="Expr"];
    5552 -> 5553;
    5553 [label="Identifier"];
    5553 -> 5554;
    5554[label="IsPortal"];
    5555 -> 5556;
    5556[label="("];
    5555 -> 5557;
    5557 [label="Expr"];
    5557 -> 5558;
    5558 [label="Identifier"];
    5558 -> 5559;
    5559[label="Landmark"];
    5555 -> 5560;
    5560[label=")"];
    5544 -> 5561;
    5561[label=")"];
    5544 -> 5562;
    5562 [label="Statement(Statement { syntax: 5562, statement: Some(5563), semicolon: None })"];
    5562 -> 5563;
    5563 [label="Block(Block { syntax: 5563, lbrace: Some(5564), statements: [5565], rbrace: Some(5585) })"];
    5563 -> 5564;
    5564[label="{"];
    5563 -> 5565;
    5565 [label="Statement(Statement { syntax: 5565, statement: Some(5566), semicolon: Some(5584) })"];
    5565 -> 5566;
    5566 [label="Expr"];
    5566 -> 5569;
    5569 [label="FunctionCall(FunctionCall { syntax: 5569, lhs: Some(5567), lparen: Some(5570), args: [(5571, Some(5574)), (5575, None)], rparen: Some(5583) })"];
    5569 -> 5567;
    5567 [label="Identifier"];
    5567 -> 5568;
    5568[label="Private_UsePortal"];
    5569 -> 5570;
    5570[label="("];
    5569 -> 5571;
    5571 [label="Expr"];
    5571 -> 5572;
    5572 [label="Identifier"];
    5572 -> 5573;
    5573[label="_Player"];
    5569 -> 5574;
    5574[label=","];
    5569 -> 5575;
    5575 [label="Expr"];
    5575 -> 5578;
    5578 [label="BinaryOp(BinaryOp { syntax: 5578, lhs: Some(5576), operator: Some(5579), rhs: Some(5580) })"];
    5578 -> 5576;
    5576 [label="Identifier"];
    5576 -> 5577;
    5577[label="Landmark"];
    5578 -> 5579;
    5579[label="."];
    5578 -> 5580;
    5580 [label="Expr"];
    5580 -> 5581;
    5581 [label="Identifier"];
    5581 -> 5582;
    5582[label="Id"];
    5569 -> 5583;
    5583[label=")"];
    5565 -> 5584;
    5584[label=";"];
    5563 -> 5585;
    5585[label="}"];
    4970 -> 5586;
    5586 [label="Statement(Statement { syntax: 5586, statement: Some(5587), semicolon: None })"];
    5586 -> 5587;
    5587 [label="VarDec(VarDec { syntax: 5587, declare: Some(5588), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5589), as_: None, alias: None, for_: Some(5591), target: Some(5592), assignment: Some(5595), value: Some(5596) })"];
    5587 -> 5588;
    5588[label="declare"];
    5587 -> 5589;
    5589 [label="Type(Type { syntax: 5589, basename: Some(5590), members: [], arrays: [] })"];
    5589 -> 5590;
    5590[label="LastStatusMessage"];
    5587 -> 5591;
    5591[label="for"];
    5587 -> 5592;
    5592 [label="Expr"];
    5592 -> 5593;
    5593 [label="Identifier"];
    5593 -> 5594;
    5594[label="_Player"];
    5587 -> 5595;
    5595[label="="];
    5587 -> 5596;
    5596 [label="Expr"];
    5596 -> 5597;
    5597 [label="Identifier"];
    5597 -> 5598;
    5598[label="Now"];
    5587 -> 5599;
    5599[label=";"];
    4970 -> 5600;
    5600 [label="Statement(Statement { syntax: 5600, statement: Some(5601), semicolon: None })"];
    5600 -> 5601;
    5601 [label="If(If { syntax: 5601, if_: Some(5602), lparen: Some(5603), condition: Some(5604), rparen: Some(5627), body: Some(5628), else_: None })"];
    5601 -> 5602;
    5602[label="if"];
    5601 -> 5603;
    5603[label="("];
    5601 -> 5604;
    5604 [label="Expr"];
    5604 -> 5612;
    5612 [label="BinaryOp(BinaryOp { syntax: 5612, lhs: Some(5607), operator: Some(5613), rhs: Some(5614) })"];
    5612 -> 5607;
    5607 [label="BinaryOp(BinaryOp { syntax: 5607, lhs: Some(5605), operator: Some(5608), rhs: Some(5609) })"];
    5607 -> 5605;
    5605 [label="Identifier"];
    5605 -> 5606;
    5606[label="MessageToShow"];
    5607 -> 5608;
    5608[label="!="];
    5607 -> 5609;
    5609 [label="Expr"];
    5609 -> 5610;
    5610 [label="Literal"];
    5610 -> 5611;
    5611[label="\"\""];
    5612 -> 5613;
    5613[label="&&"];
    5612 -> 5614;
    5614 [label="Expr"];
    5614 -> 5622;
    5622 [label="BinaryOp(BinaryOp { syntax: 5622, lhs: Some(5617), operator: Some(5623), rhs: Some(5624) })"];
    5622 -> 5617;
    5617 [label="BinaryOp(BinaryOp { syntax: 5617, lhs: Some(5615), operator: Some(5618), rhs: Some(5619) })"];
    5617 -> 5615;
    5615 [label="Identifier"];
    5615 -> 5616;
    5616[label="LastStatusMessage"];
    5617 -> 5618;
    5618[label="+"];
    5617 -> 5619;
    5619 [label="Expr"];
    5619 -> 5620;
    5620 [label="Literal"];
    5620 -> 5621;
    5621[label="2500"];
    5622 -> 5623;
    5623[label="<"];
    5622 -> 5624;
    5624 [label="Expr"];
    5624 -> 5625;
    5625 [label="Identifier"];
    5625 -> 5626;
    5626[label="Now"];
    5601 -> 5627;
    5627[label=")"];
    5601 -> 5628;
    5628 [label="Statement(Statement { syntax: 5628, statement: Some(5629), semicolon: None })"];
    5628 -> 5629;
    5629 [label="Block(Block { syntax: 5629, lbrace: Some(5630), statements: [5631, 5641], rbrace: Some(5687) })"];
    5629 -> 5630;
    5630[label="{"];
    5629 -> 5631;
    5631 [label="Statement(Statement { syntax: 5631, statement: Some(5635), semicolon: Some(5640) })"];
    5631 -> 5632;
    5632 [label="Expr"];
    5632 -> 5633;
    5633 [label="Identifier"];
    5633 -> 5634;
    5634[label="LastStatusMessage"];
    5631 -> 5635;
    5635 [label="Assignment(Assignment { syntax: 5635, lvalue: Some(5632), operator: Some(5636), rvalue: Some(5637) })"];
    5635 -> 5636;
    5636[label="="];
    5635 -> 5637;
    5637 [label="Expr"];
    5637 -> 5638;
    5638 [label="Identifier"];
    5638 -> 5639;
    5639[label="Now"];
    5631 -> 5640;
    5640[label=";"];
    5629 -> 5641;
    5641 [label="Statement(Statement { syntax: 5641, statement: Some(5642), semicolon: Some(5686) })"];
    5641 -> 5642;
    5642 [label="Expr"];
    5642 -> 5650;
    5650 [label="FunctionCall(FunctionCall { syntax: 5650, lhs: Some(5645), lparen: Some(5651), args: [(5652, Some(5655)), (5656, Some(5659)), (5660, Some(5663)), (5664, Some(5667)), (5668, Some(5681)), (5682, None)], rparen: Some(5685) })"];
    5650 -> 5645;
    5645 [label="BinaryOp(BinaryOp { syntax: 5645, lhs: Some(5643), operator: Some(5646), rhs: Some(5647) })"];
    5645 -> 5643;
    5643 [label="Identifier"];
    5643 -> 5644;
    5644[label="Message"];
    5645 -> 5646;
    5646[label="::"];
    5645 -> 5647;
    5647 [label="Expr"];
    5647 -> 5648;
    5648 [label="Identifier"];
    5648 -> 5649;
    5649[label="SendBigMessage"];
    5650 -> 5651;
    5651[label="("];
    5650 -> 5652;
    5652 [label="Expr"];
    5652 -> 5653;
    5653 [label="Identifier"];
    5653 -> 5654;
    5654[label="_Player"];
    5650 -> 5655;
    5655[label=","];
    5650 -> 5656;
    5656 [label="Expr"];
    5656 -> 5657;
    5657 [label="Identifier"];
    5657 -> 5658;
    5658[label="MessageToShow"];
    5650 -> 5659;
    5659[label=","];
    5650 -> 5660;
    5660 [label="Expr"];
    5660 -> 5661;
    5661 [label="Literal"];
    5661 -> 5662;
    5662[label="2000"];
    5650 -> 5663;
    5663[label=","];
    5650 -> 5664;
    5664 [label="Expr"];
    5664 -> 5665;
    5665 [label="Literal"];
    5665 -> 5666;
    5666[label="0"];
    5650 -> 5667;
    5667[label=","];
    5650 -> 5668;
    5668 [label="Expr"];
    5668 -> 5671;
    5671 [label="BinaryOp(BinaryOp { syntax: 5671, lhs: Some(5669), operator: Some(5672), rhs: Some(5673) })"];
    5671 -> 5669;
    5669 [label="Identifier"];
    5669 -> 5670;
    5670[label="CUIConfig"];
    5671 -> 5672;
    5672[label="::"];
    5671 -> 5673;
    5673 [label="Expr"];
    5673 -> 5676;
    5676 [label="BinaryOp(BinaryOp { syntax: 5676, lhs: Some(5674), operator: Some(5677), rhs: Some(5678) })"];
    5676 -> 5674;
    5674 [label="Identifier"];
    5674 -> 5675;
    5675[label="EUISound"];
    5676 -> 5677;
    5677[label="::"];
    5676 -> 5678;
    5678 [label="Expr"];
    5678 -> 5679;
    5679 [label="Identifier"];
    5679 -> 5680;
    5680[label="Warning"];
    5650 -> 5681;
    5681[label=","];
    5650 -> 5682;
    5682 [label="Expr"];
    5682 -> 5683;
    5683 [label="Literal"];
    5683 -> 5684;
    5684[label="1"];
    5650 -> 5685;
    5685[label=")"];
    5641 -> 5686;
    5686[label=";"];
    5629 -> 5687;
    5687[label="}"];
    4970 -> 5688;
    5688[label="}"];
    0 -> 5689;
    5689[label=""];
}
