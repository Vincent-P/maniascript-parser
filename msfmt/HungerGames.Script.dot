digraph ast {
    0 [label="File(File { syntax: 0, hashes: [1, 4, 10, 16, 22, 27, 32, 49, 66, 86, 103, 120, 137, 154, 171, 188, 205, 211, 217, 223, 229, 235, 241, 247, 277, 283, 289, 295, 301, 307, 313, 319, 325, 331, 337, 343, 349, 355, 361, 367, 373, 379, 385, 391, 397, 403, 415, 497, 530, 554, 587], globals: [635, 641, 649, 657, 665, 671, 679, 688, 696], labels: [702, 764, 820, 1012, 1087, 1181, 1380, 1553, 2786, 3728, 3831, 4113, 4447, 4505, 4634, 4763, 8439, 9371], functions: [9409, 9689, 9795, 9939, 10452, 10845, 10884, 11030, 11146, 11252, 12326, 12680, 12721, 12762, 12811, 12986, 13062, 13157, 13173], eof: Some(13199) })"];
    0 -> 1;
    1 [label="Extends(Extends { syntax: 1, extends: Some(2), path: Some(3) })"];
    1 -> 2;
    2[label="#Extends"];
    1 -> 3;
    3[label="\"Modes/ShootMania/ModeGalaxyTitles.Script.txt\""];
    0 -> 4;
    4 [label="Const(Const { syntax: 4, const_: Some(5), name: Some(6), value: Some(7) })"];
    4 -> 5;
    5[label="#Const"];
    4 -> 6;
    6[label="CompatibleMapTypes"];
    4 -> 7;
    7 [label="Expr"];
    7 -> 8;
    8 [label="Literal"];
    8 -> 9;
    9[label="\"HungerGamesV2Arena\""];
    0 -> 10;
    10 [label="Const(Const { syntax: 10, const_: Some(11), name: Some(12), value: Some(13) })"];
    10 -> 11;
    11[label="#Const"];
    10 -> 12;
    12[label="Version"];
    10 -> 13;
    13 [label="Expr"];
    13 -> 14;
    14 [label="Literal"];
    14 -> 15;
    15[label="\"2018-02-17\""];
    0 -> 16;
    16 [label="Const(Const { syntax: 16, const_: Some(17), name: Some(18), value: Some(19) })"];
    16 -> 17;
    17[label="#Const"];
    16 -> 18;
    18[label="ScriptName"];
    16 -> 19;
    19 [label="Expr"];
    19 -> 20;
    20 [label="Literal"];
    20 -> 21;
    21[label="\"Modes/ShootMania/HungerGames.Script.txt\""];
    0 -> 22;
    22 [label="Include(Include { syntax: 22, include: Some(23), path: Some(24), as_: Some(25), name: Some(26) })"];
    22 -> 23;
    23[label="#Include"];
    22 -> 24;
    24[label="\"Libs/Nadeo/ShootMania/Map.Script.txt\""];
    22 -> 25;
    25[label="as"];
    22 -> 26;
    26[label="Map"];
    0 -> 27;
    27 [label="Include(Include { syntax: 27, include: Some(28), path: Some(29), as_: Some(30), name: Some(31) })"];
    27 -> 28;
    28[label="#Include"];
    27 -> 29;
    29[label="\"Libs/domino54/MultiClans.Script.txt\""];
    27 -> 30;
    30[label="as"];
    27 -> 31;
    31[label="Clans"];
    0 -> 32;
    32 [label="Setting(Setting { syntax: 32, setting: Some(33), name: Some(34), value: Some(35), as_: None, description: None })"];
    32 -> 33;
    33[label="#Setting"];
    32 -> 34;
    34[label="S_OffZoneActivationTime"];
    32 -> 35;
    35 [label="Expr"];
    35 -> 43;
    43 [label="FunctionCall(FunctionCall { syntax: 43, lhs: Some(38), lparen: Some(44), args: [(45, None)], rparen: Some(48) })"];
    43 -> 38;
    38 [label="BinaryOp(BinaryOp { syntax: 38, lhs: Some(36), operator: Some(39), rhs: Some(40) })"];
    38 -> 36;
    36 [label="Literal"];
    36 -> 37;
    37[label="360"];
    38 -> 39;
    39[label="as"];
    38 -> 40;
    40 [label="Expr"];
    40 -> 41;
    41 [label="Identifier"];
    41 -> 42;
    42[label="_"];
    43 -> 44;
    44[label="("];
    43 -> 45;
    45 [label="Expr"];
    45 -> 46;
    46 [label="Literal"];
    46 -> 47;
    47[label="\"OffZone activation time (0 = don't activate)\""];
    43 -> 48;
    48[label=")"];
    0 -> 49;
    49 [label="Setting(Setting { syntax: 49, setting: Some(50), name: Some(51), value: Some(52), as_: None, description: None })"];
    49 -> 50;
    50[label="#Setting"];
    49 -> 51;
    51[label="S_OffZoneShrinkDuration"];
    49 -> 52;
    52 [label="Expr"];
    52 -> 60;
    60 [label="FunctionCall(FunctionCall { syntax: 60, lhs: Some(55), lparen: Some(61), args: [(62, None)], rparen: Some(65) })"];
    60 -> 55;
    55 [label="BinaryOp(BinaryOp { syntax: 55, lhs: Some(53), operator: Some(56), rhs: Some(57) })"];
    55 -> 53;
    53 [label="Literal"];
    53 -> 54;
    54[label="180"];
    55 -> 56;
    56[label="as"];
    55 -> 57;
    57 [label="Expr"];
    57 -> 58;
    58 [label="Identifier"];
    58 -> 59;
    59[label="_"];
    60 -> 61;
    61[label="("];
    60 -> 62;
    62 [label="Expr"];
    62 -> 63;
    63 [label="Literal"];
    63 -> 64;
    64[label="\"OffZone shrink duration (min. 60)\""];
    60 -> 65;
    65[label=")"];
    0 -> 66;
    66 [label="Setting(Setting { syntax: 66, setting: Some(67), name: Some(68), value: Some(69), as_: None, description: None })"];
    66 -> 67;
    67[label="#Setting"];
    66 -> 68;
    68[label="S_ObjectsSpawnRatio"];
    66 -> 69;
    69 [label="Expr"];
    69 -> 80;
    80 [label="FunctionCall(FunctionCall { syntax: 80, lhs: Some(75), lparen: Some(81), args: [(82, None)], rparen: Some(85) })"];
    80 -> 75;
    75 [label="BinaryOp(BinaryOp { syntax: 75, lhs: Some(70), operator: Some(76), rhs: Some(77) })"];
    75 -> 70;
    70 [label="UnOp(UnOp { syntax: 70, operator: Some(71), operand: Some(72) })"];
    70 -> 71;
    71[label="-"];
    70 -> 72;
    72 [label="Expr"];
    72 -> 73;
    73 [label="Literal"];
    73 -> 74;
    74[label="1."];
    75 -> 76;
    76[label="as"];
    75 -> 77;
    77 [label="Expr"];
    77 -> 78;
    78 [label="Identifier"];
    78 -> 79;
    79[label="_"];
    80 -> 81;
    81[label="("];
    80 -> 82;
    82 [label="Expr"];
    82 -> 83;
    83 [label="Literal"];
    83 -> 84;
    84[label="\"Objects spawning ratio (-1 = auto)\""];
    80 -> 85;
    85[label=")"];
    0 -> 86;
    86 [label="Setting(Setting { syntax: 86, setting: Some(87), name: Some(88), value: Some(89), as_: None, description: None })"];
    86 -> 87;
    87[label="#Setting"];
    86 -> 88;
    88[label="S_NewcomersJoinTime"];
    86 -> 89;
    89 [label="Expr"];
    89 -> 97;
    97 [label="FunctionCall(FunctionCall { syntax: 97, lhs: Some(92), lparen: Some(98), args: [(99, None)], rparen: Some(102) })"];
    97 -> 92;
    92 [label="BinaryOp(BinaryOp { syntax: 92, lhs: Some(90), operator: Some(93), rhs: Some(94) })"];
    92 -> 90;
    90 [label="Literal"];
    90 -> 91;
    91[label="240"];
    92 -> 93;
    93[label="as"];
    92 -> 94;
    94 [label="Expr"];
    94 -> 95;
    95 [label="Identifier"];
    95 -> 96;
    96[label="_"];
    97 -> 98;
    98[label="("];
    97 -> 99;
    99 [label="Expr"];
    99 -> 100;
    100 [label="Literal"];
    100 -> 101;
    101[label="\"Time for new players to join the game after it starts\""];
    97 -> 102;
    102[label=")"];
    0 -> 103;
    103 [label="Setting(Setting { syntax: 103, setting: Some(104), name: Some(105), value: Some(106), as_: None, description: None })"];
    103 -> 104;
    104[label="#Setting"];
    103 -> 105;
    105[label="S_ObjectsDroppingRatio"];
    103 -> 106;
    106 [label="Expr"];
    106 -> 114;
    114 [label="FunctionCall(FunctionCall { syntax: 114, lhs: Some(109), lparen: Some(115), args: [(116, None)], rparen: Some(119) })"];
    114 -> 109;
    109 [label="BinaryOp(BinaryOp { syntax: 109, lhs: Some(107), operator: Some(110), rhs: Some(111) })"];
    109 -> 107;
    107 [label="Literal"];
    107 -> 108;
    108[label=".5"];
    109 -> 110;
    110[label="as"];
    109 -> 111;
    111 [label="Expr"];
    111 -> 112;
    112 [label="Identifier"];
    112 -> 113;
    113[label="_"];
    114 -> 115;
    115[label="("];
    114 -> 116;
    116 [label="Expr"];
    116 -> 117;
    117 [label="Literal"];
    117 -> 118;
    118[label="\"Objects drop ratio from eliminated players\""];
    114 -> 119;
    119[label=")"];
    0 -> 120;
    120 [label="Setting(Setting { syntax: 120, setting: Some(121), name: Some(122), value: Some(123), as_: None, description: None })"];
    120 -> 121;
    121[label="#Setting"];
    120 -> 122;
    122[label="S_RandomizeObjectsSpawns"];
    120 -> 123;
    123 [label="Expr"];
    123 -> 131;
    131 [label="FunctionCall(FunctionCall { syntax: 131, lhs: Some(126), lparen: Some(132), args: [(133, None)], rparen: Some(136) })"];
    131 -> 126;
    126 [label="BinaryOp(BinaryOp { syntax: 126, lhs: Some(124), operator: Some(127), rhs: Some(128) })"];
    126 -> 124;
    124 [label="Literal"];
    124 -> 125;
    125[label="True"];
    126 -> 127;
    127[label="as"];
    126 -> 128;
    128 [label="Expr"];
    128 -> 129;
    129 [label="Identifier"];
    129 -> 130;
    130[label="_"];
    131 -> 132;
    132[label="("];
    131 -> 133;
    133 [label="Expr"];
    133 -> 134;
    134 [label="Literal"];
    134 -> 135;
    135[label="\"Randomize objects locations on the map (except Armor)\""];
    131 -> 136;
    136[label=")"];
    0 -> 137;
    137 [label="Setting(Setting { syntax: 137, setting: Some(138), name: Some(139), value: Some(140), as_: None, description: None })"];
    137 -> 138;
    138[label="#Setting"];
    137 -> 139;
    139[label="S_ArmorRespawnTime"];
    137 -> 140;
    140 [label="Expr"];
    140 -> 148;
    148 [label="FunctionCall(FunctionCall { syntax: 148, lhs: Some(143), lparen: Some(149), args: [(150, None)], rparen: Some(153) })"];
    148 -> 143;
    143 [label="BinaryOp(BinaryOp { syntax: 143, lhs: Some(141), operator: Some(144), rhs: Some(145) })"];
    143 -> 141;
    141 [label="Literal"];
    141 -> 142;
    142[label="180"];
    143 -> 144;
    144[label="as"];
    143 -> 145;
    145 [label="Expr"];
    145 -> 146;
    146 [label="Identifier"];
    146 -> 147;
    147[label="_"];
    148 -> 149;
    149[label="("];
    148 -> 150;
    150 [label="Expr"];
    150 -> 151;
    151 [label="Literal"];
    151 -> 152;
    152[label="\"Armor and Replie respawn duration (0 = don't respawn)\""];
    148 -> 153;
    153[label=")"];
    0 -> 154;
    154 [label="Setting(Setting { syntax: 154, setting: Some(155), name: Some(156), value: Some(157), as_: None, description: None })"];
    154 -> 155;
    155[label="#Setting"];
    154 -> 156;
    156[label="S_ToadsFirstSpawnDelay"];
    154 -> 157;
    157 [label="Expr"];
    157 -> 165;
    165 [label="FunctionCall(FunctionCall { syntax: 165, lhs: Some(160), lparen: Some(166), args: [(167, None)], rparen: Some(170) })"];
    165 -> 160;
    160 [label="BinaryOp(BinaryOp { syntax: 160, lhs: Some(158), operator: Some(161), rhs: Some(162) })"];
    160 -> 158;
    158 [label="Literal"];
    158 -> 159;
    159[label="30"];
    160 -> 161;
    161[label="as"];
    160 -> 162;
    162 [label="Expr"];
    162 -> 163;
    163 [label="Identifier"];
    163 -> 164;
    164[label="_"];
    165 -> 166;
    166[label="("];
    165 -> 167;
    167 [label="Expr"];
    167 -> 168;
    168 [label="Literal"];
    168 -> 169;
    169[label="\"Delay before Toads are spawned\""];
    165 -> 170;
    170[label=")"];
    0 -> 171;
    171 [label="Setting(Setting { syntax: 171, setting: Some(172), name: Some(173), value: Some(174), as_: None, description: None })"];
    171 -> 172;
    172[label="#Setting"];
    171 -> 173;
    173[label="S_AllowPlayersRespawn"];
    171 -> 174;
    174 [label="Expr"];
    174 -> 182;
    182 [label="FunctionCall(FunctionCall { syntax: 182, lhs: Some(177), lparen: Some(183), args: [(184, None)], rparen: Some(187) })"];
    182 -> 177;
    177 [label="BinaryOp(BinaryOp { syntax: 177, lhs: Some(175), operator: Some(178), rhs: Some(179) })"];
    177 -> 175;
    175 [label="Literal"];
    175 -> 176;
    176[label="True"];
    177 -> 178;
    178[label="as"];
    177 -> 179;
    179 [label="Expr"];
    179 -> 180;
    180 [label="Identifier"];
    180 -> 181;
    181[label="_"];
    182 -> 183;
    183[label="("];
    182 -> 184;
    184 [label="Expr"];
    184 -> 185;
    185 [label="Literal"];
    185 -> 186;
    186[label="\"Allow players to respawn on Checkpoints\""];
    182 -> 187;
    187[label=")"];
    0 -> 188;
    188 [label="Setting(Setting { syntax: 188, setting: Some(189), name: Some(190), value: Some(191), as_: None, description: None })"];
    188 -> 189;
    189[label="#Setting"];
    188 -> 190;
    190[label="S_MatchmakingFormat"];
    188 -> 191;
    191 [label="Expr"];
    191 -> 199;
    199 [label="FunctionCall(FunctionCall { syntax: 199, lhs: Some(194), lparen: Some(200), args: [(201, None)], rparen: Some(204) })"];
    199 -> 194;
    194 [label="BinaryOp(BinaryOp { syntax: 194, lhs: Some(192), operator: Some(195), rhs: Some(196) })"];
    194 -> 192;
    192 [label="Literal"];
    192 -> 193;
    193[label="8"];
    194 -> 195;
    195[label="as"];
    194 -> 196;
    196 [label="Expr"];
    196 -> 197;
    197 [label="Identifier"];
    197 -> 198;
    198[label="_"];
    199 -> 200;
    200[label="("];
    199 -> 201;
    201 [label="Expr"];
    201 -> 202;
    202 [label="Literal"];
    202 -> 203;
    203[label="\"Number of players in matchmaking mode\""];
    199 -> 204;
    204[label=")"];
    0 -> 205;
    205 [label="Setting(Setting { syntax: 205, setting: Some(206), name: Some(207), value: Some(208), as_: None, description: None })"];
    205 -> 206;
    206[label="#Setting"];
    205 -> 207;
    207[label="S_AutoManageAFK"];
    205 -> 208;
    208 [label="Expr"];
    208 -> 209;
    209 [label="Literal"];
    209 -> 210;
    210[label="False"];
    0 -> 211;
    211 [label="Setting(Setting { syntax: 211, setting: Some(212), name: Some(213), value: Some(214), as_: None, description: None })"];
    211 -> 212;
    212[label="#Setting"];
    211 -> 213;
    213[label="S_PlayerArmorPoints"];
    211 -> 214;
    214 [label="Expr"];
    214 -> 215;
    215 [label="Literal"];
    215 -> 216;
    216[label="5"];
    0 -> 217;
    217 [label="Setting(Setting { syntax: 217, setting: Some(218), name: Some(219), value: Some(220), as_: None, description: None })"];
    217 -> 218;
    218[label="#Setting"];
    217 -> 219;
    219[label="S_MaximumNbWeapons"];
    217 -> 220;
    220 [label="Expr"];
    220 -> 221;
    221 [label="Literal"];
    221 -> 222;
    222[label="3"];
    0 -> 223;
    223 [label="Setting(Setting { syntax: 223, setting: Some(224), name: Some(225), value: Some(226), as_: None, description: None })"];
    223 -> 224;
    224[label="#Setting"];
    223 -> 225;
    225[label="S_MaximumNbReplies"];
    223 -> 226;
    226 [label="Expr"];
    226 -> 227;
    227 [label="Literal"];
    227 -> 228;
    228[label="5"];
    0 -> 229;
    229 [label="Setting(Setting { syntax: 229, setting: Some(230), name: Some(231), value: Some(232), as_: None, description: None })"];
    229 -> 230;
    230[label="#Setting"];
    229 -> 231;
    231[label="S_ObjectsRespawnTime"];
    229 -> 232;
    232 [label="Expr"];
    232 -> 233;
    233 [label="Literal"];
    233 -> 234;
    234[label="300"];
    0 -> 235;
    235 [label="Setting(Setting { syntax: 235, setting: Some(236), name: Some(237), value: Some(238), as_: None, description: None })"];
    235 -> 236;
    236[label="#Setting"];
    235 -> 237;
    237[label="S_ToadsRespawnTime"];
    235 -> 238;
    238 [label="Expr"];
    238 -> 239;
    239 [label="Literal"];
    239 -> 240;
    240[label="240"];
    0 -> 241;
    241 [label="Setting(Setting { syntax: 241, setting: Some(242), name: Some(243), value: Some(244), as_: None, description: None })"];
    241 -> 242;
    242[label="#Setting"];
    241 -> 243;
    243[label="S_ToadsSpawnRatio"];
    241 -> 244;
    244 [label="Expr"];
    244 -> 245;
    245 [label="Literal"];
    245 -> 246;
    246[label="1."];
    0 -> 247;
    247 [label="Const(Const { syntax: 247, const_: Some(248), name: Some(249), value: Some(250) })"];
    247 -> 248;
    248[label="#Const"];
    247 -> 249;
    249[label="C_ModeSupportedObjects"];
    247 -> 250;
    250 [label="Expr"];
    250 -> 251;
    251 [label="Array(Array { syntax: 251, lsquare: Some(252), values: [(253, Some(256)), (257, Some(260)), (261, Some(264)), (265, Some(268)), (269, Some(272)), (273, None)], rsquare: Some(276) })"];
    251 -> 252;
    252[label="["];
    251 -> 253;
    253 [label="Expr"];
    253 -> 254;
    254 [label="Literal"];
    254 -> 255;
    255[label="\"Weapon\""];
    251 -> 256;
    256[label=","];
    251 -> 257;
    257 [label="Expr"];
    257 -> 258;
    258 [label="Literal"];
    258 -> 259;
    259[label="\"Charge\""];
    251 -> 260;
    260[label=","];
    251 -> 261;
    261 [label="Expr"];
    261 -> 262;
    262 [label="Literal"];
    262 -> 263;
    263[label="\"Mini\""];
    251 -> 264;
    264[label=","];
    251 -> 265;
    265 [label="Expr"];
    265 -> 266;
    266 [label="Literal"];
    266 -> 267;
    267[label="\"Replie\""];
    251 -> 268;
    268[label=","];
    251 -> 269;
    269 [label="Expr"];
    269 -> 270;
    270 [label="Literal"];
    270 -> 271;
    271[label="\"Armor\""];
    251 -> 272;
    272[label=","];
    251 -> 273;
    273 [label="Expr"];
    273 -> 274;
    274 [label="Literal"];
    274 -> 275;
    275[label="\"Fuel\""];
    251 -> 276;
    276[label="]"];
    0 -> 277;
    277 [label="Const(Const { syntax: 277, const_: Some(278), name: Some(279), value: Some(280) })"];
    277 -> 278;
    278[label="#Const"];
    277 -> 279;
    279[label="C_RequiredPlayersNb"];
    277 -> 280;
    280 [label="Expr"];
    280 -> 281;
    281 [label="Literal"];
    281 -> 282;
    282[label="2"];
    0 -> 283;
    283 [label="Const(Const { syntax: 283, const_: Some(284), name: Some(285), value: Some(286) })"];
    283 -> 284;
    284[label="#Const"];
    283 -> 285;
    285[label="C_StartCountdownDuration"];
    283 -> 286;
    286 [label="Expr"];
    286 -> 287;
    287 [label="Literal"];
    287 -> 288;
    288[label="10000"];
    0 -> 289;
    289 [label="Const(Const { syntax: 289, const_: Some(290), name: Some(291), value: Some(292) })"];
    289 -> 290;
    290[label="#Const"];
    289 -> 291;
    291[label="C_OffZoneMinShrinkDuration"];
    289 -> 292;
    292 [label="Expr"];
    292 -> 293;
    293 [label="Literal"];
    293 -> 294;
    294[label="60"];
    0 -> 295;
    295 [label="Const(Const { syntax: 295, const_: Some(296), name: Some(297), value: Some(298) })"];
    295 -> 296;
    296[label="#Const"];
    295 -> 297;
    297[label="C_OffZoneMinimumRadius"];
    295 -> 298;
    298 [label="Expr"];
    298 -> 299;
    299 [label="Literal"];
    299 -> 300;
    300[label="36."];
    0 -> 301;
    301 [label="Const(Const { syntax: 301, const_: Some(302), name: Some(303), value: Some(304) })"];
    301 -> 302;
    302[label="#Const"];
    301 -> 303;
    303[label="C_AutoRatioItemsPerPlayer"];
    301 -> 304;
    304 [label="Expr"];
    304 -> 305;
    305 [label="Literal"];
    305 -> 306;
    306[label="15"];
    0 -> 307;
    307 [label="Const(Const { syntax: 307, const_: Some(308), name: Some(309), value: Some(310) })"];
    307 -> 308;
    308[label="#Const"];
    307 -> 309;
    309[label="C_PlayerMaxNbRocketSlots"];
    307 -> 310;
    310 [label="Expr"];
    310 -> 311;
    311 [label="Literal"];
    311 -> 312;
    312[label="4"];
    0 -> 313;
    313 [label="Const(Const { syntax: 313, const_: Some(314), name: Some(315), value: Some(316) })"];
    313 -> 314;
    314[label="#Const"];
    313 -> 315;
    315[label="C_PlayerPointsForSurvival"];
    313 -> 316;
    316 [label="Expr"];
    316 -> 317;
    317 [label="Literal"];
    317 -> 318;
    318[label="10"];
    0 -> 319;
    319 [label="Const(Const { syntax: 319, const_: Some(320), name: Some(321), value: Some(322) })"];
    319 -> 320;
    320[label="#Const"];
    319 -> 321;
    321[label="C_PlayerPointsForObjects"];
    319 -> 322;
    322 [label="Expr"];
    322 -> 323;
    323 [label="Literal"];
    323 -> 324;
    324[label="1"];
    0 -> 325;
    325 [label="Const(Const { syntax: 325, const_: Some(326), name: Some(327), value: Some(328) })"];
    325 -> 326;
    326[label="#Const"];
    325 -> 327;
    327[label="C_WinnerMinPointsDiff"];
    325 -> 328;
    328 [label="Expr"];
    328 -> 329;
    329 [label="Literal"];
    329 -> 330;
    330[label="10"];
    0 -> 331;
    331 [label="Const(Const { syntax: 331, const_: Some(332), name: Some(333), value: Some(334) })"];
    331 -> 332;
    332[label="#Const"];
    331 -> 333;
    333[label="C_WeaponItemArmorBonus"];
    331 -> 334;
    334 [label="Expr"];
    334 -> 335;
    335 [label="Literal"];
    335 -> 336;
    336[label="100"];
    0 -> 337;
    337 [label="Const(Const { syntax: 337, const_: Some(338), name: Some(339), value: Some(340) })"];
    337 -> 338;
    338[label="#Const"];
    337 -> 339;
    339[label="C_ChargeItemSkillPoints"];
    337 -> 340;
    340 [label="Expr"];
    340 -> 341;
    341 [label="Literal"];
    341 -> 342;
    342[label="5"];
    0 -> 343;
    343 [label="Const(Const { syntax: 343, const_: Some(344), name: Some(345), value: Some(346) })"];
    343 -> 344;
    344[label="#Const"];
    343 -> 345;
    345[label="C_MiniItemBonusMultiplier"];
    343 -> 346;
    346 [label="Expr"];
    346 -> 347;
    347 [label="Literal"];
    347 -> 348;
    348[label="2"];
    0 -> 349;
    349 [label="Const(Const { syntax: 349, const_: Some(350), name: Some(351), value: Some(352) })"];
    349 -> 350;
    350[label="#Const"];
    349 -> 351;
    351[label="C_MiniItemArmorTakenOnPick"];
    349 -> 352;
    352 [label="Expr"];
    352 -> 353;
    353 [label="Literal"];
    353 -> 354;
    354[label="100"];
    0 -> 355;
    355 [label="Const(Const { syntax: 355, const_: Some(356), name: Some(357), value: Some(358) })"];
    355 -> 356;
    356[label="#Const"];
    355 -> 357;
    357[label="C_ObjectsDropSpreadRadius"];
    355 -> 358;
    358 [label="Expr"];
    358 -> 359;
    359 [label="Literal"];
    359 -> 360;
    360[label="1."];
    0 -> 361;
    361 [label="Const(Const { syntax: 361, const_: Some(362), name: Some(363), value: Some(364) })"];
    361 -> 362;
    362[label="#Const"];
    361 -> 363;
    363[label="C_ToadObjectDropChance"];
    361 -> 364;
    364 [label="Expr"];
    364 -> 365;
    365 [label="Literal"];
    365 -> 366;
    366[label=".25"];
    0 -> 367;
    367 [label="Const(Const { syntax: 367, const_: Some(368), name: Some(369), value: Some(370) })"];
    367 -> 368;
    368[label="#Const"];
    367 -> 369;
    369[label="C_ToadChanceForArmorDrop"];
    367 -> 370;
    370 [label="Expr"];
    370 -> 371;
    371 [label="Literal"];
    371 -> 372;
    372[label=".25"];
    0 -> 373;
    373 [label="Const(Const { syntax: 373, const_: Some(374), name: Some(375), value: Some(376) })"];
    373 -> 374;
    374[label="#Const"];
    373 -> 375;
    375[label="C_GateOpeningDuration"];
    373 -> 376;
    376 [label="Expr"];
    376 -> 377;
    377 [label="Literal"];
    377 -> 378;
    378[label="5000"];
    0 -> 379;
    379 [label="Const(Const { syntax: 379, const_: Some(380), name: Some(381), value: Some(382) })"];
    379 -> 380;
    380[label="#Const"];
    379 -> 381;
    381[label="C_GateAutoCloseDelay"];
    379 -> 382;
    382 [label="Expr"];
    382 -> 383;
    383 [label="Literal"];
    383 -> 384;
    384[label="7500"];
    0 -> 385;
    385 [label="Const(Const { syntax: 385, const_: Some(386), name: Some(387), value: Some(388) })"];
    385 -> 386;
    386[label="#Const"];
    385 -> 387;
    387[label="C_CheckpointSafeDistance"];
    385 -> 388;
    388 [label="Expr"];
    388 -> 389;
    389 [label="Literal"];
    389 -> 390;
    390[label="12."];
    0 -> 391;
    391 [label="Const(Const { syntax: 391, const_: Some(392), name: Some(393), value: Some(394) })"];
    391 -> 392;
    392[label="#Const"];
    391 -> 393;
    393[label="C_RespawnWaitingDuration"];
    391 -> 394;
    394 [label="Expr"];
    394 -> 395;
    395 [label="Literal"];
    395 -> 396;
    396[label="15000"];
    0 -> 397;
    397 [label="Const(Const { syntax: 397, const_: Some(398), name: Some(399), value: Some(400) })"];
    397 -> 398;
    398[label="#Const"];
    397 -> 399;
    399[label="C_RespawnCancellingSpeed"];
    397 -> 400;
    400 [label="Expr"];
    400 -> 401;
    401 [label="Literal"];
    401 -> 402;
    402[label="2.5"];
    0 -> 403;
    403 [label="Const(Const { syntax: 403, const_: Some(404), name: Some(405), value: Some(406) })"];
    403 -> 404;
    404[label="#Const"];
    403 -> 405;
    405[label="Description"];
    403 -> 406;
    406 [label="Expr"];
    406 -> 409;
    409 [label="FunctionCall(FunctionCall { syntax: 409, lhs: Some(407), lparen: Some(410), args: [(411, None)], rparen: Some(414) })"];
    409 -> 407;
    407 [label="Identifier"];
    407 -> 408;
    408[label="_"];
    409 -> 410;
    410[label="("];
    409 -> 411;
    411 [label="Expr"];
    411 -> 412;
    412 [label="Literal"];
    412 -> 413;
    413[label="\"TYPE: Free for all\nOBJECTIVE: Protect Pole from Toads attack as long as it's possible. Game is over when 20 Toads reach the Pole.\""];
    409 -> 414;
    414[label=")"];
    0 -> 415;
    415 [label="Const(Const { syntax: 415, const_: Some(416), name: Some(417), value: Some(418) })"];
    415 -> 416;
    416[label="#Const"];
    415 -> 417;
    417[label="C_PlayerInitialWeapons"];
    415 -> 418;
    418 [label="Expr"];
    418 -> 419;
    419 [label="Array(Array { syntax: 419, lsquare: Some(420), values: [(421, Some(439)), (440, Some(458)), (459, Some(477)), (478, None)], rsquare: Some(496) })"];
    419 -> 420;
    420[label="["];
    419 -> 421;
    421 [label="Expr"];
    421 -> 434;
    434 [label="BinaryOp(BinaryOp { syntax: 434, lhs: Some(424), operator: Some(435), rhs: Some(436) })"];
    434 -> 424;
    424 [label="BinaryOp(BinaryOp { syntax: 424, lhs: Some(422), operator: Some(425), rhs: Some(426) })"];
    424 -> 422;
    422 [label="Identifier"];
    422 -> 423;
    423[label="CSmMode"];
    424 -> 425;
    425[label="::"];
    424 -> 426;
    426 [label="Expr"];
    426 -> 429;
    429 [label="BinaryOp(BinaryOp { syntax: 429, lhs: Some(427), operator: Some(430), rhs: Some(431) })"];
    429 -> 427;
    427 [label="Identifier"];
    427 -> 428;
    428[label="EWeapon"];
    429 -> 430;
    430[label="::"];
    429 -> 431;
    431 [label="Expr"];
    431 -> 432;
    432 [label="Identifier"];
    432 -> 433;
    433[label="Laser"];
    434 -> 435;
    435[label="=>"];
    434 -> 436;
    436 [label="Expr"];
    436 -> 437;
    437 [label="Literal"];
    437 -> 438;
    438[label="0"];
    419 -> 439;
    439[label=","];
    419 -> 440;
    440 [label="Expr"];
    440 -> 453;
    453 [label="BinaryOp(BinaryOp { syntax: 453, lhs: Some(443), operator: Some(454), rhs: Some(455) })"];
    453 -> 443;
    443 [label="BinaryOp(BinaryOp { syntax: 443, lhs: Some(441), operator: Some(444), rhs: Some(445) })"];
    443 -> 441;
    441 [label="Identifier"];
    441 -> 442;
    442[label="CSmMode"];
    443 -> 444;
    444[label="::"];
    443 -> 445;
    445 [label="Expr"];
    445 -> 448;
    448 [label="BinaryOp(BinaryOp { syntax: 448, lhs: Some(446), operator: Some(449), rhs: Some(450) })"];
    448 -> 446;
    446 [label="Identifier"];
    446 -> 447;
    447[label="EWeapon"];
    448 -> 449;
    449[label="::"];
    448 -> 450;
    450 [label="Expr"];
    450 -> 451;
    451 [label="Identifier"];
    451 -> 452;
    452[label="Nucleus"];
    453 -> 454;
    454[label="=>"];
    453 -> 455;
    455 [label="Expr"];
    455 -> 456;
    456 [label="Literal"];
    456 -> 457;
    457[label="0"];
    419 -> 458;
    458[label=","];
    419 -> 459;
    459 [label="Expr"];
    459 -> 472;
    472 [label="BinaryOp(BinaryOp { syntax: 472, lhs: Some(462), operator: Some(473), rhs: Some(474) })"];
    472 -> 462;
    462 [label="BinaryOp(BinaryOp { syntax: 462, lhs: Some(460), operator: Some(463), rhs: Some(464) })"];
    462 -> 460;
    460 [label="Identifier"];
    460 -> 461;
    461[label="CSmMode"];
    462 -> 463;
    463[label="::"];
    462 -> 464;
    464 [label="Expr"];
    464 -> 467;
    467 [label="BinaryOp(BinaryOp { syntax: 467, lhs: Some(465), operator: Some(468), rhs: Some(469) })"];
    467 -> 465;
    465 [label="Identifier"];
    465 -> 466;
    466[label="EWeapon"];
    467 -> 468;
    468[label="::"];
    467 -> 469;
    469 [label="Expr"];
    469 -> 470;
    470 [label="Identifier"];
    470 -> 471;
    471[label="Arrow"];
    472 -> 473;
    473[label="=>"];
    472 -> 474;
    474 [label="Expr"];
    474 -> 475;
    475 [label="Literal"];
    475 -> 476;
    476[label="0"];
    419 -> 477;
    477[label=","];
    419 -> 478;
    478 [label="Expr"];
    478 -> 491;
    491 [label="BinaryOp(BinaryOp { syntax: 491, lhs: Some(481), operator: Some(492), rhs: Some(493) })"];
    491 -> 481;
    481 [label="BinaryOp(BinaryOp { syntax: 481, lhs: Some(479), operator: Some(482), rhs: Some(483) })"];
    481 -> 479;
    479 [label="Identifier"];
    479 -> 480;
    480[label="CSmMode"];
    481 -> 482;
    482[label="::"];
    481 -> 483;
    483 [label="Expr"];
    483 -> 486;
    486 [label="BinaryOp(BinaryOp { syntax: 486, lhs: Some(484), operator: Some(487), rhs: Some(488) })"];
    486 -> 484;
    484 [label="Identifier"];
    484 -> 485;
    485[label="EWeapon"];
    486 -> 487;
    487[label="::"];
    486 -> 488;
    488 [label="Expr"];
    488 -> 489;
    489 [label="Identifier"];
    489 -> 490;
    490[label="Rocket"];
    491 -> 492;
    492[label="=>"];
    491 -> 493;
    493 [label="Expr"];
    493 -> 494;
    494 [label="Literal"];
    494 -> 495;
    495[label="4"];
    419 -> 496;
    496[label="]"];
    0 -> 497;
    497 [label="Const(Const { syntax: 497, const_: Some(498), name: Some(499), value: Some(500) })"];
    497 -> 498;
    498[label="#Const"];
    497 -> 499;
    499[label="C_SkillsPointsStart"];
    497 -> 500;
    500 [label="Expr"];
    500 -> 501;
    501 [label="Array(Array { syntax: 501, lsquare: Some(502), values: [(503, Some(511)), (512, Some(520)), (521, None)], rsquare: Some(529) })"];
    501 -> 502;
    502[label="["];
    501 -> 503;
    503 [label="Expr"];
    503 -> 506;
    506 [label="BinaryOp(BinaryOp { syntax: 506, lhs: Some(504), operator: Some(507), rhs: Some(508) })"];
    506 -> 504;
    504 [label="Literal"];
    504 -> 505;
    505[label="\"AmmoGain\""];
    506 -> 507;
    507[label="=>"];
    506 -> 508;
    508 [label="Expr"];
    508 -> 509;
    509 [label="Literal"];
    509 -> 510;
    510[label="0"];
    501 -> 511;
    511[label=","];
    501 -> 512;
    512 [label="Expr"];
    512 -> 515;
    515 [label="BinaryOp(BinaryOp { syntax: 515, lhs: Some(513), operator: Some(516), rhs: Some(517) })"];
    515 -> 513;
    513 [label="Literal"];
    513 -> 514;
    514[label="\"StaminaGain\""];
    515 -> 516;
    516[label="=>"];
    515 -> 517;
    517 [label="Expr"];
    517 -> 518;
    518 [label="Literal"];
    518 -> 519;
    519[label="0"];
    501 -> 520;
    520[label=","];
    501 -> 521;
    521 [label="Expr"];
    521 -> 524;
    524 [label="BinaryOp(BinaryOp { syntax: 524, lhs: Some(522), operator: Some(525), rhs: Some(526) })"];
    524 -> 522;
    522 [label="Literal"];
    522 -> 523;
    523[label="\"StaminaMax\""];
    524 -> 525;
    525[label="=>"];
    524 -> 526;
    526 [label="Expr"];
    526 -> 527;
    527 [label="Literal"];
    527 -> 528;
    528[label="75"];
    501 -> 529;
    529[label="]"];
    0 -> 530;
    530 [label="Const(Const { syntax: 530, const_: Some(531), name: Some(532), value: Some(533) })"];
    530 -> 531;
    531[label="#Const"];
    530 -> 532;
    532[label="C_SkillsPointsOnGoal"];
    530 -> 533;
    533 [label="Expr"];
    533 -> 534;
    534 [label="Array(Array { syntax: 534, lsquare: Some(535), values: [(536, Some(544)), (545, None)], rsquare: Some(553) })"];
    534 -> 535;
    535[label="["];
    534 -> 536;
    536 [label="Expr"];
    536 -> 539;
    539 [label="BinaryOp(BinaryOp { syntax: 539, lhs: Some(537), operator: Some(540), rhs: Some(541) })"];
    539 -> 537;
    537 [label="Literal"];
    537 -> 538;
    538[label="\"AmmoGain\""];
    539 -> 540;
    540[label="=>"];
    539 -> 541;
    541 [label="Expr"];
    541 -> 542;
    542 [label="Literal"];
    542 -> 543;
    543[label="50"];
    534 -> 544;
    544[label=","];
    534 -> 545;
    545 [label="Expr"];
    545 -> 548;
    548 [label="BinaryOp(BinaryOp { syntax: 548, lhs: Some(546), operator: Some(549), rhs: Some(550) })"];
    548 -> 546;
    546 [label="Literal"];
    546 -> 547;
    547[label="\"StaminaGain\""];
    548 -> 549;
    549[label="=>"];
    548 -> 550;
    550 [label="Expr"];
    550 -> 551;
    551 [label="Literal"];
    551 -> 552;
    552[label="20"];
    534 -> 553;
    553[label="]"];
    0 -> 554;
    554 [label="Const(Const { syntax: 554, const_: Some(555), name: Some(556), value: Some(557) })"];
    554 -> 555;
    555[label="#Const"];
    554 -> 556;
    556[label="C_SkillsPointsLimit"];
    554 -> 557;
    557 [label="Expr"];
    557 -> 558;
    558 [label="Array(Array { syntax: 558, lsquare: Some(559), values: [(560, Some(568)), (569, Some(577)), (578, None)], rsquare: Some(586) })"];
    558 -> 559;
    559[label="["];
    558 -> 560;
    560 [label="Expr"];
    560 -> 563;
    563 [label="BinaryOp(BinaryOp { syntax: 563, lhs: Some(561), operator: Some(564), rhs: Some(565) })"];
    563 -> 561;
    561 [label="Literal"];
    561 -> 562;
    562[label="\"AmmoGain\""];
    563 -> 564;
    564[label="=>"];
    563 -> 565;
    565 [label="Expr"];
    565 -> 566;
    566 [label="Literal"];
    566 -> 567;
    567[label="300"];
    558 -> 568;
    568[label=","];
    558 -> 569;
    569 [label="Expr"];
    569 -> 572;
    572 [label="BinaryOp(BinaryOp { syntax: 572, lhs: Some(570), operator: Some(573), rhs: Some(574) })"];
    572 -> 570;
    570 [label="Literal"];
    570 -> 571;
    571[label="\"StaminaGain\""];
    572 -> 573;
    573[label="=>"];
    572 -> 574;
    574 [label="Expr"];
    574 -> 575;
    575 [label="Literal"];
    575 -> 576;
    576[label="100"];
    558 -> 577;
    577[label=","];
    558 -> 578;
    578 [label="Expr"];
    578 -> 581;
    581 [label="BinaryOp(BinaryOp { syntax: 581, lhs: Some(579), operator: Some(582), rhs: Some(583) })"];
    581 -> 579;
    579 [label="Literal"];
    579 -> 580;
    580[label="\"StaminaMax\""];
    581 -> 582;
    582[label="=>"];
    581 -> 583;
    583 [label="Expr"];
    583 -> 584;
    584 [label="Literal"];
    584 -> 585;
    585[label="300"];
    558 -> 586;
    586[label="]"];
    0 -> 587;
    587 [label="Const(Const { syntax: 587, const_: Some(588), name: Some(589), value: Some(590) })"];
    587 -> 588;
    588[label="#Const"];
    587 -> 589;
    589[label="C_ScoresTablePosition"];
    587 -> 590;
    590 [label="Expr"];
    590 -> 591;
    591 [label="Array(Array { syntax: 591, lsquare: Some(592), values: [(593, Some(613)), (614, None)], rsquare: Some(634) })"];
    591 -> 592;
    592[label="["];
    591 -> 593;
    593 [label="Expr"];
    593 -> 596;
    596 [label="BinaryOp(BinaryOp { syntax: 596, lhs: Some(594), operator: Some(597), rhs: Some(598) })"];
    596 -> 594;
    594 [label="Literal"];
    594 -> 595;
    595[label="False"];
    596 -> 597;
    597[label="=>"];
    596 -> 598;
    598 [label="Expr"];
    598 -> 599;
    599 [label="Vector(Vector { syntax: 599, langle: Some(600), values: [(601, Some(604)), (605, Some(608)), (609, None)], rangle: Some(612) })"];
    599 -> 600;
    600[label="<"];
    599 -> 601;
    601 [label="Expr"];
    601 -> 602;
    602 [label="Literal"];
    602 -> 603;
    603[label="0."];
    599 -> 604;
    604[label=","];
    599 -> 605;
    605 [label="Expr"];
    605 -> 606;
    606 [label="Literal"];
    606 -> 607;
    607[label="40."];
    599 -> 608;
    608[label=","];
    599 -> 609;
    609 [label="Expr"];
    609 -> 610;
    610 [label="Literal"];
    610 -> 611;
    611[label="20."];
    599 -> 612;
    612[label=">"];
    591 -> 613;
    613[label=","];
    591 -> 614;
    614 [label="Expr"];
    614 -> 617;
    617 [label="BinaryOp(BinaryOp { syntax: 617, lhs: Some(615), operator: Some(618), rhs: Some(619) })"];
    617 -> 615;
    615 [label="Literal"];
    615 -> 616;
    616[label="True"];
    617 -> 618;
    618[label="=>"];
    617 -> 619;
    619 [label="Expr"];
    619 -> 620;
    620 [label="Vector(Vector { syntax: 620, langle: Some(621), values: [(622, Some(625)), (626, Some(629)), (630, None)], rangle: Some(633) })"];
    620 -> 621;
    621[label="<"];
    620 -> 622;
    622 [label="Expr"];
    622 -> 623;
    623 [label="Literal"];
    623 -> 624;
    624[label="0."];
    620 -> 625;
    625[label=","];
    620 -> 626;
    626 [label="Expr"];
    626 -> 627;
    627 [label="Literal"];
    627 -> 628;
    628[label="47."];
    620 -> 629;
    629[label=","];
    620 -> 630;
    630 [label="Expr"];
    630 -> 631;
    631 [label="Literal"];
    631 -> 632;
    632[label="20."];
    620 -> 633;
    633[label=">"];
    591 -> 634;
    634[label="]"];
    0 -> 635;
    635 [label="VarDec(VarDec { syntax: 635, declare: Some(636), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(637), name: Some(639), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    635 -> 636;
    636[label="declare"];
    635 -> 637;
    637 [label="Type(Type { syntax: 637, basename: Some(638), members: [], arrays: [] })"];
    637 -> 638;
    638[label="Boolean"];
    635 -> 639;
    639[label="G_IsOffZoneActivated"];
    635 -> 640;
    640[label=";"];
    0 -> 641;
    641 [label="VarDec(VarDec { syntax: 641, declare: Some(642), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(643), name: Some(647), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    641 -> 642;
    642[label="declare"];
    641 -> 643;
    643 [label="Type(Type { syntax: 643, basename: Some(644), members: [], arrays: [(645, None, 646)] })"];
    643 -> 644;
    644[label="Text"];
    643 -> 645;
    645[label="["];
    643 -> 646;
    646[label="]"];
    641 -> 647;
    647[label="G_SpawnedPlayers"];
    641 -> 648;
    648[label=";"];
    0 -> 649;
    649 [label="VarDec(VarDec { syntax: 649, declare: Some(650), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(651), name: Some(655), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    649 -> 650;
    650[label="declare"];
    649 -> 651;
    651 [label="Type(Type { syntax: 651, basename: Some(652), members: [], arrays: [(653, None, 654)] })"];
    651 -> 652;
    652[label="Text"];
    651 -> 653;
    653[label="["];
    651 -> 654;
    654[label="]"];
    649 -> 655;
    655[label="G_LoginsTouchedGoal"];
    649 -> 656;
    656[label=";"];
    0 -> 657;
    657 [label="VarDec(VarDec { syntax: 657, declare: Some(658), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(659), name: Some(663), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    657 -> 658;
    658[label="declare"];
    657 -> 659;
    659 [label="Type(Type { syntax: 659, basename: Some(660), members: [], arrays: [(661, None, 662)] })"];
    659 -> 660;
    660[label="Ident"];
    659 -> 661;
    661[label="["];
    659 -> 662;
    662[label="]"];
    657 -> 663;
    663[label="G_CreatedObjects"];
    657 -> 664;
    664[label=";"];
    0 -> 665;
    665 [label="VarDec(VarDec { syntax: 665, declare: Some(666), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(667), name: Some(669), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    665 -> 666;
    666[label="declare"];
    665 -> 667;
    667 [label="Type(Type { syntax: 667, basename: Some(668), members: [], arrays: [] })"];
    667 -> 668;
    668[label="Vec3"];
    665 -> 669;
    669[label="G_CenterGoalPosition"];
    665 -> 670;
    670[label=";"];
    0 -> 671;
    671 [label="VarDec(VarDec { syntax: 671, declare: Some(672), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(673), name: Some(677), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    671 -> 672;
    672[label="declare"];
    671 -> 673;
    673 [label="Type(Type { syntax: 673, basename: Some(674), members: [], arrays: [(675, None, 676)] })"];
    673 -> 674;
    674[label="Ident"];
    673 -> 675;
    675[label="["];
    673 -> 676;
    676[label="]"];
    671 -> 677;
    677[label="G_RespawnLandmarks"];
    671 -> 678;
    678[label=";"];
    0 -> 679;
    679 [label="VarDec(VarDec { syntax: 679, declare: Some(680), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(681), name: Some(686), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    679 -> 680;
    680[label="declare"];
    679 -> 681;
    681 [label="Type(Type { syntax: 681, basename: Some(682), members: [], arrays: [(683, Some(684), 685)] })"];
    681 -> 682;
    682[label="Ident"];
    681 -> 683;
    683[label="["];
    681 -> 684;
    684[label="Text"];
    681 -> 685;
    685[label="]"];
    679 -> 686;
    686[label="G_ObjectId"];
    679 -> 687;
    687[label=";"];
    0 -> 688;
    688 [label="VarDec(VarDec { syntax: 688, declare: Some(689), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(690), name: Some(694), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    688 -> 689;
    689[label="declare"];
    688 -> 690;
    690 [label="Type(Type { syntax: 690, basename: Some(691), members: [], arrays: [(692, None, 693)] })"];
    690 -> 691;
    691[label="Ident"];
    690 -> 692;
    692[label="["];
    690 -> 693;
    693[label="]"];
    688 -> 694;
    694[label="G_SpawnsList"];
    688 -> 695;
    695[label=";"];
    0 -> 696;
    696 [label="VarDec(VarDec { syntax: 696, declare: Some(697), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(698), name: Some(700), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    696 -> 697;
    697[label="declare"];
    696 -> 698;
    698 [label="Type(Type { syntax: 698, basename: Some(699), members: [], arrays: [] })"];
    698 -> 699;
    699[label="Ident"];
    696 -> 700;
    700[label="G_LatestSpawnId"];
    696 -> 701;
    701[label=";"];
    0 -> 702;
    702 [label="LabelImpl(LabelImpl { syntax: 702, stars1: Some(703), name: Some(704), stars2: Some(705), stars3: Some(706), statements: [707, 727], stars4: Some(763) })"];
    702 -> 703;
    703[label="***"];
    702 -> 704;
    704[label="Match_LogVersions"];
    702 -> 705;
    705[label="***"];
    702 -> 706;
    706[label="***"];
    702 -> 707;
    707 [label="Statement(Statement { syntax: 707, statement: Some(708), semicolon: Some(726) })"];
    707 -> 708;
    708 [label="Expr"];
    708 -> 716;
    716 [label="FunctionCall(FunctionCall { syntax: 716, lhs: Some(711), lparen: Some(717), args: [(718, Some(721)), (722, None)], rparen: Some(725) })"];
    716 -> 711;
    711 [label="BinaryOp(BinaryOp { syntax: 711, lhs: Some(709), operator: Some(712), rhs: Some(713) })"];
    711 -> 709;
    709 [label="Identifier"];
    709 -> 710;
    710[label="Log"];
    711 -> 712;
    712[label="::"];
    711 -> 713;
    713 [label="Expr"];
    713 -> 714;
    714 [label="Identifier"];
    714 -> 715;
    715[label="RegisterScript"];
    716 -> 717;
    717[label="("];
    716 -> 718;
    718 [label="Expr"];
    718 -> 719;
    719 [label="Identifier"];
    719 -> 720;
    720[label="ScriptName"];
    716 -> 721;
    721[label=","];
    716 -> 722;
    722 [label="Expr"];
    722 -> 723;
    723 [label="Identifier"];
    723 -> 724;
    724[label="Version"];
    716 -> 725;
    725[label=")"];
    707 -> 726;
    726[label=";"];
    702 -> 727;
    727 [label="Statement(Statement { syntax: 727, statement: Some(728), semicolon: Some(762) })"];
    727 -> 728;
    728 [label="Expr"];
    728 -> 736;
    736 [label="FunctionCall(FunctionCall { syntax: 736, lhs: Some(731), lparen: Some(737), args: [(738, Some(749)), (750, None)], rparen: Some(761) })"];
    736 -> 731;
    731 [label="BinaryOp(BinaryOp { syntax: 731, lhs: Some(729), operator: Some(732), rhs: Some(733) })"];
    731 -> 729;
    729 [label="Identifier"];
    729 -> 730;
    730[label="Log"];
    731 -> 732;
    732[label="::"];
    731 -> 733;
    733 [label="Expr"];
    733 -> 734;
    734 [label="Identifier"];
    734 -> 735;
    735[label="RegisterScript"];
    736 -> 737;
    737[label="("];
    736 -> 738;
    738 [label="Expr"];
    738 -> 746;
    746 [label="FunctionCall(FunctionCall { syntax: 746, lhs: Some(741), lparen: Some(747), args: [], rparen: Some(748) })"];
    746 -> 741;
    741 [label="BinaryOp(BinaryOp { syntax: 741, lhs: Some(739), operator: Some(742), rhs: Some(743) })"];
    741 -> 739;
    739 [label="Identifier"];
    739 -> 740;
    740[label="Map"];
    741 -> 742;
    742[label="::"];
    741 -> 743;
    743 [label="Expr"];
    743 -> 744;
    744 [label="Identifier"];
    744 -> 745;
    745[label="GetScriptName"];
    746 -> 747;
    747[label="("];
    746 -> 748;
    748[label=")"];
    736 -> 749;
    749[label=","];
    736 -> 750;
    750 [label="Expr"];
    750 -> 758;
    758 [label="FunctionCall(FunctionCall { syntax: 758, lhs: Some(753), lparen: Some(759), args: [], rparen: Some(760) })"];
    758 -> 753;
    753 [label="BinaryOp(BinaryOp { syntax: 753, lhs: Some(751), operator: Some(754), rhs: Some(755) })"];
    753 -> 751;
    751 [label="Identifier"];
    751 -> 752;
    752[label="Map"];
    753 -> 754;
    754[label="::"];
    753 -> 755;
    755 [label="Expr"];
    755 -> 756;
    756 [label="Identifier"];
    756 -> 757;
    757[label="GetScriptVersion"];
    758 -> 759;
    759[label="("];
    758 -> 760;
    760[label=")"];
    736 -> 761;
    761[label=")"];
    727 -> 762;
    762[label=";"];
    702 -> 763;
    763[label="***"];
    0 -> 764;
    764 [label="LabelImpl(LabelImpl { syntax: 764, stars1: Some(765), name: Some(766), stars2: Some(767), stars3: Some(768), statements: [769, 778, 808], stars4: Some(819) })"];
    764 -> 765;
    765[label="***"];
    764 -> 766;
    766[label="MM_SetupMatchmaking"];
    764 -> 767;
    767[label="***"];
    764 -> 768;
    768[label="***"];
    764 -> 769;
    769 [label="Statement(Statement { syntax: 769, statement: Some(770), semicolon: None })"];
    769 -> 770;
    770 [label="VarDec(VarDec { syntax: 770, declare: Some(771), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(772), name: Some(776), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    770 -> 771;
    771[label="declare"];
    770 -> 772;
    772 [label="Type(Type { syntax: 772, basename: Some(773), members: [], arrays: [(774, None, 775)] })"];
    772 -> 773;
    773[label="Integer"];
    772 -> 774;
    774[label="["];
    772 -> 775;
    775[label="]"];
    770 -> 776;
    776[label="MatchmakingFormats"];
    770 -> 777;
    777[label=";"];
    764 -> 778;
    778 [label="Statement(Statement { syntax: 778, statement: Some(779), semicolon: None })"];
    778 -> 779;
    779 [label="For(For { syntax: 779, for_: Some(780), lparen: Some(781), name: Some(782), comma1: Some(783), value_start: Some(784), comma2: Some(787), value_end: Some(788), rparen: Some(791), body: Some(792) })"];
    779 -> 780;
    780[label="for"];
    779 -> 781;
    781[label="("];
    779 -> 782;
    782[label="I"];
    779 -> 783;
    783[label=","];
    779 -> 784;
    784 [label="Expr"];
    784 -> 785;
    785 [label="Literal"];
    785 -> 786;
    786[label="1"];
    779 -> 787;
    787[label=","];
    779 -> 788;
    788 [label="Expr"];
    788 -> 789;
    789 [label="Identifier"];
    789 -> 790;
    790[label="S_MatchmakingFormat"];
    779 -> 791;
    791[label=")"];
    779 -> 792;
    792 [label="Statement(Statement { syntax: 792, statement: Some(793), semicolon: Some(807) })"];
    792 -> 793;
    793 [label="Expr"];
    793 -> 801;
    801 [label="FunctionCall(FunctionCall { syntax: 801, lhs: Some(796), lparen: Some(802), args: [(803, None)], rparen: Some(806) })"];
    801 -> 796;
    796 [label="BinaryOp(BinaryOp { syntax: 796, lhs: Some(794), operator: Some(797), rhs: Some(798) })"];
    796 -> 794;
    794 [label="Identifier"];
    794 -> 795;
    795[label="MatchmakingFormats"];
    796 -> 797;
    797[label="."];
    796 -> 798;
    798 [label="Expr"];
    798 -> 799;
    799 [label="Identifier"];
    799 -> 800;
    800[label="add"];
    801 -> 802;
    802[label="("];
    801 -> 803;
    803 [label="Expr"];
    803 -> 804;
    804 [label="Literal"];
    804 -> 805;
    805[label="1"];
    801 -> 806;
    806[label=")"];
    792 -> 807;
    807[label=";"];
    764 -> 808;
    808 [label="Statement(Statement { syntax: 808, statement: Some(809), semicolon: Some(818) })"];
    808 -> 809;
    809 [label="Expr"];
    809 -> 812;
    812 [label="FunctionCall(FunctionCall { syntax: 812, lhs: Some(810), lparen: Some(813), args: [(814, None)], rparen: Some(817) })"];
    812 -> 810;
    810 [label="Identifier"];
    810 -> 811;
    811[label="MM_SetFormat"];
    812 -> 813;
    813[label="("];
    812 -> 814;
    814 [label="Expr"];
    814 -> 815;
    815 [label="Identifier"];
    815 -> 816;
    816[label="MatchmakingFormats"];
    812 -> 817;
    817[label=")"];
    808 -> 818;
    818[label=";"];
    764 -> 819;
    819[label="***"];
    0 -> 820;
    820 [label="LabelImpl(LabelImpl { syntax: 820, stars1: Some(821), name: Some(822), stars2: Some(823), stars3: Some(824), statements: [825, 841, 881, 921, 941, 975, 995], stars4: Some(1011) })"];
    820 -> 821;
    821[label="***"];
    820 -> 822;
    822[label="ScoresTable"];
    820 -> 823;
    823[label="***"];
    820 -> 824;
    824[label="***"];
    820 -> 825;
    825 [label="Statement(Statement { syntax: 825, statement: Some(826), semicolon: Some(840) })"];
    825 -> 826;
    826 [label="Expr"];
    826 -> 834;
    834 [label="FunctionCall(FunctionCall { syntax: 834, lhs: Some(829), lparen: Some(835), args: [(836, None)], rparen: Some(839) })"];
    834 -> 829;
    829 [label="BinaryOp(BinaryOp { syntax: 829, lhs: Some(827), operator: Some(830), rhs: Some(831) })"];
    829 -> 827;
    827 [label="Identifier"];
    827 -> 828;
    828[label="TopScores"];
    829 -> 830;
    830[label="::"];
    829 -> 831;
    831 [label="Expr"];
    831 -> 832;
    832 [label="Identifier"];
    832 -> 833;
    833[label="RemoveCategory"];
    834 -> 835;
    835[label="("];
    834 -> 836;
    836 [label="Expr"];
    836 -> 837;
    837 [label="Literal"];
    837 -> 838;
    838[label="\"Support\""];
    834 -> 839;
    839[label=")"];
    825 -> 840;
    840[label=";"];
    820 -> 841;
    841 [label="Statement(Statement { syntax: 841, statement: Some(842), semicolon: Some(880) })"];
    841 -> 842;
    842 [label="Expr"];
    842 -> 850;
    850 [label="FunctionCall(FunctionCall { syntax: 850, lhs: Some(845), lparen: Some(851), args: [(852, Some(855)), (856, Some(859)), (860, Some(863)), (864, Some(867)), (868, Some(871)), (872, Some(875)), (876, None)], rparen: Some(879) })"];
    850 -> 845;
    845 [label="BinaryOp(BinaryOp { syntax: 845, lhs: Some(843), operator: Some(846), rhs: Some(847) })"];
    845 -> 843;
    843 [label="Identifier"];
    843 -> 844;
    844[label="TopScores"];
    845 -> 846;
    846[label="::"];
    845 -> 847;
    847 [label="Expr"];
    847 -> 848;
    848 [label="Identifier"];
    848 -> 849;
    849[label="AddCategory"];
    850 -> 851;
    851[label="("];
    850 -> 852;
    852 [label="Expr"];
    852 -> 853;
    853 [label="Literal"];
    853 -> 854;
    854[label="\"Items\""];
    850 -> 855;
    855[label=","];
    850 -> 856;
    856 [label="Expr"];
    856 -> 857;
    857 [label="Literal"];
    857 -> 858;
    858[label="\"Found items\""];
    850 -> 859;
    859[label=","];
    850 -> 860;
    860 [label="Expr"];
    860 -> 861;
    861 [label="Literal"];
    861 -> 862;
    862[label="\"\""];
    850 -> 863;
    863[label=","];
    850 -> 864;
    864 [label="Expr"];
    864 -> 865;
    865 [label="Literal"];
    865 -> 866;
    866[label="1."];
    850 -> 867;
    867[label=","];
    850 -> 868;
    868 [label="Expr"];
    868 -> 869;
    869 [label="Literal"];
    869 -> 870;
    870[label="\"\""];
    850 -> 871;
    871[label=","];
    850 -> 872;
    872 [label="Expr"];
    872 -> 873;
    873 [label="Literal"];
    873 -> 874;
    874[label="2.25"];
    850 -> 875;
    875[label=","];
    850 -> 876;
    876 [label="Expr"];
    876 -> 877;
    877 [label="Literal"];
    877 -> 878;
    878[label="60."];
    850 -> 879;
    879[label=")"];
    841 -> 880;
    880[label=";"];
    820 -> 881;
    881 [label="Statement(Statement { syntax: 881, statement: Some(882), semicolon: Some(920) })"];
    881 -> 882;
    882 [label="Expr"];
    882 -> 890;
    890 [label="FunctionCall(FunctionCall { syntax: 890, lhs: Some(885), lparen: Some(891), args: [(892, Some(895)), (896, Some(899)), (900, Some(903)), (904, Some(907)), (908, Some(911)), (912, Some(915)), (916, None)], rparen: Some(919) })"];
    890 -> 885;
    885 [label="BinaryOp(BinaryOp { syntax: 885, lhs: Some(883), operator: Some(886), rhs: Some(887) })"];
    885 -> 883;
    883 [label="Identifier"];
    883 -> 884;
    884[label="TopScores"];
    885 -> 886;
    886[label="::"];
    885 -> 887;
    887 [label="Expr"];
    887 -> 888;
    888 [label="Identifier"];
    888 -> 889;
    889[label="AddCategory"];
    890 -> 891;
    891[label="("];
    890 -> 892;
    892 [label="Expr"];
    892 -> 893;
    893 [label="Literal"];
    893 -> 894;
    894[label="\"Survival\""];
    890 -> 895;
    895[label=","];
    890 -> 896;
    896 [label="Expr"];
    896 -> 897;
    897 [label="Literal"];
    897 -> 898;
    898[label="\"Survived kills\""];
    890 -> 899;
    899[label=","];
    890 -> 900;
    900 [label="Expr"];
    900 -> 901;
    901 [label="Literal"];
    901 -> 902;
    902[label="\"\""];
    890 -> 903;
    903[label=","];
    890 -> 904;
    904 [label="Expr"];
    904 -> 905;
    905 [label="Literal"];
    905 -> 906;
    906[label="2."];
    890 -> 907;
    907[label=","];
    890 -> 908;
    908 [label="Expr"];
    908 -> 909;
    909 [label="Literal"];
    909 -> 910;
    910[label="\"\""];
    890 -> 911;
    911[label=","];
    890 -> 912;
    912 [label="Expr"];
    912 -> 913;
    913 [label="Literal"];
    913 -> 914;
    914[label="2.25"];
    890 -> 915;
    915[label=","];
    890 -> 916;
    916 [label="Expr"];
    916 -> 917;
    917 [label="Literal"];
    917 -> 918;
    918[label="75."];
    890 -> 919;
    919[label=")"];
    881 -> 920;
    920[label=";"];
    820 -> 921;
    921 [label="Statement(Statement { syntax: 921, statement: Some(922), semicolon: Some(940) })"];
    921 -> 922;
    922 [label="Expr"];
    922 -> 930;
    930 [label="FunctionCall(FunctionCall { syntax: 930, lhs: Some(925), lparen: Some(931), args: [(932, Some(935)), (936, None)], rparen: Some(939) })"];
    930 -> 925;
    925 [label="BinaryOp(BinaryOp { syntax: 925, lhs: Some(923), operator: Some(926), rhs: Some(927) })"];
    925 -> 923;
    923 [label="Identifier"];
    923 -> 924;
    924[label="TopScores"];
    925 -> 926;
    926[label="::"];
    925 -> 927;
    927 [label="Expr"];
    927 -> 928;
    928 [label="Identifier"];
    928 -> 929;
    929[label="SetFormat"];
    930 -> 931;
    931[label="("];
    930 -> 932;
    932 [label="Expr"];
    932 -> 933;
    933 [label="Literal"];
    933 -> 934;
    934[label="3"];
    930 -> 935;
    935[label=","];
    930 -> 936;
    936 [label="Expr"];
    936 -> 937;
    937 [label="Literal"];
    937 -> 938;
    938[label="1"];
    930 -> 939;
    939[label=")"];
    921 -> 940;
    940[label=";"];
    820 -> 941;
    941 [label="Statement(Statement { syntax: 941, statement: Some(942), semicolon: Some(974) })"];
    941 -> 942;
    942 [label="Expr"];
    942 -> 950;
    950 [label="FunctionCall(FunctionCall { syntax: 950, lhs: Some(945), lparen: Some(951), args: [(952, Some(955)), (956, Some(964)), (965, None)], rparen: Some(973) })"];
    950 -> 945;
    945 [label="BinaryOp(BinaryOp { syntax: 945, lhs: Some(943), operator: Some(946), rhs: Some(947) })"];
    945 -> 943;
    943 [label="Identifier"];
    943 -> 944;
    944[label="ST2"];
    945 -> 946;
    946[label="::"];
    945 -> 947;
    947 [label="Expr"];
    947 -> 948;
    948 [label="Identifier"];
    948 -> 949;
    949[label="SetPlayerCardImages"];
    950 -> 951;
    951[label="("];
    950 -> 952;
    952 [label="Expr"];
    952 -> 953;
    953 [label="Literal"];
    953 -> 954;
    954[label="\" \""];
    950 -> 955;
    955[label=","];
    950 -> 956;
    956 [label="Expr"];
    956 -> 959;
    959 [label="BinaryOp(BinaryOp { syntax: 959, lhs: Some(957), operator: Some(960), rhs: Some(961) })"];
    959 -> 957;
    957 [label="Identifier"];
    957 -> 958;
    958[label="C_ImgBase"];
    959 -> 960;
    960[label="^"];
    959 -> 961;
    961 [label="Expr"];
    961 -> 962;
    962 [label="Literal"];
    962 -> 963;
    963[label="\"STPlayerLeft.png\""];
    950 -> 964;
    964[label=","];
    950 -> 965;
    965 [label="Expr"];
    965 -> 968;
    968 [label="BinaryOp(BinaryOp { syntax: 968, lhs: Some(966), operator: Some(969), rhs: Some(970) })"];
    968 -> 966;
    966 [label="Identifier"];
    966 -> 967;
    967[label="C_ImgBase"];
    968 -> 969;
    969[label="^"];
    968 -> 970;
    970 [label="Expr"];
    970 -> 971;
    971 [label="Literal"];
    971 -> 972;
    972[label="\"STPlayerRight.png\""];
    950 -> 973;
    973[label=")"];
    941 -> 974;
    974[label=";"];
    820 -> 975;
    975 [label="Statement(Statement { syntax: 975, statement: Some(976), semicolon: Some(994) })"];
    975 -> 976;
    976 [label="Expr"];
    976 -> 984;
    984 [label="FunctionCall(FunctionCall { syntax: 984, lhs: Some(979), lparen: Some(985), args: [(986, Some(989)), (990, None)], rparen: Some(993) })"];
    984 -> 979;
    979 [label="BinaryOp(BinaryOp { syntax: 979, lhs: Some(977), operator: Some(980), rhs: Some(981) })"];
    979 -> 977;
    977 [label="Identifier"];
    977 -> 978;
    978[label="ST2"];
    979 -> 980;
    980[label="::"];
    979 -> 981;
    981 [label="Expr"];
    981 -> 982;
    982 [label="Identifier"];
    982 -> 983;
    983[label="SetColWidth"];
    984 -> 985;
    985[label="("];
    984 -> 986;
    986 [label="Expr"];
    986 -> 987;
    987 [label="Literal"];
    987 -> 988;
    988[label="\"LibST_SMPoints\""];
    984 -> 989;
    989[label=","];
    984 -> 990;
    990 [label="Expr"];
    990 -> 991;
    991 [label="Literal"];
    991 -> 992;
    992[label="5."];
    984 -> 993;
    993[label=")"];
    975 -> 994;
    994[label=";"];
    820 -> 995;
    995 [label="Statement(Statement { syntax: 995, statement: Some(996), semicolon: Some(1010) })"];
    995 -> 996;
    996 [label="Expr"];
    996 -> 1004;
    1004 [label="FunctionCall(FunctionCall { syntax: 1004, lhs: Some(999), lparen: Some(1005), args: [(1006, None)], rparen: Some(1009) })"];
    1004 -> 999;
    999 [label="BinaryOp(BinaryOp { syntax: 999, lhs: Some(997), operator: Some(1000), rhs: Some(1001) })"];
    999 -> 997;
    997 [label="Identifier"];
    997 -> 998;
    998[label="ST2"];
    999 -> 1000;
    1000[label="::"];
    999 -> 1001;
    1001 [label="Expr"];
    1001 -> 1002;
    1002 [label="Identifier"];
    1002 -> 1003;
    1003[label="DestroyCol"];
    1004 -> 1005;
    1005[label="("];
    1004 -> 1006;
    1006 [label="Expr"];
    1006 -> 1007;
    1007 [label="Literal"];
    1007 -> 1008;
    1008[label="\"LibST_SMRoundPoints\""];
    1004 -> 1009;
    1009[label=")"];
    995 -> 1010;
    1010[label=";"];
    820 -> 1011;
    1011[label="***"];
    0 -> 1012;
    1012 [label="LabelImpl(LabelImpl { syntax: 1012, stars1: Some(1013), name: Some(1014), stars2: Some(1015), stars3: Some(1016), statements: [1017, 1033, 1054, 1070], stars4: Some(1086) })"];
    1012 -> 1013;
    1013[label="***"];
    1012 -> 1014;
    1014[label="Match_Rules"];
    1012 -> 1015;
    1015[label="***"];
    1012 -> 1016;
    1016[label="***"];
    1012 -> 1017;
    1017 [label="Statement(Statement { syntax: 1017, statement: Some(1018), semicolon: Some(1032) })"];
    1017 -> 1018;
    1018 [label="Expr"];
    1018 -> 1026;
    1026 [label="FunctionCall(FunctionCall { syntax: 1026, lhs: Some(1021), lparen: Some(1027), args: [(1028, None)], rparen: Some(1031) })"];
    1026 -> 1021;
    1021 [label="BinaryOp(BinaryOp { syntax: 1021, lhs: Some(1019), operator: Some(1022), rhs: Some(1023) })"];
    1021 -> 1019;
    1019 [label="Identifier"];
    1019 -> 1020;
    1020[label="ModeInfo"];
    1021 -> 1022;
    1022[label="::"];
    1021 -> 1023;
    1023 [label="Expr"];
    1023 -> 1024;
    1024 [label="Identifier"];
    1024 -> 1025;
    1025[label="SetName"];
    1026 -> 1027;
    1027[label="("];
    1026 -> 1028;
    1028 [label="Expr"];
    1028 -> 1029;
    1029 [label="Literal"];
    1029 -> 1030;
    1030[label="\"Hunger Games\""];
    1026 -> 1031;
    1031[label=")"];
    1017 -> 1032;
    1032[label=";"];
    1012 -> 1033;
    1033 [label="Statement(Statement { syntax: 1033, statement: Some(1034), semicolon: Some(1053) })"];
    1033 -> 1034;
    1034 [label="Expr"];
    1034 -> 1042;
    1042 [label="FunctionCall(FunctionCall { syntax: 1042, lhs: Some(1037), lparen: Some(1043), args: [(1044, None)], rparen: Some(1052) })"];
    1042 -> 1037;
    1037 [label="BinaryOp(BinaryOp { syntax: 1037, lhs: Some(1035), operator: Some(1038), rhs: Some(1039) })"];
    1037 -> 1035;
    1035 [label="Identifier"];
    1035 -> 1036;
    1036[label="ModeInfo"];
    1037 -> 1038;
    1038[label="::"];
    1037 -> 1039;
    1039 [label="Expr"];
    1039 -> 1040;
    1040 [label="Identifier"];
    1040 -> 1041;
    1041[label="SetType"];
    1042 -> 1043;
    1043[label="("];
    1042 -> 1044;
    1044 [label="Expr"];
    1044 -> 1047;
    1047 [label="BinaryOp(BinaryOp { syntax: 1047, lhs: Some(1045), operator: Some(1048), rhs: Some(1049) })"];
    1047 -> 1045;
    1045 [label="Identifier"];
    1045 -> 1046;
    1046[label="ModeInfo"];
    1047 -> 1048;
    1048[label="::"];
    1047 -> 1049;
    1049 [label="Expr"];
    1049 -> 1050;
    1050 [label="Identifier"];
    1050 -> 1051;
    1051[label="C_Type_FreeForAll"];
    1042 -> 1052;
    1052[label=")"];
    1033 -> 1053;
    1053[label=";"];
    1012 -> 1054;
    1054 [label="Statement(Statement { syntax: 1054, statement: Some(1055), semicolon: Some(1069) })"];
    1054 -> 1055;
    1055 [label="Expr"];
    1055 -> 1063;
    1063 [label="FunctionCall(FunctionCall { syntax: 1063, lhs: Some(1058), lparen: Some(1064), args: [(1065, None)], rparen: Some(1068) })"];
    1063 -> 1058;
    1058 [label="BinaryOp(BinaryOp { syntax: 1058, lhs: Some(1056), operator: Some(1059), rhs: Some(1060) })"];
    1058 -> 1056;
    1056 [label="Identifier"];
    1056 -> 1057;
    1057[label="ModeInfo"];
    1058 -> 1059;
    1059[label="::"];
    1058 -> 1060;
    1060 [label="Expr"];
    1060 -> 1061;
    1061 [label="Identifier"];
    1061 -> 1062;
    1062[label="SetRules"];
    1063 -> 1064;
    1064[label="("];
    1063 -> 1065;
    1065 [label="Expr"];
    1065 -> 1066;
    1066 [label="Literal"];
    1066 -> 1067;
    1067[label="\"1. You have only one life per map.\n2. At the very beginning of the map, you must activate your skills by touching the Goal.\n3. To get more weapons and develop your character abilities, search and pick up items on the map.\n4. If you are eliminated, you will spectate the rest of the map.\n5. The last player alive wins the game.\""];
    1063 -> 1068;
    1068[label=")"];
    1054 -> 1069;
    1069[label=";"];
    1012 -> 1070;
    1070 [label="Statement(Statement { syntax: 1070, statement: Some(1071), semicolon: Some(1085) })"];
    1070 -> 1071;
    1071 [label="Expr"];
    1071 -> 1079;
    1079 [label="FunctionCall(FunctionCall { syntax: 1079, lhs: Some(1074), lparen: Some(1080), args: [(1081, None)], rparen: Some(1084) })"];
    1079 -> 1074;
    1074 [label="BinaryOp(BinaryOp { syntax: 1074, lhs: Some(1072), operator: Some(1075), rhs: Some(1076) })"];
    1074 -> 1072;
    1072 [label="Identifier"];
    1072 -> 1073;
    1073[label="ModeInfo"];
    1074 -> 1075;
    1075[label="::"];
    1074 -> 1076;
    1076 [label="Expr"];
    1076 -> 1077;
    1077 [label="Identifier"];
    1077 -> 1078;
    1078[label="SetStatusMessage"];
    1079 -> 1080;
    1080[label="("];
    1079 -> 1081;
    1081 [label="Expr"];
    1081 -> 1082;
    1082 [label="Identifier"];
    1082 -> 1083;
    1083[label="Description"];
    1079 -> 1084;
    1084[label=")"];
    1070 -> 1085;
    1085[label=";"];
    1012 -> 1086;
    1086[label="***"];
    0 -> 1087;
    1087 [label="LabelImpl(LabelImpl { syntax: 1087, stars1: Some(1088), name: Some(1089), stars2: Some(1090), stars3: Some(1091), statements: [1092, 1102, 1112, 1122, 1132, 1142, 1152, 1170], stars4: Some(1180) })"];
    1087 -> 1088;
    1088[label="***"];
    1087 -> 1089;
    1089[label="GalaxyTitles_Settings"];
    1087 -> 1090;
    1090[label="***"];
    1087 -> 1091;
    1091[label="***"];
    1087 -> 1092;
    1092 [label="Statement(Statement { syntax: 1092, statement: Some(1096), semicolon: Some(1101) })"];
    1092 -> 1093;
    1093 [label="Expr"];
    1093 -> 1094;
    1094 [label="Identifier"];
    1094 -> 1095;
    1095[label="GT_UseAutoEndSequence"];
    1092 -> 1096;
    1096 [label="Assignment(Assignment { syntax: 1096, lvalue: Some(1093), operator: Some(1097), rvalue: Some(1098) })"];
    1096 -> 1097;
    1097[label="="];
    1096 -> 1098;
    1098 [label="Expr"];
    1098 -> 1099;
    1099 [label="Literal"];
    1099 -> 1100;
    1100[label="False"];
    1092 -> 1101;
    1101[label=";"];
    1087 -> 1102;
    1102 [label="Statement(Statement { syntax: 1102, statement: Some(1106), semicolon: Some(1111) })"];
    1102 -> 1103;
    1103 [label="Expr"];
    1103 -> 1104;
    1104 [label="Identifier"];
    1104 -> 1105;
    1105[label="GT_UseAutospawnObjects"];
    1102 -> 1106;
    1106 [label="Assignment(Assignment { syntax: 1106, lvalue: Some(1103), operator: Some(1107), rvalue: Some(1108) })"];
    1106 -> 1107;
    1107[label="="];
    1106 -> 1108;
    1108 [label="Expr"];
    1108 -> 1109;
    1109 [label="Literal"];
    1109 -> 1110;
    1110[label="False"];
    1102 -> 1111;
    1111[label=";"];
    1087 -> 1112;
    1112 [label="Statement(Statement { syntax: 1112, statement: Some(1116), semicolon: Some(1121) })"];
    1112 -> 1113;
    1113 [label="Expr"];
    1113 -> 1114;
    1114 [label="Identifier"];
    1114 -> 1115;
    1115[label="GT_UseComboWeapons"];
    1112 -> 1116;
    1116 [label="Assignment(Assignment { syntax: 1116, lvalue: Some(1113), operator: Some(1117), rvalue: Some(1118) })"];
    1116 -> 1117;
    1117[label="="];
    1116 -> 1118;
    1118 [label="Expr"];
    1118 -> 1119;
    1119 [label="Literal"];
    1119 -> 1120;
    1120[label="False"];
    1112 -> 1121;
    1121[label=";"];
    1087 -> 1122;
    1122 [label="Statement(Statement { syntax: 1122, statement: Some(1126), semicolon: Some(1131) })"];
    1122 -> 1123;
    1123 [label="Expr"];
    1123 -> 1124;
    1124 [label="Identifier"];
    1124 -> 1125;
    1125[label="GT_UseRandomToads"];
    1122 -> 1126;
    1126 [label="Assignment(Assignment { syntax: 1126, lvalue: Some(1123), operator: Some(1127), rvalue: Some(1128) })"];
    1126 -> 1127;
    1127[label="="];
    1126 -> 1128;
    1128 [label="Expr"];
    1128 -> 1129;
    1129 [label="Literal"];
    1129 -> 1130;
    1130[label="False"];
    1122 -> 1131;
    1131[label=";"];
    1087 -> 1132;
    1132 [label="Statement(Statement { syntax: 1132, statement: Some(1136), semicolon: Some(1141) })"];
    1132 -> 1133;
    1133 [label="Expr"];
    1133 -> 1134;
    1134 [label="Identifier"];
    1134 -> 1135;
    1135[label="GT_AutoManageOnRespawn"];
    1132 -> 1136;
    1136 [label="Assignment(Assignment { syntax: 1136, lvalue: Some(1133), operator: Some(1137), rvalue: Some(1138) })"];
    1136 -> 1137;
    1137[label="="];
    1136 -> 1138;
    1138 [label="Expr"];
    1138 -> 1139;
    1139 [label="Literal"];
    1139 -> 1140;
    1140[label="False"];
    1132 -> 1141;
    1141[label=";"];
    1087 -> 1142;
    1142 [label="Statement(Statement { syntax: 1142, statement: Some(1146), semicolon: Some(1151) })"];
    1142 -> 1143;
    1143 [label="Expr"];
    1143 -> 1144;
    1144 [label="Identifier"];
    1144 -> 1145;
    1145[label="GT_AutoManageOnObjectTouch"];
    1142 -> 1146;
    1146 [label="Assignment(Assignment { syntax: 1146, lvalue: Some(1143), operator: Some(1147), rvalue: Some(1148) })"];
    1146 -> 1147;
    1147[label="="];
    1146 -> 1148;
    1148 [label="Expr"];
    1148 -> 1149;
    1149 [label="Literal"];
    1149 -> 1150;
    1150[label="False"];
    1142 -> 1151;
    1151[label=";"];
    1087 -> 1152;
    1152 [label="Statement(Statement { syntax: 1152, statement: Some(1156), semicolon: Some(1169) })"];
    1152 -> 1153;
    1153 [label="Expr"];
    1153 -> 1154;
    1154 [label="Identifier"];
    1154 -> 1155;
    1155[label="GT_KillfeedTranslations"];
    1152 -> 1156;
    1156 [label="Assignment(Assignment { syntax: 1156, lvalue: Some(1153), operator: Some(1157), rvalue: Some(1158) })"];
    1156 -> 1157;
    1157[label="="];
    1156 -> 1158;
    1158 [label="Expr"];
    1158 -> 1159;
    1159 [label="Array(Array { syntax: 1159, lsquare: Some(1160), values: [(1161, Some(1164)), (1165, None)], rsquare: Some(1168) })"];
    1159 -> 1160;
    1160[label="["];
    1159 -> 1161;
    1161 [label="Expr"];
    1161 -> 1162;
    1162 [label="Literal"];
    1162 -> 1163;
    1163[label="\"$<%1$> is now playing in Games\""];
    1159 -> 1164;
    1164[label=","];
    1159 -> 1165;
    1165 [label="Expr"];
    1165 -> 1166;
    1166 [label="Literal"];
    1166 -> 1167;
    1167[label="\"$<%1$> tried to escape arena\""];
    1159 -> 1168;
    1168[label="]"];
    1152 -> 1169;
    1169[label=";"];
    1087 -> 1170;
    1170 [label="Statement(Statement { syntax: 1170, statement: Some(1174), semicolon: Some(1179) })"];
    1170 -> 1171;
    1171 [label="Expr"];
    1171 -> 1172;
    1172 [label="Identifier"];
    1172 -> 1173;
    1173[label="GT_CharactersDataFileURL"];
    1170 -> 1174;
    1174 [label="Assignment(Assignment { syntax: 1174, lvalue: Some(1171), operator: Some(1175), rvalue: Some(1176) })"];
    1174 -> 1175;
    1175[label="="];
    1174 -> 1176;
    1176 [label="Expr"];
    1176 -> 1177;
    1177 [label="Literal"];
    1177 -> 1178;
    1178[label="\"\""];
    1170 -> 1179;
    1179[label=";"];
    1087 -> 1180;
    1180[label="***"];
    0 -> 1181;
    1181 [label="LabelImpl(LabelImpl { syntax: 1181, stars1: Some(1182), name: Some(1183), stars2: Some(1184), stars3: Some(1185), statements: [1186, 1197, 1219, 1241, 1263, 1286, 1309, 1339, 1349, 1359, 1369], stars4: Some(1379) })"];
    1181 -> 1182;
    1182[label="***"];
    1181 -> 1183;
    1183[label="Match_InitServer"];
    1181 -> 1184;
    1184[label="***"];
    1181 -> 1185;
    1185[label="***"];
    1181 -> 1186;
    1186 [label="Statement(Statement { syntax: 1186, statement: Some(1187), semicolon: Some(1196) })"];
    1186 -> 1187;
    1187 [label="Expr"];
    1187 -> 1190;
    1190 [label="FunctionCall(FunctionCall { syntax: 1190, lhs: Some(1188), lparen: Some(1191), args: [(1192, None)], rparen: Some(1195) })"];
    1190 -> 1188;
    1188 [label="Identifier"];
    1188 -> 1189;
    1189[label="MM_EnableMatchReconnect"];
    1190 -> 1191;
    1191[label="("];
    1190 -> 1192;
    1192 [label="Expr"];
    1192 -> 1193;
    1193 [label="Literal"];
    1193 -> 1194;
    1194[label="False"];
    1190 -> 1195;
    1195[label=")"];
    1186 -> 1196;
    1196[label=";"];
    1181 -> 1197;
    1197 [label="Statement(Statement { syntax: 1197, statement: Some(1207), semicolon: Some(1218) })"];
    1197 -> 1198;
    1198 [label="Expr"];
    1198 -> 1201;
    1201 [label="ArrayAccess(ArrayAccess { syntax: 1201, lhs: Some(1199), lsquare: Some(1202), index: Some(1203), rsquare: Some(1206) })"];
    1201 -> 1199;
    1199 [label="Identifier"];
    1199 -> 1200;
    1200[label="G_ObjectId"];
    1201 -> 1202;
    1202[label="["];
    1201 -> 1203;
    1203 [label="Expr"];
    1203 -> 1204;
    1204 [label="Literal"];
    1204 -> 1205;
    1205[label="\"Weapon\""];
    1201 -> 1206;
    1206[label="]"];
    1197 -> 1207;
    1207 [label="Assignment(Assignment { syntax: 1207, lvalue: Some(1198), operator: Some(1208), rvalue: Some(1209) })"];
    1207 -> 1208;
    1208[label="="];
    1207 -> 1209;
    1209 [label="Expr"];
    1209 -> 1212;
    1212 [label="FunctionCall(FunctionCall { syntax: 1212, lhs: Some(1210), lparen: Some(1213), args: [(1214, None)], rparen: Some(1217) })"];
    1212 -> 1210;
    1210 [label="Identifier"];
    1210 -> 1211;
    1211[label="ItemList_Add"];
    1212 -> 1213;
    1213[label="("];
    1212 -> 1214;
    1214 [label="Expr"];
    1214 -> 1215;
    1215 [label="Literal"];
    1215 -> 1216;
    1216[label="\"HungerGames\\Weapon.Item.Gbx\""];
    1212 -> 1217;
    1217[label=")"];
    1197 -> 1218;
    1218[label=";"];
    1181 -> 1219;
    1219 [label="Statement(Statement { syntax: 1219, statement: Some(1229), semicolon: Some(1240) })"];
    1219 -> 1220;
    1220 [label="Expr"];
    1220 -> 1223;
    1223 [label="ArrayAccess(ArrayAccess { syntax: 1223, lhs: Some(1221), lsquare: Some(1224), index: Some(1225), rsquare: Some(1228) })"];
    1223 -> 1221;
    1221 [label="Identifier"];
    1221 -> 1222;
    1222[label="G_ObjectId"];
    1223 -> 1224;
    1224[label="["];
    1223 -> 1225;
    1225 [label="Expr"];
    1225 -> 1226;
    1226 [label="Literal"];
    1226 -> 1227;
    1227[label="\"Charge\""];
    1223 -> 1228;
    1228[label="]"];
    1219 -> 1229;
    1229 [label="Assignment(Assignment { syntax: 1229, lvalue: Some(1220), operator: Some(1230), rvalue: Some(1231) })"];
    1229 -> 1230;
    1230[label="="];
    1229 -> 1231;
    1231 [label="Expr"];
    1231 -> 1234;
    1234 [label="FunctionCall(FunctionCall { syntax: 1234, lhs: Some(1232), lparen: Some(1235), args: [(1236, None)], rparen: Some(1239) })"];
    1234 -> 1232;
    1232 [label="Identifier"];
    1232 -> 1233;
    1233[label="ItemList_Add"];
    1234 -> 1235;
    1235[label="("];
    1234 -> 1236;
    1236 [label="Expr"];
    1236 -> 1237;
    1237 [label="Literal"];
    1237 -> 1238;
    1238[label="\"HungerGames\\Charge.Item.Gbx\""];
    1234 -> 1239;
    1239[label=")"];
    1219 -> 1240;
    1240[label=";"];
    1181 -> 1241;
    1241 [label="Statement(Statement { syntax: 1241, statement: Some(1251), semicolon: Some(1262) })"];
    1241 -> 1242;
    1242 [label="Expr"];
    1242 -> 1245;
    1245 [label="ArrayAccess(ArrayAccess { syntax: 1245, lhs: Some(1243), lsquare: Some(1246), index: Some(1247), rsquare: Some(1250) })"];
    1245 -> 1243;
    1243 [label="Identifier"];
    1243 -> 1244;
    1244[label="G_ObjectId"];
    1245 -> 1246;
    1246[label="["];
    1245 -> 1247;
    1247 [label="Expr"];
    1247 -> 1248;
    1248 [label="Literal"];
    1248 -> 1249;
    1249[label="\"Mini\""];
    1245 -> 1250;
    1250[label="]"];
    1241 -> 1251;
    1251 [label="Assignment(Assignment { syntax: 1251, lvalue: Some(1242), operator: Some(1252), rvalue: Some(1253) })"];
    1251 -> 1252;
    1252[label="="];
    1251 -> 1253;
    1253 [label="Expr"];
    1253 -> 1256;
    1256 [label="FunctionCall(FunctionCall { syntax: 1256, lhs: Some(1254), lparen: Some(1257), args: [(1258, None)], rparen: Some(1261) })"];
    1256 -> 1254;
    1254 [label="Identifier"];
    1254 -> 1255;
    1255[label="ItemList_Add"];
    1256 -> 1257;
    1257[label="("];
    1256 -> 1258;
    1258 [label="Expr"];
    1258 -> 1259;
    1259 [label="Literal"];
    1259 -> 1260;
    1260[label="\"HungerGames\\Mini.Item.Gbx\""];
    1256 -> 1261;
    1261[label=")"];
    1241 -> 1262;
    1262[label=";"];
    1181 -> 1263;
    1263 [label="Statement(Statement { syntax: 1263, statement: Some(1264), semicolon: Some(1285) })"];
    1263 -> 1264;
    1264 [label="Expr"];
    1264 -> 1272;
    1272 [label="FunctionCall(FunctionCall { syntax: 1272, lhs: Some(1267), lparen: Some(1273), args: [(1274, Some(1277)), (1278, None)], rparen: Some(1284) })"];
    1272 -> 1267;
    1267 [label="BinaryOp(BinaryOp { syntax: 1267, lhs: Some(1265), operator: Some(1268), rhs: Some(1269) })"];
    1267 -> 1265;
    1265 [label="Identifier"];
    1265 -> 1266;
    1266[label="Layers"];
    1267 -> 1268;
    1268[label="::"];
    1267 -> 1269;
    1269 [label="Expr"];
    1269 -> 1270;
    1270 [label="Identifier"];
    1270 -> 1271;
    1271[label="Create"];
    1272 -> 1273;
    1273[label="("];
    1272 -> 1274;
    1274 [label="Expr"];
    1274 -> 1275;
    1275 [label="Literal"];
    1275 -> 1276;
    1276[label="\"HungerGames:Interface\""];
    1272 -> 1277;
    1277[label=","];
    1272 -> 1278;
    1278 [label="Expr"];
    1278 -> 1281;
    1281 [label="FunctionCall(FunctionCall { syntax: 1281, lhs: Some(1279), lparen: Some(1282), args: [], rparen: Some(1283) })"];
    1281 -> 1279;
    1279 [label="Identifier"];
    1279 -> 1280;
    1280[label="CreateManialinkInterface"];
    1281 -> 1282;
    1282[label="("];
    1281 -> 1283;
    1283[label=")"];
    1272 -> 1284;
    1284[label=")"];
    1263 -> 1285;
    1285[label=";"];
    1181 -> 1286;
    1286 [label="Statement(Statement { syntax: 1286, statement: Some(1287), semicolon: Some(1308) })"];
    1286 -> 1287;
    1287 [label="Expr"];
    1287 -> 1295;
    1295 [label="FunctionCall(FunctionCall { syntax: 1295, lhs: Some(1290), lparen: Some(1296), args: [(1297, Some(1300)), (1301, None)], rparen: Some(1307) })"];
    1295 -> 1290;
    1290 [label="BinaryOp(BinaryOp { syntax: 1290, lhs: Some(1288), operator: Some(1291), rhs: Some(1292) })"];
    1290 -> 1288;
    1288 [label="Identifier"];
    1288 -> 1289;
    1289[label="Layers"];
    1290 -> 1291;
    1291[label="::"];
    1290 -> 1292;
    1292 [label="Expr"];
    1292 -> 1293;
    1293 [label="Identifier"];
    1293 -> 1294;
    1294[label="Create"];
    1295 -> 1296;
    1296[label="("];
    1295 -> 1297;
    1297 [label="Expr"];
    1297 -> 1298;
    1298 [label="Literal"];
    1298 -> 1299;
    1299[label="\"HungerGames:Statistics\""];
    1295 -> 1300;
    1300[label=","];
    1295 -> 1301;
    1301 [label="Expr"];
    1301 -> 1304;
    1304 [label="FunctionCall(FunctionCall { syntax: 1304, lhs: Some(1302), lparen: Some(1305), args: [], rparen: Some(1306) })"];
    1304 -> 1302;
    1302 [label="Identifier"];
    1302 -> 1303;
    1303[label="CreateManialinkStatistics"];
    1304 -> 1305;
    1305[label="("];
    1304 -> 1306;
    1306[label=")"];
    1295 -> 1307;
    1307[label=")"];
    1286 -> 1308;
    1308[label=";"];
    1181 -> 1309;
    1309 [label="Statement(Statement { syntax: 1309, statement: Some(1310), semicolon: Some(1338) })"];
    1309 -> 1310;
    1310 [label="Expr"];
    1310 -> 1318;
    1318 [label="FunctionCall(FunctionCall { syntax: 1318, lhs: Some(1313), lparen: Some(1319), args: [(1320, Some(1323)), (1324, None)], rparen: Some(1337) })"];
    1318 -> 1313;
    1313 [label="BinaryOp(BinaryOp { syntax: 1313, lhs: Some(1311), operator: Some(1314), rhs: Some(1315) })"];
    1313 -> 1311;
    1311 [label="Identifier"];
    1311 -> 1312;
    1312[label="Layers"];
    1313 -> 1314;
    1314[label="::"];
    1313 -> 1315;
    1315 [label="Expr"];
    1315 -> 1316;
    1316 [label="Identifier"];
    1316 -> 1317;
    1317[label="SetType"];
    1318 -> 1319;
    1319[label="("];
    1318 -> 1320;
    1320 [label="Expr"];
    1320 -> 1321;
    1321 [label="Literal"];
    1321 -> 1322;
    1322[label="\"HungerGames:Statistics\""];
    1318 -> 1323;
    1323[label=","];
    1318 -> 1324;
    1324 [label="Expr"];
    1324 -> 1327;
    1327 [label="BinaryOp(BinaryOp { syntax: 1327, lhs: Some(1325), operator: Some(1328), rhs: Some(1329) })"];
    1327 -> 1325;
    1325 [label="Identifier"];
    1325 -> 1326;
    1326[label="CUILayer"];
    1327 -> 1328;
    1328[label="::"];
    1327 -> 1329;
    1329 [label="Expr"];
    1329 -> 1332;
    1332 [label="BinaryOp(BinaryOp { syntax: 1332, lhs: Some(1330), operator: Some(1333), rhs: Some(1334) })"];
    1332 -> 1330;
    1330 [label="Identifier"];
    1330 -> 1331;
    1331[label="EUILayerType"];
    1332 -> 1333;
    1333[label="::"];
    1332 -> 1334;
    1334 [label="Expr"];
    1334 -> 1335;
    1335 [label="Identifier"];
    1335 -> 1336;
    1336[label="ScoresTable"];
    1318 -> 1337;
    1337[label=")"];
    1309 -> 1338;
    1338[label=";"];
    1181 -> 1339;
    1339 [label="Statement(Statement { syntax: 1339, statement: Some(1340), semicolon: None })"];
    1339 -> 1340;
    1340 [label="VarDec(VarDec { syntax: 1340, declare: Some(1341), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1342), as_: None, alias: None, for_: None, target: None, assignment: Some(1344), value: Some(1345) })"];
    1340 -> 1341;
    1341[label="declare"];
    1340 -> 1342;
    1342 [label="Type(Type { syntax: 1342, basename: Some(1343), members: [], arrays: [] })"];
    1342 -> 1343;
    1343[label="PrevTimeLimit"];
    1340 -> 1344;
    1344[label="="];
    1340 -> 1345;
    1345 [label="Expr"];
    1345 -> 1346;
    1346 [label="Identifier"];
    1346 -> 1347;
    1347[label="S_OffZoneActivationTime"];
    1340 -> 1348;
    1348[label=";"];
    1181 -> 1349;
    1349 [label="Statement(Statement { syntax: 1349, statement: Some(1350), semicolon: None })"];
    1349 -> 1350;
    1350 [label="VarDec(VarDec { syntax: 1350, declare: Some(1351), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1352), as_: None, alias: None, for_: None, target: None, assignment: Some(1354), value: Some(1355) })"];
    1350 -> 1351;
    1351[label="declare"];
    1350 -> 1352;
    1352 [label="Type(Type { syntax: 1352, basename: Some(1353), members: [], arrays: [] })"];
    1352 -> 1353;
    1353[label="PrevPlayersNbAlive"];
    1350 -> 1354;
    1354[label="="];
    1350 -> 1355;
    1355 [label="Expr"];
    1355 -> 1356;
    1356 [label="Identifier"];
    1356 -> 1357;
    1357[label="PlayersNbAlive"];
    1350 -> 1358;
    1358[label=";"];
    1181 -> 1359;
    1359 [label="Statement(Statement { syntax: 1359, statement: Some(1360), semicolon: None })"];
    1359 -> 1360;
    1360 [label="VarDec(VarDec { syntax: 1360, declare: Some(1361), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1362), as_: None, alias: None, for_: None, target: None, assignment: Some(1364), value: Some(1365) })"];
    1360 -> 1361;
    1361[label="declare"];
    1360 -> 1362;
    1362 [label="Type(Type { syntax: 1362, basename: Some(1363), members: [], arrays: [] })"];
    1362 -> 1363;
    1363[label="SpawnedToads"];
    1360 -> 1364;
    1364[label="="];
    1360 -> 1365;
    1365 [label="Expr"];
    1365 -> 1366;
    1366 [label="Literal"];
    1366 -> 1367;
    1367[label="False"];
    1360 -> 1368;
    1368[label=";"];
    1181 -> 1369;
    1369 [label="Statement(Statement { syntax: 1369, statement: Some(1370), semicolon: None })"];
    1369 -> 1370;
    1370 [label="VarDec(VarDec { syntax: 1370, declare: Some(1371), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1372), as_: None, alias: None, for_: None, target: None, assignment: Some(1374), value: Some(1375) })"];
    1370 -> 1371;
    1371[label="declare"];
    1370 -> 1372;
    1372 [label="Type(Type { syntax: 1372, basename: Some(1373), members: [], arrays: [] })"];
    1372 -> 1373;
    1373[label="OffZoneRadiusMax"];
    1370 -> 1374;
    1374[label="="];
    1370 -> 1375;
    1375 [label="Expr"];
    1375 -> 1376;
    1376 [label="Literal"];
    1376 -> 1377;
    1377[label="0."];
    1370 -> 1378;
    1378[label=";"];
    1181 -> 1379;
    1379[label="***"];
    0 -> 1380;
    1380 [label="LabelImpl(LabelImpl { syntax: 1380, stars1: Some(1381), name: Some(1382), stars2: Some(1383), stars3: Some(1384), statements: [1385, 1401, 1438, 1446, 1460, 1468, 1478, 1503, 1533], stars4: Some(1552) })"];
    1380 -> 1381;
    1381[label="***"];
    1380 -> 1382;
    1382[label="Match_InitMap"];
    1380 -> 1383;
    1383[label="***"];
    1380 -> 1384;
    1384[label="***"];
    1380 -> 1385;
    1385 [label="Statement(Statement { syntax: 1385, statement: Some(1386), semicolon: Some(1400) })"];
    1385 -> 1386;
    1386 [label="Expr"];
    1386 -> 1394;
    1394 [label="FunctionCall(FunctionCall { syntax: 1394, lhs: Some(1389), lparen: Some(1395), args: [(1396, None)], rparen: Some(1399) })"];
    1394 -> 1389;
    1389 [label="BinaryOp(BinaryOp { syntax: 1389, lhs: Some(1387), operator: Some(1390), rhs: Some(1391) })"];
    1389 -> 1387;
    1387 [label="Identifier"];
    1387 -> 1388;
    1388[label="PauseMenu"];
    1389 -> 1390;
    1390[label="::"];
    1389 -> 1391;
    1391 [label="Expr"];
    1391 -> 1392;
    1392 [label="Identifier"];
    1392 -> 1393;
    1393[label="SetQuitButtonAvailable"];
    1394 -> 1395;
    1395[label="("];
    1394 -> 1396;
    1396 [label="Expr"];
    1396 -> 1397;
    1397 [label="Literal"];
    1397 -> 1398;
    1398[label="True"];
    1394 -> 1399;
    1399[label=")"];
    1385 -> 1400;
    1400[label=";"];
    1380 -> 1401;
    1401 [label="Statement(Statement { syntax: 1401, statement: Some(1402), semicolon: Some(1437) })"];
    1401 -> 1402;
    1402 [label="Expr"];
    1402 -> 1410;
    1410 [label="FunctionCall(FunctionCall { syntax: 1410, lhs: Some(1405), lparen: Some(1411), args: [(1412, None)], rparen: Some(1436) })"];
    1410 -> 1405;
    1405 [label="BinaryOp(BinaryOp { syntax: 1405, lhs: Some(1403), operator: Some(1406), rhs: Some(1407) })"];
    1405 -> 1403;
    1403 [label="Identifier"];
    1403 -> 1404;
    1404[label="ST2"];
    1405 -> 1406;
    1406[label="::"];
    1405 -> 1407;
    1407 [label="Expr"];
    1407 -> 1408;
    1408 [label="Identifier"];
    1408 -> 1409;
    1409[label="SetFooterText"];
    1410 -> 1411;
    1411[label="("];
    1410 -> 1412;
    1412 [label="Expr"];
    1412 -> 1420;
    1420 [label="FunctionCall(FunctionCall { syntax: 1420, lhs: Some(1415), lparen: Some(1421), args: [(1422, Some(1425)), (1426, None)], rparen: Some(1435) })"];
    1420 -> 1415;
    1415 [label="BinaryOp(BinaryOp { syntax: 1415, lhs: Some(1413), operator: Some(1416), rhs: Some(1417) })"];
    1415 -> 1413;
    1413 [label="Identifier"];
    1413 -> 1414;
    1414[label="TL"];
    1415 -> 1416;
    1416[label="::"];
    1415 -> 1417;
    1417 [label="Expr"];
    1417 -> 1418;
    1418 [label="Identifier"];
    1418 -> 1419;
    1419[label="Compose"];
    1420 -> 1421;
    1421[label="("];
    1420 -> 1422;
    1422 [label="Expr"];
    1422 -> 1423;
    1423 [label="Literal"];
    1423 -> 1424;
    1424[label="\"%1 -\""];
    1420 -> 1425;
    1425[label=","];
    1420 -> 1426;
    1426 [label="Expr"];
    1426 -> 1429;
    1429 [label="FunctionCall(FunctionCall { syntax: 1429, lhs: Some(1427), lparen: Some(1430), args: [(1431, None)], rparen: Some(1434) })"];
    1429 -> 1427;
    1427 [label="Identifier"];
    1427 -> 1428;
    1428[label="_"];
    1429 -> 1430;
    1430[label="("];
    1429 -> 1431;
    1431 [label="Expr"];
    1431 -> 1432;
    1432 [label="Literal"];
    1432 -> 1433;
    1433[label="\"Remaining players: \""];
    1429 -> 1434;
    1434[label=")"];
    1420 -> 1435;
    1435[label=")"];
    1410 -> 1436;
    1436[label=")"];
    1401 -> 1437;
    1437[label=";"];
    1380 -> 1438;
    1438 [label="Statement(Statement { syntax: 1438, statement: Some(1439), semicolon: Some(1445) })"];
    1438 -> 1439;
    1439 [label="Expr"];
    1439 -> 1442;
    1442 [label="FunctionCall(FunctionCall { syntax: 1442, lhs: Some(1440), lparen: Some(1443), args: [], rparen: Some(1444) })"];
    1442 -> 1440;
    1440 [label="Identifier"];
    1440 -> 1441;
    1441[label="UIResetAll"];
    1442 -> 1443;
    1443[label="("];
    1442 -> 1444;
    1444[label=")"];
    1438 -> 1445;
    1445[label=";"];
    1380 -> 1446;
    1446 [label="Statement(Statement { syntax: 1446, statement: Some(1447), semicolon: Some(1459) })"];
    1446 -> 1447;
    1447 [label="Expr"];
    1447 -> 1450;
    1450 [label="FunctionCall(FunctionCall { syntax: 1450, lhs: Some(1448), lparen: Some(1451), args: [(1452, None)], rparen: Some(1458) })"];
    1450 -> 1448;
    1448 [label="Identifier"];
    1448 -> 1449;
    1449[label="UISetStartTime"];
    1450 -> 1451;
    1451[label="("];
    1450 -> 1452;
    1452 [label="Expr"];
    1452 -> 1453;
    1453 [label="UnOp(UnOp { syntax: 1453, operator: Some(1454), operand: Some(1455) })"];
    1453 -> 1454;
    1454[label="-"];
    1453 -> 1455;
    1455 [label="Expr"];
    1455 -> 1456;
    1456 [label="Literal"];
    1456 -> 1457;
    1457[label="1"];
    1450 -> 1458;
    1458[label=")"];
    1446 -> 1459;
    1459[label=";"];
    1380 -> 1460;
    1460 [label="Statement(Statement { syntax: 1460, statement: Some(1461), semicolon: Some(1467) })"];
    1460 -> 1461;
    1461 [label="Expr"];
    1461 -> 1464;
    1464 [label="FunctionCall(FunctionCall { syntax: 1464, lhs: Some(1462), lparen: Some(1465), args: [], rparen: Some(1466) })"];
    1464 -> 1462;
    1462 [label="Identifier"];
    1462 -> 1463;
    1463[label="DestroyAllObjects"];
    1464 -> 1465;
    1465[label="("];
    1464 -> 1466;
    1466[label=")"];
    1460 -> 1467;
    1467[label=";"];
    1380 -> 1468;
    1468 [label="Statement(Statement { syntax: 1468, statement: Some(1469), semicolon: None })"];
    1468 -> 1469;
    1469 [label="VarDec(VarDec { syntax: 1469, declare: Some(1470), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1471), as_: None, alias: None, for_: None, target: None, assignment: Some(1473), value: Some(1474) })"];
    1469 -> 1470;
    1470[label="declare"];
    1469 -> 1471;
    1471 [label="Type(Type { syntax: 1471, basename: Some(1472), members: [], arrays: [] })"];
    1471 -> 1472;
    1472[label="CenterGoalLandmarkId"];
    1469 -> 1473;
    1473[label="="];
    1469 -> 1474;
    1474 [label="Expr"];
    1474 -> 1475;
    1475 [label="Literal"];
    1475 -> 1476;
    1476[label="NullId"];
    1469 -> 1477;
    1477[label=";"];
    1380 -> 1478;
    1478 [label="Statement(Statement { syntax: 1478, statement: Some(1479), semicolon: None })"];
    1478 -> 1479;
    1479 [label="VarDec(VarDec { syntax: 1479, declare: Some(1480), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1481), as_: None, alias: None, for_: None, target: None, assignment: Some(1483), value: Some(1484) })"];
    1479 -> 1480;
    1480[label="declare"];
    1479 -> 1481;
    1481 [label="Type(Type { syntax: 1481, basename: Some(1482), members: [], arrays: [] })"];
    1481 -> 1482;
    1482[label="CenterGoal"];
    1479 -> 1483;
    1483[label="<=>"];
    1479 -> 1484;
    1484 [label="Expr"];
    1484 -> 1492;
    1492 [label="FunctionCall(FunctionCall { syntax: 1492, lhs: Some(1487), lparen: Some(1493), args: [(1494, Some(1497)), (1498, None)], rparen: Some(1501) })"];
    1492 -> 1487;
    1487 [label="BinaryOp(BinaryOp { syntax: 1487, lhs: Some(1485), operator: Some(1488), rhs: Some(1489) })"];
    1487 -> 1485;
    1485 [label="Identifier"];
    1485 -> 1486;
    1486[label="Map"];
    1487 -> 1488;
    1488[label="::"];
    1487 -> 1489;
    1489 [label="Expr"];
    1489 -> 1490;
    1490 [label="Identifier"];
    1490 -> 1491;
    1491[label="GetLandmarkSector"];
    1492 -> 1493;
    1493[label="("];
    1492 -> 1494;
    1494 [label="Expr"];
    1494 -> 1495;
    1495 [label="Literal"];
    1495 -> 1496;
    1496[label="\"Goal\""];
    1492 -> 1497;
    1497[label=","];
    1492 -> 1498;
    1498 [label="Expr"];
    1498 -> 1499;
    1499 [label="Literal"];
    1499 -> 1500;
    1500[label="0"];
    1492 -> 1501;
    1501[label=")"];
    1479 -> 1502;
    1502[label=";"];
    1380 -> 1503;
    1503 [label="Statement(Statement { syntax: 1503, statement: Some(1504), semicolon: None })"];
    1503 -> 1504;
    1504 [label="VarDec(VarDec { syntax: 1504, declare: Some(1505), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1506), as_: None, alias: None, for_: None, target: None, assignment: Some(1508), value: Some(1509) })"];
    1504 -> 1505;
    1505[label="declare"];
    1504 -> 1506;
    1506 [label="Type(Type { syntax: 1506, basename: Some(1507), members: [], arrays: [] })"];
    1506 -> 1507;
    1507[label="MapValidated"];
    1504 -> 1508;
    1508[label="="];
    1504 -> 1509;
    1509 [label="Expr"];
    1509 -> 1517;
    1517 [label="BinaryOp(BinaryOp { syntax: 1517, lhs: Some(1512), operator: Some(1518), rhs: Some(1519) })"];
    1517 -> 1512;
    1512 [label="BinaryOp(BinaryOp { syntax: 1512, lhs: Some(1510), operator: Some(1513), rhs: Some(1514) })"];
    1512 -> 1510;
    1510 [label="Identifier"];
    1510 -> 1511;
    1511[label="CenterGoal"];
    1512 -> 1513;
    1513[label="!="];
    1512 -> 1514;
    1514 [label="Expr"];
    1514 -> 1515;
    1515 [label="Literal"];
    1515 -> 1516;
    1516[label="Null"];
    1517 -> 1518;
    1518[label="&&"];
    1517 -> 1519;
    1519 [label="Expr"];
    1519 -> 1527;
    1527 [label="BinaryOp(BinaryOp { syntax: 1527, lhs: Some(1522), operator: Some(1528), rhs: Some(1529) })"];
    1527 -> 1522;
    1522 [label="BinaryOp(BinaryOp { syntax: 1522, lhs: Some(1520), operator: Some(1523), rhs: Some(1524) })"];
    1522 -> 1520;
    1520 [label="Identifier"];
    1520 -> 1521;
    1521[label="MapLandmarks_PlayerSpawn"];
    1522 -> 1523;
    1523[label="."];
    1522 -> 1524;
    1524 [label="Expr"];
    1524 -> 1525;
    1525 [label="Identifier"];
    1525 -> 1526;
    1526[label="count"];
    1527 -> 1528;
    1528[label=">"];
    1527 -> 1529;
    1529 [label="Expr"];
    1529 -> 1530;
    1530 [label="Literal"];
    1530 -> 1531;
    1531[label="0"];
    1504 -> 1532;
    1532[label=";"];
    1380 -> 1533;
    1533 [label="Statement(Statement { syntax: 1533, statement: Some(1534), semicolon: None })"];
    1533 -> 1534;
    1534 [label="If(If { syntax: 1534, if_: Some(1535), lparen: Some(1536), condition: Some(1537), rparen: Some(1543), body: Some(1544), else_: None })"];
    1534 -> 1535;
    1535[label="if"];
    1534 -> 1536;
    1536[label="("];
    1534 -> 1537;
    1537 [label="Expr"];
    1537 -> 1538;
    1538 [label="UnOp(UnOp { syntax: 1538, operator: Some(1539), operand: Some(1540) })"];
    1538 -> 1539;
    1539[label="!"];
    1538 -> 1540;
    1540 [label="Expr"];
    1540 -> 1541;
    1541 [label="Identifier"];
    1541 -> 1542;
    1542[label="MapValidated"];
    1534 -> 1543;
    1543[label=")"];
    1534 -> 1544;
    1544 [label="Statement(Statement { syntax: 1544, statement: Some(1545), semicolon: Some(1551) })"];
    1544 -> 1545;
    1545 [label="Expr"];
    1545 -> 1548;
    1548 [label="FunctionCall(FunctionCall { syntax: 1548, lhs: Some(1546), lparen: Some(1549), args: [], rparen: Some(1550) })"];
    1548 -> 1546;
    1546 [label="Identifier"];
    1546 -> 1547;
    1547[label="GT_SkipInvalidMap"];
    1548 -> 1549;
    1549[label="("];
    1548 -> 1550;
    1550[label=")"];
    1544 -> 1551;
    1551[label=";"];
    1380 -> 1552;
    1552[label="***"];
    0 -> 1553;
    1553 [label="LabelImpl(LabelImpl { syntax: 1553, stars1: Some(1554), name: Some(1555), stars2: Some(1556), stars3: Some(1557), statements: [1558, 1638, 1654, 1664, 1788, 1817, 1895, 1905, 1921, 1937, 1947, 2166, 2175, 2187, 2316, 2563], stars4: Some(2785) })"];
    1553 -> 1554;
    1554[label="***"];
    1553 -> 1555;
    1555[label="InitializeObjects"];
    1553 -> 1556;
    1556[label="***"];
    1553 -> 1557;
    1557[label="***"];
    1553 -> 1558;
    1558 [label="Statement(Statement { syntax: 1558, statement: Some(1559), semicolon: None })"];
    1558 -> 1559;
    1559 [label="Foreach(Foreach { syntax: 1559, foreach: Some(1560), lparen: Some(1561), name1: Some(1562), arrow: None, name2: None, in_: Some(1563), value: Some(1564), rparen: Some(1567), body: Some(1568) })"];
    1559 -> 1560;
    1560[label="foreach"];
    1559 -> 1561;
    1561[label="("];
    1559 -> 1562;
    1562[label="MapLandmark"];
    1559 -> 1563;
    1563[label="in"];
    1559 -> 1564;
    1564 [label="Expr"];
    1564 -> 1565;
    1565 [label="Identifier"];
    1565 -> 1566;
    1566[label="MapLandmarks_ObjectAnchor"];
    1559 -> 1567;
    1567[label=")"];
    1559 -> 1568;
    1568 [label="Statement(Statement { syntax: 1568, statement: Some(1569), semicolon: None })"];
    1568 -> 1569;
    1569 [label="Block(Block { syntax: 1569, lbrace: Some(1570), statements: [1571, 1582, 1593, 1604, 1614, 1627], rbrace: Some(1637) })"];
    1569 -> 1570;
    1570[label="{"];
    1569 -> 1571;
    1571 [label="Statement(Statement { syntax: 1571, statement: Some(1572), semicolon: None })"];
    1571 -> 1572;
    1572 [label="VarDec(VarDec { syntax: 1572, declare: Some(1573), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(1574), name: Some(1576), as_: None, alias: None, for_: Some(1577), target: Some(1578), assignment: None, value: None })"];
    1572 -> 1573;
    1573[label="declare"];
    1572 -> 1574;
    1574 [label="Type(Type { syntax: 1574, basename: Some(1575), members: [], arrays: [] })"];
    1574 -> 1575;
    1575[label="Boolean"];
    1572 -> 1576;
    1576[label="ObjectSpawned"];
    1572 -> 1577;
    1577[label="for"];
    1572 -> 1578;
    1578 [label="Expr"];
    1578 -> 1579;
    1579 [label="Identifier"];
    1579 -> 1580;
    1580[label="MapLandmark"];
    1572 -> 1581;
    1581[label=";"];
    1569 -> 1582;
    1582 [label="Statement(Statement { syntax: 1582, statement: Some(1583), semicolon: None })"];
    1582 -> 1583;
    1583 [label="VarDec(VarDec { syntax: 1583, declare: Some(1584), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(1585), name: Some(1587), as_: None, alias: None, for_: Some(1588), target: Some(1589), assignment: None, value: None })"];
    1583 -> 1584;
    1584[label="declare"];
    1583 -> 1585;
    1585 [label="Type(Type { syntax: 1585, basename: Some(1586), members: [], arrays: [] })"];
    1585 -> 1586;
    1586[label="Integer"];
    1583 -> 1587;
    1587[label="ObjectNextSpawn"];
    1583 -> 1588;
    1588[label="for"];
    1583 -> 1589;
    1589 [label="Expr"];
    1589 -> 1590;
    1590 [label="Identifier"];
    1590 -> 1591;
    1591[label="MapLandmark"];
    1583 -> 1592;
    1592[label=";"];
    1569 -> 1593;
    1593 [label="Statement(Statement { syntax: 1593, statement: Some(1594), semicolon: None })"];
    1593 -> 1594;
    1594 [label="VarDec(VarDec { syntax: 1594, declare: Some(1595), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(1596), name: Some(1598), as_: None, alias: None, for_: Some(1599), target: Some(1600), assignment: None, value: None })"];
    1594 -> 1595;
    1595[label="declare"];
    1594 -> 1596;
    1596 [label="Type(Type { syntax: 1596, basename: Some(1597), members: [], arrays: [] })"];
    1596 -> 1597;
    1597[label="Text"];
    1594 -> 1598;
    1598[label="ObjectType"];
    1594 -> 1599;
    1599[label="for"];
    1594 -> 1600;
    1600 [label="Expr"];
    1600 -> 1601;
    1601 [label="Identifier"];
    1601 -> 1602;
    1602[label="MapLandmark"];
    1594 -> 1603;
    1603[label=";"];
    1569 -> 1604;
    1604 [label="Statement(Statement { syntax: 1604, statement: Some(1608), semicolon: Some(1613) })"];
    1604 -> 1605;
    1605 [label="Expr"];
    1605 -> 1606;
    1606 [label="Identifier"];
    1606 -> 1607;
    1607[label="ObjectSpawned"];
    1604 -> 1608;
    1608 [label="Assignment(Assignment { syntax: 1608, lvalue: Some(1605), operator: Some(1609), rvalue: Some(1610) })"];
    1608 -> 1609;
    1609[label="="];
    1608 -> 1610;
    1610 [label="Expr"];
    1610 -> 1611;
    1611 [label="Literal"];
    1611 -> 1612;
    1612[label="False"];
    1604 -> 1613;
    1613[label=";"];
    1569 -> 1614;
    1614 [label="Statement(Statement { syntax: 1614, statement: Some(1618), semicolon: Some(1626) })"];
    1614 -> 1615;
    1615 [label="Expr"];
    1615 -> 1616;
    1616 [label="Identifier"];
    1616 -> 1617;
    1617[label="ObjectNextSpawn"];
    1614 -> 1618;
    1618 [label="Assignment(Assignment { syntax: 1618, lvalue: Some(1615), operator: Some(1619), rvalue: Some(1620) })"];
    1618 -> 1619;
    1619[label="="];
    1618 -> 1620;
    1620 [label="Expr"];
    1620 -> 1621;
    1621 [label="UnOp(UnOp { syntax: 1621, operator: Some(1622), operand: Some(1623) })"];
    1621 -> 1622;
    1622[label="-"];
    1621 -> 1623;
    1623 [label="Expr"];
    1623 -> 1624;
    1624 [label="Literal"];
    1624 -> 1625;
    1625[label="1"];
    1614 -> 1626;
    1626[label=";"];
    1569 -> 1627;
    1627 [label="Statement(Statement { syntax: 1627, statement: Some(1631), semicolon: Some(1636) })"];
    1627 -> 1628;
    1628 [label="Expr"];
    1628 -> 1629;
    1629 [label="Identifier"];
    1629 -> 1630;
    1630[label="ObjectType"];
    1627 -> 1631;
    1631 [label="Assignment(Assignment { syntax: 1631, lvalue: Some(1628), operator: Some(1632), rvalue: Some(1633) })"];
    1631 -> 1632;
    1632[label="="];
    1631 -> 1633;
    1633 [label="Expr"];
    1633 -> 1634;
    1634 [label="Literal"];
    1634 -> 1635;
    1635[label="\"\""];
    1627 -> 1636;
    1636[label=";"];
    1569 -> 1637;
    1637[label="}"];
    1553 -> 1638;
    1638 [label="Statement(Statement { syntax: 1638, statement: Some(1639), semicolon: None })"];
    1638 -> 1639;
    1639 [label="VarDec(VarDec { syntax: 1639, declare: Some(1640), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1641), as_: None, alias: None, for_: None, target: None, assignment: Some(1643), value: Some(1644) })"];
    1639 -> 1640;
    1640[label="declare"];
    1639 -> 1641;
    1641 [label="Type(Type { syntax: 1641, basename: Some(1642), members: [], arrays: [] })"];
    1641 -> 1642;
    1642[label="NbObjectsSpawnLandmarks"];
    1639 -> 1643;
    1643[label="="];
    1639 -> 1644;
    1644 [label="Expr"];
    1644 -> 1647;
    1647 [label="ArrayAccess(ArrayAccess { syntax: 1647, lhs: Some(1645), lsquare: Some(1648), index: Some(1649), rsquare: Some(1652) })"];
    1647 -> 1645;
    1645 [label="Identifier"];
    1645 -> 1646;
    1646[label="Integer"];
    1647 -> 1648;
    1648[label="["];
    1647 -> 1649;
    1649 [label="Expr"];
    1649 -> 1650;
    1650 [label="Identifier"];
    1650 -> 1651;
    1651[label="Text"];
    1647 -> 1652;
    1652[label="]"];
    1639 -> 1653;
    1653[label=";"];
    1553 -> 1654;
    1654 [label="Statement(Statement { syntax: 1654, statement: Some(1655), semicolon: None })"];
    1654 -> 1655;
    1655 [label="VarDec(VarDec { syntax: 1655, declare: Some(1656), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1657), as_: None, alias: None, for_: None, target: None, assignment: Some(1659), value: Some(1660) })"];
    1655 -> 1656;
    1656[label="declare"];
    1655 -> 1657;
    1657 [label="Type(Type { syntax: 1657, basename: Some(1658), members: [], arrays: [] })"];
    1657 -> 1658;
    1658[label="TotalNbObjectsSpawns"];
    1655 -> 1659;
    1659[label="="];
    1655 -> 1660;
    1660 [label="Expr"];
    1660 -> 1661;
    1661 [label="Literal"];
    1661 -> 1662;
    1662[label="0"];
    1655 -> 1663;
    1663[label=";"];
    1553 -> 1664;
    1664 [label="Statement(Statement { syntax: 1664, statement: Some(1665), semicolon: None })"];
    1664 -> 1665;
    1665 [label="Foreach(Foreach { syntax: 1665, foreach: Some(1666), lparen: Some(1667), name1: Some(1668), arrow: None, name2: None, in_: Some(1669), value: Some(1670), rparen: Some(1673), body: Some(1674) })"];
    1665 -> 1666;
    1666[label="foreach"];
    1665 -> 1667;
    1667[label="("];
    1665 -> 1668;
    1668[label="MapLandmark"];
    1665 -> 1669;
    1669[label="in"];
    1665 -> 1670;
    1670 [label="Expr"];
    1670 -> 1671;
    1671 [label="Identifier"];
    1671 -> 1672;
    1672[label="MapLandmarks_ObjectAnchor"];
    1665 -> 1673;
    1673[label=")"];
    1665 -> 1674;
    1674 [label="Statement(Statement { syntax: 1674, statement: Some(1675), semicolon: None })"];
    1674 -> 1675;
    1675 [label="Block(Block { syntax: 1675, lbrace: Some(1676), statements: [1677, 1708, 1756, 1777], rbrace: Some(1787) })"];
    1675 -> 1676;
    1676[label="{"];
    1675 -> 1677;
    1677 [label="Statement(Statement { syntax: 1677, statement: Some(1678), semicolon: None })"];
    1677 -> 1678;
    1678 [label="If(If { syntax: 1678, if_: Some(1679), lparen: Some(1680), condition: Some(1681), rparen: Some(1703), body: Some(1704), else_: None })"];
    1678 -> 1679;
    1679[label="if"];
    1678 -> 1680;
    1680[label="("];
    1678 -> 1681;
    1681 [label="Expr"];
    1681 -> 1692;
    1692 [label="FunctionCall(FunctionCall { syntax: 1692, lhs: Some(1682), lparen: Some(1693), args: [(1694, None)], rparen: Some(1702) })"];
    1692 -> 1682;
    1682 [label="UnOp(UnOp { syntax: 1682, operator: Some(1683), operand: Some(1684) })"];
    1682 -> 1683;
    1683[label="!"];
    1682 -> 1684;
    1684 [label="Expr"];
    1684 -> 1687;
    1687 [label="BinaryOp(BinaryOp { syntax: 1687, lhs: Some(1685), operator: Some(1688), rhs: Some(1689) })"];
    1687 -> 1685;
    1685 [label="Identifier"];
    1685 -> 1686;
    1686[label="C_ModeSupportedObjects"];
    1687 -> 1688;
    1688[label="."];
    1687 -> 1689;
    1689 [label="Expr"];
    1689 -> 1690;
    1690 [label="Identifier"];
    1690 -> 1691;
    1691[label="exists"];
    1692 -> 1693;
    1693[label="("];
    1692 -> 1694;
    1694 [label="Expr"];
    1694 -> 1697;
    1697 [label="BinaryOp(BinaryOp { syntax: 1697, lhs: Some(1695), operator: Some(1698), rhs: Some(1699) })"];
    1697 -> 1695;
    1695 [label="Identifier"];
    1695 -> 1696;
    1696[label="MapLandmark"];
    1697 -> 1698;
    1698[label="."];
    1697 -> 1699;
    1699 [label="Expr"];
    1699 -> 1700;
    1700 [label="Identifier"];
    1700 -> 1701;
    1701[label="Tag"];
    1692 -> 1702;
    1702[label=")"];
    1678 -> 1703;
    1703[label=")"];
    1678 -> 1704;
    1704 [label="Statement(Statement { syntax: 1704, statement: Some(1705), semicolon: Some(1707) })"];
    1704 -> 1705;
    1705 [label="Continue"];
    1705 -> 1706;
    1706[label="continue"];
    1704 -> 1707;
    1707[label=";"];
    1675 -> 1708;
    1708 [label="Statement(Statement { syntax: 1708, statement: Some(1709), semicolon: None })"];
    1708 -> 1709;
    1709 [label="If(If { syntax: 1709, if_: Some(1710), lparen: Some(1711), condition: Some(1712), rparen: Some(1734), body: Some(1735), else_: None })"];
    1709 -> 1710;
    1710[label="if"];
    1709 -> 1711;
    1711[label="("];
    1709 -> 1712;
    1712 [label="Expr"];
    1712 -> 1723;
    1723 [label="FunctionCall(FunctionCall { syntax: 1723, lhs: Some(1713), lparen: Some(1724), args: [(1725, None)], rparen: Some(1733) })"];
    1723 -> 1713;
    1713 [label="UnOp(UnOp { syntax: 1713, operator: Some(1714), operand: Some(1715) })"];
    1713 -> 1714;
    1714[label="!"];
    1713 -> 1715;
    1715 [label="Expr"];
    1715 -> 1718;
    1718 [label="BinaryOp(BinaryOp { syntax: 1718, lhs: Some(1716), operator: Some(1719), rhs: Some(1720) })"];
    1718 -> 1716;
    1716 [label="Identifier"];
    1716 -> 1717;
    1717[label="NbObjectsSpawnLandmarks"];
    1718 -> 1719;
    1719[label="."];
    1718 -> 1720;
    1720 [label="Expr"];
    1720 -> 1721;
    1721 [label="Identifier"];
    1721 -> 1722;
    1722[label="existskey"];
    1723 -> 1724;
    1724[label="("];
    1723 -> 1725;
    1725 [label="Expr"];
    1725 -> 1728;
    1728 [label="BinaryOp(BinaryOp { syntax: 1728, lhs: Some(1726), operator: Some(1729), rhs: Some(1730) })"];
    1728 -> 1726;
    1726 [label="Identifier"];
    1726 -> 1727;
    1727[label="MapLandmark"];
    1728 -> 1729;
    1729[label="."];
    1728 -> 1730;
    1730 [label="Expr"];
    1730 -> 1731;
    1731 [label="Identifier"];
    1731 -> 1732;
    1732[label="Tag"];
    1723 -> 1733;
    1733[label=")"];
    1709 -> 1734;
    1734[label=")"];
    1709 -> 1735;
    1735 [label="Statement(Statement { syntax: 1735, statement: Some(1750), semicolon: Some(1755) })"];
    1735 -> 1736;
    1736 [label="Expr"];
    1736 -> 1739;
    1739 [label="ArrayAccess(ArrayAccess { syntax: 1739, lhs: Some(1737), lsquare: Some(1740), index: Some(1741), rsquare: Some(1749) })"];
    1739 -> 1737;
    1737 [label="Identifier"];
    1737 -> 1738;
    1738[label="NbObjectsSpawnLandmarks"];
    1739 -> 1740;
    1740[label="["];
    1739 -> 1741;
    1741 [label="Expr"];
    1741 -> 1744;
    1744 [label="BinaryOp(BinaryOp { syntax: 1744, lhs: Some(1742), operator: Some(1745), rhs: Some(1746) })"];
    1744 -> 1742;
    1742 [label="Identifier"];
    1742 -> 1743;
    1743[label="MapLandmark"];
    1744 -> 1745;
    1745[label="."];
    1744 -> 1746;
    1746 [label="Expr"];
    1746 -> 1747;
    1747 [label="Identifier"];
    1747 -> 1748;
    1748[label="Tag"];
    1739 -> 1749;
    1749[label="]"];
    1735 -> 1750;
    1750 [label="Assignment(Assignment { syntax: 1750, lvalue: Some(1736), operator: Some(1751), rvalue: Some(1752) })"];
    1750 -> 1751;
    1751[label="="];
    1750 -> 1752;
    1752 [label="Expr"];
    1752 -> 1753;
    1753 [label="Literal"];
    1753 -> 1754;
    1754[label="0"];
    1735 -> 1755;
    1755[label=";"];
    1675 -> 1756;
    1756 [label="Statement(Statement { syntax: 1756, statement: Some(1771), semicolon: Some(1776) })"];
    1756 -> 1757;
    1757 [label="Expr"];
    1757 -> 1760;
    1760 [label="ArrayAccess(ArrayAccess { syntax: 1760, lhs: Some(1758), lsquare: Some(1761), index: Some(1762), rsquare: Some(1770) })"];
    1760 -> 1758;
    1758 [label="Identifier"];
    1758 -> 1759;
    1759[label="NbObjectsSpawnLandmarks"];
    1760 -> 1761;
    1761[label="["];
    1760 -> 1762;
    1762 [label="Expr"];
    1762 -> 1765;
    1765 [label="BinaryOp(BinaryOp { syntax: 1765, lhs: Some(1763), operator: Some(1766), rhs: Some(1767) })"];
    1765 -> 1763;
    1763 [label="Identifier"];
    1763 -> 1764;
    1764[label="MapLandmark"];
    1765 -> 1766;
    1766[label="."];
    1765 -> 1767;
    1767 [label="Expr"];
    1767 -> 1768;
    1768 [label="Identifier"];
    1768 -> 1769;
    1769[label="Tag"];
    1760 -> 1770;
    1770[label="]"];
    1756 -> 1771;
    1771 [label="Assignment(Assignment { syntax: 1771, lvalue: Some(1757), operator: Some(1772), rvalue: Some(1773) })"];
    1771 -> 1772;
    1772[label="+="];
    1771 -> 1773;
    1773 [label="Expr"];
    1773 -> 1774;
    1774 [label="Literal"];
    1774 -> 1775;
    1775[label="1"];
    1756 -> 1776;
    1776[label=";"];
    1675 -> 1777;
    1777 [label="Statement(Statement { syntax: 1777, statement: Some(1781), semicolon: Some(1786) })"];
    1777 -> 1778;
    1778 [label="Expr"];
    1778 -> 1779;
    1779 [label="Identifier"];
    1779 -> 1780;
    1780[label="TotalNbObjectsSpawns"];
    1777 -> 1781;
    1781 [label="Assignment(Assignment { syntax: 1781, lvalue: Some(1778), operator: Some(1782), rvalue: Some(1783) })"];
    1781 -> 1782;
    1782[label="+="];
    1781 -> 1783;
    1783 [label="Expr"];
    1783 -> 1784;
    1784 [label="Literal"];
    1784 -> 1785;
    1785[label="1"];
    1777 -> 1786;
    1786[label=";"];
    1675 -> 1787;
    1787[label="}"];
    1553 -> 1788;
    1788 [label="Statement(Statement { syntax: 1788, statement: Some(1789), semicolon: None })"];
    1788 -> 1789;
    1789 [label="VarDec(VarDec { syntax: 1789, declare: Some(1790), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1791), as_: None, alias: None, for_: None, target: None, assignment: Some(1793), value: Some(1794) })"];
    1789 -> 1790;
    1790[label="declare"];
    1789 -> 1791;
    1791 [label="Type(Type { syntax: 1791, basename: Some(1792), members: [], arrays: [] })"];
    1791 -> 1792;
    1792[label="ObjectsSpawnRatio"];
    1789 -> 1793;
    1793[label="="];
    1789 -> 1794;
    1794 [label="Expr"];
    1794 -> 1802;
    1802 [label="FunctionCall(FunctionCall { syntax: 1802, lhs: Some(1797), lparen: Some(1803), args: [(1804, Some(1807)), (1808, Some(1811)), (1812, None)], rparen: Some(1815) })"];
    1802 -> 1797;
    1797 [label="BinaryOp(BinaryOp { syntax: 1797, lhs: Some(1795), operator: Some(1798), rhs: Some(1799) })"];
    1797 -> 1795;
    1795 [label="Identifier"];
    1795 -> 1796;
    1796[label="ML"];
    1797 -> 1798;
    1798[label="::"];
    1797 -> 1799;
    1799 [label="Expr"];
    1799 -> 1800;
    1800 [label="Identifier"];
    1800 -> 1801;
    1801[label="Clamp"];
    1802 -> 1803;
    1803[label="("];
    1802 -> 1804;
    1804 [label="Expr"];
    1804 -> 1805;
    1805 [label="Identifier"];
    1805 -> 1806;
    1806[label="S_ObjectsSpawnRatio"];
    1802 -> 1807;
    1807[label=","];
    1802 -> 1808;
    1808 [label="Expr"];
    1808 -> 1809;
    1809 [label="Literal"];
    1809 -> 1810;
    1810[label="0."];
    1802 -> 1811;
    1811[label=","];
    1802 -> 1812;
    1812 [label="Expr"];
    1812 -> 1813;
    1813 [label="Literal"];
    1813 -> 1814;
    1814[label="1."];
    1802 -> 1815;
    1815[label=")"];
    1789 -> 1816;
    1816[label=";"];
    1553 -> 1817;
    1817 [label="Statement(Statement { syntax: 1817, statement: Some(1818), semicolon: None })"];
    1817 -> 1818;
    1818 [label="If(If { syntax: 1818, if_: Some(1819), lparen: Some(1820), condition: Some(1821), rparen: Some(1829), body: Some(1830), else_: None })"];
    1818 -> 1819;
    1819[label="if"];
    1818 -> 1820;
    1820[label="("];
    1818 -> 1821;
    1821 [label="Expr"];
    1821 -> 1824;
    1824 [label="BinaryOp(BinaryOp { syntax: 1824, lhs: Some(1822), operator: Some(1825), rhs: Some(1826) })"];
    1824 -> 1822;
    1822 [label="Identifier"];
    1822 -> 1823;
    1823[label="S_ObjectsSpawnRatio"];
    1824 -> 1825;
    1825[label="<"];
    1824 -> 1826;
    1826 [label="Expr"];
    1826 -> 1827;
    1827 [label="Literal"];
    1827 -> 1828;
    1828[label="0"];
    1818 -> 1829;
    1829[label=")"];
    1818 -> 1830;
    1830 [label="Statement(Statement { syntax: 1830, statement: Some(1831), semicolon: None })"];
    1830 -> 1831;
    1831 [label="Block(Block { syntax: 1831, lbrace: Some(1832), statements: [1833, 1853], rbrace: Some(1894) })"];
    1831 -> 1832;
    1832[label="{"];
    1831 -> 1833;
    1833 [label="Statement(Statement { syntax: 1833, statement: Some(1834), semicolon: None })"];
    1833 -> 1834;
    1834 [label="VarDec(VarDec { syntax: 1834, declare: Some(1835), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1836), as_: None, alias: None, for_: None, target: None, assignment: Some(1838), value: Some(1839) })"];
    1834 -> 1835;
    1835[label="declare"];
    1834 -> 1836;
    1836 [label="Type(Type { syntax: 1836, basename: Some(1837), members: [], arrays: [] })"];
    1836 -> 1837;
    1837[label="TargetObjectsAmount"];
    1834 -> 1838;
    1838[label="="];
    1834 -> 1839;
    1839 [label="Expr"];
    1839 -> 1842;
    1842 [label="BinaryOp(BinaryOp { syntax: 1842, lhs: Some(1840), operator: Some(1843), rhs: Some(1844) })"];
    1842 -> 1840;
    1840 [label="Identifier"];
    1840 -> 1841;
    1841[label="C_AutoRatioItemsPerPlayer"];
    1842 -> 1843;
    1843[label="*"];
    1842 -> 1844;
    1844 [label="Expr"];
    1844 -> 1847;
    1847 [label="BinaryOp(BinaryOp { syntax: 1847, lhs: Some(1845), operator: Some(1848), rhs: Some(1849) })"];
    1847 -> 1845;
    1845 [label="Identifier"];
    1845 -> 1846;
    1846[label="Players"];
    1847 -> 1848;
    1848[label="."];
    1847 -> 1849;
    1849 [label="Expr"];
    1849 -> 1850;
    1850 [label="Identifier"];
    1850 -> 1851;
    1851[label="count"];
    1834 -> 1852;
    1852[label=";"];
    1831 -> 1853;
    1853 [label="Statement(Statement { syntax: 1853, statement: Some(1857), semicolon: Some(1893) })"];
    1853 -> 1854;
    1854 [label="Expr"];
    1854 -> 1855;
    1855 [label="Identifier"];
    1855 -> 1856;
    1856[label="ObjectsSpawnRatio"];
    1853 -> 1857;
    1857 [label="Assignment(Assignment { syntax: 1857, lvalue: Some(1854), operator: Some(1858), rvalue: Some(1859) })"];
    1857 -> 1858;
    1858[label="="];
    1857 -> 1859;
    1859 [label="Expr"];
    1859 -> 1867;
    1867 [label="FunctionCall(FunctionCall { syntax: 1867, lhs: Some(1862), lparen: Some(1868), args: [(1869, Some(1888)), (1889, None)], rparen: Some(1892) })"];
    1867 -> 1862;
    1862 [label="BinaryOp(BinaryOp { syntax: 1862, lhs: Some(1860), operator: Some(1863), rhs: Some(1864) })"];
    1862 -> 1860;
    1860 [label="Identifier"];
    1860 -> 1861;
    1861[label="ML"];
    1862 -> 1863;
    1863[label="::"];
    1862 -> 1864;
    1864 [label="Expr"];
    1864 -> 1865;
    1865 [label="Identifier"];
    1865 -> 1866;
    1866[label="Min"];
    1867 -> 1868;
    1868[label="("];
    1867 -> 1869;
    1869 [label="Expr"];
    1869 -> 1883;
    1883 [label="BinaryOp(BinaryOp { syntax: 1883, lhs: Some(1877), operator: Some(1884), rhs: Some(1885) })"];
    1883 -> 1877;
    1877 [label="FunctionCall(FunctionCall { syntax: 1877, lhs: Some(1872), lparen: Some(1878), args: [(1879, None)], rparen: Some(1882) })"];
    1877 -> 1872;
    1872 [label="BinaryOp(BinaryOp { syntax: 1872, lhs: Some(1870), operator: Some(1873), rhs: Some(1874) })"];
    1872 -> 1870;
    1870 [label="Identifier"];
    1870 -> 1871;
    1871[label="ML"];
    1872 -> 1873;
    1873[label="::"];
    1872 -> 1874;
    1874 [label="Expr"];
    1874 -> 1875;
    1875 [label="Identifier"];
    1875 -> 1876;
    1876[label="ToReal"];
    1877 -> 1878;
    1878[label="("];
    1877 -> 1879;
    1879 [label="Expr"];
    1879 -> 1880;
    1880 [label="Identifier"];
    1880 -> 1881;
    1881[label="TargetObjectsAmount"];
    1877 -> 1882;
    1882[label=")"];
    1883 -> 1884;
    1884[label="/"];
    1883 -> 1885;
    1885 [label="Expr"];
    1885 -> 1886;
    1886 [label="Identifier"];
    1886 -> 1887;
    1887[label="TotalNbObjectsSpawns"];
    1867 -> 1888;
    1888[label=","];
    1867 -> 1889;
    1889 [label="Expr"];
    1889 -> 1890;
    1890 [label="Literal"];
    1890 -> 1891;
    1891[label="1."];
    1867 -> 1892;
    1892[label=")"];
    1853 -> 1893;
    1893[label=";"];
    1831 -> 1894;
    1894[label="}"];
    1553 -> 1895;
    1895 [label="Statement(Statement { syntax: 1895, statement: Some(1896), semicolon: None })"];
    1895 -> 1896;
    1896 [label="VarDec(VarDec { syntax: 1896, declare: Some(1897), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1898), as_: None, alias: None, for_: None, target: None, assignment: Some(1900), value: Some(1901) })"];
    1896 -> 1897;
    1897[label="declare"];
    1896 -> 1898;
    1898 [label="Type(Type { syntax: 1898, basename: Some(1899), members: [], arrays: [] })"];
    1898 -> 1899;
    1899[label="AvailableObjectsTags"];
    1896 -> 1900;
    1900[label="="];
    1896 -> 1901;
    1901 [label="Expr"];
    1901 -> 1902;
    1902 [label="Identifier"];
    1902 -> 1903;
    1903[label="C_ModeSupportedObjects"];
    1896 -> 1904;
    1904[label=";"];
    1553 -> 1905;
    1905 [label="Statement(Statement { syntax: 1905, statement: Some(1906), semicolon: None })"];
    1905 -> 1906;
    1906 [label="VarDec(VarDec { syntax: 1906, declare: Some(1907), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1908), as_: None, alias: None, for_: None, target: None, assignment: Some(1910), value: Some(1911) })"];
    1906 -> 1907;
    1907[label="declare"];
    1906 -> 1908;
    1908 [label="Type(Type { syntax: 1908, basename: Some(1909), members: [], arrays: [] })"];
    1908 -> 1909;
    1909[label="CurrentObjectTag"];
    1906 -> 1910;
    1910[label="="];
    1906 -> 1911;
    1911 [label="Expr"];
    1911 -> 1914;
    1914 [label="ArrayAccess(ArrayAccess { syntax: 1914, lhs: Some(1912), lsquare: Some(1915), index: Some(1916), rsquare: Some(1919) })"];
    1914 -> 1912;
    1912 [label="Identifier"];
    1912 -> 1913;
    1913[label="AvailableObjectsTags"];
    1914 -> 1915;
    1915[label="["];
    1914 -> 1916;
    1916 [label="Expr"];
    1916 -> 1917;
    1917 [label="Literal"];
    1917 -> 1918;
    1918[label="0"];
    1914 -> 1919;
    1919[label="]"];
    1906 -> 1920;
    1920[label=";"];
    1553 -> 1921;
    1921 [label="Statement(Statement { syntax: 1921, statement: Some(1922), semicolon: None })"];
    1921 -> 1922;
    1922 [label="VarDec(VarDec { syntax: 1922, declare: Some(1923), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1924), as_: None, alias: None, for_: None, target: None, assignment: Some(1926), value: Some(1927) })"];
    1922 -> 1923;
    1923[label="declare"];
    1922 -> 1924;
    1924 [label="Type(Type { syntax: 1924, basename: Some(1925), members: [], arrays: [] })"];
    1924 -> 1925;
    1925[label="NbObjectsToSpawn"];
    1922 -> 1926;
    1926[label="="];
    1922 -> 1927;
    1927 [label="Expr"];
    1927 -> 1930;
    1930 [label="ArrayAccess(ArrayAccess { syntax: 1930, lhs: Some(1928), lsquare: Some(1931), index: Some(1932), rsquare: Some(1935) })"];
    1930 -> 1928;
    1928 [label="Identifier"];
    1928 -> 1929;
    1929[label="Integer"];
    1930 -> 1931;
    1931[label="["];
    1930 -> 1932;
    1932 [label="Expr"];
    1932 -> 1933;
    1933 [label="Identifier"];
    1933 -> 1934;
    1934[label="Text"];
    1930 -> 1935;
    1935[label="]"];
    1922 -> 1936;
    1936[label=";"];
    1553 -> 1937;
    1937 [label="Statement(Statement { syntax: 1937, statement: Some(1938), semicolon: None })"];
    1937 -> 1938;
    1938 [label="VarDec(VarDec { syntax: 1938, declare: Some(1939), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(1940), as_: None, alias: None, for_: None, target: None, assignment: Some(1942), value: Some(1943) })"];
    1938 -> 1939;
    1939[label="declare"];
    1938 -> 1940;
    1940 [label="Type(Type { syntax: 1940, basename: Some(1941), members: [], arrays: [] })"];
    1940 -> 1941;
    1941[label="TotalNbObjectsToSpawn"];
    1938 -> 1942;
    1942[label="="];
    1938 -> 1943;
    1943 [label="Expr"];
    1943 -> 1944;
    1944 [label="Literal"];
    1944 -> 1945;
    1945[label="0"];
    1938 -> 1946;
    1946[label=";"];
    1553 -> 1947;
    1947 [label="Statement(Statement { syntax: 1947, statement: Some(1948), semicolon: None })"];
    1947 -> 1948;
    1948 [label="While(While { syntax: 1948, while_: Some(1949), lparen: Some(1950), condition: Some(1951), rparen: Some(1964), body: Some(1965) })"];
    1948 -> 1949;
    1949[label="while"];
    1948 -> 1950;
    1950[label="("];
    1948 -> 1951;
    1951 [label="Expr"];
    1951 -> 1954;
    1954 [label="BinaryOp(BinaryOp { syntax: 1954, lhs: Some(1952), operator: Some(1955), rhs: Some(1956) })"];
    1954 -> 1952;
    1952 [label="Identifier"];
    1952 -> 1953;
    1953[label="TotalNbObjectsToSpawn"];
    1954 -> 1955;
    1955[label="<"];
    1954 -> 1956;
    1956 [label="Expr"];
    1956 -> 1959;
    1959 [label="BinaryOp(BinaryOp { syntax: 1959, lhs: Some(1957), operator: Some(1960), rhs: Some(1961) })"];
    1959 -> 1957;
    1957 [label="Identifier"];
    1957 -> 1958;
    1958[label="TotalNbObjectsSpawns"];
    1959 -> 1960;
    1960[label="*"];
    1959 -> 1961;
    1961 [label="Expr"];
    1961 -> 1962;
    1962 [label="Identifier"];
    1962 -> 1963;
    1963[label="ObjectsSpawnRatio"];
    1948 -> 1964;
    1964[label=")"];
    1948 -> 1965;
    1965 [label="Statement(Statement { syntax: 1965, statement: Some(1966), semicolon: None })"];
    1965 -> 1966;
    1966 [label="Block(Block { syntax: 1966, lbrace: Some(1967), statements: [1968, 1985, 2023, 2139, 2155], rbrace: Some(2165) })"];
    1966 -> 1967;
    1967[label="{"];
    1966 -> 1968;
    1968 [label="Statement(Statement { syntax: 1968, statement: Some(1969), semicolon: None })"];
    1968 -> 1969;
    1969 [label="If(If { syntax: 1969, if_: Some(1970), lparen: Some(1971), condition: Some(1972), rparen: Some(1980), body: Some(1981), else_: None })"];
    1969 -> 1970;
    1970[label="if"];
    1969 -> 1971;
    1971[label="("];
    1969 -> 1972;
    1972 [label="Expr"];
    1972 -> 1975;
    1975 [label="BinaryOp(BinaryOp { syntax: 1975, lhs: Some(1973), operator: Some(1976), rhs: Some(1977) })"];
    1975 -> 1973;
    1973 [label="Identifier"];
    1973 -> 1974;
    1974[label="TotalNbObjectsSpawns"];
    1975 -> 1976;
    1976[label="<="];
    1975 -> 1977;
    1977 [label="Expr"];
    1977 -> 1978;
    1978 [label="Literal"];
    1978 -> 1979;
    1979[label="0"];
    1969 -> 1980;
    1980[label=")"];
    1969 -> 1981;
    1981 [label="Statement(Statement { syntax: 1981, statement: Some(1982), semicolon: Some(1984) })"];
    1981 -> 1982;
    1982 [label="Break"];
    1982 -> 1983;
    1983[label="break"];
    1981 -> 1984;
    1984[label=";"];
    1966 -> 1985;
    1985 [label="Statement(Statement { syntax: 1985, statement: Some(1986), semicolon: None })"];
    1985 -> 1986;
    1986 [label="If(If { syntax: 1986, if_: Some(1987), lparen: Some(1988), condition: Some(1989), rparen: Some(2006), body: Some(2007), else_: None })"];
    1986 -> 1987;
    1987[label="if"];
    1986 -> 1988;
    1988[label="("];
    1986 -> 1989;
    1989 [label="Expr"];
    1989 -> 2000;
    2000 [label="FunctionCall(FunctionCall { syntax: 2000, lhs: Some(1990), lparen: Some(2001), args: [(2002, None)], rparen: Some(2005) })"];
    2000 -> 1990;
    1990 [label="UnOp(UnOp { syntax: 1990, operator: Some(1991), operand: Some(1992) })"];
    1990 -> 1991;
    1991[label="!"];
    1990 -> 1992;
    1992 [label="Expr"];
    1992 -> 1995;
    1995 [label="BinaryOp(BinaryOp { syntax: 1995, lhs: Some(1993), operator: Some(1996), rhs: Some(1997) })"];
    1995 -> 1993;
    1993 [label="Identifier"];
    1993 -> 1994;
    1994[label="NbObjectsToSpawn"];
    1995 -> 1996;
    1996[label="."];
    1995 -> 1997;
    1997 [label="Expr"];
    1997 -> 1998;
    1998 [label="Identifier"];
    1998 -> 1999;
    1999[label="existskey"];
    2000 -> 2001;
    2001[label="("];
    2000 -> 2002;
    2002 [label="Expr"];
    2002 -> 2003;
    2003 [label="Identifier"];
    2003 -> 2004;
    2004[label="CurrentObjectTag"];
    2000 -> 2005;
    2005[label=")"];
    1986 -> 2006;
    2006[label=")"];
    1986 -> 2007;
    2007 [label="Statement(Statement { syntax: 2007, statement: Some(2017), semicolon: Some(2022) })"];
    2007 -> 2008;
    2008 [label="Expr"];
    2008 -> 2011;
    2011 [label="ArrayAccess(ArrayAccess { syntax: 2011, lhs: Some(2009), lsquare: Some(2012), index: Some(2013), rsquare: Some(2016) })"];
    2011 -> 2009;
    2009 [label="Identifier"];
    2009 -> 2010;
    2010[label="NbObjectsToSpawn"];
    2011 -> 2012;
    2012[label="["];
    2011 -> 2013;
    2013 [label="Expr"];
    2013 -> 2014;
    2014 [label="Identifier"];
    2014 -> 2015;
    2015[label="CurrentObjectTag"];
    2011 -> 2016;
    2016[label="]"];
    2007 -> 2017;
    2017 [label="Assignment(Assignment { syntax: 2017, lvalue: Some(2008), operator: Some(2018), rvalue: Some(2019) })"];
    2017 -> 2018;
    2018[label="="];
    2017 -> 2019;
    2019 [label="Expr"];
    2019 -> 2020;
    2020 [label="Literal"];
    2020 -> 2021;
    2021[label="0"];
    2007 -> 2022;
    2022[label=";"];
    1966 -> 2023;
    2023 [label="Statement(Statement { syntax: 2023, statement: Some(2024), semicolon: None })"];
    2023 -> 2024;
    2024 [label="If(If { syntax: 2024, if_: Some(2025), lparen: Some(2026), condition: Some(2027), rparen: Some(2071), body: Some(2072), else_: None })"];
    2024 -> 2025;
    2025[label="if"];
    2024 -> 2026;
    2026[label="("];
    2024 -> 2027;
    2027 [label="Expr"];
    2027 -> 2066;
    2066 [label="BinaryOp(BinaryOp { syntax: 2066, lhs: Some(2060), operator: Some(2067), rhs: Some(2068) })"];
    2066 -> 2060;
    2060 [label="ArrayAccess(ArrayAccess { syntax: 2060, lhs: Some(2055), lsquare: Some(2061), index: Some(2062), rsquare: Some(2065) })"];
    2060 -> 2055;
    2055 [label="BinaryOp(BinaryOp { syntax: 2055, lhs: Some(2049), operator: Some(2056), rhs: Some(2057) })"];
    2055 -> 2049;
    2049 [label="ArrayAccess(ArrayAccess { syntax: 2049, lhs: Some(2044), lsquare: Some(2050), index: Some(2051), rsquare: Some(2054) })"];
    2049 -> 2044;
    2044 [label="BinaryOp(BinaryOp { syntax: 2044, lhs: Some(2038), operator: Some(2045), rhs: Some(2046) })"];
    2044 -> 2038;
    2038 [label="FunctionCall(FunctionCall { syntax: 2038, lhs: Some(2028), lparen: Some(2039), args: [(2040, None)], rparen: Some(2043) })"];
    2038 -> 2028;
    2028 [label="UnOp(UnOp { syntax: 2028, operator: Some(2029), operand: Some(2030) })"];
    2028 -> 2029;
    2029[label="!"];
    2028 -> 2030;
    2030 [label="Expr"];
    2030 -> 2033;
    2033 [label="BinaryOp(BinaryOp { syntax: 2033, lhs: Some(2031), operator: Some(2034), rhs: Some(2035) })"];
    2033 -> 2031;
    2031 [label="Identifier"];
    2031 -> 2032;
    2032[label="NbObjectsSpawnLandmarks"];
    2033 -> 2034;
    2034[label="."];
    2033 -> 2035;
    2035 [label="Expr"];
    2035 -> 2036;
    2036 [label="Identifier"];
    2036 -> 2037;
    2037[label="existskey"];
    2038 -> 2039;
    2039[label="("];
    2038 -> 2040;
    2040 [label="Expr"];
    2040 -> 2041;
    2041 [label="Identifier"];
    2041 -> 2042;
    2042[label="CurrentObjectTag"];
    2038 -> 2043;
    2043[label=")"];
    2044 -> 2045;
    2045[label="||"];
    2044 -> 2046;
    2046 [label="Expr"];
    2046 -> 2047;
    2047 [label="Identifier"];
    2047 -> 2048;
    2048[label="NbObjectsToSpawn"];
    2049 -> 2050;
    2050[label="["];
    2049 -> 2051;
    2051 [label="Expr"];
    2051 -> 2052;
    2052 [label="Identifier"];
    2052 -> 2053;
    2053[label="CurrentObjectTag"];
    2049 -> 2054;
    2054[label="]"];
    2055 -> 2056;
    2056[label=">="];
    2055 -> 2057;
    2057 [label="Expr"];
    2057 -> 2058;
    2058 [label="Identifier"];
    2058 -> 2059;
    2059[label="NbObjectsSpawnLandmarks"];
    2060 -> 2061;
    2061[label="["];
    2060 -> 2062;
    2062 [label="Expr"];
    2062 -> 2063;
    2063 [label="Identifier"];
    2063 -> 2064;
    2064[label="CurrentObjectTag"];
    2060 -> 2065;
    2065[label="]"];
    2066 -> 2067;
    2067[label="*"];
    2066 -> 2068;
    2068 [label="Expr"];
    2068 -> 2069;
    2069 [label="Identifier"];
    2069 -> 2070;
    2070[label="ObjectsSpawnRatio"];
    2024 -> 2071;
    2071[label=")"];
    2024 -> 2072;
    2072 [label="Statement(Statement { syntax: 2072, statement: Some(2073), semicolon: None })"];
    2072 -> 2073;
    2073 [label="Block(Block { syntax: 2073, lbrace: Some(2074), statements: [2075, 2096, 2118, 2134], rbrace: Some(2138) })"];
    2073 -> 2074;
    2074[label="{"];
    2073 -> 2075;
    2075 [label="Statement(Statement { syntax: 2075, statement: Some(2076), semicolon: None })"];
    2075 -> 2076;
    2076 [label="VarDec(VarDec { syntax: 2076, declare: Some(2077), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2078), as_: None, alias: None, for_: None, target: None, assignment: Some(2080), value: Some(2081) })"];
    2076 -> 2077;
    2077[label="declare"];
    2076 -> 2078;
    2078 [label="Type(Type { syntax: 2078, basename: Some(2079), members: [], arrays: [] })"];
    2078 -> 2079;
    2079[label="Removed"];
    2076 -> 2080;
    2080[label="="];
    2076 -> 2081;
    2081 [label="Expr"];
    2081 -> 2089;
    2089 [label="FunctionCall(FunctionCall { syntax: 2089, lhs: Some(2084), lparen: Some(2090), args: [(2091, None)], rparen: Some(2094) })"];
    2089 -> 2084;
    2084 [label="BinaryOp(BinaryOp { syntax: 2084, lhs: Some(2082), operator: Some(2085), rhs: Some(2086) })"];
    2084 -> 2082;
    2082 [label="Identifier"];
    2082 -> 2083;
    2083[label="AvailableObjectsTags"];
    2084 -> 2085;
    2085[label="."];
    2084 -> 2086;
    2086 [label="Expr"];
    2086 -> 2087;
    2087 [label="Identifier"];
    2087 -> 2088;
    2088[label="remove"];
    2089 -> 2090;
    2090[label="("];
    2089 -> 2091;
    2091 [label="Expr"];
    2091 -> 2092;
    2092 [label="Identifier"];
    2092 -> 2093;
    2093[label="CurrentObjectTag"];
    2089 -> 2094;
    2094[label=")"];
    2076 -> 2095;
    2095[label=";"];
    2073 -> 2096;
    2096 [label="Statement(Statement { syntax: 2096, statement: Some(2097), semicolon: None })"];
    2096 -> 2097;
    2097 [label="If(If { syntax: 2097, if_: Some(2098), lparen: Some(2099), condition: Some(2100), rparen: Some(2113), body: Some(2114), else_: None })"];
    2097 -> 2098;
    2098[label="if"];
    2097 -> 2099;
    2099[label="("];
    2097 -> 2100;
    2100 [label="Expr"];
    2100 -> 2108;
    2108 [label="BinaryOp(BinaryOp { syntax: 2108, lhs: Some(2103), operator: Some(2109), rhs: Some(2110) })"];
    2108 -> 2103;
    2103 [label="BinaryOp(BinaryOp { syntax: 2103, lhs: Some(2101), operator: Some(2104), rhs: Some(2105) })"];
    2103 -> 2101;
    2101 [label="Identifier"];
    2101 -> 2102;
    2102[label="AvailableObjectsTags"];
    2103 -> 2104;
    2104[label="."];
    2103 -> 2105;
    2105 [label="Expr"];
    2105 -> 2106;
    2106 [label="Identifier"];
    2106 -> 2107;
    2107[label="count"];
    2108 -> 2109;
    2109[label="<="];
    2108 -> 2110;
    2110 [label="Expr"];
    2110 -> 2111;
    2111 [label="Literal"];
    2111 -> 2112;
    2112[label="0"];
    2097 -> 2113;
    2113[label=")"];
    2097 -> 2114;
    2114 [label="Statement(Statement { syntax: 2114, statement: Some(2115), semicolon: Some(2117) })"];
    2114 -> 2115;
    2115 [label="Break"];
    2115 -> 2116;
    2116[label="break"];
    2114 -> 2117;
    2117[label=";"];
    2073 -> 2118;
    2118 [label="Statement(Statement { syntax: 2118, statement: Some(2122), semicolon: Some(2133) })"];
    2118 -> 2119;
    2119 [label="Expr"];
    2119 -> 2120;
    2120 [label="Identifier"];
    2120 -> 2121;
    2121[label="CurrentObjectTag"];
    2118 -> 2122;
    2122 [label="Assignment(Assignment { syntax: 2122, lvalue: Some(2119), operator: Some(2123), rvalue: Some(2124) })"];
    2122 -> 2123;
    2123[label="="];
    2122 -> 2124;
    2124 [label="Expr"];
    2124 -> 2127;
    2127 [label="ArrayAccess(ArrayAccess { syntax: 2127, lhs: Some(2125), lsquare: Some(2128), index: Some(2129), rsquare: Some(2132) })"];
    2127 -> 2125;
    2125 [label="Identifier"];
    2125 -> 2126;
    2126[label="AvailableObjectsTags"];
    2127 -> 2128;
    2128[label="["];
    2127 -> 2129;
    2129 [label="Expr"];
    2129 -> 2130;
    2130 [label="Literal"];
    2130 -> 2131;
    2131[label="0"];
    2127 -> 2132;
    2132[label="]"];
    2118 -> 2133;
    2133[label=";"];
    2073 -> 2134;
    2134 [label="Statement(Statement { syntax: 2134, statement: Some(2135), semicolon: Some(2137) })"];
    2134 -> 2135;
    2135 [label="Continue"];
    2135 -> 2136;
    2136[label="continue"];
    2134 -> 2137;
    2137[label=";"];
    2073 -> 2138;
    2138[label="}"];
    1966 -> 2139;
    2139 [label="Statement(Statement { syntax: 2139, statement: Some(2149), semicolon: Some(2154) })"];
    2139 -> 2140;
    2140 [label="Expr"];
    2140 -> 2143;
    2143 [label="ArrayAccess(ArrayAccess { syntax: 2143, lhs: Some(2141), lsquare: Some(2144), index: Some(2145), rsquare: Some(2148) })"];
    2143 -> 2141;
    2141 [label="Identifier"];
    2141 -> 2142;
    2142[label="NbObjectsToSpawn"];
    2143 -> 2144;
    2144[label="["];
    2143 -> 2145;
    2145 [label="Expr"];
    2145 -> 2146;
    2146 [label="Identifier"];
    2146 -> 2147;
    2147[label="CurrentObjectTag"];
    2143 -> 2148;
    2148[label="]"];
    2139 -> 2149;
    2149 [label="Assignment(Assignment { syntax: 2149, lvalue: Some(2140), operator: Some(2150), rvalue: Some(2151) })"];
    2149 -> 2150;
    2150[label="+="];
    2149 -> 2151;
    2151 [label="Expr"];
    2151 -> 2152;
    2152 [label="Literal"];
    2152 -> 2153;
    2153[label="1"];
    2139 -> 2154;
    2154[label=";"];
    1966 -> 2155;
    2155 [label="Statement(Statement { syntax: 2155, statement: Some(2159), semicolon: Some(2164) })"];
    2155 -> 2156;
    2156 [label="Expr"];
    2156 -> 2157;
    2157 [label="Identifier"];
    2157 -> 2158;
    2158[label="TotalNbObjectsToSpawn"];
    2155 -> 2159;
    2159 [label="Assignment(Assignment { syntax: 2159, lvalue: Some(2156), operator: Some(2160), rvalue: Some(2161) })"];
    2159 -> 2160;
    2160[label="+="];
    2159 -> 2161;
    2161 [label="Expr"];
    2161 -> 2162;
    2162 [label="Literal"];
    2162 -> 2163;
    2163[label="1"];
    2155 -> 2164;
    2164[label=";"];
    1966 -> 2165;
    2165[label="}"];
    1553 -> 2166;
    2166 [label="Statement(Statement { syntax: 2166, statement: Some(2167), semicolon: None })"];
    2166 -> 2167;
    2167 [label="VarDec(VarDec { syntax: 2167, declare: Some(2168), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(2169), name: Some(2173), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    2167 -> 2168;
    2168[label="declare"];
    2167 -> 2169;
    2169 [label="Type(Type { syntax: 2169, basename: Some(2170), members: [], arrays: [(2171, None, 2172)] })"];
    2169 -> 2170;
    2170[label="Ident"];
    2169 -> 2171;
    2171[label="["];
    2169 -> 2172;
    2172[label="]"];
    2167 -> 2173;
    2173[label="AvailableLandmarksIds"];
    2167 -> 2174;
    2174[label=";"];
    1553 -> 2175;
    2175 [label="Statement(Statement { syntax: 2175, statement: Some(2176), semicolon: None })"];
    2175 -> 2176;
    2176 [label="VarDec(VarDec { syntax: 2176, declare: Some(2177), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(2178), name: Some(2185), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    2176 -> 2177;
    2177[label="declare"];
    2176 -> 2178;
    2178 [label="Type(Type { syntax: 2178, basename: Some(2179), members: [], arrays: [(2180, None, 2181), (2182, Some(2183), 2184)] })"];
    2178 -> 2179;
    2179[label="CSmMapLandmark"];
    2178 -> 2180;
    2180[label="["];
    2178 -> 2181;
    2181[label="]"];
    2178 -> 2182;
    2182[label="["];
    2178 -> 2183;
    2183[label="Text"];
    2178 -> 2184;
    2184[label="]"];
    2176 -> 2185;
    2185[label="AvailableLandmarksOfType"];
    2176 -> 2186;
    2186[label=";"];
    1553 -> 2187;
    2187 [label="Statement(Statement { syntax: 2187, statement: Some(2188), semicolon: None })"];
    2187 -> 2188;
    2188 [label="Foreach(Foreach { syntax: 2188, foreach: Some(2189), lparen: Some(2190), name1: Some(2191), arrow: None, name2: None, in_: Some(2192), value: Some(2193), rparen: Some(2196), body: Some(2197) })"];
    2188 -> 2189;
    2189[label="foreach"];
    2188 -> 2190;
    2190[label="("];
    2188 -> 2191;
    2191[label="MapLandmark"];
    2188 -> 2192;
    2192[label="in"];
    2188 -> 2193;
    2193 [label="Expr"];
    2193 -> 2194;
    2194 [label="Identifier"];
    2194 -> 2195;
    2195[label="MapLandmarks_ObjectAnchor"];
    2188 -> 2196;
    2196[label=")"];
    2188 -> 2197;
    2197 [label="Statement(Statement { syntax: 2197, statement: Some(2198), semicolon: None })"];
    2197 -> 2198;
    2198 [label="Block(Block { syntax: 2198, lbrace: Some(2199), statements: [2200, 2249, 2276], rbrace: Some(2315) })"];
    2198 -> 2199;
    2199[label="{"];
    2198 -> 2200;
    2200 [label="Statement(Statement { syntax: 2200, statement: Some(2201), semicolon: None })"];
    2200 -> 2201;
    2201 [label="If(If { syntax: 2201, if_: Some(2202), lparen: Some(2203), condition: Some(2204), rparen: Some(2226), body: Some(2227), else_: None })"];
    2201 -> 2202;
    2202[label="if"];
    2201 -> 2203;
    2203[label="("];
    2201 -> 2204;
    2204 [label="Expr"];
    2204 -> 2215;
    2215 [label="FunctionCall(FunctionCall { syntax: 2215, lhs: Some(2205), lparen: Some(2216), args: [(2217, None)], rparen: Some(2225) })"];
    2215 -> 2205;
    2205 [label="UnOp(UnOp { syntax: 2205, operator: Some(2206), operand: Some(2207) })"];
    2205 -> 2206;
    2206[label="!"];
    2205 -> 2207;
    2207 [label="Expr"];
    2207 -> 2210;
    2210 [label="BinaryOp(BinaryOp { syntax: 2210, lhs: Some(2208), operator: Some(2211), rhs: Some(2212) })"];
    2210 -> 2208;
    2208 [label="Identifier"];
    2208 -> 2209;
    2209[label="AvailableLandmarksOfType"];
    2210 -> 2211;
    2211[label="."];
    2210 -> 2212;
    2212 [label="Expr"];
    2212 -> 2213;
    2213 [label="Identifier"];
    2213 -> 2214;
    2214[label="existskey"];
    2215 -> 2216;
    2216[label="("];
    2215 -> 2217;
    2217 [label="Expr"];
    2217 -> 2220;
    2220 [label="BinaryOp(BinaryOp { syntax: 2220, lhs: Some(2218), operator: Some(2221), rhs: Some(2222) })"];
    2220 -> 2218;
    2218 [label="Identifier"];
    2218 -> 2219;
    2219[label="MapLandmark"];
    2220 -> 2221;
    2221[label="."];
    2220 -> 2222;
    2222 [label="Expr"];
    2222 -> 2223;
    2223 [label="Identifier"];
    2223 -> 2224;
    2224[label="Tag"];
    2215 -> 2225;
    2225[label=")"];
    2201 -> 2226;
    2226[label=")"];
    2201 -> 2227;
    2227 [label="Statement(Statement { syntax: 2227, statement: Some(2242), semicolon: Some(2248) })"];
    2227 -> 2228;
    2228 [label="Expr"];
    2228 -> 2231;
    2231 [label="ArrayAccess(ArrayAccess { syntax: 2231, lhs: Some(2229), lsquare: Some(2232), index: Some(2233), rsquare: Some(2241) })"];
    2231 -> 2229;
    2229 [label="Identifier"];
    2229 -> 2230;
    2230[label="AvailableLandmarksOfType"];
    2231 -> 2232;
    2232[label="["];
    2231 -> 2233;
    2233 [label="Expr"];
    2233 -> 2236;
    2236 [label="BinaryOp(BinaryOp { syntax: 2236, lhs: Some(2234), operator: Some(2237), rhs: Some(2238) })"];
    2236 -> 2234;
    2234 [label="Identifier"];
    2234 -> 2235;
    2235[label="MapLandmark"];
    2236 -> 2237;
    2237[label="."];
    2236 -> 2238;
    2238 [label="Expr"];
    2238 -> 2239;
    2239 [label="Identifier"];
    2239 -> 2240;
    2240[label="Tag"];
    2231 -> 2241;
    2241[label="]"];
    2227 -> 2242;
    2242 [label="Assignment(Assignment { syntax: 2242, lvalue: Some(2228), operator: Some(2243), rvalue: Some(2244) })"];
    2242 -> 2243;
    2243[label="="];
    2242 -> 2244;
    2244 [label="Expr"];
    2244 -> 2245;
    2245 [label="Array(Array { syntax: 2245, lsquare: Some(2246), values: [], rsquare: Some(2247) })"];
    2245 -> 2246;
    2246[label="["];
    2245 -> 2247;
    2247[label="]"];
    2227 -> 2248;
    2248[label=";"];
    2198 -> 2249;
    2249 [label="Statement(Statement { syntax: 2249, statement: Some(2250), semicolon: Some(2275) })"];
    2249 -> 2250;
    2250 [label="Expr"];
    2250 -> 2269;
    2269 [label="FunctionCall(FunctionCall { syntax: 2269, lhs: Some(2264), lparen: Some(2270), args: [(2271, None)], rparen: Some(2274) })"];
    2269 -> 2264;
    2264 [label="BinaryOp(BinaryOp { syntax: 2264, lhs: Some(2253), operator: Some(2265), rhs: Some(2266) })"];
    2264 -> 2253;
    2253 [label="ArrayAccess(ArrayAccess { syntax: 2253, lhs: Some(2251), lsquare: Some(2254), index: Some(2255), rsquare: Some(2263) })"];
    2253 -> 2251;
    2251 [label="Identifier"];
    2251 -> 2252;
    2252[label="AvailableLandmarksOfType"];
    2253 -> 2254;
    2254[label="["];
    2253 -> 2255;
    2255 [label="Expr"];
    2255 -> 2258;
    2258 [label="BinaryOp(BinaryOp { syntax: 2258, lhs: Some(2256), operator: Some(2259), rhs: Some(2260) })"];
    2258 -> 2256;
    2256 [label="Identifier"];
    2256 -> 2257;
    2257[label="MapLandmark"];
    2258 -> 2259;
    2259[label="."];
    2258 -> 2260;
    2260 [label="Expr"];
    2260 -> 2261;
    2261 [label="Identifier"];
    2261 -> 2262;
    2262[label="Tag"];
    2253 -> 2263;
    2263[label="]"];
    2264 -> 2265;
    2265[label="."];
    2264 -> 2266;
    2266 [label="Expr"];
    2266 -> 2267;
    2267 [label="Identifier"];
    2267 -> 2268;
    2268[label="add"];
    2269 -> 2270;
    2270[label="("];
    2269 -> 2271;
    2271 [label="Expr"];
    2271 -> 2272;
    2272 [label="Identifier"];
    2272 -> 2273;
    2273[label="MapLandmark"];
    2269 -> 2274;
    2274[label=")"];
    2249 -> 2275;
    2275[label=";"];
    2198 -> 2276;
    2276 [label="Statement(Statement { syntax: 2276, statement: Some(2277), semicolon: None })"];
    2276 -> 2277;
    2277 [label="If(If { syntax: 2277, if_: Some(2278), lparen: Some(2279), condition: Some(2280), rparen: Some(2293), body: Some(2294), else_: None })"];
    2277 -> 2278;
    2278[label="if"];
    2277 -> 2279;
    2279[label="("];
    2277 -> 2280;
    2280 [label="Expr"];
    2280 -> 2288;
    2288 [label="BinaryOp(BinaryOp { syntax: 2288, lhs: Some(2283), operator: Some(2289), rhs: Some(2290) })"];
    2288 -> 2283;
    2283 [label="BinaryOp(BinaryOp { syntax: 2283, lhs: Some(2281), operator: Some(2284), rhs: Some(2285) })"];
    2283 -> 2281;
    2281 [label="Identifier"];
    2281 -> 2282;
    2282[label="MapLandmark"];
    2283 -> 2284;
    2284[label="."];
    2283 -> 2285;
    2285 [label="Expr"];
    2285 -> 2286;
    2286 [label="Identifier"];
    2286 -> 2287;
    2287[label="Tag"];
    2288 -> 2289;
    2289[label="!="];
    2288 -> 2290;
    2290 [label="Expr"];
    2290 -> 2291;
    2291 [label="Literal"];
    2291 -> 2292;
    2292[label="\"Armor\""];
    2277 -> 2293;
    2293[label=")"];
    2277 -> 2294;
    2294 [label="Statement(Statement { syntax: 2294, statement: Some(2295), semicolon: Some(2314) })"];
    2294 -> 2295;
    2295 [label="Expr"];
    2295 -> 2303;
    2303 [label="FunctionCall(FunctionCall { syntax: 2303, lhs: Some(2298), lparen: Some(2304), args: [(2305, None)], rparen: Some(2313) })"];
    2303 -> 2298;
    2298 [label="BinaryOp(BinaryOp { syntax: 2298, lhs: Some(2296), operator: Some(2299), rhs: Some(2300) })"];
    2298 -> 2296;
    2296 [label="Identifier"];
    2296 -> 2297;
    2297[label="AvailableLandmarksIds"];
    2298 -> 2299;
    2299[label="."];
    2298 -> 2300;
    2300 [label="Expr"];
    2300 -> 2301;
    2301 [label="Identifier"];
    2301 -> 2302;
    2302[label="add"];
    2303 -> 2304;
    2304[label="("];
    2303 -> 2305;
    2305 [label="Expr"];
    2305 -> 2308;
    2308 [label="BinaryOp(BinaryOp { syntax: 2308, lhs: Some(2306), operator: Some(2309), rhs: Some(2310) })"];
    2308 -> 2306;
    2306 [label="Identifier"];
    2306 -> 2307;
    2307[label="MapLandmark"];
    2308 -> 2309;
    2309[label="."];
    2308 -> 2310;
    2310 [label="Expr"];
    2310 -> 2311;
    2311 [label="Identifier"];
    2311 -> 2312;
    2312[label="Id"];
    2303 -> 2313;
    2313[label=")"];
    2294 -> 2314;
    2314[label=";"];
    2198 -> 2315;
    2315[label="}"];
    1553 -> 2316;
    2316 [label="Statement(Statement { syntax: 2316, statement: Some(2317), semicolon: None })"];
    2316 -> 2317;
    2317 [label="Foreach(Foreach { syntax: 2317, foreach: Some(2318), lparen: Some(2319), name1: Some(2320), arrow: Some(2321), name2: Some(2322), in_: Some(2323), value: Some(2324), rparen: Some(2327), body: Some(2328) })"];
    2317 -> 2318;
    2318[label="foreach"];
    2317 -> 2319;
    2319[label="("];
    2317 -> 2320;
    2320[label="Type"];
    2317 -> 2321;
    2321[label="=>"];
    2317 -> 2322;
    2322[label="ObjectAmount"];
    2317 -> 2323;
    2323[label="in"];
    2317 -> 2324;
    2324 [label="Expr"];
    2324 -> 2325;
    2325 [label="Identifier"];
    2325 -> 2326;
    2326[label="NbObjectsToSpawn"];
    2317 -> 2327;
    2327[label=")"];
    2317 -> 2328;
    2328 [label="Statement(Statement { syntax: 2328, statement: Some(2329), semicolon: None })"];
    2328 -> 2329;
    2329 [label="Block(Block { syntax: 2329, lbrace: Some(2330), statements: [2331, 2357, 2379, 2389], rbrace: Some(2562) })"];
    2329 -> 2330;
    2330[label="{"];
    2329 -> 2331;
    2331 [label="Statement(Statement { syntax: 2331, statement: Some(2332), semicolon: None })"];
    2331 -> 2332;
    2332 [label="If(If { syntax: 2332, if_: Some(2333), lparen: Some(2334), condition: Some(2335), rparen: Some(2352), body: Some(2353), else_: None })"];
    2332 -> 2333;
    2333[label="if"];
    2332 -> 2334;
    2334[label="("];
    2332 -> 2335;
    2335 [label="Expr"];
    2335 -> 2346;
    2346 [label="FunctionCall(FunctionCall { syntax: 2346, lhs: Some(2336), lparen: Some(2347), args: [(2348, None)], rparen: Some(2351) })"];
    2346 -> 2336;
    2336 [label="UnOp(UnOp { syntax: 2336, operator: Some(2337), operand: Some(2338) })"];
    2336 -> 2337;
    2337[label="!"];
    2336 -> 2338;
    2338 [label="Expr"];
    2338 -> 2341;
    2341 [label="BinaryOp(BinaryOp { syntax: 2341, lhs: Some(2339), operator: Some(2342), rhs: Some(2343) })"];
    2341 -> 2339;
    2339 [label="Identifier"];
    2339 -> 2340;
    2340[label="AvailableLandmarksOfType"];
    2341 -> 2342;
    2342[label="."];
    2341 -> 2343;
    2343 [label="Expr"];
    2343 -> 2344;
    2344 [label="Identifier"];
    2344 -> 2345;
    2345[label="existskey"];
    2346 -> 2347;
    2347[label="("];
    2346 -> 2348;
    2348 [label="Expr"];
    2348 -> 2349;
    2349 [label="Identifier"];
    2349 -> 2350;
    2350[label="Type"];
    2346 -> 2351;
    2351[label=")"];
    2332 -> 2352;
    2352[label=")"];
    2332 -> 2353;
    2353 [label="Statement(Statement { syntax: 2353, statement: Some(2354), semicolon: Some(2356) })"];
    2353 -> 2354;
    2354 [label="Continue"];
    2354 -> 2355;
    2355[label="continue"];
    2353 -> 2356;
    2356[label=";"];
    2329 -> 2357;
    2357 [label="Statement(Statement { syntax: 2357, statement: Some(2358), semicolon: None })"];
    2357 -> 2358;
    2358 [label="If(If { syntax: 2358, if_: Some(2359), lparen: Some(2360), condition: Some(2361), rparen: Some(2374), body: Some(2375), else_: None })"];
    2358 -> 2359;
    2359[label="if"];
    2358 -> 2360;
    2360[label="("];
    2358 -> 2361;
    2361 [label="Expr"];
    2361 -> 2364;
    2364 [label="BinaryOp(BinaryOp { syntax: 2364, lhs: Some(2362), operator: Some(2365), rhs: Some(2366) })"];
    2364 -> 2362;
    2362 [label="Identifier"];
    2362 -> 2363;
    2363[label="S_RandomizeObjectsSpawns"];
    2364 -> 2365;
    2365[label="&&"];
    2364 -> 2366;
    2366 [label="Expr"];
    2366 -> 2369;
    2369 [label="BinaryOp(BinaryOp { syntax: 2369, lhs: Some(2367), operator: Some(2370), rhs: Some(2371) })"];
    2369 -> 2367;
    2367 [label="Identifier"];
    2367 -> 2368;
    2368[label="Type"];
    2369 -> 2370;
    2370[label="!="];
    2369 -> 2371;
    2371 [label="Expr"];
    2371 -> 2372;
    2372 [label="Literal"];
    2372 -> 2373;
    2373[label="\"Armor\""];
    2358 -> 2374;
    2374[label=")"];
    2358 -> 2375;
    2375 [label="Statement(Statement { syntax: 2375, statement: Some(2376), semicolon: Some(2378) })"];
    2375 -> 2376;
    2376 [label="Continue"];
    2376 -> 2377;
    2377[label="continue"];
    2375 -> 2378;
    2378[label=";"];
    2329 -> 2379;
    2379 [label="Statement(Statement { syntax: 2379, statement: Some(2380), semicolon: None })"];
    2379 -> 2380;
    2380 [label="VarDec(VarDec { syntax: 2380, declare: Some(2381), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2382), as_: None, alias: None, for_: None, target: None, assignment: Some(2384), value: Some(2385) })"];
    2380 -> 2381;
    2381[label="declare"];
    2380 -> 2382;
    2382 [label="Type(Type { syntax: 2382, basename: Some(2383), members: [], arrays: [] })"];
    2382 -> 2383;
    2383[label="CurObjectSelectedLandmarks"];
    2380 -> 2384;
    2384[label="="];
    2380 -> 2385;
    2385 [label="Expr"];
    2385 -> 2386;
    2386 [label="Literal"];
    2386 -> 2387;
    2387[label="0"];
    2380 -> 2388;
    2388[label=";"];
    2329 -> 2389;
    2389 [label="Statement(Statement { syntax: 2389, statement: Some(2390), semicolon: None })"];
    2389 -> 2390;
    2390 [label="While(While { syntax: 2390, while_: Some(2391), lparen: Some(2392), condition: Some(2393), rparen: Some(2401), body: Some(2402) })"];
    2390 -> 2391;
    2391[label="while"];
    2390 -> 2392;
    2392[label="("];
    2390 -> 2393;
    2393 [label="Expr"];
    2393 -> 2396;
    2396 [label="BinaryOp(BinaryOp { syntax: 2396, lhs: Some(2394), operator: Some(2397), rhs: Some(2398) })"];
    2396 -> 2394;
    2394 [label="Identifier"];
    2394 -> 2395;
    2395[label="CurObjectSelectedLandmarks"];
    2396 -> 2397;
    2397[label="<"];
    2396 -> 2398;
    2398 [label="Expr"];
    2398 -> 2399;
    2399 [label="Identifier"];
    2399 -> 2400;
    2400[label="ObjectAmount"];
    2390 -> 2401;
    2401[label=")"];
    2390 -> 2402;
    2402 [label="Statement(Statement { syntax: 2402, statement: Some(2403), semicolon: None })"];
    2402 -> 2403;
    2403 [label="Block(Block { syntax: 2403, lbrace: Some(2404), statements: [2405, 2433, 2486, 2513, 2523], rbrace: Some(2561) })"];
    2403 -> 2404;
    2404[label="{"];
    2403 -> 2405;
    2405 [label="Statement(Statement { syntax: 2405, statement: Some(2406), semicolon: None })"];
    2405 -> 2406;
    2406 [label="If(If { syntax: 2406, if_: Some(2407), lparen: Some(2408), condition: Some(2409), rparen: Some(2428), body: Some(2429), else_: None })"];
    2406 -> 2407;
    2407[label="if"];
    2406 -> 2408;
    2408[label="("];
    2406 -> 2409;
    2409 [label="Expr"];
    2409 -> 2423;
    2423 [label="BinaryOp(BinaryOp { syntax: 2423, lhs: Some(2418), operator: Some(2424), rhs: Some(2425) })"];
    2423 -> 2418;
    2418 [label="BinaryOp(BinaryOp { syntax: 2418, lhs: Some(2412), operator: Some(2419), rhs: Some(2420) })"];
    2418 -> 2412;
    2412 [label="ArrayAccess(ArrayAccess { syntax: 2412, lhs: Some(2410), lsquare: Some(2413), index: Some(2414), rsquare: Some(2417) })"];
    2412 -> 2410;
    2410 [label="Identifier"];
    2410 -> 2411;
    2411[label="AvailableLandmarksOfType"];
    2412 -> 2413;
    2413[label="["];
    2412 -> 2414;
    2414 [label="Expr"];
    2414 -> 2415;
    2415 [label="Identifier"];
    2415 -> 2416;
    2416[label="Type"];
    2412 -> 2417;
    2417[label="]"];
    2418 -> 2419;
    2419[label="."];
    2418 -> 2420;
    2420 [label="Expr"];
    2420 -> 2421;
    2421 [label="Identifier"];
    2421 -> 2422;
    2422[label="count"];
    2423 -> 2424;
    2424[label="<="];
    2423 -> 2425;
    2425 [label="Expr"];
    2425 -> 2426;
    2426 [label="Literal"];
    2426 -> 2427;
    2427[label="0"];
    2406 -> 2428;
    2428[label=")"];
    2406 -> 2429;
    2429 [label="Statement(Statement { syntax: 2429, statement: Some(2430), semicolon: Some(2432) })"];
    2429 -> 2430;
    2430 [label="Break"];
    2430 -> 2431;
    2431[label="break"];
    2429 -> 2432;
    2432[label=";"];
    2403 -> 2433;
    2433 [label="Statement(Statement { syntax: 2433, statement: Some(2434), semicolon: None })"];
    2433 -> 2434;
    2434 [label="VarDec(VarDec { syntax: 2434, declare: Some(2435), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2436), as_: None, alias: None, for_: None, target: None, assignment: Some(2438), value: Some(2439) })"];
    2434 -> 2435;
    2435[label="declare"];
    2434 -> 2436;
    2436 [label="Type(Type { syntax: 2436, basename: Some(2437), members: [], arrays: [] })"];
    2436 -> 2437;
    2437[label="MapLandmark"];
    2434 -> 2438;
    2438[label="<=>"];
    2434 -> 2439;
    2439 [label="Expr"];
    2439 -> 2448;
    2448 [label="ArrayAccess(ArrayAccess { syntax: 2448, lhs: Some(2442), lsquare: Some(2449), index: Some(2450), rsquare: Some(2484) })"];
    2448 -> 2442;
    2442 [label="ArrayAccess(ArrayAccess { syntax: 2442, lhs: Some(2440), lsquare: Some(2443), index: Some(2444), rsquare: Some(2447) })"];
    2442 -> 2440;
    2440 [label="Identifier"];
    2440 -> 2441;
    2441[label="AvailableLandmarksOfType"];
    2442 -> 2443;
    2443[label="["];
    2442 -> 2444;
    2444 [label="Expr"];
    2444 -> 2445;
    2445 [label="Identifier"];
    2445 -> 2446;
    2446[label="Type"];
    2442 -> 2447;
    2447[label="]"];
    2448 -> 2449;
    2449[label="["];
    2448 -> 2450;
    2450 [label="Expr"];
    2450 -> 2458;
    2458 [label="FunctionCall(FunctionCall { syntax: 2458, lhs: Some(2453), lparen: Some(2459), args: [(2460, Some(2463)), (2464, None)], rparen: Some(2483) })"];
    2458 -> 2453;
    2453 [label="BinaryOp(BinaryOp { syntax: 2453, lhs: Some(2451), operator: Some(2454), rhs: Some(2455) })"];
    2453 -> 2451;
    2451 [label="Identifier"];
    2451 -> 2452;
    2452[label="ML"];
    2453 -> 2454;
    2454[label="::"];
    2453 -> 2455;
    2455 [label="Expr"];
    2455 -> 2456;
    2456 [label="Identifier"];
    2456 -> 2457;
    2457[label="Rand"];
    2458 -> 2459;
    2459[label="("];
    2458 -> 2460;
    2460 [label="Expr"];
    2460 -> 2461;
    2461 [label="Literal"];
    2461 -> 2462;
    2462[label="0"];
    2458 -> 2463;
    2463[label=","];
    2458 -> 2464;
    2464 [label="Expr"];
    2464 -> 2478;
    2478 [label="BinaryOp(BinaryOp { syntax: 2478, lhs: Some(2473), operator: Some(2479), rhs: Some(2480) })"];
    2478 -> 2473;
    2473 [label="BinaryOp(BinaryOp { syntax: 2473, lhs: Some(2467), operator: Some(2474), rhs: Some(2475) })"];
    2473 -> 2467;
    2467 [label="ArrayAccess(ArrayAccess { syntax: 2467, lhs: Some(2465), lsquare: Some(2468), index: Some(2469), rsquare: Some(2472) })"];
    2467 -> 2465;
    2465 [label="Identifier"];
    2465 -> 2466;
    2466[label="AvailableLandmarksOfType"];
    2467 -> 2468;
    2468[label="["];
    2467 -> 2469;
    2469 [label="Expr"];
    2469 -> 2470;
    2470 [label="Identifier"];
    2470 -> 2471;
    2471[label="Type"];
    2467 -> 2472;
    2472[label="]"];
    2473 -> 2474;
    2474[label="."];
    2473 -> 2475;
    2475 [label="Expr"];
    2475 -> 2476;
    2476 [label="Identifier"];
    2476 -> 2477;
    2477[label="count"];
    2478 -> 2479;
    2479[label="-"];
    2478 -> 2480;
    2480 [label="Expr"];
    2480 -> 2481;
    2481 [label="Literal"];
    2481 -> 2482;
    2482[label="1"];
    2458 -> 2483;
    2483[label=")"];
    2448 -> 2484;
    2484[label="]"];
    2434 -> 2485;
    2485[label=";"];
    2403 -> 2486;
    2486 [label="Statement(Statement { syntax: 2486, statement: Some(2487), semicolon: None })"];
    2486 -> 2487;
    2487 [label="VarDec(VarDec { syntax: 2487, declare: Some(2488), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2489), as_: None, alias: None, for_: None, target: None, assignment: Some(2491), value: Some(2492) })"];
    2487 -> 2488;
    2488[label="declare"];
    2487 -> 2489;
    2489 [label="Type(Type { syntax: 2489, basename: Some(2490), members: [], arrays: [] })"];
    2489 -> 2490;
    2490[label="Removed"];
    2487 -> 2491;
    2491[label="="];
    2487 -> 2492;
    2492 [label="Expr"];
    2492 -> 2506;
    2506 [label="FunctionCall(FunctionCall { syntax: 2506, lhs: Some(2501), lparen: Some(2507), args: [(2508, None)], rparen: Some(2511) })"];
    2506 -> 2501;
    2501 [label="BinaryOp(BinaryOp { syntax: 2501, lhs: Some(2495), operator: Some(2502), rhs: Some(2503) })"];
    2501 -> 2495;
    2495 [label="ArrayAccess(ArrayAccess { syntax: 2495, lhs: Some(2493), lsquare: Some(2496), index: Some(2497), rsquare: Some(2500) })"];
    2495 -> 2493;
    2493 [label="Identifier"];
    2493 -> 2494;
    2494[label="AvailableLandmarksOfType"];
    2495 -> 2496;
    2496[label="["];
    2495 -> 2497;
    2497 [label="Expr"];
    2497 -> 2498;
    2498 [label="Identifier"];
    2498 -> 2499;
    2499[label="Type"];
    2495 -> 2500;
    2500[label="]"];
    2501 -> 2502;
    2502[label="."];
    2501 -> 2503;
    2503 [label="Expr"];
    2503 -> 2504;
    2504 [label="Identifier"];
    2504 -> 2505;
    2505[label="remove"];
    2506 -> 2507;
    2507[label="("];
    2506 -> 2508;
    2508 [label="Expr"];
    2508 -> 2509;
    2509 [label="Identifier"];
    2509 -> 2510;
    2510[label="MapLandmark"];
    2506 -> 2511;
    2511[label=")"];
    2487 -> 2512;
    2512[label=";"];
    2403 -> 2513;
    2513 [label="Statement(Statement { syntax: 2513, statement: Some(2517), semicolon: Some(2522) })"];
    2513 -> 2514;
    2514 [label="Expr"];
    2514 -> 2515;
    2515 [label="Identifier"];
    2515 -> 2516;
    2516[label="CurObjectSelectedLandmarks"];
    2513 -> 2517;
    2517 [label="Assignment(Assignment { syntax: 2517, lvalue: Some(2514), operator: Some(2518), rvalue: Some(2519) })"];
    2517 -> 2518;
    2518[label="+="];
    2517 -> 2519;
    2519 [label="Expr"];
    2519 -> 2520;
    2520 [label="Literal"];
    2520 -> 2521;
    2521[label="1"];
    2513 -> 2522;
    2522[label=";"];
    2403 -> 2523;
    2523 [label="Statement(Statement { syntax: 2523, statement: Some(2524), semicolon: None })"];
    2523 -> 2524;
    2524 [label="If(If { syntax: 2524, if_: Some(2525), lparen: Some(2526), condition: Some(2527), rparen: Some(2535), body: Some(2536), else_: None })"];
    2524 -> 2525;
    2525[label="if"];
    2524 -> 2526;
    2526[label="("];
    2524 -> 2527;
    2527 [label="Expr"];
    2527 -> 2530;
    2530 [label="BinaryOp(BinaryOp { syntax: 2530, lhs: Some(2528), operator: Some(2531), rhs: Some(2532) })"];
    2530 -> 2528;
    2528 [label="Identifier"];
    2528 -> 2529;
    2529[label="MapLandmark"];
    2530 -> 2531;
    2531[label="!="];
    2530 -> 2532;
    2532 [label="Expr"];
    2532 -> 2533;
    2533 [label="Literal"];
    2533 -> 2534;
    2534[label="Null"];
    2524 -> 2535;
    2535[label=")"];
    2524 -> 2536;
    2536 [label="Statement(Statement { syntax: 2536, statement: Some(2537), semicolon: None })"];
    2536 -> 2537;
    2537 [label="Block(Block { syntax: 2537, lbrace: Some(2538), statements: [2539, 2550], rbrace: Some(2560) })"];
    2537 -> 2538;
    2538[label="{"];
    2537 -> 2539;
    2539 [label="Statement(Statement { syntax: 2539, statement: Some(2540), semicolon: None })"];
    2539 -> 2540;
    2540 [label="VarDec(VarDec { syntax: 2540, declare: Some(2541), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(2542), name: Some(2544), as_: None, alias: None, for_: Some(2545), target: Some(2546), assignment: None, value: None })"];
    2540 -> 2541;
    2541[label="declare"];
    2540 -> 2542;
    2542 [label="Type(Type { syntax: 2542, basename: Some(2543), members: [], arrays: [] })"];
    2542 -> 2543;
    2543[label="Text"];
    2540 -> 2544;
    2544[label="ObjectType"];
    2540 -> 2545;
    2545[label="for"];
    2540 -> 2546;
    2546 [label="Expr"];
    2546 -> 2547;
    2547 [label="Identifier"];
    2547 -> 2548;
    2548[label="MapLandmark"];
    2540 -> 2549;
    2549[label=";"];
    2537 -> 2550;
    2550 [label="Statement(Statement { syntax: 2550, statement: Some(2554), semicolon: Some(2559) })"];
    2550 -> 2551;
    2551 [label="Expr"];
    2551 -> 2552;
    2552 [label="Identifier"];
    2552 -> 2553;
    2553[label="ObjectType"];
    2550 -> 2554;
    2554 [label="Assignment(Assignment { syntax: 2554, lvalue: Some(2551), operator: Some(2555), rvalue: Some(2556) })"];
    2554 -> 2555;
    2555[label="="];
    2554 -> 2556;
    2556 [label="Expr"];
    2556 -> 2557;
    2557 [label="Identifier"];
    2557 -> 2558;
    2558[label="Type"];
    2550 -> 2559;
    2559[label=";"];
    2537 -> 2560;
    2560[label="}"];
    2403 -> 2561;
    2561[label="}"];
    2329 -> 2562;
    2562[label="}"];
    1553 -> 2563;
    2563 [label="Statement(Statement { syntax: 2563, statement: Some(2564), semicolon: None })"];
    2563 -> 2564;
    2564 [label="If(If { syntax: 2564, if_: Some(2565), lparen: Some(2566), condition: Some(2567), rparen: Some(2570), body: Some(2571), else_: None })"];
    2564 -> 2565;
    2565[label="if"];
    2564 -> 2566;
    2566[label="("];
    2564 -> 2567;
    2567 [label="Expr"];
    2567 -> 2568;
    2568 [label="Identifier"];
    2568 -> 2569;
    2569[label="S_RandomizeObjectsSpawns"];
    2564 -> 2570;
    2570[label=")"];
    2564 -> 2571;
    2571 [label="Statement(Statement { syntax: 2571, statement: Some(2572), semicolon: None })"];
    2571 -> 2572;
    2572 [label="Foreach(Foreach { syntax: 2572, foreach: Some(2573), lparen: Some(2574), name1: Some(2575), arrow: Some(2576), name2: Some(2577), in_: Some(2578), value: Some(2579), rparen: Some(2582), body: Some(2583) })"];
    2572 -> 2573;
    2573[label="foreach"];
    2572 -> 2574;
    2574[label="("];
    2572 -> 2575;
    2575[label="Type"];
    2572 -> 2576;
    2576[label="=>"];
    2572 -> 2577;
    2577[label="ObjectAmount"];
    2572 -> 2578;
    2578[label="in"];
    2572 -> 2579;
    2579 [label="Expr"];
    2579 -> 2580;
    2580 [label="Identifier"];
    2580 -> 2581;
    2581[label="NbObjectsToSpawn"];
    2572 -> 2582;
    2582[label=")"];
    2572 -> 2583;
    2583 [label="Statement(Statement { syntax: 2583, statement: Some(2584), semicolon: None })"];
    2583 -> 2584;
    2584 [label="Block(Block { syntax: 2584, lbrace: Some(2585), statements: [2586, 2603, 2613], rbrace: Some(2784) })"];
    2584 -> 2585;
    2585[label="{"];
    2584 -> 2586;
    2586 [label="Statement(Statement { syntax: 2586, statement: Some(2587), semicolon: None })"];
    2586 -> 2587;
    2587 [label="If(If { syntax: 2587, if_: Some(2588), lparen: Some(2589), condition: Some(2590), rparen: Some(2598), body: Some(2599), else_: None })"];
    2587 -> 2588;
    2588[label="if"];
    2587 -> 2589;
    2589[label="("];
    2587 -> 2590;
    2590 [label="Expr"];
    2590 -> 2593;
    2593 [label="BinaryOp(BinaryOp { syntax: 2593, lhs: Some(2591), operator: Some(2594), rhs: Some(2595) })"];
    2593 -> 2591;
    2591 [label="Identifier"];
    2591 -> 2592;
    2592[label="Type"];
    2593 -> 2594;
    2594[label="=="];
    2593 -> 2595;
    2595 [label="Expr"];
    2595 -> 2596;
    2596 [label="Literal"];
    2596 -> 2597;
    2597[label="\"Armor\""];
    2587 -> 2598;
    2598[label=")"];
    2587 -> 2599;
    2599 [label="Statement(Statement { syntax: 2599, statement: Some(2600), semicolon: Some(2602) })"];
    2599 -> 2600;
    2600 [label="Continue"];
    2600 -> 2601;
    2601[label="continue"];
    2599 -> 2602;
    2602[label=";"];
    2584 -> 2603;
    2603 [label="Statement(Statement { syntax: 2603, statement: Some(2604), semicolon: None })"];
    2603 -> 2604;
    2604 [label="VarDec(VarDec { syntax: 2604, declare: Some(2605), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2606), as_: None, alias: None, for_: None, target: None, assignment: Some(2608), value: Some(2609) })"];
    2604 -> 2605;
    2605[label="declare"];
    2604 -> 2606;
    2606 [label="Type(Type { syntax: 2606, basename: Some(2607), members: [], arrays: [] })"];
    2606 -> 2607;
    2607[label="CurObjectSelectedLandmarks"];
    2604 -> 2608;
    2608[label="="];
    2604 -> 2609;
    2609 [label="Expr"];
    2609 -> 2610;
    2610 [label="Literal"];
    2610 -> 2611;
    2611[label="0"];
    2604 -> 2612;
    2612[label=";"];
    2584 -> 2613;
    2613 [label="Statement(Statement { syntax: 2613, statement: Some(2614), semicolon: None })"];
    2613 -> 2614;
    2614 [label="While(While { syntax: 2614, while_: Some(2615), lparen: Some(2616), condition: Some(2617), rparen: Some(2625), body: Some(2626) })"];
    2614 -> 2615;
    2615[label="while"];
    2614 -> 2616;
    2616[label="("];
    2614 -> 2617;
    2617 [label="Expr"];
    2617 -> 2620;
    2620 [label="BinaryOp(BinaryOp { syntax: 2620, lhs: Some(2618), operator: Some(2621), rhs: Some(2622) })"];
    2620 -> 2618;
    2618 [label="Identifier"];
    2618 -> 2619;
    2619[label="CurObjectSelectedLandmarks"];
    2620 -> 2621;
    2621[label="<"];
    2620 -> 2622;
    2622 [label="Expr"];
    2622 -> 2623;
    2623 [label="Identifier"];
    2623 -> 2624;
    2624[label="ObjectAmount"];
    2614 -> 2625;
    2625[label=")"];
    2614 -> 2626;
    2626 [label="Statement(Statement { syntax: 2626, statement: Some(2627), semicolon: None })"];
    2626 -> 2627;
    2627 [label="Block(Block { syntax: 2627, lbrace: Some(2628), statements: [2629, 2651, 2692, 2713, 2723], rbrace: Some(2783) })"];
    2627 -> 2628;
    2628[label="{"];
    2627 -> 2629;
    2629 [label="Statement(Statement { syntax: 2629, statement: Some(2630), semicolon: None })"];
    2629 -> 2630;
    2630 [label="If(If { syntax: 2630, if_: Some(2631), lparen: Some(2632), condition: Some(2633), rparen: Some(2646), body: Some(2647), else_: None })"];
    2630 -> 2631;
    2631[label="if"];
    2630 -> 2632;
    2632[label="("];
    2630 -> 2633;
    2633 [label="Expr"];
    2633 -> 2641;
    2641 [label="BinaryOp(BinaryOp { syntax: 2641, lhs: Some(2636), operator: Some(2642), rhs: Some(2643) })"];
    2641 -> 2636;
    2636 [label="BinaryOp(BinaryOp { syntax: 2636, lhs: Some(2634), operator: Some(2637), rhs: Some(2638) })"];
    2636 -> 2634;
    2634 [label="Identifier"];
    2634 -> 2635;
    2635[label="AvailableLandmarksIds"];
    2636 -> 2637;
    2637[label="."];
    2636 -> 2638;
    2638 [label="Expr"];
    2638 -> 2639;
    2639 [label="Identifier"];
    2639 -> 2640;
    2640[label="count"];
    2641 -> 2642;
    2642[label="<="];
    2641 -> 2643;
    2643 [label="Expr"];
    2643 -> 2644;
    2644 [label="Literal"];
    2644 -> 2645;
    2645[label="0"];
    2630 -> 2646;
    2646[label=")"];
    2630 -> 2647;
    2647 [label="Statement(Statement { syntax: 2647, statement: Some(2648), semicolon: Some(2650) })"];
    2647 -> 2648;
    2648 [label="Break"];
    2648 -> 2649;
    2649[label="break"];
    2647 -> 2650;
    2650[label=";"];
    2627 -> 2651;
    2651 [label="Statement(Statement { syntax: 2651, statement: Some(2652), semicolon: None })"];
    2651 -> 2652;
    2652 [label="VarDec(VarDec { syntax: 2652, declare: Some(2653), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2654), as_: None, alias: None, for_: None, target: None, assignment: Some(2656), value: Some(2657) })"];
    2652 -> 2653;
    2653[label="declare"];
    2652 -> 2654;
    2654 [label="Type(Type { syntax: 2654, basename: Some(2655), members: [], arrays: [] })"];
    2654 -> 2655;
    2655[label="MapLandmarkId"];
    2652 -> 2656;
    2656[label="="];
    2652 -> 2657;
    2657 [label="Expr"];
    2657 -> 2660;
    2660 [label="ArrayAccess(ArrayAccess { syntax: 2660, lhs: Some(2658), lsquare: Some(2661), index: Some(2662), rsquare: Some(2690) })"];
    2660 -> 2658;
    2658 [label="Identifier"];
    2658 -> 2659;
    2659[label="AvailableLandmarksIds"];
    2660 -> 2661;
    2661[label="["];
    2660 -> 2662;
    2662 [label="Expr"];
    2662 -> 2670;
    2670 [label="FunctionCall(FunctionCall { syntax: 2670, lhs: Some(2665), lparen: Some(2671), args: [(2672, Some(2675)), (2676, None)], rparen: Some(2689) })"];
    2670 -> 2665;
    2665 [label="BinaryOp(BinaryOp { syntax: 2665, lhs: Some(2663), operator: Some(2666), rhs: Some(2667) })"];
    2665 -> 2663;
    2663 [label="Identifier"];
    2663 -> 2664;
    2664[label="ML"];
    2665 -> 2666;
    2666[label="::"];
    2665 -> 2667;
    2667 [label="Expr"];
    2667 -> 2668;
    2668 [label="Identifier"];
    2668 -> 2669;
    2669[label="Rand"];
    2670 -> 2671;
    2671[label="("];
    2670 -> 2672;
    2672 [label="Expr"];
    2672 -> 2673;
    2673 [label="Literal"];
    2673 -> 2674;
    2674[label="0"];
    2670 -> 2675;
    2675[label=","];
    2670 -> 2676;
    2676 [label="Expr"];
    2676 -> 2684;
    2684 [label="BinaryOp(BinaryOp { syntax: 2684, lhs: Some(2679), operator: Some(2685), rhs: Some(2686) })"];
    2684 -> 2679;
    2679 [label="BinaryOp(BinaryOp { syntax: 2679, lhs: Some(2677), operator: Some(2680), rhs: Some(2681) })"];
    2679 -> 2677;
    2677 [label="Identifier"];
    2677 -> 2678;
    2678[label="AvailableLandmarksIds"];
    2679 -> 2680;
    2680[label="."];
    2679 -> 2681;
    2681 [label="Expr"];
    2681 -> 2682;
    2682 [label="Identifier"];
    2682 -> 2683;
    2683[label="count"];
    2684 -> 2685;
    2685[label="-"];
    2684 -> 2686;
    2686 [label="Expr"];
    2686 -> 2687;
    2687 [label="Literal"];
    2687 -> 2688;
    2688[label="1"];
    2670 -> 2689;
    2689[label=")"];
    2660 -> 2690;
    2690[label="]"];
    2652 -> 2691;
    2691[label=";"];
    2627 -> 2692;
    2692 [label="Statement(Statement { syntax: 2692, statement: Some(2693), semicolon: None })"];
    2692 -> 2693;
    2693 [label="VarDec(VarDec { syntax: 2693, declare: Some(2694), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2695), as_: None, alias: None, for_: None, target: None, assignment: Some(2697), value: Some(2698) })"];
    2693 -> 2694;
    2694[label="declare"];
    2693 -> 2695;
    2695 [label="Type(Type { syntax: 2695, basename: Some(2696), members: [], arrays: [] })"];
    2695 -> 2696;
    2696[label="Removed"];
    2693 -> 2697;
    2697[label="="];
    2693 -> 2698;
    2698 [label="Expr"];
    2698 -> 2706;
    2706 [label="FunctionCall(FunctionCall { syntax: 2706, lhs: Some(2701), lparen: Some(2707), args: [(2708, None)], rparen: Some(2711) })"];
    2706 -> 2701;
    2701 [label="BinaryOp(BinaryOp { syntax: 2701, lhs: Some(2699), operator: Some(2702), rhs: Some(2703) })"];
    2701 -> 2699;
    2699 [label="Identifier"];
    2699 -> 2700;
    2700[label="AvailableLandmarksIds"];
    2701 -> 2702;
    2702[label="."];
    2701 -> 2703;
    2703 [label="Expr"];
    2703 -> 2704;
    2704 [label="Identifier"];
    2704 -> 2705;
    2705[label="remove"];
    2706 -> 2707;
    2707[label="("];
    2706 -> 2708;
    2708 [label="Expr"];
    2708 -> 2709;
    2709 [label="Identifier"];
    2709 -> 2710;
    2710[label="MapLandmarkId"];
    2706 -> 2711;
    2711[label=")"];
    2693 -> 2712;
    2712[label=";"];
    2627 -> 2713;
    2713 [label="Statement(Statement { syntax: 2713, statement: Some(2717), semicolon: Some(2722) })"];
    2713 -> 2714;
    2714 [label="Expr"];
    2714 -> 2715;
    2715 [label="Identifier"];
    2715 -> 2716;
    2716[label="CurObjectSelectedLandmarks"];
    2713 -> 2717;
    2717 [label="Assignment(Assignment { syntax: 2717, lvalue: Some(2714), operator: Some(2718), rvalue: Some(2719) })"];
    2717 -> 2718;
    2718[label="+="];
    2717 -> 2719;
    2719 [label="Expr"];
    2719 -> 2720;
    2720 [label="Literal"];
    2720 -> 2721;
    2721[label="1"];
    2713 -> 2722;
    2722[label=";"];
    2627 -> 2723;
    2723 [label="Statement(Statement { syntax: 2723, statement: Some(2724), semicolon: None })"];
    2723 -> 2724;
    2724 [label="If(If { syntax: 2724, if_: Some(2725), lparen: Some(2726), condition: Some(2727), rparen: Some(2741), body: Some(2742), else_: None })"];
    2724 -> 2725;
    2725[label="if"];
    2724 -> 2726;
    2726[label="("];
    2724 -> 2727;
    2727 [label="Expr"];
    2727 -> 2735;
    2735 [label="FunctionCall(FunctionCall { syntax: 2735, lhs: Some(2730), lparen: Some(2736), args: [(2737, None)], rparen: Some(2740) })"];
    2735 -> 2730;
    2730 [label="BinaryOp(BinaryOp { syntax: 2730, lhs: Some(2728), operator: Some(2731), rhs: Some(2732) })"];
    2730 -> 2728;
    2728 [label="Identifier"];
    2728 -> 2729;
    2729[label="MapLandmarks"];
    2730 -> 2731;
    2731[label="."];
    2730 -> 2732;
    2732 [label="Expr"];
    2732 -> 2733;
    2733 [label="Identifier"];
    2733 -> 2734;
    2734[label="existskey"];
    2735 -> 2736;
    2736[label="("];
    2735 -> 2737;
    2737 [label="Expr"];
    2737 -> 2738;
    2738 [label="Identifier"];
    2738 -> 2739;
    2739[label="MapLandmarkId"];
    2735 -> 2740;
    2740[label=")"];
    2724 -> 2741;
    2741[label=")"];
    2724 -> 2742;
    2742 [label="Statement(Statement { syntax: 2742, statement: Some(2743), semicolon: None })"];
    2742 -> 2743;
    2743 [label="Block(Block { syntax: 2743, lbrace: Some(2744), statements: [2745, 2761, 2772], rbrace: Some(2782) })"];
    2743 -> 2744;
    2744[label="{"];
    2743 -> 2745;
    2745 [label="Statement(Statement { syntax: 2745, statement: Some(2746), semicolon: None })"];
    2745 -> 2746;
    2746 [label="VarDec(VarDec { syntax: 2746, declare: Some(2747), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(2748), as_: None, alias: None, for_: None, target: None, assignment: Some(2750), value: Some(2751) })"];
    2746 -> 2747;
    2747[label="declare"];
    2746 -> 2748;
    2748 [label="Type(Type { syntax: 2748, basename: Some(2749), members: [], arrays: [] })"];
    2748 -> 2749;
    2749[label="MapLandmark"];
    2746 -> 2750;
    2750[label="<=>"];
    2746 -> 2751;
    2751 [label="Expr"];
    2751 -> 2754;
    2754 [label="ArrayAccess(ArrayAccess { syntax: 2754, lhs: Some(2752), lsquare: Some(2755), index: Some(2756), rsquare: Some(2759) })"];
    2754 -> 2752;
    2752 [label="Identifier"];
    2752 -> 2753;
    2753[label="MapLandmarks"];
    2754 -> 2755;
    2755[label="["];
    2754 -> 2756;
    2756 [label="Expr"];
    2756 -> 2757;
    2757 [label="Identifier"];
    2757 -> 2758;
    2758[label="MapLandmarkId"];
    2754 -> 2759;
    2759[label="]"];
    2746 -> 2760;
    2760[label=";"];
    2743 -> 2761;
    2761 [label="Statement(Statement { syntax: 2761, statement: Some(2762), semicolon: None })"];
    2761 -> 2762;
    2762 [label="VarDec(VarDec { syntax: 2762, declare: Some(2763), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(2764), name: Some(2766), as_: None, alias: None, for_: Some(2767), target: Some(2768), assignment: None, value: None })"];
    2762 -> 2763;
    2763[label="declare"];
    2762 -> 2764;
    2764 [label="Type(Type { syntax: 2764, basename: Some(2765), members: [], arrays: [] })"];
    2764 -> 2765;
    2765[label="Text"];
    2762 -> 2766;
    2766[label="ObjectType"];
    2762 -> 2767;
    2767[label="for"];
    2762 -> 2768;
    2768 [label="Expr"];
    2768 -> 2769;
    2769 [label="Identifier"];
    2769 -> 2770;
    2770[label="MapLandmark"];
    2762 -> 2771;
    2771[label=";"];
    2743 -> 2772;
    2772 [label="Statement(Statement { syntax: 2772, statement: Some(2776), semicolon: Some(2781) })"];
    2772 -> 2773;
    2773 [label="Expr"];
    2773 -> 2774;
    2774 [label="Identifier"];
    2774 -> 2775;
    2775[label="ObjectType"];
    2772 -> 2776;
    2776 [label="Assignment(Assignment { syntax: 2776, lvalue: Some(2773), operator: Some(2777), rvalue: Some(2778) })"];
    2776 -> 2777;
    2777[label="="];
    2776 -> 2778;
    2778 [label="Expr"];
    2778 -> 2779;
    2779 [label="Identifier"];
    2779 -> 2780;
    2780[label="Type"];
    2772 -> 2781;
    2781[label=";"];
    2743 -> 2782;
    2782[label="}"];
    2627 -> 2783;
    2783[label="}"];
    2584 -> 2784;
    2784[label="}"];
    1553 -> 2785;
    2785[label="***"];
    0 -> 2786;
    2786 [label="LabelImpl(LabelImpl { syntax: 2786, stars1: Some(2787), name: Some(2788), stars2: Some(2789), stars3: Some(2790), statements: [2791, 2821, 2841, 2852, 2865, 2902, 2912, 2925, 2938, 2951, 2964, 2974, 2984, 2994, 3004, 3014, 3154, 3226, 3320, 3369, 3395, 3454, 3474, 3503, 3508, 3524, 3554, 3574, 3585, 3605, 3673, 3689, 3711], stars4: Some(3727) })"];
    2786 -> 2787;
    2787[label="***"];
    2786 -> 2788;
    2788[label="Match_StartRound"];
    2786 -> 2789;
    2789[label="***"];
    2786 -> 2790;
    2790[label="***"];
    2786 -> 2791;
    2791 [label="Statement(Statement { syntax: 2791, statement: Some(2805), semicolon: Some(2820) })"];
    2791 -> 2792;
    2792 [label="Expr"];
    2792 -> 2795;
    2795 [label="BinaryOp(BinaryOp { syntax: 2795, lhs: Some(2793), operator: Some(2796), rhs: Some(2797) })"];
    2795 -> 2793;
    2793 [label="Identifier"];
    2793 -> 2794;
    2794[label="UIManager"];
    2795 -> 2796;
    2796[label="."];
    2795 -> 2797;
    2797 [label="Expr"];
    2797 -> 2800;
    2800 [label="BinaryOp(BinaryOp { syntax: 2800, lhs: Some(2798), operator: Some(2801), rhs: Some(2802) })"];
    2800 -> 2798;
    2798 [label="Identifier"];
    2798 -> 2799;
    2799[label="UIAll"];
    2800 -> 2801;
    2801[label="."];
    2800 -> 2802;
    2802 [label="Expr"];
    2802 -> 2803;
    2803 [label="Identifier"];
    2803 -> 2804;
    2804[label="UISequence"];
    2791 -> 2805;
    2805 [label="Assignment(Assignment { syntax: 2805, lvalue: Some(2792), operator: Some(2806), rvalue: Some(2807) })"];
    2805 -> 2806;
    2806[label="="];
    2805 -> 2807;
    2807 [label="Expr"];
    2807 -> 2810;
    2810 [label="BinaryOp(BinaryOp { syntax: 2810, lhs: Some(2808), operator: Some(2811), rhs: Some(2812) })"];
    2810 -> 2808;
    2808 [label="Identifier"];
    2808 -> 2809;
    2809[label="CUIConfig"];
    2810 -> 2811;
    2811[label="::"];
    2810 -> 2812;
    2812 [label="Expr"];
    2812 -> 2815;
    2815 [label="BinaryOp(BinaryOp { syntax: 2815, lhs: Some(2813), operator: Some(2816), rhs: Some(2817) })"];
    2815 -> 2813;
    2813 [label="Identifier"];
    2813 -> 2814;
    2814[label="EUISequence"];
    2815 -> 2816;
    2816[label="::"];
    2815 -> 2817;
    2817 [label="Expr"];
    2817 -> 2818;
    2818 [label="Identifier"];
    2818 -> 2819;
    2819[label="None"];
    2791 -> 2820;
    2820[label=";"];
    2786 -> 2821;
    2821 [label="Statement(Statement { syntax: 2821, statement: Some(2822), semicolon: Some(2840) })"];
    2821 -> 2822;
    2822 [label="Expr"];
    2822 -> 2830;
    2830 [label="FunctionCall(FunctionCall { syntax: 2830, lhs: Some(2825), lparen: Some(2831), args: [(2832, Some(2835)), (2836, None)], rparen: Some(2839) })"];
    2830 -> 2825;
    2825 [label="BinaryOp(BinaryOp { syntax: 2825, lhs: Some(2823), operator: Some(2826), rhs: Some(2827) })"];
    2825 -> 2823;
    2823 [label="Identifier"];
    2823 -> 2824;
    2824[label="Interfancy"];
    2825 -> 2826;
    2826[label="::"];
    2825 -> 2827;
    2827 [label="Expr"];
    2827 -> 2828;
    2828 [label="Identifier"];
    2828 -> 2829;
    2829[label="SetModuleVisibility"];
    2830 -> 2831;
    2831[label="("];
    2830 -> 2832;
    2832 [label="Expr"];
    2832 -> 2833;
    2833 [label="Literal"];
    2833 -> 2834;
    2834[label="\"Countdown\""];
    2830 -> 2835;
    2835[label=","];
    2830 -> 2836;
    2836 [label="Expr"];
    2836 -> 2837;
    2837 [label="Literal"];
    2837 -> 2838;
    2838[label="False"];
    2830 -> 2839;
    2839[label=")"];
    2821 -> 2840;
    2840[label=";"];
    2786 -> 2841;
    2841 [label="Statement(Statement { syntax: 2841, statement: Some(2842), semicolon: Some(2851) })"];
    2841 -> 2842;
    2842 [label="Expr"];
    2842 -> 2845;
    2845 [label="FunctionCall(FunctionCall { syntax: 2845, lhs: Some(2843), lparen: Some(2846), args: [(2847, None)], rparen: Some(2850) })"];
    2845 -> 2843;
    2843 [label="Identifier"];
    2843 -> 2844;
    2844[label="UISetNbPlayersAlive"];
    2845 -> 2846;
    2846[label="("];
    2845 -> 2847;
    2847 [label="Expr"];
    2847 -> 2848;
    2848 [label="Literal"];
    2848 -> 2849;
    2849[label="0"];
    2845 -> 2850;
    2850[label=")"];
    2841 -> 2851;
    2851[label=";"];
    2786 -> 2852;
    2852 [label="Statement(Statement { syntax: 2852, statement: Some(2853), semicolon: Some(2864) })"];
    2852 -> 2853;
    2853 [label="Expr"];
    2853 -> 2861;
    2861 [label="FunctionCall(FunctionCall { syntax: 2861, lhs: Some(2856), lparen: Some(2862), args: [], rparen: Some(2863) })"];
    2861 -> 2856;
    2856 [label="BinaryOp(BinaryOp { syntax: 2856, lhs: Some(2854), operator: Some(2857), rhs: Some(2858) })"];
    2856 -> 2854;
    2854 [label="Identifier"];
    2854 -> 2855;
    2855[label="MiniMap"];
    2856 -> 2857;
    2857[label="::"];
    2856 -> 2858;
    2858 [label="Expr"];
    2858 -> 2859;
    2859 [label="Identifier"];
    2859 -> 2860;
    2860[label="Hide"];
    2861 -> 2862;
    2862[label="("];
    2861 -> 2863;
    2863[label=")"];
    2852 -> 2864;
    2864[label=";"];
    2786 -> 2865;
    2865 [label="Statement(Statement { syntax: 2865, statement: Some(2866), semicolon: None })"];
    2865 -> 2866;
    2866 [label="If(If { syntax: 2866, if_: Some(2867), lparen: Some(2868), condition: Some(2869), rparen: Some(2875), body: Some(2876), else_: None })"];
    2866 -> 2867;
    2867[label="if"];
    2866 -> 2868;
    2868[label="("];
    2866 -> 2869;
    2869 [label="Expr"];
    2869 -> 2872;
    2872 [label="FunctionCall(FunctionCall { syntax: 2872, lhs: Some(2870), lparen: Some(2873), args: [], rparen: Some(2874) })"];
    2872 -> 2870;
    2870 [label="Identifier"];
    2870 -> 2871;
    2871[label="MM_IsMatchServer"];
    2872 -> 2873;
    2873[label="("];
    2872 -> 2874;
    2874[label=")"];
    2866 -> 2875;
    2875[label=")"];
    2866 -> 2876;
    2876 [label="Statement(Statement { syntax: 2876, statement: Some(2877), semicolon: None })"];
    2876 -> 2877;
    2877 [label="Block(Block { syntax: 2877, lbrace: Some(2878), statements: [2879, 2890], rbrace: Some(2901) })"];
    2877 -> 2878;
    2878[label="{"];
    2877 -> 2879;
    2879 [label="Statement(Statement { syntax: 2879, statement: Some(2880), semicolon: Some(2889) })"];
    2879 -> 2880;
    2880 [label="Expr"];
    2880 -> 2883;
    2883 [label="FunctionCall(FunctionCall { syntax: 2883, lhs: Some(2881), lparen: Some(2884), args: [(2885, None)], rparen: Some(2888) })"];
    2883 -> 2881;
    2881 [label="Identifier"];
    2881 -> 2882;
    2882[label="MM_AllowSubstitutes"];
    2883 -> 2884;
    2884[label="("];
    2883 -> 2885;
    2885 [label="Expr"];
    2885 -> 2886;
    2886 [label="Literal"];
    2886 -> 2887;
    2887[label="False"];
    2883 -> 2888;
    2888[label=")"];
    2879 -> 2889;
    2889[label=";"];
    2877 -> 2890;
    2890 [label="Statement(Statement { syntax: 2890, statement: Some(2891), semicolon: Some(2900) })"];
    2890 -> 2891;
    2891 [label="Expr"];
    2891 -> 2894;
    2894 [label="FunctionCall(FunctionCall { syntax: 2894, lhs: Some(2892), lparen: Some(2895), args: [(2896, None)], rparen: Some(2899) })"];
    2894 -> 2892;
    2892 [label="Identifier"];
    2892 -> 2893;
    2893[label="MM_EnablePenalty"];
    2894 -> 2895;
    2895[label="("];
    2894 -> 2896;
    2896 [label="Expr"];
    2896 -> 2897;
    2897 [label="Literal"];
    2897 -> 2898;
    2898[label="False"];
    2894 -> 2899;
    2899[label=")"];
    2890 -> 2900;
    2900[label=";"];
    2877 -> 2901;
    2901[label="}"];
    2786 -> 2902;
    2902 [label="Statement(Statement { syntax: 2902, statement: Some(2906), semicolon: Some(2911) })"];
    2902 -> 2903;
    2903 [label="Expr"];
    2903 -> 2904;
    2904 [label="Identifier"];
    2904 -> 2905;
    2905[label="G_IsOffZoneActivated"];
    2902 -> 2906;
    2906 [label="Assignment(Assignment { syntax: 2906, lvalue: Some(2903), operator: Some(2907), rvalue: Some(2908) })"];
    2906 -> 2907;
    2907[label="="];
    2906 -> 2908;
    2908 [label="Expr"];
    2908 -> 2909;
    2909 [label="Literal"];
    2909 -> 2910;
    2910[label="False"];
    2902 -> 2911;
    2911[label=";"];
    2786 -> 2912;
    2912 [label="Statement(Statement { syntax: 2912, statement: Some(2913), semicolon: Some(2924) })"];
    2912 -> 2913;
    2913 [label="Expr"];
    2913 -> 2921;
    2921 [label="FunctionCall(FunctionCall { syntax: 2921, lhs: Some(2916), lparen: Some(2922), args: [], rparen: Some(2923) })"];
    2921 -> 2916;
    2916 [label="BinaryOp(BinaryOp { syntax: 2916, lhs: Some(2914), operator: Some(2917), rhs: Some(2918) })"];
    2916 -> 2914;
    2914 [label="Identifier"];
    2914 -> 2915;
    2915[label="G_SpawnedPlayers"];
    2916 -> 2917;
    2917[label="."];
    2916 -> 2918;
    2918 [label="Expr"];
    2918 -> 2919;
    2919 [label="Identifier"];
    2919 -> 2920;
    2920[label="clear"];
    2921 -> 2922;
    2922[label="("];
    2921 -> 2923;
    2923[label=")"];
    2912 -> 2924;
    2924[label=";"];
    2786 -> 2925;
    2925 [label="Statement(Statement { syntax: 2925, statement: Some(2926), semicolon: Some(2937) })"];
    2925 -> 2926;
    2926 [label="Expr"];
    2926 -> 2934;
    2934 [label="FunctionCall(FunctionCall { syntax: 2934, lhs: Some(2929), lparen: Some(2935), args: [], rparen: Some(2936) })"];
    2934 -> 2929;
    2929 [label="BinaryOp(BinaryOp { syntax: 2929, lhs: Some(2927), operator: Some(2930), rhs: Some(2931) })"];
    2929 -> 2927;
    2927 [label="Identifier"];
    2927 -> 2928;
    2928[label="G_LoginsTouchedGoal"];
    2929 -> 2930;
    2930[label="."];
    2929 -> 2931;
    2931 [label="Expr"];
    2931 -> 2932;
    2932 [label="Identifier"];
    2932 -> 2933;
    2933[label="clear"];
    2934 -> 2935;
    2935[label="("];
    2934 -> 2936;
    2936[label=")"];
    2925 -> 2937;
    2937[label=";"];
    2786 -> 2938;
    2938 [label="Statement(Statement { syntax: 2938, statement: Some(2939), semicolon: Some(2950) })"];
    2938 -> 2939;
    2939 [label="Expr"];
    2939 -> 2947;
    2947 [label="FunctionCall(FunctionCall { syntax: 2947, lhs: Some(2942), lparen: Some(2948), args: [], rparen: Some(2949) })"];
    2947 -> 2942;
    2942 [label="BinaryOp(BinaryOp { syntax: 2942, lhs: Some(2940), operator: Some(2943), rhs: Some(2944) })"];
    2942 -> 2940;
    2940 [label="Identifier"];
    2940 -> 2941;
    2941[label="G_RespawnLandmarks"];
    2942 -> 2943;
    2943[label="."];
    2942 -> 2944;
    2944 [label="Expr"];
    2944 -> 2945;
    2945 [label="Identifier"];
    2945 -> 2946;
    2946[label="clear"];
    2947 -> 2948;
    2948[label="("];
    2947 -> 2949;
    2949[label=")"];
    2938 -> 2950;
    2950[label=";"];
    2786 -> 2951;
    2951 [label="Statement(Statement { syntax: 2951, statement: Some(2952), semicolon: Some(2963) })"];
    2951 -> 2952;
    2952 [label="Expr"];
    2952 -> 2960;
    2960 [label="FunctionCall(FunctionCall { syntax: 2960, lhs: Some(2955), lparen: Some(2961), args: [], rparen: Some(2962) })"];
    2960 -> 2955;
    2955 [label="BinaryOp(BinaryOp { syntax: 2955, lhs: Some(2953), operator: Some(2956), rhs: Some(2957) })"];
    2955 -> 2953;
    2953 [label="Identifier"];
    2953 -> 2954;
    2954[label="G_SpawnsList"];
    2955 -> 2956;
    2956[label="."];
    2955 -> 2957;
    2957 [label="Expr"];
    2957 -> 2958;
    2958 [label="Identifier"];
    2958 -> 2959;
    2959[label="clear"];
    2960 -> 2961;
    2961[label="("];
    2960 -> 2962;
    2962[label=")"];
    2951 -> 2963;
    2963[label=";"];
    2786 -> 2964;
    2964 [label="Statement(Statement { syntax: 2964, statement: Some(2968), semicolon: Some(2973) })"];
    2964 -> 2965;
    2965 [label="Expr"];
    2965 -> 2966;
    2966 [label="Identifier"];
    2966 -> 2967;
    2967[label="G_LatestSpawnId"];
    2964 -> 2968;
    2968 [label="Assignment(Assignment { syntax: 2968, lvalue: Some(2965), operator: Some(2969), rvalue: Some(2970) })"];
    2968 -> 2969;
    2969[label="="];
    2968 -> 2970;
    2970 [label="Expr"];
    2970 -> 2971;
    2971 [label="Literal"];
    2971 -> 2972;
    2972[label="NullId"];
    2964 -> 2973;
    2973[label=";"];
    2786 -> 2974;
    2974 [label="Statement(Statement { syntax: 2974, statement: Some(2978), semicolon: Some(2983) })"];
    2974 -> 2975;
    2975 [label="Expr"];
    2975 -> 2976;
    2976 [label="Identifier"];
    2976 -> 2977;
    2977[label="SpawnedToads"];
    2974 -> 2978;
    2978 [label="Assignment(Assignment { syntax: 2978, lvalue: Some(2975), operator: Some(2979), rvalue: Some(2980) })"];
    2978 -> 2979;
    2979[label="="];
    2978 -> 2980;
    2980 [label="Expr"];
    2980 -> 2981;
    2981 [label="Literal"];
    2981 -> 2982;
    2982[label="False"];
    2974 -> 2983;
    2983[label=";"];
    2786 -> 2984;
    2984 [label="Statement(Statement { syntax: 2984, statement: Some(2988), semicolon: Some(2993) })"];
    2984 -> 2985;
    2985 [label="Expr"];
    2985 -> 2986;
    2986 [label="Identifier"];
    2986 -> 2987;
    2987[label="OffZoneRadiusMax"];
    2984 -> 2988;
    2988 [label="Assignment(Assignment { syntax: 2988, lvalue: Some(2985), operator: Some(2989), rvalue: Some(2990) })"];
    2988 -> 2989;
    2989[label="="];
    2988 -> 2990;
    2990 [label="Expr"];
    2990 -> 2991;
    2991 [label="Literal"];
    2991 -> 2992;
    2992[label="0."];
    2984 -> 2993;
    2993[label=";"];
    2786 -> 2994;
    2994 [label="Statement(Statement { syntax: 2994, statement: Some(2998), semicolon: Some(3003) })"];
    2994 -> 2995;
    2995 [label="Expr"];
    2995 -> 2996;
    2996 [label="Identifier"];
    2996 -> 2997;
    2997[label="OffZoneRadiusSpeed"];
    2994 -> 2998;
    2998 [label="Assignment(Assignment { syntax: 2998, lvalue: Some(2995), operator: Some(2999), rvalue: Some(3000) })"];
    2998 -> 2999;
    2999[label="="];
    2998 -> 3000;
    3000 [label="Expr"];
    3000 -> 3001;
    3001 [label="Literal"];
    3001 -> 3002;
    3002[label="0."];
    2994 -> 3003;
    3003[label=";"];
    2786 -> 3004;
    3004 [label="Statement(Statement { syntax: 3004, statement: Some(3008), semicolon: Some(3013) })"];
    3004 -> 3005;
    3005 [label="Expr"];
    3005 -> 3006;
    3006 [label="Identifier"];
    3006 -> 3007;
    3007[label="OffZoneRadius"];
    3004 -> 3008;
    3008 [label="Assignment(Assignment { syntax: 3008, lvalue: Some(3005), operator: Some(3009), rvalue: Some(3010) })"];
    3008 -> 3009;
    3009[label="="];
    3008 -> 3010;
    3010 [label="Expr"];
    3010 -> 3011;
    3011 [label="Literal"];
    3011 -> 3012;
    3012[label="0."];
    3004 -> 3013;
    3013[label=";"];
    2786 -> 3014;
    3014 [label="Statement(Statement { syntax: 3014, statement: Some(3015), semicolon: None })"];
    3014 -> 3015;
    3015 [label="If(If { syntax: 3015, if_: Some(3016), lparen: Some(3017), condition: Some(3018), rparen: Some(3026), body: Some(3027), else_: None })"];
    3015 -> 3016;
    3016[label="if"];
    3015 -> 3017;
    3017[label="("];
    3015 -> 3018;
    3018 [label="Expr"];
    3018 -> 3021;
    3021 [label="BinaryOp(BinaryOp { syntax: 3021, lhs: Some(3019), operator: Some(3022), rhs: Some(3023) })"];
    3021 -> 3019;
    3019 [label="Identifier"];
    3019 -> 3020;
    3020[label="CenterGoal"];
    3021 -> 3022;
    3022[label="!="];
    3021 -> 3023;
    3023 [label="Expr"];
    3023 -> 3024;
    3024 [label="Literal"];
    3024 -> 3025;
    3025[label="Null"];
    3015 -> 3026;
    3026[label=")"];
    3015 -> 3027;
    3027 [label="Statement(Statement { syntax: 3027, statement: Some(3028), semicolon: None })"];
    3027 -> 3028;
    3028 [label="Block(Block { syntax: 3028, lbrace: Some(3029), statements: [3030, 3055, 3070, 3090, 3110, 3125], rbrace: Some(3153) })"];
    3028 -> 3029;
    3029[label="{"];
    3028 -> 3030;
    3030 [label="Statement(Statement { syntax: 3030, statement: Some(3044), semicolon: Some(3054) })"];
    3030 -> 3031;
    3031 [label="Expr"];
    3031 -> 3034;
    3034 [label="BinaryOp(BinaryOp { syntax: 3034, lhs: Some(3032), operator: Some(3035), rhs: Some(3036) })"];
    3034 -> 3032;
    3032 [label="Identifier"];
    3032 -> 3033;
    3033[label="UIManager"];
    3034 -> 3035;
    3035[label="."];
    3034 -> 3036;
    3036 [label="Expr"];
    3036 -> 3039;
    3039 [label="BinaryOp(BinaryOp { syntax: 3039, lhs: Some(3037), operator: Some(3040), rhs: Some(3041) })"];
    3039 -> 3037;
    3037 [label="Identifier"];
    3037 -> 3038;
    3038[label="UIAll"];
    3039 -> 3040;
    3040[label="."];
    3039 -> 3041;
    3041 [label="Expr"];
    3041 -> 3042;
    3042 [label="Identifier"];
    3042 -> 3043;
    3043[label="SpectatorForcedTarget"];
    3030 -> 3044;
    3044 [label="Assignment(Assignment { syntax: 3044, lvalue: Some(3031), operator: Some(3045), rvalue: Some(3046) })"];
    3044 -> 3045;
    3045[label="="];
    3044 -> 3046;
    3046 [label="Expr"];
    3046 -> 3049;
    3049 [label="BinaryOp(BinaryOp { syntax: 3049, lhs: Some(3047), operator: Some(3050), rhs: Some(3051) })"];
    3049 -> 3047;
    3047 [label="Identifier"];
    3047 -> 3048;
    3048[label="CenterGoal"];
    3049 -> 3050;
    3050[label="."];
    3049 -> 3051;
    3051 [label="Expr"];
    3051 -> 3052;
    3052 [label="Identifier"];
    3052 -> 3053;
    3053[label="Id"];
    3030 -> 3054;
    3054[label=";"];
    3028 -> 3055;
    3055 [label="Statement(Statement { syntax: 3055, statement: Some(3059), semicolon: Some(3069) })"];
    3055 -> 3056;
    3056 [label="Expr"];
    3056 -> 3057;
    3057 [label="Identifier"];
    3057 -> 3058;
    3058[label="CenterGoalLandmarkId"];
    3055 -> 3059;
    3059 [label="Assignment(Assignment { syntax: 3059, lvalue: Some(3056), operator: Some(3060), rvalue: Some(3061) })"];
    3059 -> 3060;
    3060[label="="];
    3059 -> 3061;
    3061 [label="Expr"];
    3061 -> 3064;
    3064 [label="BinaryOp(BinaryOp { syntax: 3064, lhs: Some(3062), operator: Some(3065), rhs: Some(3066) })"];
    3064 -> 3062;
    3062 [label="Identifier"];
    3062 -> 3063;
    3063[label="CenterGoal"];
    3064 -> 3065;
    3065[label="."];
    3064 -> 3066;
    3066 [label="Expr"];
    3066 -> 3067;
    3067 [label="Identifier"];
    3067 -> 3068;
    3068[label="Id"];
    3055 -> 3069;
    3069[label=";"];
    3028 -> 3070;
    3070 [label="Statement(Statement { syntax: 3070, statement: Some(3084), semicolon: Some(3089) })"];
    3070 -> 3071;
    3071 [label="Expr"];
    3071 -> 3074;
    3074 [label="BinaryOp(BinaryOp { syntax: 3074, lhs: Some(3072), operator: Some(3075), rhs: Some(3076) })"];
    3074 -> 3072;
    3072 [label="Identifier"];
    3072 -> 3073;
    3073[label="CenterGoal"];
    3074 -> 3075;
    3075[label="."];
    3074 -> 3076;
    3076 [label="Expr"];
    3076 -> 3079;
    3079 [label="BinaryOp(BinaryOp { syntax: 3079, lhs: Some(3077), operator: Some(3080), rhs: Some(3081) })"];
    3079 -> 3077;
    3077 [label="Identifier"];
    3077 -> 3078;
    3078[label="Gauge"];
    3079 -> 3080;
    3080[label="."];
    3079 -> 3081;
    3081 [label="Expr"];
    3081 -> 3082;
    3082 [label="Identifier"];
    3082 -> 3083;
    3083[label="ValueReal"];
    3070 -> 3084;
    3084 [label="Assignment(Assignment { syntax: 3084, lvalue: Some(3071), operator: Some(3085), rvalue: Some(3086) })"];
    3084 -> 3085;
    3085[label="="];
    3084 -> 3086;
    3086 [label="Expr"];
    3086 -> 3087;
    3087 [label="Literal"];
    3087 -> 3088;
    3088[label="1."];
    3070 -> 3089;
    3089[label=";"];
    3028 -> 3090;
    3090 [label="Statement(Statement { syntax: 3090, statement: Some(3104), semicolon: Some(3109) })"];
    3090 -> 3091;
    3091 [label="Expr"];
    3091 -> 3094;
    3094 [label="BinaryOp(BinaryOp { syntax: 3094, lhs: Some(3092), operator: Some(3095), rhs: Some(3096) })"];
    3094 -> 3092;
    3092 [label="Identifier"];
    3092 -> 3093;
    3093[label="CenterGoal"];
    3094 -> 3095;
    3095[label="."];
    3094 -> 3096;
    3096 [label="Expr"];
    3096 -> 3099;
    3099 [label="BinaryOp(BinaryOp { syntax: 3099, lhs: Some(3097), operator: Some(3100), rhs: Some(3101) })"];
    3099 -> 3097;
    3097 [label="Identifier"];
    3097 -> 3098;
    3098[label="Gauge"];
    3099 -> 3100;
    3100[label="."];
    3099 -> 3101;
    3101 [label="Expr"];
    3101 -> 3102;
    3102 [label="Identifier"];
    3102 -> 3103;
    3103[label="Captured"];
    3090 -> 3104;
    3104 [label="Assignment(Assignment { syntax: 3104, lvalue: Some(3091), operator: Some(3105), rvalue: Some(3106) })"];
    3104 -> 3105;
    3105[label="="];
    3104 -> 3106;
    3106 [label="Expr"];
    3106 -> 3107;
    3107 [label="Literal"];
    3107 -> 3108;
    3108[label="True"];
    3090 -> 3109;
    3109[label=";"];
    3028 -> 3110;
    3110 [label="Statement(Statement { syntax: 3110, statement: Some(3114), semicolon: Some(3124) })"];
    3110 -> 3111;
    3111 [label="Expr"];
    3111 -> 3112;
    3112 [label="Identifier"];
    3112 -> 3113;
    3113[label="G_CenterGoalPosition"];
    3110 -> 3114;
    3114 [label="Assignment(Assignment { syntax: 3114, lvalue: Some(3111), operator: Some(3115), rvalue: Some(3116) })"];
    3114 -> 3115;
    3115[label="="];
    3114 -> 3116;
    3116 [label="Expr"];
    3116 -> 3119;
    3119 [label="BinaryOp(BinaryOp { syntax: 3119, lhs: Some(3117), operator: Some(3120), rhs: Some(3121) })"];
    3119 -> 3117;
    3117 [label="Identifier"];
    3117 -> 3118;
    3118[label="CenterGoal"];
    3119 -> 3120;
    3120[label="."];
    3119 -> 3121;
    3121 [label="Expr"];
    3121 -> 3122;
    3122 [label="Identifier"];
    3122 -> 3123;
    3123[label="Position"];
    3110 -> 3124;
    3124[label=";"];
    3028 -> 3125;
    3125 [label="Statement(Statement { syntax: 3125, statement: Some(3126), semicolon: Some(3152) })"];
    3125 -> 3126;
    3126 [label="Expr"];
    3126 -> 3134;
    3134 [label="FunctionCall(FunctionCall { syntax: 3134, lhs: Some(3129), lparen: Some(3135), args: [(3136, Some(3139)), (3140, Some(3143)), (3144, Some(3147)), (3148, None)], rparen: Some(3151) })"];
    3134 -> 3129;
    3129 [label="BinaryOp(BinaryOp { syntax: 3129, lhs: Some(3127), operator: Some(3130), rhs: Some(3131) })"];
    3129 -> 3127;
    3127 [label="Identifier"];
    3127 -> 3128;
    3128[label="MiniMap"];
    3129 -> 3130;
    3130[label="::"];
    3129 -> 3131;
    3131 [label="Expr"];
    3131 -> 3132;
    3132 [label="Identifier"];
    3132 -> 3133;
    3133[label="SetMarker"];
    3134 -> 3135;
    3135[label="("];
    3134 -> 3136;
    3136 [label="Expr"];
    3136 -> 3137;
    3137 [label="Literal"];
    3137 -> 3138;
    3138[label="\"Goal\""];
    3134 -> 3139;
    3139[label=","];
    3134 -> 3140;
    3140 [label="Expr"];
    3140 -> 3141;
    3141 [label="Literal"];
    3141 -> 3142;
    3142[label="\"Goal.png\""];
    3134 -> 3143;
    3143[label=","];
    3134 -> 3144;
    3144 [label="Expr"];
    3144 -> 3145;
    3145 [label="Identifier"];
    3145 -> 3146;
    3146[label="Vec3"];
    3134 -> 3147;
    3147[label=","];
    3134 -> 3148;
    3148 [label="Expr"];
    3148 -> 3149;
    3149 [label="Identifier"];
    3149 -> 3150;
    3150[label="G_CenterGoalPosition"];
    3134 -> 3151;
    3151[label=")"];
    3125 -> 3152;
    3152[label=";"];
    3028 -> 3153;
    3153[label="}"];
    2786 -> 3154;
    3154 [label="Statement(Statement { syntax: 3154, statement: Some(3155), semicolon: None })"];
    3154 -> 3155;
    3155 [label="Foreach(Foreach { syntax: 3155, foreach: Some(3156), lparen: Some(3157), name1: Some(3158), arrow: None, name2: None, in_: Some(3159), value: Some(3160), rparen: Some(3163), body: Some(3164) })"];
    3155 -> 3156;
    3156[label="foreach"];
    3155 -> 3157;
    3157[label="("];
    3155 -> 3158;
    3158[label="MapLandmark"];
    3155 -> 3159;
    3159[label="in"];
    3155 -> 3160;
    3160 [label="Expr"];
    3160 -> 3161;
    3161 [label="Identifier"];
    3161 -> 3162;
    3162[label="MapLandmarks"];
    3155 -> 3163;
    3163[label=")"];
    3155 -> 3164;
    3164 [label="Statement(Statement { syntax: 3164, statement: Some(3165), semicolon: None })"];
    3164 -> 3165;
    3165 [label="Block(Block { syntax: 3165, lbrace: Some(3166), statements: [3167, 3189, 3200], rbrace: Some(3225) })"];
    3165 -> 3166;
    3166[label="{"];
    3165 -> 3167;
    3167 [label="Statement(Statement { syntax: 3167, statement: Some(3168), semicolon: None })"];
    3167 -> 3168;
    3168 [label="If(If { syntax: 3168, if_: Some(3169), lparen: Some(3170), condition: Some(3171), rparen: Some(3184), body: Some(3185), else_: None })"];
    3168 -> 3169;
    3169[label="if"];
    3168 -> 3170;
    3170[label="("];
    3168 -> 3171;
    3171 [label="Expr"];
    3171 -> 3179;
    3179 [label="BinaryOp(BinaryOp { syntax: 3179, lhs: Some(3174), operator: Some(3180), rhs: Some(3181) })"];
    3179 -> 3174;
    3174 [label="BinaryOp(BinaryOp { syntax: 3174, lhs: Some(3172), operator: Some(3175), rhs: Some(3176) })"];
    3174 -> 3172;
    3172 [label="Identifier"];
    3172 -> 3173;
    3173[label="MapLandmark"];
    3174 -> 3175;
    3175[label="."];
    3174 -> 3176;
    3176 [label="Expr"];
    3176 -> 3177;
    3177 [label="Identifier"];
    3177 -> 3178;
    3178[label="Id"];
    3179 -> 3180;
    3180[label="=="];
    3179 -> 3181;
    3181 [label="Expr"];
    3181 -> 3182;
    3182 [label="Identifier"];
    3182 -> 3183;
    3183[label="CenterGoalLandmarkId"];
    3168 -> 3184;
    3184[label=")"];
    3168 -> 3185;
    3185 [label="Statement(Statement { syntax: 3185, statement: Some(3186), semicolon: Some(3188) })"];
    3185 -> 3186;
    3186 [label="Continue"];
    3186 -> 3187;
    3187[label="continue"];
    3185 -> 3188;
    3188[label=";"];
    3165 -> 3189;
    3189 [label="Statement(Statement { syntax: 3189, statement: Some(3190), semicolon: None })"];
    3189 -> 3190;
    3190 [label="VarDec(VarDec { syntax: 3190, declare: Some(3191), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(3192), name: Some(3194), as_: None, alias: None, for_: Some(3195), target: Some(3196), assignment: None, value: None })"];
    3190 -> 3191;
    3191[label="declare"];
    3190 -> 3192;
    3192 [label="Type(Type { syntax: 3192, basename: Some(3193), members: [], arrays: [] })"];
    3192 -> 3193;
    3193[label="Real"];
    3190 -> 3194;
    3194[label="CenterGoalDistance"];
    3190 -> 3195;
    3195[label="for"];
    3190 -> 3196;
    3196 [label="Expr"];
    3196 -> 3197;
    3197 [label="Identifier"];
    3197 -> 3198;
    3198[label="MapLandmark"];
    3190 -> 3199;
    3199[label=";"];
    3165 -> 3200;
    3200 [label="Statement(Statement { syntax: 3200, statement: Some(3204), semicolon: Some(3224) })"];
    3200 -> 3201;
    3201 [label="Expr"];
    3201 -> 3202;
    3202 [label="Identifier"];
    3202 -> 3203;
    3203[label="CenterGoalDistance"];
    3200 -> 3204;
    3204 [label="Assignment(Assignment { syntax: 3204, lvalue: Some(3201), operator: Some(3205), rvalue: Some(3206) })"];
    3204 -> 3205;
    3205[label="="];
    3204 -> 3206;
    3206 [label="Expr"];
    3206 -> 3209;
    3209 [label="FunctionCall(FunctionCall { syntax: 3209, lhs: Some(3207), lparen: Some(3210), args: [(3211, Some(3219)), (3220, None)], rparen: Some(3223) })"];
    3209 -> 3207;
    3207 [label="Identifier"];
    3207 -> 3208;
    3208[label="GT_Distance2D"];
    3209 -> 3210;
    3210[label="("];
    3209 -> 3211;
    3211 [label="Expr"];
    3211 -> 3214;
    3214 [label="BinaryOp(BinaryOp { syntax: 3214, lhs: Some(3212), operator: Some(3215), rhs: Some(3216) })"];
    3214 -> 3212;
    3212 [label="Identifier"];
    3212 -> 3213;
    3213[label="MapLandmark"];
    3214 -> 3215;
    3215[label="."];
    3214 -> 3216;
    3216 [label="Expr"];
    3216 -> 3217;
    3217 [label="Identifier"];
    3217 -> 3218;
    3218[label="Position"];
    3209 -> 3219;
    3219[label=","];
    3209 -> 3220;
    3220 [label="Expr"];
    3220 -> 3221;
    3221 [label="Identifier"];
    3221 -> 3222;
    3222[label="G_CenterGoalPosition"];
    3209 -> 3223;
    3223[label=")"];
    3200 -> 3224;
    3224[label=";"];
    3165 -> 3225;
    3225[label="}"];
    2786 -> 3226;
    3226 [label="Statement(Statement { syntax: 3226, statement: Some(3227), semicolon: None })"];
    3226 -> 3227;
    3227 [label="Foreach(Foreach { syntax: 3227, foreach: Some(3228), lparen: Some(3229), name1: Some(3230), arrow: None, name2: None, in_: Some(3231), value: Some(3232), rparen: Some(3235), body: Some(3236) })"];
    3227 -> 3228;
    3228[label="foreach"];
    3227 -> 3229;
    3229[label="("];
    3227 -> 3230;
    3230[label="MapLandmark"];
    3227 -> 3231;
    3231[label="in"];
    3227 -> 3232;
    3232 [label="Expr"];
    3232 -> 3233;
    3233 [label="Identifier"];
    3233 -> 3234;
    3234[label="MapLandmarks_Gate"];
    3227 -> 3235;
    3235[label=")"];
    3227 -> 3236;
    3236 [label="Statement(Statement { syntax: 3236, statement: Some(3237), semicolon: None })"];
    3236 -> 3237;
    3237 [label="Block(Block { syntax: 3237, lbrace: Some(3238), statements: [3239, 3259, 3279, 3299], rbrace: Some(3319) })"];
    3237 -> 3238;
    3238[label="{"];
    3237 -> 3239;
    3239 [label="Statement(Statement { syntax: 3239, statement: Some(3253), semicolon: Some(3258) })"];
    3239 -> 3240;
    3240 [label="Expr"];
    3240 -> 3243;
    3243 [label="BinaryOp(BinaryOp { syntax: 3243, lhs: Some(3241), operator: Some(3244), rhs: Some(3245) })"];
    3243 -> 3241;
    3241 [label="Identifier"];
    3241 -> 3242;
    3242[label="MapLandmark"];
    3243 -> 3244;
    3244[label="."];
    3243 -> 3245;
    3245 [label="Expr"];
    3245 -> 3248;
    3248 [label="BinaryOp(BinaryOp { syntax: 3248, lhs: Some(3246), operator: Some(3249), rhs: Some(3250) })"];
    3248 -> 3246;
    3246 [label="Identifier"];
    3246 -> 3247;
    3247[label="Gate"];
    3248 -> 3249;
    3249[label="."];
    3248 -> 3250;
    3250 [label="Expr"];
    3250 -> 3251;
    3251 [label="Identifier"];
    3251 -> 3252;
    3252[label="AutoOpenSpeed"];
    3239 -> 3253;
    3253 [label="Assignment(Assignment { syntax: 3253, lvalue: Some(3240), operator: Some(3254), rvalue: Some(3255) })"];
    3253 -> 3254;
    3254[label="="];
    3253 -> 3255;
    3255 [label="Expr"];
    3255 -> 3256;
    3256 [label="Literal"];
    3256 -> 3257;
    3257[label="1"];
    3239 -> 3258;
    3258[label=";"];
    3237 -> 3259;
    3259 [label="Statement(Statement { syntax: 3259, statement: Some(3273), semicolon: Some(3278) })"];
    3259 -> 3260;
    3260 [label="Expr"];
    3260 -> 3263;
    3263 [label="BinaryOp(BinaryOp { syntax: 3263, lhs: Some(3261), operator: Some(3264), rhs: Some(3265) })"];
    3263 -> 3261;
    3261 [label="Identifier"];
    3261 -> 3262;
    3262[label="MapLandmark"];
    3263 -> 3264;
    3264[label="."];
    3263 -> 3265;
    3265 [label="Expr"];
    3265 -> 3268;
    3268 [label="BinaryOp(BinaryOp { syntax: 3268, lhs: Some(3266), operator: Some(3269), rhs: Some(3270) })"];
    3268 -> 3266;
    3266 [label="Identifier"];
    3266 -> 3267;
    3267[label="Gate"];
    3268 -> 3269;
    3269[label="."];
    3268 -> 3270;
    3270 [label="Expr"];
    3270 -> 3271;
    3271 [label="Identifier"];
    3271 -> 3272;
    3272[label="AutoCloseDelay"];
    3259 -> 3273;
    3273 [label="Assignment(Assignment { syntax: 3273, lvalue: Some(3260), operator: Some(3274), rvalue: Some(3275) })"];
    3273 -> 3274;
    3274[label="="];
    3273 -> 3275;
    3275 [label="Expr"];
    3275 -> 3276;
    3276 [label="Identifier"];
    3276 -> 3277;
    3277[label="C_GateAutoCloseDelay"];
    3259 -> 3278;
    3278[label=";"];
    3237 -> 3279;
    3279 [label="Statement(Statement { syntax: 3279, statement: Some(3293), semicolon: Some(3298) })"];
    3279 -> 3280;
    3280 [label="Expr"];
    3280 -> 3283;
    3283 [label="BinaryOp(BinaryOp { syntax: 3283, lhs: Some(3281), operator: Some(3284), rhs: Some(3285) })"];
    3283 -> 3281;
    3281 [label="Identifier"];
    3281 -> 3282;
    3282[label="MapLandmark"];
    3283 -> 3284;
    3284[label="."];
    3283 -> 3285;
    3285 [label="Expr"];
    3285 -> 3288;
    3288 [label="BinaryOp(BinaryOp { syntax: 3288, lhs: Some(3286), operator: Some(3289), rhs: Some(3290) })"];
    3288 -> 3286;
    3286 [label="Identifier"];
    3286 -> 3287;
    3287[label="Gate"];
    3288 -> 3289;
    3289[label="."];
    3288 -> 3290;
    3290 [label="Expr"];
    3290 -> 3291;
    3291 [label="Identifier"];
    3291 -> 3292;
    3292[label="Clan"];
    3279 -> 3293;
    3293 [label="Assignment(Assignment { syntax: 3293, lvalue: Some(3280), operator: Some(3294), rvalue: Some(3295) })"];
    3293 -> 3294;
    3294[label="="];
    3293 -> 3295;
    3295 [label="Expr"];
    3295 -> 3296;
    3296 [label="Literal"];
    3296 -> 3297;
    3297[label="1"];
    3279 -> 3298;
    3298[label=";"];
    3237 -> 3299;
    3299 [label="Statement(Statement { syntax: 3299, statement: Some(3313), semicolon: Some(3318) })"];
    3299 -> 3300;
    3300 [label="Expr"];
    3300 -> 3303;
    3303 [label="BinaryOp(BinaryOp { syntax: 3303, lhs: Some(3301), operator: Some(3304), rhs: Some(3305) })"];
    3303 -> 3301;
    3301 [label="Identifier"];
    3301 -> 3302;
    3302[label="MapLandmark"];
    3303 -> 3304;
    3304[label="."];
    3303 -> 3305;
    3305 [label="Expr"];
    3305 -> 3308;
    3308 [label="BinaryOp(BinaryOp { syntax: 3308, lhs: Some(3306), operator: Some(3309), rhs: Some(3310) })"];
    3308 -> 3306;
    3306 [label="Identifier"];
    3306 -> 3307;
    3307[label="Gauge"];
    3308 -> 3309;
    3309[label="."];
    3308 -> 3310;
    3310 [label="Expr"];
    3310 -> 3311;
    3311 [label="Identifier"];
    3311 -> 3312;
    3312[label="Max"];
    3299 -> 3313;
    3313 [label="Assignment(Assignment { syntax: 3313, lvalue: Some(3300), operator: Some(3314), rvalue: Some(3315) })"];
    3313 -> 3314;
    3314[label="="];
    3313 -> 3315;
    3315 [label="Expr"];
    3315 -> 3316;
    3316 [label="Identifier"];
    3316 -> 3317;
    3317[label="C_GateOpeningDuration"];
    3299 -> 3318;
    3318[label=";"];
    3237 -> 3319;
    3319[label="}"];
    2786 -> 3320;
    3320 [label="Statement(Statement { syntax: 3320, statement: Some(3321), semicolon: None })"];
    3320 -> 3321;
    3321 [label="Foreach(Foreach { syntax: 3321, foreach: Some(3322), lparen: Some(3323), name1: Some(3324), arrow: None, name2: None, in_: Some(3325), value: Some(3326), rparen: Some(3329), body: Some(3330) })"];
    3321 -> 3322;
    3322[label="foreach"];
    3321 -> 3323;
    3323[label="("];
    3321 -> 3324;
    3324[label="MapLandmark"];
    3321 -> 3325;
    3325[label="in"];
    3321 -> 3326;
    3326 [label="Expr"];
    3326 -> 3327;
    3327 [label="Identifier"];
    3327 -> 3328;
    3328[label="MapLandmarks_Gauge"];
    3321 -> 3329;
    3329[label=")"];
    3321 -> 3330;
    3330 [label="Statement(Statement { syntax: 3330, statement: Some(3331), semicolon: None })"];
    3330 -> 3331;
    3331 [label="If(If { syntax: 3331, if_: Some(3332), lparen: Some(3333), condition: Some(3334), rparen: Some(3347), body: Some(3348), else_: None })"];
    3331 -> 3332;
    3332[label="if"];
    3331 -> 3333;
    3333[label="("];
    3331 -> 3334;
    3334 [label="Expr"];
    3334 -> 3342;
    3342 [label="BinaryOp(BinaryOp { syntax: 3342, lhs: Some(3337), operator: Some(3343), rhs: Some(3344) })"];
    3342 -> 3337;
    3337 [label="BinaryOp(BinaryOp { syntax: 3337, lhs: Some(3335), operator: Some(3338), rhs: Some(3339) })"];
    3337 -> 3335;
    3335 [label="Identifier"];
    3335 -> 3336;
    3336[label="MapLandmark"];
    3337 -> 3338;
    3338[label="."];
    3337 -> 3339;
    3339 [label="Expr"];
    3339 -> 3340;
    3340 [label="Identifier"];
    3340 -> 3341;
    3341[label="Tag"];
    3342 -> 3343;
    3343[label="=="];
    3342 -> 3344;
    3344 [label="Expr"];
    3344 -> 3345;
    3345 [label="Literal"];
    3345 -> 3346;
    3346[label="\"Checkpoint\""];
    3331 -> 3347;
    3347[label=")"];
    3331 -> 3348;
    3348 [label="Statement(Statement { syntax: 3348, statement: Some(3349), semicolon: Some(3368) })"];
    3348 -> 3349;
    3349 [label="Expr"];
    3349 -> 3357;
    3357 [label="FunctionCall(FunctionCall { syntax: 3357, lhs: Some(3352), lparen: Some(3358), args: [(3359, None)], rparen: Some(3367) })"];
    3357 -> 3352;
    3352 [label="BinaryOp(BinaryOp { syntax: 3352, lhs: Some(3350), operator: Some(3353), rhs: Some(3354) })"];
    3352 -> 3350;
    3350 [label="Identifier"];
    3350 -> 3351;
    3351[label="G_RespawnLandmarks"];
    3352 -> 3353;
    3353[label="."];
    3352 -> 3354;
    3354 [label="Expr"];
    3354 -> 3355;
    3355 [label="Identifier"];
    3355 -> 3356;
    3356[label="add"];
    3357 -> 3358;
    3358[label="("];
    3357 -> 3359;
    3359 [label="Expr"];
    3359 -> 3362;
    3362 [label="BinaryOp(BinaryOp { syntax: 3362, lhs: Some(3360), operator: Some(3363), rhs: Some(3364) })"];
    3362 -> 3360;
    3360 [label="Identifier"];
    3360 -> 3361;
    3361[label="MapLandmark"];
    3362 -> 3363;
    3363[label="."];
    3362 -> 3364;
    3364 [label="Expr"];
    3364 -> 3365;
    3365 [label="Identifier"];
    3365 -> 3366;
    3366[label="Id"];
    3357 -> 3367;
    3367[label=")"];
    3348 -> 3368;
    3368[label=";"];
    2786 -> 3369;
    3369 [label="Statement(Statement { syntax: 3369, statement: Some(3383), semicolon: Some(3394) })"];
    3369 -> 3370;
    3370 [label="Expr"];
    3370 -> 3373;
    3373 [label="BinaryOp(BinaryOp { syntax: 3373, lhs: Some(3371), operator: Some(3374), rhs: Some(3375) })"];
    3373 -> 3371;
    3371 [label="Identifier"];
    3371 -> 3372;
    3372[label="UIManager"];
    3373 -> 3374;
    3374[label="."];
    3373 -> 3375;
    3375 [label="Expr"];
    3375 -> 3378;
    3378 [label="BinaryOp(BinaryOp { syntax: 3378, lhs: Some(3376), operator: Some(3379), rhs: Some(3380) })"];
    3378 -> 3376;
    3376 [label="Identifier"];
    3376 -> 3377;
    3377[label="UIAll"];
    3378 -> 3379;
    3379[label="."];
    3378 -> 3380;
    3380 [label="Expr"];
    3380 -> 3381;
    3381 [label="Identifier"];
    3381 -> 3382;
    3382[label="BigMessage"];
    3369 -> 3383;
    3383 [label="Assignment(Assignment { syntax: 3383, lvalue: Some(3370), operator: Some(3384), rvalue: Some(3385) })"];
    3383 -> 3384;
    3384[label="="];
    3383 -> 3385;
    3385 [label="Expr"];
    3385 -> 3388;
    3388 [label="FunctionCall(FunctionCall { syntax: 3388, lhs: Some(3386), lparen: Some(3389), args: [(3390, None)], rparen: Some(3393) })"];
    3388 -> 3386;
    3386 [label="Identifier"];
    3386 -> 3387;
    3387[label="_"];
    3388 -> 3389;
    3389[label="("];
    3388 -> 3390;
    3390 [label="Expr"];
    3390 -> 3391;
    3391 [label="Literal"];
    3391 -> 3392;
    3392[label="\"Waiting for players...\""];
    3388 -> 3393;
    3393[label=")"];
    3369 -> 3394;
    3394[label=";"];
    2786 -> 3395;
    3395 [label="Statement(Statement { syntax: 3395, statement: Some(3396), semicolon: None })"];
    3395 -> 3396;
    3396 [label="While(While { syntax: 3396, while_: Some(3397), lparen: Some(3398), condition: Some(3399), rparen: Some(3445), body: Some(3446) })"];
    3396 -> 3397;
    3397[label="while"];
    3396 -> 3398;
    3398[label="("];
    3396 -> 3399;
    3399 [label="Expr"];
    3399 -> 3405;
    3405 [label="BinaryOp(BinaryOp { syntax: 3405, lhs: Some(3400), operator: Some(3406), rhs: Some(3407) })"];
    3405 -> 3400;
    3400 [label="UnOp(UnOp { syntax: 3400, operator: Some(3401), operand: Some(3402) })"];
    3400 -> 3401;
    3401[label="!"];
    3400 -> 3402;
    3402 [label="Expr"];
    3402 -> 3403;
    3403 [label="Identifier"];
    3403 -> 3404;
    3404[label="ServerShutdownRequested"];
    3405 -> 3406;
    3406[label="&&"];
    3405 -> 3407;
    3407 [label="Expr"];
    3407 -> 3413;
    3413 [label="BinaryOp(BinaryOp { syntax: 3413, lhs: Some(3408), operator: Some(3414), rhs: Some(3415) })"];
    3413 -> 3408;
    3408 [label="UnOp(UnOp { syntax: 3408, operator: Some(3409), operand: Some(3410) })"];
    3408 -> 3409;
    3409[label="!"];
    3408 -> 3410;
    3410 [label="Expr"];
    3410 -> 3411;
    3411 [label="Identifier"];
    3411 -> 3412;
    3412[label="MatchEndRequested"];
    3413 -> 3414;
    3414[label="&&"];
    3413 -> 3415;
    3415 [label="Expr"];
    3415 -> 3416;
    3416 [label="Parenthesised(Parenthesised { syntax: 3416, lparen: Some(3417), expr: Some(3418), rparen: Some(3444) })"];
    3416 -> 3417;
    3417[label="("];
    3416 -> 3418;
    3418 [label="Expr"];
    3418 -> 3441;
    3441 [label="FunctionCall(FunctionCall { syntax: 3441, lhs: Some(3431), lparen: Some(3442), args: [], rparen: Some(3443) })"];
    3441 -> 3431;
    3431 [label="BinaryOp(BinaryOp { syntax: 3431, lhs: Some(3426), operator: Some(3432), rhs: Some(3433) })"];
    3431 -> 3426;
    3426 [label="BinaryOp(BinaryOp { syntax: 3426, lhs: Some(3421), operator: Some(3427), rhs: Some(3428) })"];
    3426 -> 3421;
    3421 [label="BinaryOp(BinaryOp { syntax: 3421, lhs: Some(3419), operator: Some(3422), rhs: Some(3423) })"];
    3421 -> 3419;
    3419 [label="Identifier"];
    3419 -> 3420;
    3420[label="Players"];
    3421 -> 3422;
    3422[label="."];
    3421 -> 3423;
    3423 [label="Expr"];
    3423 -> 3424;
    3424 [label="Identifier"];
    3424 -> 3425;
    3425[label="count"];
    3426 -> 3427;
    3427[label="<"];
    3426 -> 3428;
    3428 [label="Expr"];
    3428 -> 3429;
    3429 [label="Identifier"];
    3429 -> 3430;
    3430[label="C_RequiredPlayersNb"];
    3431 -> 3432;
    3432[label="||"];
    3431 -> 3433;
    3433 [label="Expr"];
    3433 -> 3436;
    3436 [label="BinaryOp(BinaryOp { syntax: 3436, lhs: Some(3434), operator: Some(3437), rhs: Some(3438) })"];
    3436 -> 3434;
    3434 [label="Identifier"];
    3434 -> 3435;
    3435[label="CupAdmin"];
    3436 -> 3437;
    3437[label="::"];
    3436 -> 3438;
    3438 [label="Expr"];
    3438 -> 3439;
    3439 [label="Identifier"];
    3439 -> 3440;
    3440[label="IsCupPaused"];
    3441 -> 3442;
    3442[label="("];
    3441 -> 3443;
    3443[label=")"];
    3416 -> 3444;
    3444[label=")"];
    3396 -> 3445;
    3445[label=")"];
    3396 -> 3446;
    3446 [label="Statement(Statement { syntax: 3446, statement: Some(3447), semicolon: Some(3453) })"];
    3446 -> 3447;
    3447 [label="Expr"];
    3447 -> 3450;
    3450 [label="FunctionCall(FunctionCall { syntax: 3450, lhs: Some(3448), lparen: Some(3451), args: [], rparen: Some(3452) })"];
    3450 -> 3448;
    3448 [label="Identifier"];
    3448 -> 3449;
    3449[label="MB_Yield"];
    3450 -> 3451;
    3451[label="("];
    3450 -> 3452;
    3452[label=")"];
    3446 -> 3453;
    3453[label=";"];
    2786 -> 3454;
    3454 [label="Statement(Statement { syntax: 3454, statement: Some(3468), semicolon: Some(3473) })"];
    3454 -> 3455;
    3455 [label="Expr"];
    3455 -> 3458;
    3458 [label="BinaryOp(BinaryOp { syntax: 3458, lhs: Some(3456), operator: Some(3459), rhs: Some(3460) })"];
    3458 -> 3456;
    3456 [label="Identifier"];
    3456 -> 3457;
    3457[label="UIManager"];
    3458 -> 3459;
    3459[label="."];
    3458 -> 3460;
    3460 [label="Expr"];
    3460 -> 3463;
    3463 [label="BinaryOp(BinaryOp { syntax: 3463, lhs: Some(3461), operator: Some(3464), rhs: Some(3465) })"];
    3463 -> 3461;
    3461 [label="Identifier"];
    3461 -> 3462;
    3462[label="UIAll"];
    3463 -> 3464;
    3464[label="."];
    3463 -> 3465;
    3465 [label="Expr"];
    3465 -> 3466;
    3466 [label="Identifier"];
    3466 -> 3467;
    3467[label="BigMessage"];
    3454 -> 3468;
    3468 [label="Assignment(Assignment { syntax: 3468, lvalue: Some(3455), operator: Some(3469), rvalue: Some(3470) })"];
    3468 -> 3469;
    3469[label="="];
    3468 -> 3470;
    3470 [label="Expr"];
    3470 -> 3471;
    3471 [label="Literal"];
    3471 -> 3472;
    3472[label="\"\""];
    3454 -> 3473;
    3473[label=";"];
    2786 -> 3474;
    3474 [label="Statement(Statement { syntax: 3474, statement: Some(3475), semicolon: None })"];
    3474 -> 3475;
    3475 [label="Foreach(Foreach { syntax: 3475, foreach: Some(3476), lparen: Some(3477), name1: Some(3478), arrow: None, name2: None, in_: Some(3479), value: Some(3480), rparen: Some(3483), body: Some(3484) })"];
    3475 -> 3476;
    3476[label="foreach"];
    3475 -> 3477;
    3477[label="("];
    3475 -> 3478;
    3478[label="Player"];
    3475 -> 3479;
    3479[label="in"];
    3475 -> 3480;
    3480 [label="Expr"];
    3480 -> 3481;
    3481 [label="Identifier"];
    3481 -> 3482;
    3482[label="AllPlayers"];
    3475 -> 3483;
    3483[label=")"];
    3475 -> 3484;
    3484 [label="Statement(Statement { syntax: 3484, statement: Some(3485), semicolon: None })"];
    3484 -> 3485;
    3485 [label="Block(Block { syntax: 3485, lbrace: Some(3486), statements: [3487], rbrace: Some(3502) })"];
    3485 -> 3486;
    3486[label="{"];
    3485 -> 3487;
    3487 [label="Statement(Statement { syntax: 3487, statement: Some(3488), semicolon: Some(3501) })"];
    3487 -> 3488;
    3488 [label="Expr"];
    3488 -> 3491;
    3491 [label="FunctionCall(FunctionCall { syntax: 3491, lhs: Some(3489), lparen: Some(3492), args: [(3493, Some(3496)), (3497, None)], rparen: Some(3500) })"];
    3491 -> 3489;
    3489 [label="Identifier"];
    3489 -> 3490;
    3490[label="UISetPlayerSurvivedPosition"];
    3491 -> 3492;
    3492[label="("];
    3491 -> 3493;
    3493 [label="Expr"];
    3493 -> 3494;
    3494 [label="Identifier"];
    3494 -> 3495;
    3495[label="Player"];
    3491 -> 3496;
    3496[label=","];
    3491 -> 3497;
    3497 [label="Expr"];
    3497 -> 3498;
    3498 [label="Literal"];
    3498 -> 3499;
    3499[label="0"];
    3491 -> 3500;
    3500[label=")"];
    3487 -> 3501;
    3501[label=";"];
    3485 -> 3502;
    3502[label="}"];
    2786 -> 3503;
    3503 [label="Statement(Statement { syntax: 3503, statement: Some(3504), semicolon: None })"];
    3503 -> 3504;
    3504 [label="LabelCall(LabelCall { syntax: 3504, start: Some(3505), name: Some(3506), end: Some(3507) })"];
    3504 -> 3505;
    3505[label="---"];
    3504 -> 3506;
    3506[label="InitializeObjects"];
    3504 -> 3507;
    3507[label="---"];
    2786 -> 3508;
    3508 [label="Statement(Statement { syntax: 3508, statement: Some(3509), semicolon: Some(3523) })"];
    3508 -> 3509;
    3509 [label="Expr"];
    3509 -> 3517;
    3517 [label="FunctionCall(FunctionCall { syntax: 3517, lhs: Some(3512), lparen: Some(3518), args: [(3519, None)], rparen: Some(3522) })"];
    3517 -> 3512;
    3512 [label="BinaryOp(BinaryOp { syntax: 3512, lhs: Some(3510), operator: Some(3513), rhs: Some(3514) })"];
    3512 -> 3510;
    3510 [label="Identifier"];
    3510 -> 3511;
    3511[label="Layers"];
    3512 -> 3513;
    3513[label="::"];
    3512 -> 3514;
    3514 [label="Expr"];
    3514 -> 3515;
    3515 [label="Identifier"];
    3515 -> 3516;
    3516[label="Attach"];
    3517 -> 3518;
    3518[label="("];
    3517 -> 3519;
    3519 [label="Expr"];
    3519 -> 3520;
    3520 [label="Literal"];
    3520 -> 3521;
    3521[label="\"HungerGames:Interface\""];
    3517 -> 3522;
    3522[label=")"];
    3508 -> 3523;
    3523[label=";"];
    2786 -> 3524;
    3524 [label="Statement(Statement { syntax: 3524, statement: Some(3538), semicolon: Some(3553) })"];
    3524 -> 3525;
    3525 [label="Expr"];
    3525 -> 3528;
    3528 [label="BinaryOp(BinaryOp { syntax: 3528, lhs: Some(3526), operator: Some(3529), rhs: Some(3530) })"];
    3528 -> 3526;
    3526 [label="Identifier"];
    3526 -> 3527;
    3527[label="UIManager"];
    3528 -> 3529;
    3529[label="."];
    3528 -> 3530;
    3530 [label="Expr"];
    3530 -> 3533;
    3533 [label="BinaryOp(BinaryOp { syntax: 3533, lhs: Some(3531), operator: Some(3534), rhs: Some(3535) })"];
    3533 -> 3531;
    3531 [label="Identifier"];
    3531 -> 3532;
    3532[label="UIAll"];
    3533 -> 3534;
    3534[label="."];
    3533 -> 3535;
    3535 [label="Expr"];
    3535 -> 3536;
    3536 [label="Identifier"];
    3536 -> 3537;
    3537[label="UISequence"];
    3524 -> 3538;
    3538 [label="Assignment(Assignment { syntax: 3538, lvalue: Some(3525), operator: Some(3539), rvalue: Some(3540) })"];
    3538 -> 3539;
    3539[label="="];
    3538 -> 3540;
    3540 [label="Expr"];
    3540 -> 3543;
    3543 [label="BinaryOp(BinaryOp { syntax: 3543, lhs: Some(3541), operator: Some(3544), rhs: Some(3545) })"];
    3543 -> 3541;
    3541 [label="Identifier"];
    3541 -> 3542;
    3542[label="CUIConfig"];
    3543 -> 3544;
    3544[label="::"];
    3543 -> 3545;
    3545 [label="Expr"];
    3545 -> 3548;
    3548 [label="BinaryOp(BinaryOp { syntax: 3548, lhs: Some(3546), operator: Some(3549), rhs: Some(3550) })"];
    3548 -> 3546;
    3546 [label="Identifier"];
    3546 -> 3547;
    3547[label="EUISequence"];
    3548 -> 3549;
    3549[label="::"];
    3548 -> 3550;
    3550 [label="Expr"];
    3550 -> 3551;
    3551 [label="Identifier"];
    3551 -> 3552;
    3552[label="EndRound"];
    3524 -> 3553;
    3553[label=";"];
    2786 -> 3554;
    3554 [label="Statement(Statement { syntax: 3554, statement: Some(3558), semicolon: Some(3573) })"];
    3554 -> 3555;
    3555 [label="Expr"];
    3555 -> 3556;
    3556 [label="Identifier"];
    3556 -> 3557;
    3557[label="StartTime"];
    3554 -> 3558;
    3558 [label="Assignment(Assignment { syntax: 3558, lvalue: Some(3555), operator: Some(3559), rvalue: Some(3560) })"];
    3558 -> 3559;
    3559[label="="];
    3558 -> 3560;
    3560 [label="Expr"];
    3560 -> 3563;
    3563 [label="BinaryOp(BinaryOp { syntax: 3563, lhs: Some(3561), operator: Some(3564), rhs: Some(3565) })"];
    3563 -> 3561;
    3561 [label="Identifier"];
    3561 -> 3562;
    3562[label="Now"];
    3563 -> 3564;
    3564[label="+"];
    3563 -> 3565;
    3565 [label="Expr"];
    3565 -> 3568;
    3568 [label="BinaryOp(BinaryOp { syntax: 3568, lhs: Some(3566), operator: Some(3569), rhs: Some(3570) })"];
    3568 -> 3566;
    3566 [label="Identifier"];
    3566 -> 3567;
    3567[label="C_StartCountdownDuration"];
    3568 -> 3569;
    3569[label="+"];
    3568 -> 3570;
    3570 [label="Expr"];
    3570 -> 3571;
    3571 [label="Literal"];
    3571 -> 3572;
    3572[label="1000"];
    3554 -> 3573;
    3573[label=";"];
    2786 -> 3574;
    3574 [label="Statement(Statement { syntax: 3574, statement: Some(3575), semicolon: Some(3584) })"];
    3574 -> 3575;
    3575 [label="Expr"];
    3575 -> 3578;
    3578 [label="FunctionCall(FunctionCall { syntax: 3578, lhs: Some(3576), lparen: Some(3579), args: [(3580, None)], rparen: Some(3583) })"];
    3578 -> 3576;
    3576 [label="Identifier"];
    3576 -> 3577;
    3577[label="UISetStartTime"];
    3578 -> 3579;
    3579[label="("];
    3578 -> 3580;
    3580 [label="Expr"];
    3580 -> 3581;
    3581 [label="Identifier"];
    3581 -> 3582;
    3582[label="StartTime"];
    3578 -> 3583;
    3583[label=")"];
    3574 -> 3584;
    3584[label=";"];
    2786 -> 3585;
    3585 [label="Statement(Statement { syntax: 3585, statement: Some(3586), semicolon: Some(3604) })"];
    3585 -> 3586;
    3586 [label="Expr"];
    3586 -> 3594;
    3594 [label="FunctionCall(FunctionCall { syntax: 3594, lhs: Some(3589), lparen: Some(3595), args: [(3596, Some(3599)), (3600, None)], rparen: Some(3603) })"];
    3594 -> 3589;
    3589 [label="BinaryOp(BinaryOp { syntax: 3589, lhs: Some(3587), operator: Some(3590), rhs: Some(3591) })"];
    3589 -> 3587;
    3587 [label="Identifier"];
    3587 -> 3588;
    3588[label="StoragePlayer"];
    3589 -> 3590;
    3590[label="::"];
    3589 -> 3591;
    3591 [label="Expr"];
    3591 -> 3592;
    3592 [label="Identifier"];
    3592 -> 3593;
    3593[label="SetCountdown"];
    3594 -> 3595;
    3595[label="("];
    3594 -> 3596;
    3596 [label="Expr"];
    3596 -> 3597;
    3597 [label="Identifier"];
    3597 -> 3598;
    3598[label="StartTime"];
    3594 -> 3599;
    3599[label=","];
    3594 -> 3600;
    3600 [label="Expr"];
    3600 -> 3601;
    3601 [label="Literal"];
    3601 -> 3602;
    3602[label="10000"];
    3594 -> 3603;
    3603[label=")"];
    3585 -> 3604;
    3604[label=";"];
    2786 -> 3605;
    3605 [label="Statement(Statement { syntax: 3605, statement: Some(3606), semicolon: None })"];
    3605 -> 3606;
    3606 [label="If(If { syntax: 3606, if_: Some(3607), lparen: Some(3608), condition: Some(3609), rparen: Some(3617), body: Some(3618), else_: Some(3641) })"];
    3606 -> 3607;
    3607[label="if"];
    3606 -> 3608;
    3608[label="("];
    3606 -> 3609;
    3609 [label="Expr"];
    3609 -> 3612;
    3612 [label="BinaryOp(BinaryOp { syntax: 3612, lhs: Some(3610), operator: Some(3613), rhs: Some(3614) })"];
    3612 -> 3610;
    3610 [label="Identifier"];
    3610 -> 3611;
    3611[label="S_OffZoneActivationTime"];
    3612 -> 3613;
    3613[label="<="];
    3612 -> 3614;
    3614 [label="Expr"];
    3614 -> 3615;
    3615 [label="Literal"];
    3615 -> 3616;
    3616[label="0"];
    3606 -> 3617;
    3617[label=")"];
    3606 -> 3618;
    3618 [label="Statement(Statement { syntax: 3618, statement: Some(3632), semicolon: Some(3640) })"];
    3618 -> 3619;
    3619 [label="Expr"];
    3619 -> 3622;
    3622 [label="BinaryOp(BinaryOp { syntax: 3622, lhs: Some(3620), operator: Some(3623), rhs: Some(3624) })"];
    3622 -> 3620;
    3620 [label="Identifier"];
    3620 -> 3621;
    3621[label="UIManager"];
    3622 -> 3623;
    3623[label="."];
    3622 -> 3624;
    3624 [label="Expr"];
    3624 -> 3627;
    3627 [label="BinaryOp(BinaryOp { syntax: 3627, lhs: Some(3625), operator: Some(3628), rhs: Some(3629) })"];
    3627 -> 3625;
    3625 [label="Identifier"];
    3625 -> 3626;
    3626[label="UIAll"];
    3627 -> 3628;
    3628[label="."];
    3627 -> 3629;
    3629 [label="Expr"];
    3629 -> 3630;
    3630 [label="Identifier"];
    3630 -> 3631;
    3631[label="CountdownEndTime"];
    3618 -> 3632;
    3632 [label="Assignment(Assignment { syntax: 3632, lvalue: Some(3619), operator: Some(3633), rvalue: Some(3634) })"];
    3632 -> 3633;
    3633[label="="];
    3632 -> 3634;
    3634 [label="Expr"];
    3634 -> 3635;
    3635 [label="UnOp(UnOp { syntax: 3635, operator: Some(3636), operand: Some(3637) })"];
    3635 -> 3636;
    3636[label="-"];
    3635 -> 3637;
    3637 [label="Expr"];
    3637 -> 3638;
    3638 [label="Literal"];
    3638 -> 3639;
    3639[label="1"];
    3618 -> 3640;
    3640[label=";"];
    3606 -> 3641;
    3641 [label="Else(Else { syntax: 3641, else_: Some(3642), if_: None, body: Some(3643) })"];
    3641 -> 3642;
    3642[label="else"];
    3641 -> 3643;
    3643 [label="Statement(Statement { syntax: 3643, statement: Some(3657), semicolon: Some(3672) })"];
    3643 -> 3644;
    3644 [label="Expr"];
    3644 -> 3647;
    3647 [label="BinaryOp(BinaryOp { syntax: 3647, lhs: Some(3645), operator: Some(3648), rhs: Some(3649) })"];
    3647 -> 3645;
    3645 [label="Identifier"];
    3645 -> 3646;
    3646[label="UIManager"];
    3647 -> 3648;
    3648[label="."];
    3647 -> 3649;
    3649 [label="Expr"];
    3649 -> 3652;
    3652 [label="BinaryOp(BinaryOp { syntax: 3652, lhs: Some(3650), operator: Some(3653), rhs: Some(3654) })"];
    3652 -> 3650;
    3650 [label="Identifier"];
    3650 -> 3651;
    3651[label="UIAll"];
    3652 -> 3653;
    3653[label="."];
    3652 -> 3654;
    3654 [label="Expr"];
    3654 -> 3655;
    3655 [label="Identifier"];
    3655 -> 3656;
    3656[label="CountdownEndTime"];
    3643 -> 3657;
    3657 [label="Assignment(Assignment { syntax: 3657, lvalue: Some(3644), operator: Some(3658), rvalue: Some(3659) })"];
    3657 -> 3658;
    3658[label="="];
    3657 -> 3659;
    3659 [label="Expr"];
    3659 -> 3662;
    3662 [label="BinaryOp(BinaryOp { syntax: 3662, lhs: Some(3660), operator: Some(3663), rhs: Some(3664) })"];
    3662 -> 3660;
    3660 [label="Identifier"];
    3660 -> 3661;
    3661[label="StartTime"];
    3662 -> 3663;
    3663[label="+"];
    3662 -> 3664;
    3664 [label="Expr"];
    3664 -> 3667;
    3667 [label="BinaryOp(BinaryOp { syntax: 3667, lhs: Some(3665), operator: Some(3668), rhs: Some(3669) })"];
    3667 -> 3665;
    3665 [label="Identifier"];
    3665 -> 3666;
    3666[label="S_OffZoneActivationTime"];
    3667 -> 3668;
    3668[label="*"];
    3667 -> 3669;
    3669 [label="Expr"];
    3669 -> 3670;
    3670 [label="Literal"];
    3670 -> 3671;
    3671[label="1000"];
    3643 -> 3672;
    3672[label=";"];
    2786 -> 3673;
    3673 [label="Statement(Statement { syntax: 3673, statement: Some(3674), semicolon: Some(3688) })"];
    3673 -> 3674;
    3674 [label="Expr"];
    3674 -> 3682;
    3682 [label="FunctionCall(FunctionCall { syntax: 3682, lhs: Some(3677), lparen: Some(3683), args: [(3684, None)], rparen: Some(3687) })"];
    3682 -> 3677;
    3677 [label="BinaryOp(BinaryOp { syntax: 3677, lhs: Some(3675), operator: Some(3678), rhs: Some(3679) })"];
    3677 -> 3675;
    3675 [label="Identifier"];
    3675 -> 3676;
    3676[label="Layers"];
    3677 -> 3678;
    3678[label="::"];
    3677 -> 3679;
    3679 [label="Expr"];
    3679 -> 3680;
    3680 [label="Identifier"];
    3680 -> 3681;
    3681[label="Attach"];
    3682 -> 3683;
    3683[label="("];
    3682 -> 3684;
    3684 [label="Expr"];
    3684 -> 3685;
    3685 [label="Literal"];
    3685 -> 3686;
    3686[label="\"HungerGames:Statistics\""];
    3682 -> 3687;
    3687[label=")"];
    3673 -> 3688;
    3688[label=";"];
    2786 -> 3689;
    3689 [label="Statement(Statement { syntax: 3689, statement: Some(3690), semicolon: Some(3710) })"];
    3689 -> 3690;
    3690 [label="Expr"];
    3690 -> 3698;
    3698 [label="FunctionCall(FunctionCall { syntax: 3698, lhs: Some(3693), lparen: Some(3699), args: [(3700, None)], rparen: Some(3709) })"];
    3698 -> 3693;
    3693 [label="BinaryOp(BinaryOp { syntax: 3693, lhs: Some(3691), operator: Some(3694), rhs: Some(3695) })"];
    3693 -> 3691;
    3691 [label="Identifier"];
    3691 -> 3692;
    3692[label="ST2"];
    3693 -> 3694;
    3694[label="::"];
    3693 -> 3695;
    3695 [label="Expr"];
    3695 -> 3696;
    3696 [label="Identifier"];
    3696 -> 3697;
    3697[label="SetPos"];
    3698 -> 3699;
    3699[label="("];
    3698 -> 3700;
    3700 [label="Expr"];
    3700 -> 3703;
    3703 [label="ArrayAccess(ArrayAccess { syntax: 3703, lhs: Some(3701), lsquare: Some(3704), index: Some(3705), rsquare: Some(3708) })"];
    3703 -> 3701;
    3701 [label="Identifier"];
    3701 -> 3702;
    3702[label="C_ScoresTablePosition"];
    3703 -> 3704;
    3704[label="["];
    3703 -> 3705;
    3705 [label="Expr"];
    3705 -> 3706;
    3706 [label="Literal"];
    3706 -> 3707;
    3707[label="True"];
    3703 -> 3708;
    3708[label="]"];
    3698 -> 3709;
    3709[label=")"];
    3689 -> 3710;
    3710[label=";"];
    2786 -> 3711;
    3711 [label="Statement(Statement { syntax: 3711, statement: Some(3712), semicolon: Some(3726) })"];
    3711 -> 3712;
    3712 [label="Expr"];
    3712 -> 3720;
    3720 [label="FunctionCall(FunctionCall { syntax: 3720, lhs: Some(3715), lparen: Some(3721), args: [(3722, None)], rparen: Some(3725) })"];
    3720 -> 3715;
    3715 [label="BinaryOp(BinaryOp { syntax: 3715, lhs: Some(3713), operator: Some(3716), rhs: Some(3717) })"];
    3715 -> 3713;
    3713 [label="Identifier"];
    3713 -> 3714;
    3714[label="ST2"];
    3715 -> 3716;
    3716[label="::"];
    3715 -> 3717;
    3717 [label="Expr"];
    3717 -> 3718;
    3718 [label="Identifier"];
    3718 -> 3719;
    3719[label="Build"];
    3720 -> 3721;
    3721[label="("];
    3720 -> 3722;
    3722 [label="Expr"];
    3722 -> 3723;
    3723 [label="Literal"];
    3723 -> 3724;
    3724[label="\"SM\""];
    3720 -> 3725;
    3725[label=")"];
    3711 -> 3726;
    3726[label=";"];
    2786 -> 3727;
    3727[label="***"];
    0 -> 3728;
    3728 [label="LabelImpl(LabelImpl { syntax: 3728, stars1: Some(3729), name: Some(3730), stars2: Some(3731), stars3: Some(3732), statements: [3733, 3746, 3767, 3777, 3788], stars4: Some(3830) })"];
    3728 -> 3729;
    3729[label="***"];
    3728 -> 3730;
    3730[label="Match_StartPlayLoop"];
    3728 -> 3731;
    3731[label="***"];
    3728 -> 3732;
    3732[label="***"];
    3728 -> 3733;
    3733 [label="Statement(Statement { syntax: 3733, statement: Some(3734), semicolon: Some(3745) })"];
    3733 -> 3734;
    3734 [label="Expr"];
    3734 -> 3742;
    3742 [label="FunctionCall(FunctionCall { syntax: 3742, lhs: Some(3737), lparen: Some(3743), args: [], rparen: Some(3744) })"];
    3742 -> 3737;
    3737 [label="BinaryOp(BinaryOp { syntax: 3737, lhs: Some(3735), operator: Some(3738), rhs: Some(3739) })"];
    3737 -> 3735;
    3735 [label="Identifier"];
    3735 -> 3736;
    3736[label="MiniMap"];
    3737 -> 3738;
    3738[label="::"];
    3737 -> 3739;
    3739 [label="Expr"];
    3739 -> 3740;
    3740 [label="Identifier"];
    3740 -> 3741;
    3741[label="Hide"];
    3742 -> 3743;
    3743[label="("];
    3742 -> 3744;
    3744[label=")"];
    3733 -> 3745;
    3745[label=";"];
    3728 -> 3746;
    3746 [label="Statement(Statement { syntax: 3746, statement: Some(3747), semicolon: None })"];
    3746 -> 3747;
    3747 [label="Foreach(Foreach { syntax: 3747, foreach: Some(3748), lparen: Some(3749), name1: Some(3750), arrow: None, name2: None, in_: Some(3751), value: Some(3752), rparen: Some(3755), body: Some(3756) })"];
    3747 -> 3748;
    3748[label="foreach"];
    3747 -> 3749;
    3749[label="("];
    3747 -> 3750;
    3750[label="Player"];
    3747 -> 3751;
    3751[label="in"];
    3747 -> 3752;
    3752 [label="Expr"];
    3752 -> 3753;
    3753 [label="Identifier"];
    3753 -> 3754;
    3754[label="Players"];
    3747 -> 3755;
    3755[label=")"];
    3747 -> 3756;
    3756 [label="Statement(Statement { syntax: 3756, statement: Some(3757), semicolon: Some(3766) })"];
    3756 -> 3757;
    3757 [label="Expr"];
    3757 -> 3760;
    3760 [label="FunctionCall(FunctionCall { syntax: 3760, lhs: Some(3758), lparen: Some(3761), args: [(3762, None)], rparen: Some(3765) })"];
    3760 -> 3758;
    3758 [label="Identifier"];
    3758 -> 3759;
    3759[label="HG_SpawnPlayer"];
    3760 -> 3761;
    3761[label="("];
    3760 -> 3762;
    3762 [label="Expr"];
    3762 -> 3763;
    3763 [label="Identifier"];
    3763 -> 3764;
    3764[label="Player"];
    3760 -> 3765;
    3765[label=")"];
    3756 -> 3766;
    3766[label=";"];
    3728 -> 3767;
    3767 [label="Statement(Statement { syntax: 3767, statement: Some(3771), semicolon: Some(3776) })"];
    3767 -> 3768;
    3768 [label="Expr"];
    3768 -> 3769;
    3769 [label="Identifier"];
    3769 -> 3770;
    3770[label="PrevPlayersNbAlive"];
    3767 -> 3771;
    3771 [label="Assignment(Assignment { syntax: 3771, lvalue: Some(3768), operator: Some(3772), rvalue: Some(3773) })"];
    3771 -> 3772;
    3772[label="="];
    3771 -> 3773;
    3773 [label="Expr"];
    3773 -> 3774;
    3774 [label="Identifier"];
    3774 -> 3775;
    3775[label="PlayersNbAlive"];
    3767 -> 3776;
    3776[label=";"];
    3728 -> 3777;
    3777 [label="Statement(Statement { syntax: 3777, statement: Some(3778), semicolon: Some(3787) })"];
    3777 -> 3778;
    3778 [label="Expr"];
    3778 -> 3781;
    3781 [label="FunctionCall(FunctionCall { syntax: 3781, lhs: Some(3779), lparen: Some(3782), args: [(3783, None)], rparen: Some(3786) })"];
    3781 -> 3779;
    3779 [label="Identifier"];
    3779 -> 3780;
    3780[label="UISetNbPlayersAlive"];
    3781 -> 3782;
    3782[label="("];
    3781 -> 3783;
    3783 [label="Expr"];
    3783 -> 3784;
    3784 [label="Identifier"];
    3784 -> 3785;
    3785[label="PlayersNbAlive"];
    3781 -> 3786;
    3786[label=")"];
    3777 -> 3787;
    3787[label=";"];
    3728 -> 3788;
    3788 [label="Statement(Statement { syntax: 3788, statement: Some(3789), semicolon: Some(3829) })"];
    3788 -> 3789;
    3789 [label="Expr"];
    3789 -> 3797;
    3797 [label="FunctionCall(FunctionCall { syntax: 3797, lhs: Some(3792), lparen: Some(3798), args: [(3799, None)], rparen: Some(3828) })"];
    3797 -> 3792;
    3792 [label="BinaryOp(BinaryOp { syntax: 3792, lhs: Some(3790), operator: Some(3793), rhs: Some(3794) })"];
    3792 -> 3790;
    3790 [label="Identifier"];
    3790 -> 3791;
    3791[label="ST2"];
    3792 -> 3793;
    3793[label="::"];
    3792 -> 3794;
    3794 [label="Expr"];
    3794 -> 3795;
    3795 [label="Identifier"];
    3795 -> 3796;
    3796[label="SetFooterText"];
    3797 -> 3798;
    3798[label="("];
    3797 -> 3799;
    3799 [label="Expr"];
    3799 -> 3807;
    3807 [label="FunctionCall(FunctionCall { syntax: 3807, lhs: Some(3802), lparen: Some(3808), args: [(3809, Some(3817)), (3818, None)], rparen: Some(3827) })"];
    3807 -> 3802;
    3802 [label="BinaryOp(BinaryOp { syntax: 3802, lhs: Some(3800), operator: Some(3803), rhs: Some(3804) })"];
    3802 -> 3800;
    3800 [label="Identifier"];
    3800 -> 3801;
    3801[label="TL"];
    3802 -> 3803;
    3803[label="::"];
    3802 -> 3804;
    3804 [label="Expr"];
    3804 -> 3805;
    3805 [label="Identifier"];
    3805 -> 3806;
    3806[label="Compose"];
    3807 -> 3808;
    3808[label="("];
    3807 -> 3809;
    3809 [label="Expr"];
    3809 -> 3812;
    3812 [label="BinaryOp(BinaryOp { syntax: 3812, lhs: Some(3810), operator: Some(3813), rhs: Some(3814) })"];
    3812 -> 3810;
    3810 [label="Literal"];
    3810 -> 3811;
    3811[label="\"%1 \""];
    3812 -> 3813;
    3813[label="^"];
    3812 -> 3814;
    3814 [label="Expr"];
    3814 -> 3815;
    3815 [label="Identifier"];
    3815 -> 3816;
    3816[label="PlayersNbAlive"];
    3807 -> 3817;
    3817[label=","];
    3807 -> 3818;
    3818 [label="Expr"];
    3818 -> 3821;
    3821 [label="FunctionCall(FunctionCall { syntax: 3821, lhs: Some(3819), lparen: Some(3822), args: [(3823, None)], rparen: Some(3826) })"];
    3821 -> 3819;
    3819 [label="Identifier"];
    3819 -> 3820;
    3820[label="_"];
    3821 -> 3822;
    3822[label="("];
    3821 -> 3823;
    3823 [label="Expr"];
    3823 -> 3824;
    3824 [label="Literal"];
    3824 -> 3825;
    3825[label="\"Remaining players: \""];
    3821 -> 3826;
    3826[label=")"];
    3807 -> 3827;
    3827[label=")"];
    3797 -> 3828;
    3828[label=")"];
    3788 -> 3829;
    3829[label=";"];
    3728 -> 3830;
    3830[label="***"];
    0 -> 3831;
    3831 [label="LabelImpl(LabelImpl { syntax: 3831, stars1: Some(3832), name: Some(3833), stars2: Some(3834), stars3: Some(3835), statements: [3836, 3932], stars4: Some(4112) })"];
    3831 -> 3832;
    3832[label="***"];
    3831 -> 3833;
    3833[label="OnArmorEmpty"];
    3831 -> 3834;
    3834[label="***"];
    3831 -> 3835;
    3835[label="***"];
    3831 -> 3836;
    3836 [label="Statement(Statement { syntax: 3836, statement: Some(3837), semicolon: None })"];
    3836 -> 3837;
    3837 [label="If(If { syntax: 3837, if_: Some(3838), lparen: Some(3839), condition: Some(3840), rparen: Some(3866), body: Some(3867), else_: None })"];
    3837 -> 3838;
    3838[label="if"];
    3837 -> 3839;
    3839[label="("];
    3837 -> 3840;
    3840 [label="Expr"];
    3840 -> 3856;
    3856 [label="BinaryOp(BinaryOp { syntax: 3856, lhs: Some(3841), operator: Some(3857), rhs: Some(3858) })"];
    3856 -> 3841;
    3841 [label="UnOp(UnOp { syntax: 3841, operator: Some(3842), operand: Some(3843) })"];
    3841 -> 3842;
    3842[label="!"];
    3841 -> 3843;
    3843 [label="Expr"];
    3843 -> 3846;
    3846 [label="BinaryOp(BinaryOp { syntax: 3846, lhs: Some(3844), operator: Some(3847), rhs: Some(3848) })"];
    3846 -> 3844;
    3844 [label="Identifier"];
    3844 -> 3845;
    3845[label="Event"];
    3846 -> 3847;
    3847[label="."];
    3846 -> 3848;
    3848 [label="Expr"];
    3848 -> 3851;
    3851 [label="BinaryOp(BinaryOp { syntax: 3851, lhs: Some(3849), operator: Some(3852), rhs: Some(3853) })"];
    3851 -> 3849;
    3849 [label="Identifier"];
    3849 -> 3850;
    3850[label="Victim"];
    3851 -> 3852;
    3852[label="."];
    3851 -> 3853;
    3853 [label="Expr"];
    3853 -> 3854;
    3854 [label="Identifier"];
    3854 -> 3855;
    3855[label="IsBot"];
    3856 -> 3857;
    3857[label="&&"];
    3856 -> 3858;
    3858 [label="Expr"];
    3858 -> 3861;
    3861 [label="BinaryOp(BinaryOp { syntax: 3861, lhs: Some(3859), operator: Some(3862), rhs: Some(3863) })"];
    3861 -> 3859;
    3859 [label="Identifier"];
    3859 -> 3860;
    3860[label="PlayersNbAlive"];
    3861 -> 3862;
    3862[label=">"];
    3861 -> 3863;
    3863 [label="Expr"];
    3863 -> 3864;
    3864 [label="Literal"];
    3864 -> 3865;
    3865[label="2"];
    3837 -> 3866;
    3866[label=")"];
    3837 -> 3867;
    3867 [label="Statement(Statement { syntax: 3867, statement: Some(3868), semicolon: None })"];
    3867 -> 3868;
    3868 [label="Block(Block { syntax: 3868, lbrace: Some(3869), statements: [3870, 3890], rbrace: Some(3931) })"];
    3868 -> 3869;
    3869[label="{"];
    3868 -> 3870;
    3870 [label="Statement(Statement { syntax: 3870, statement: Some(3871), semicolon: Some(3889) })"];
    3870 -> 3871;
    3871 [label="Expr"];
    3871 -> 3874;
    3874 [label="FunctionCall(FunctionCall { syntax: 3874, lhs: Some(3872), lparen: Some(3875), args: [(3876, Some(3884)), (3885, None)], rparen: Some(3888) })"];
    3874 -> 3872;
    3872 [label="Identifier"];
    3872 -> 3873;
    3873[label="DropPlayerObjects"];
    3874 -> 3875;
    3875[label="("];
    3874 -> 3876;
    3876 [label="Expr"];
    3876 -> 3879;
    3879 [label="BinaryOp(BinaryOp { syntax: 3879, lhs: Some(3877), operator: Some(3880), rhs: Some(3881) })"];
    3879 -> 3877;
    3877 [label="Identifier"];
    3877 -> 3878;
    3878[label="Event"];
    3879 -> 3880;
    3880[label="."];
    3879 -> 3881;
    3881 [label="Expr"];
    3881 -> 3882;
    3882 [label="Identifier"];
    3882 -> 3883;
    3883[label="Victim"];
    3874 -> 3884;
    3884[label=","];
    3874 -> 3885;
    3885 [label="Expr"];
    3885 -> 3886;
    3886 [label="Identifier"];
    3886 -> 3887;
    3887[label="S_ObjectsDroppingRatio"];
    3874 -> 3888;
    3888[label=")"];
    3870 -> 3889;
    3889[label=";"];
    3868 -> 3890;
    3890 [label="Statement(Statement { syntax: 3890, statement: Some(3891), semicolon: None })"];
    3890 -> 3891;
    3891 [label="If(If { syntax: 3891, if_: Some(3892), lparen: Some(3893), condition: Some(3894), rparen: Some(3905), body: Some(3906), else_: None })"];
    3891 -> 3892;
    3892[label="if"];
    3891 -> 3893;
    3893[label="("];
    3891 -> 3894;
    3894 [label="Expr"];
    3894 -> 3902;
    3902 [label="FunctionCall(FunctionCall { syntax: 3902, lhs: Some(3897), lparen: Some(3903), args: [], rparen: Some(3904) })"];
    3902 -> 3897;
    3897 [label="BinaryOp(BinaryOp { syntax: 3897, lhs: Some(3895), operator: Some(3898), rhs: Some(3899) })"];
    3897 -> 3895;
    3895 [label="Identifier"];
    3895 -> 3896;
    3896[label="MMCommon"];
    3897 -> 3898;
    3898[label="::"];
    3897 -> 3899;
    3899 [label="Expr"];
    3899 -> 3900;
    3900 [label="Identifier"];
    3900 -> 3901;
    3901[label="IsMatchServer"];
    3902 -> 3903;
    3903[label="("];
    3902 -> 3904;
    3904[label=")"];
    3891 -> 3905;
    3905[label=")"];
    3891 -> 3906;
    3906 [label="Statement(Statement { syntax: 3906, statement: Some(3907), semicolon: Some(3930) })"];
    3906 -> 3907;
    3907 [label="Expr"];
    3907 -> 3910;
    3910 [label="FunctionCall(FunctionCall { syntax: 3910, lhs: Some(3908), lparen: Some(3911), args: [(3912, Some(3920)), (3921, None)], rparen: Some(3929) })"];
    3910 -> 3908;
    3908 [label="Identifier"];
    3908 -> 3909;
    3909[label="UISetPlayerSurvivedPosition"];
    3910 -> 3911;
    3911[label="("];
    3910 -> 3912;
    3912 [label="Expr"];
    3912 -> 3915;
    3915 [label="BinaryOp(BinaryOp { syntax: 3915, lhs: Some(3913), operator: Some(3916), rhs: Some(3917) })"];
    3915 -> 3913;
    3913 [label="Identifier"];
    3913 -> 3914;
    3914[label="Event"];
    3915 -> 3916;
    3916[label="."];
    3915 -> 3917;
    3917 [label="Expr"];
    3917 -> 3918;
    3918 [label="Identifier"];
    3918 -> 3919;
    3919[label="Victim"];
    3910 -> 3920;
    3920[label=","];
    3910 -> 3921;
    3921 [label="Expr"];
    3921 -> 3924;
    3924 [label="BinaryOp(BinaryOp { syntax: 3924, lhs: Some(3922), operator: Some(3925), rhs: Some(3926) })"];
    3924 -> 3922;
    3922 [label="Identifier"];
    3922 -> 3923;
    3923[label="PlayersNbAlive"];
    3924 -> 3925;
    3925[label="+"];
    3924 -> 3926;
    3926 [label="Expr"];
    3926 -> 3927;
    3927 [label="Literal"];
    3927 -> 3928;
    3928[label="1"];
    3910 -> 3929;
    3929[label=")"];
    3906 -> 3930;
    3930[label=";"];
    3868 -> 3931;
    3931[label="}"];
    3831 -> 3932;
    3932 [label="Statement(Statement { syntax: 3932, statement: Some(3933), semicolon: None })"];
    3932 -> 3933;
    3933 [label="If(If { syntax: 3933, if_: Some(3934), lparen: Some(3935), condition: Some(3936), rparen: Some(3999), body: Some(4000), else_: None })"];
    3933 -> 3934;
    3934[label="if"];
    3933 -> 3935;
    3935[label="("];
    3933 -> 3936;
    3936 [label="Expr"];
    3936 -> 3994;
    3994 [label="BinaryOp(BinaryOp { syntax: 3994, lhs: Some(3984), operator: Some(3995), rhs: Some(3996) })"];
    3994 -> 3984;
    3984 [label="FunctionCall(FunctionCall { syntax: 3984, lhs: Some(3949), lparen: Some(3985), args: [(3986, Some(3989)), (3990, None)], rparen: Some(3993) })"];
    3984 -> 3949;
    3949 [label="BinaryOp(BinaryOp { syntax: 3949, lhs: Some(3939), operator: Some(3950), rhs: Some(3951) })"];
    3949 -> 3939;
    3939 [label="BinaryOp(BinaryOp { syntax: 3939, lhs: Some(3937), operator: Some(3940), rhs: Some(3941) })"];
    3939 -> 3937;
    3937 [label="Identifier"];
    3937 -> 3938;
    3938[label="Event"];
    3939 -> 3940;
    3940[label="."];
    3939 -> 3941;
    3941 [label="Expr"];
    3941 -> 3944;
    3944 [label="BinaryOp(BinaryOp { syntax: 3944, lhs: Some(3942), operator: Some(3945), rhs: Some(3946) })"];
    3944 -> 3942;
    3942 [label="Identifier"];
    3942 -> 3943;
    3943[label="Victim"];
    3944 -> 3945;
    3945[label="."];
    3944 -> 3946;
    3946 [label="Expr"];
    3946 -> 3947;
    3947 [label="Identifier"];
    3947 -> 3948;
    3948[label="IsBot"];
    3949 -> 3950;
    3950[label="&&"];
    3949 -> 3951;
    3951 [label="Expr"];
    3951 -> 3964;
    3964 [label="BinaryOp(BinaryOp { syntax: 3964, lhs: Some(3959), operator: Some(3965), rhs: Some(3966) })"];
    3964 -> 3959;
    3959 [label="BinaryOp(BinaryOp { syntax: 3959, lhs: Some(3954), operator: Some(3960), rhs: Some(3961) })"];
    3959 -> 3954;
    3954 [label="BinaryOp(BinaryOp { syntax: 3954, lhs: Some(3952), operator: Some(3955), rhs: Some(3956) })"];
    3954 -> 3952;
    3952 [label="Identifier"];
    3952 -> 3953;
    3953[label="Event"];
    3954 -> 3955;
    3955[label="."];
    3954 -> 3956;
    3956 [label="Expr"];
    3956 -> 3957;
    3957 [label="Identifier"];
    3957 -> 3958;
    3958[label="Shooter"];
    3959 -> 3960;
    3960[label="!="];
    3959 -> 3961;
    3961 [label="Expr"];
    3961 -> 3962;
    3962 [label="Literal"];
    3962 -> 3963;
    3963[label="Null"];
    3964 -> 3965;
    3965[label="&&"];
    3964 -> 3966;
    3966 [label="Expr"];
    3966 -> 3974;
    3974 [label="BinaryOp(BinaryOp { syntax: 3974, lhs: Some(3969), operator: Some(3975), rhs: Some(3976) })"];
    3974 -> 3969;
    3969 [label="BinaryOp(BinaryOp { syntax: 3969, lhs: Some(3967), operator: Some(3970), rhs: Some(3971) })"];
    3969 -> 3967;
    3967 [label="Identifier"];
    3967 -> 3968;
    3968[label="C_ToadObjectDropChance"];
    3969 -> 3970;
    3970[label=">"];
    3969 -> 3971;
    3971 [label="Expr"];
    3971 -> 3972;
    3972 [label="Literal"];
    3972 -> 3973;
    3973[label="0"];
    3974 -> 3975;
    3975[label="&&"];
    3974 -> 3976;
    3976 [label="Expr"];
    3976 -> 3979;
    3979 [label="BinaryOp(BinaryOp { syntax: 3979, lhs: Some(3977), operator: Some(3980), rhs: Some(3981) })"];
    3979 -> 3977;
    3977 [label="Identifier"];
    3977 -> 3978;
    3978[label="ML"];
    3979 -> 3980;
    3980[label="::"];
    3979 -> 3981;
    3981 [label="Expr"];
    3981 -> 3982;
    3982 [label="Identifier"];
    3982 -> 3983;
    3983[label="Rand"];
    3984 -> 3985;
    3985[label="("];
    3984 -> 3986;
    3986 [label="Expr"];
    3986 -> 3987;
    3987 [label="Literal"];
    3987 -> 3988;
    3988[label="0."];
    3984 -> 3989;
    3989[label=","];
    3984 -> 3990;
    3990 [label="Expr"];
    3990 -> 3991;
    3991 [label="Literal"];
    3991 -> 3992;
    3992[label="1."];
    3984 -> 3993;
    3993[label=")"];
    3994 -> 3995;
    3995[label="<="];
    3994 -> 3996;
    3996 [label="Expr"];
    3996 -> 3997;
    3997 [label="Identifier"];
    3997 -> 3998;
    3998[label="C_ToadObjectDropChance"];
    3933 -> 3999;
    3999[label=")"];
    3933 -> 4000;
    4000 [label="Statement(Statement { syntax: 4000, statement: Some(4001), semicolon: None })"];
    4000 -> 4001;
    4001 [label="Block(Block { syntax: 4001, lbrace: Some(4002), statements: [4003, 4013, 4081], rbrace: Some(4111) })"];
    4001 -> 4002;
    4002[label="{"];
    4001 -> 4003;
    4003 [label="Statement(Statement { syntax: 4003, statement: Some(4004), semicolon: None })"];
    4003 -> 4004;
    4004 [label="VarDec(VarDec { syntax: 4004, declare: Some(4005), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4006), as_: None, alias: None, for_: None, target: None, assignment: Some(4008), value: Some(4009) })"];
    4004 -> 4005;
    4005[label="declare"];
    4004 -> 4006;
    4006 [label="Type(Type { syntax: 4006, basename: Some(4007), members: [], arrays: [] })"];
    4006 -> 4007;
    4007[label="NewObjectTag"];
    4004 -> 4008;
    4008[label="="];
    4004 -> 4009;
    4009 [label="Expr"];
    4009 -> 4010;
    4010 [label="Literal"];
    4010 -> 4011;
    4011[label="\"Charge\""];
    4004 -> 4012;
    4012[label=";"];
    4001 -> 4013;
    4013 [label="Statement(Statement { syntax: 4013, statement: Some(4014), semicolon: None })"];
    4013 -> 4014;
    4014 [label="If(If { syntax: 4014, if_: Some(4015), lparen: Some(4016), condition: Some(4017), rparen: Some(4070), body: Some(4071), else_: None })"];
    4014 -> 4015;
    4015[label="if"];
    4014 -> 4016;
    4016[label="("];
    4014 -> 4017;
    4017 [label="Expr"];
    4017 -> 4065;
    4065 [label="BinaryOp(BinaryOp { syntax: 4065, lhs: Some(4055), operator: Some(4066), rhs: Some(4067) })"];
    4065 -> 4055;
    4055 [label="FunctionCall(FunctionCall { syntax: 4055, lhs: Some(4045), lparen: Some(4056), args: [(4057, Some(4060)), (4061, None)], rparen: Some(4064) })"];
    4055 -> 4045;
    4045 [label="BinaryOp(BinaryOp { syntax: 4045, lhs: Some(4030), operator: Some(4046), rhs: Some(4047) })"];
    4045 -> 4030;
    4030 [label="BinaryOp(BinaryOp { syntax: 4030, lhs: Some(4020), operator: Some(4031), rhs: Some(4032) })"];
    4030 -> 4020;
    4020 [label="BinaryOp(BinaryOp { syntax: 4020, lhs: Some(4018), operator: Some(4021), rhs: Some(4022) })"];
    4020 -> 4018;
    4018 [label="Identifier"];
    4018 -> 4019;
    4019[label="Event"];
    4020 -> 4021;
    4021[label="."];
    4020 -> 4022;
    4022 [label="Expr"];
    4022 -> 4025;
    4025 [label="BinaryOp(BinaryOp { syntax: 4025, lhs: Some(4023), operator: Some(4026), rhs: Some(4027) })"];
    4025 -> 4023;
    4023 [label="Identifier"];
    4023 -> 4024;
    4024[label="Shooter"];
    4025 -> 4026;
    4026[label="."];
    4025 -> 4027;
    4027 [label="Expr"];
    4027 -> 4028;
    4028 [label="Identifier"];
    4028 -> 4029;
    4029[label="Armor"];
    4030 -> 4031;
    4031[label="<"];
    4030 -> 4032;
    4032 [label="Expr"];
    4032 -> 4035;
    4035 [label="BinaryOp(BinaryOp { syntax: 4035, lhs: Some(4033), operator: Some(4036), rhs: Some(4037) })"];
    4035 -> 4033;
    4033 [label="Identifier"];
    4033 -> 4034;
    4034[label="Event"];
    4035 -> 4036;
    4036[label="."];
    4035 -> 4037;
    4037 [label="Expr"];
    4037 -> 4040;
    4040 [label="BinaryOp(BinaryOp { syntax: 4040, lhs: Some(4038), operator: Some(4041), rhs: Some(4042) })"];
    4040 -> 4038;
    4038 [label="Identifier"];
    4038 -> 4039;
    4039[label="Shooter"];
    4040 -> 4041;
    4041[label="."];
    4040 -> 4042;
    4042 [label="Expr"];
    4042 -> 4043;
    4043 [label="Identifier"];
    4043 -> 4044;
    4044[label="ArmorMax"];
    4045 -> 4046;
    4046[label="&&"];
    4045 -> 4047;
    4047 [label="Expr"];
    4047 -> 4050;
    4050 [label="BinaryOp(BinaryOp { syntax: 4050, lhs: Some(4048), operator: Some(4051), rhs: Some(4052) })"];
    4050 -> 4048;
    4048 [label="Identifier"];
    4048 -> 4049;
    4049[label="ML"];
    4050 -> 4051;
    4051[label="::"];
    4050 -> 4052;
    4052 [label="Expr"];
    4052 -> 4053;
    4053 [label="Identifier"];
    4053 -> 4054;
    4054[label="Rand"];
    4055 -> 4056;
    4056[label="("];
    4055 -> 4057;
    4057 [label="Expr"];
    4057 -> 4058;
    4058 [label="Literal"];
    4058 -> 4059;
    4059[label="0."];
    4055 -> 4060;
    4060[label=","];
    4055 -> 4061;
    4061 [label="Expr"];
    4061 -> 4062;
    4062 [label="Literal"];
    4062 -> 4063;
    4063[label="1."];
    4055 -> 4064;
    4064[label=")"];
    4065 -> 4066;
    4066[label="<="];
    4065 -> 4067;
    4067 [label="Expr"];
    4067 -> 4068;
    4068 [label="Identifier"];
    4068 -> 4069;
    4069[label="C_ToadChanceForArmorDrop"];
    4014 -> 4070;
    4070[label=")"];
    4014 -> 4071;
    4071 [label="Statement(Statement { syntax: 4071, statement: Some(4075), semicolon: Some(4080) })"];
    4071 -> 4072;
    4072 [label="Expr"];
    4072 -> 4073;
    4073 [label="Identifier"];
    4073 -> 4074;
    4074[label="NewObjectTag"];
    4071 -> 4075;
    4075 [label="Assignment(Assignment { syntax: 4075, lvalue: Some(4072), operator: Some(4076), rvalue: Some(4077) })"];
    4075 -> 4076;
    4076[label="="];
    4075 -> 4077;
    4077 [label="Expr"];
    4077 -> 4078;
    4078 [label="Literal"];
    4078 -> 4079;
    4079[label="\"Armor\""];
    4071 -> 4080;
    4080[label=";"];
    4001 -> 4081;
    4081 [label="Statement(Statement { syntax: 4081, statement: Some(4082), semicolon: None })"];
    4081 -> 4082;
    4082 [label="VarDec(VarDec { syntax: 4082, declare: Some(4083), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4084), as_: None, alias: None, for_: None, target: None, assignment: Some(4086), value: Some(4087) })"];
    4082 -> 4083;
    4083[label="declare"];
    4082 -> 4084;
    4084 [label="Type(Type { syntax: 4084, basename: Some(4085), members: [], arrays: [] })"];
    4084 -> 4085;
    4085[label="Object"];
    4082 -> 4086;
    4086[label="="];
    4082 -> 4087;
    4087 [label="Expr"];
    4087 -> 4090;
    4090 [label="FunctionCall(FunctionCall { syntax: 4090, lhs: Some(4088), lparen: Some(4091), args: [(4092, Some(4105)), (4106, None)], rparen: Some(4109) })"];
    4090 -> 4088;
    4088 [label="Identifier"];
    4088 -> 4089;
    4089[label="SpawnObject"];
    4090 -> 4091;
    4091[label="("];
    4090 -> 4092;
    4092 [label="Expr"];
    4092 -> 4095;
    4095 [label="BinaryOp(BinaryOp { syntax: 4095, lhs: Some(4093), operator: Some(4096), rhs: Some(4097) })"];
    4095 -> 4093;
    4093 [label="Identifier"];
    4093 -> 4094;
    4094[label="Event"];
    4095 -> 4096;
    4096[label="."];
    4095 -> 4097;
    4097 [label="Expr"];
    4097 -> 4100;
    4100 [label="BinaryOp(BinaryOp { syntax: 4100, lhs: Some(4098), operator: Some(4101), rhs: Some(4102) })"];
    4100 -> 4098;
    4098 [label="Identifier"];
    4098 -> 4099;
    4099[label="Victim"];
    4100 -> 4101;
    4101[label="."];
    4100 -> 4102;
    4102 [label="Expr"];
    4102 -> 4103;
    4103 [label="Identifier"];
    4103 -> 4104;
    4104[label="Position"];
    4090 -> 4105;
    4105[label=","];
    4090 -> 4106;
    4106 [label="Expr"];
    4106 -> 4107;
    4107 [label="Identifier"];
    4107 -> 4108;
    4108[label="NewObjectTag"];
    4090 -> 4109;
    4109[label=")"];
    4082 -> 4110;
    4110[label=";"];
    4001 -> 4111;
    4111[label="}"];
    3831 -> 4112;
    4112[label="***"];
    0 -> 4113;
    4113 [label="LabelImpl(LabelImpl { syntax: 4113, stars1: Some(4114), name: Some(4115), stars2: Some(4116), stars3: Some(4117), statements: [4118, 4129, 4180, 4196, 4212, 4222, 4232, 4257, 4284], stars4: Some(4446) })"];
    4113 -> 4114;
    4114[label="***"];
    4113 -> 4115;
    4115[label="OnPlayerTouchesObject"];
    4113 -> 4116;
    4116[label="***"];
    4113 -> 4117;
    4117[label="***"];
    4113 -> 4118;
    4118 [label="Statement(Statement { syntax: 4118, statement: Some(4119), semicolon: Some(4128) })"];
    4118 -> 4119;
    4119 [label="Expr"];
    4119 -> 4122;
    4122 [label="FunctionCall(FunctionCall { syntax: 4122, lhs: Some(4120), lparen: Some(4123), args: [(4124, None)], rparen: Some(4127) })"];
    4122 -> 4120;
    4120 [label="Identifier"];
    4120 -> 4121;
    4121[label="Discard"];
    4122 -> 4123;
    4123[label="("];
    4122 -> 4124;
    4124 [label="Expr"];
    4124 -> 4125;
    4125 [label="Identifier"];
    4125 -> 4126;
    4126[label="Event"];
    4122 -> 4127;
    4127[label=")"];
    4118 -> 4128;
    4128[label=";"];
    4113 -> 4129;
    4129 [label="Statement(Statement { syntax: 4129, statement: Some(4130), semicolon: None })"];
    4129 -> 4130;
    4130 [label="If(If { syntax: 4130, if_: Some(4131), lparen: Some(4132), condition: Some(4133), rparen: Some(4175), body: Some(4176), else_: None })"];
    4130 -> 4131;
    4131[label="if"];
    4130 -> 4132;
    4132[label="("];
    4130 -> 4133;
    4133 [label="Expr"];
    4133 -> 4159;
    4159 [label="FunctionCall(FunctionCall { syntax: 4159, lhs: Some(4146), lparen: Some(4160), args: [(4161, None)], rparen: Some(4174) })"];
    4159 -> 4146;
    4146 [label="BinaryOp(BinaryOp { syntax: 4146, lhs: Some(4136), operator: Some(4147), rhs: Some(4148) })"];
    4146 -> 4136;
    4136 [label="BinaryOp(BinaryOp { syntax: 4136, lhs: Some(4134), operator: Some(4137), rhs: Some(4138) })"];
    4136 -> 4134;
    4134 [label="Identifier"];
    4134 -> 4135;
    4135[label="Event"];
    4136 -> 4137;
    4137[label="."];
    4136 -> 4138;
    4138 [label="Expr"];
    4138 -> 4141;
    4141 [label="BinaryOp(BinaryOp { syntax: 4141, lhs: Some(4139), operator: Some(4142), rhs: Some(4143) })"];
    4141 -> 4139;
    4139 [label="Identifier"];
    4139 -> 4140;
    4140[label="Player"];
    4141 -> 4142;
    4142[label="."];
    4141 -> 4143;
    4143 [label="Expr"];
    4143 -> 4144;
    4144 [label="Identifier"];
    4144 -> 4145;
    4145[label="IsBot"];
    4146 -> 4147;
    4147[label="||"];
    4146 -> 4148;
    4148 [label="Expr"];
    4148 -> 4149;
    4149 [label="UnOp(UnOp { syntax: 4149, operator: Some(4150), operand: Some(4151) })"];
    4149 -> 4150;
    4150[label="!"];
    4149 -> 4151;
    4151 [label="Expr"];
    4151 -> 4154;
    4154 [label="BinaryOp(BinaryOp { syntax: 4154, lhs: Some(4152), operator: Some(4155), rhs: Some(4156) })"];
    4154 -> 4152;
    4152 [label="Identifier"];
    4152 -> 4153;
    4153[label="G_LoginsTouchedGoal"];
    4154 -> 4155;
    4155[label="."];
    4154 -> 4156;
    4156 [label="Expr"];
    4156 -> 4157;
    4157 [label="Identifier"];
    4157 -> 4158;
    4158[label="exists"];
    4159 -> 4160;
    4160[label="("];
    4159 -> 4161;
    4161 [label="Expr"];
    4161 -> 4164;
    4164 [label="BinaryOp(BinaryOp { syntax: 4164, lhs: Some(4162), operator: Some(4165), rhs: Some(4166) })"];
    4164 -> 4162;
    4162 [label="Identifier"];
    4162 -> 4163;
    4163[label="Event"];
    4164 -> 4165;
    4165[label="."];
    4164 -> 4166;
    4166 [label="Expr"];
    4166 -> 4169;
    4169 [label="BinaryOp(BinaryOp { syntax: 4169, lhs: Some(4167), operator: Some(4170), rhs: Some(4171) })"];
    4169 -> 4167;
    4167 [label="Identifier"];
    4167 -> 4168;
    4168[label="Player"];
    4169 -> 4170;
    4170[label="."];
    4169 -> 4171;
    4171 [label="Expr"];
    4171 -> 4172;
    4172 [label="Identifier"];
    4172 -> 4173;
    4173[label="Login"];
    4159 -> 4174;
    4174[label=")"];
    4130 -> 4175;
    4175[label=")"];
    4130 -> 4176;
    4176 [label="Statement(Statement { syntax: 4176, statement: Some(4177), semicolon: Some(4179) })"];
    4176 -> 4177;
    4177 [label="Continue"];
    4177 -> 4178;
    4178[label="continue"];
    4176 -> 4179;
    4179[label=";"];
    4113 -> 4180;
    4180 [label="Statement(Statement { syntax: 4180, statement: Some(4181), semicolon: None })"];
    4180 -> 4181;
    4181 [label="VarDec(VarDec { syntax: 4181, declare: Some(4182), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4183), name: Some(4185), as_: None, alias: None, for_: Some(4186), target: Some(4187), assignment: None, value: None })"];
    4181 -> 4182;
    4182[label="declare"];
    4181 -> 4183;
    4183 [label="Type(Type { syntax: 4183, basename: Some(4184), members: [], arrays: [] })"];
    4183 -> 4184;
    4184[label="Ident"];
    4181 -> 4185;
    4185[label="AnchorId"];
    4181 -> 4186;
    4186[label="for"];
    4181 -> 4187;
    4187 [label="Expr"];
    4187 -> 4190;
    4190 [label="BinaryOp(BinaryOp { syntax: 4190, lhs: Some(4188), operator: Some(4191), rhs: Some(4192) })"];
    4190 -> 4188;
    4188 [label="Identifier"];
    4188 -> 4189;
    4189[label="Event"];
    4190 -> 4191;
    4191[label="."];
    4190 -> 4192;
    4192 [label="Expr"];
    4192 -> 4193;
    4193 [label="Identifier"];
    4193 -> 4194;
    4194[label="Object"];
    4181 -> 4195;
    4195[label=";"];
    4113 -> 4196;
    4196 [label="Statement(Statement { syntax: 4196, statement: Some(4197), semicolon: None })"];
    4196 -> 4197;
    4197 [label="VarDec(VarDec { syntax: 4197, declare: Some(4198), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4199), name: Some(4201), as_: None, alias: None, for_: Some(4202), target: Some(4203), assignment: None, value: None })"];
    4197 -> 4198;
    4198[label="declare"];
    4197 -> 4199;
    4199 [label="Type(Type { syntax: 4199, basename: Some(4200), members: [], arrays: [] })"];
    4199 -> 4200;
    4200[label="Text"];
    4197 -> 4201;
    4201[label="Tag"];
    4197 -> 4202;
    4202[label="for"];
    4197 -> 4203;
    4203 [label="Expr"];
    4203 -> 4206;
    4206 [label="BinaryOp(BinaryOp { syntax: 4206, lhs: Some(4204), operator: Some(4207), rhs: Some(4208) })"];
    4206 -> 4204;
    4204 [label="Identifier"];
    4204 -> 4205;
    4205[label="Event"];
    4206 -> 4207;
    4207[label="."];
    4206 -> 4208;
    4208 [label="Expr"];
    4208 -> 4209;
    4209 [label="Identifier"];
    4209 -> 4210;
    4210[label="Object"];
    4197 -> 4211;
    4211[label=";"];
    4113 -> 4212;
    4212 [label="Statement(Statement { syntax: 4212, statement: Some(4213), semicolon: None })"];
    4212 -> 4213;
    4213 [label="VarDec(VarDec { syntax: 4213, declare: Some(4214), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4215), as_: None, alias: None, for_: None, target: None, assignment: Some(4217), value: Some(4218) })"];
    4213 -> 4214;
    4214[label="declare"];
    4213 -> 4215;
    4215 [label="Type(Type { syntax: 4215, basename: Some(4216), members: [], arrays: [] })"];
    4215 -> 4216;
    4216[label="ObjectAnchorId"];
    4213 -> 4217;
    4217[label="="];
    4213 -> 4218;
    4218 [label="Expr"];
    4218 -> 4219;
    4219 [label="Identifier"];
    4219 -> 4220;
    4220[label="AnchorId"];
    4213 -> 4221;
    4221[label=";"];
    4113 -> 4222;
    4222 [label="Statement(Statement { syntax: 4222, statement: Some(4223), semicolon: None })"];
    4222 -> 4223;
    4223 [label="VarDec(VarDec { syntax: 4223, declare: Some(4224), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4225), as_: None, alias: None, for_: None, target: None, assignment: Some(4227), value: Some(4228) })"];
    4223 -> 4224;
    4224[label="declare"];
    4223 -> 4225;
    4225 [label="Type(Type { syntax: 4225, basename: Some(4226), members: [], arrays: [] })"];
    4225 -> 4226;
    4226[label="ObjectTag"];
    4223 -> 4227;
    4227[label="="];
    4223 -> 4228;
    4228 [label="Expr"];
    4228 -> 4229;
    4229 [label="Identifier"];
    4229 -> 4230;
    4230[label="Tag"];
    4223 -> 4231;
    4231[label=";"];
    4113 -> 4232;
    4232 [label="Statement(Statement { syntax: 4232, statement: Some(4233), semicolon: None })"];
    4232 -> 4233;
    4233 [label="VarDec(VarDec { syntax: 4233, declare: Some(4234), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4235), as_: None, alias: None, for_: None, target: None, assignment: Some(4237), value: Some(4238) })"];
    4233 -> 4234;
    4234[label="declare"];
    4233 -> 4235;
    4235 [label="Type(Type { syntax: 4235, basename: Some(4236), members: [], arrays: [] })"];
    4235 -> 4236;
    4236[label="PickedUpObject"];
    4233 -> 4237;
    4237[label="="];
    4233 -> 4238;
    4238 [label="Expr"];
    4238 -> 4246;
    4246 [label="FunctionCall(FunctionCall { syntax: 4246, lhs: Some(4241), lparen: Some(4247), args: [(4248, Some(4251)), (4252, None)], rparen: Some(4255) })"];
    4246 -> 4241;
    4241 [label="BinaryOp(BinaryOp { syntax: 4241, lhs: Some(4239), operator: Some(4242), rhs: Some(4243) })"];
    4241 -> 4239;
    4239 [label="Identifier"];
    4239 -> 4240;
    4240[label="GalaxyTitles"];
    4241 -> 4242;
    4242[label="::"];
    4241 -> 4243;
    4243 [label="Expr"];
    4243 -> 4244;
    4244 [label="Identifier"];
    4244 -> 4245;
    4245[label="PickUpObject"];
    4246 -> 4247;
    4247[label="("];
    4246 -> 4248;
    4248 [label="Expr"];
    4248 -> 4249;
    4249 [label="Identifier"];
    4249 -> 4250;
    4250[label="Event"];
    4246 -> 4251;
    4251[label=","];
    4246 -> 4252;
    4252 [label="Expr"];
    4252 -> 4253;
    4253 [label="Literal"];
    4253 -> 4254;
    4254[label="True"];
    4246 -> 4255;
    4255[label=")"];
    4233 -> 4256;
    4256[label=";"];
    4113 -> 4257;
    4257 [label="Statement(Statement { syntax: 4257, statement: Some(4258), semicolon: None })"];
    4257 -> 4258;
    4258 [label="If(If { syntax: 4258, if_: Some(4259), lparen: Some(4260), condition: Some(4261), rparen: Some(4267), body: Some(4268), else_: None })"];
    4258 -> 4259;
    4259[label="if"];
    4258 -> 4260;
    4260[label="("];
    4258 -> 4261;
    4261 [label="Expr"];
    4261 -> 4262;
    4262 [label="UnOp(UnOp { syntax: 4262, operator: Some(4263), operand: Some(4264) })"];
    4262 -> 4263;
    4263[label="!"];
    4262 -> 4264;
    4264 [label="Expr"];
    4264 -> 4265;
    4265 [label="Identifier"];
    4265 -> 4266;
    4266[label="PickedUpObject"];
    4258 -> 4267;
    4267[label=")"];
    4258 -> 4268;
    4268 [label="Statement(Statement { syntax: 4268, statement: Some(4272), semicolon: Some(4283) })"];
    4268 -> 4269;
    4269 [label="Expr"];
    4269 -> 4270;
    4270 [label="Identifier"];
    4270 -> 4271;
    4271[label="PickedUpObject"];
    4268 -> 4272;
    4272 [label="Assignment(Assignment { syntax: 4272, lvalue: Some(4269), operator: Some(4273), rvalue: Some(4274) })"];
    4272 -> 4273;
    4273[label="="];
    4272 -> 4274;
    4274 [label="Expr"];
    4274 -> 4277;
    4277 [label="FunctionCall(FunctionCall { syntax: 4277, lhs: Some(4275), lparen: Some(4278), args: [(4279, None)], rparen: Some(4282) })"];
    4277 -> 4275;
    4275 [label="Identifier"];
    4275 -> 4276;
    4276[label="PickUpObject"];
    4277 -> 4278;
    4278[label="("];
    4277 -> 4279;
    4279 [label="Expr"];
    4279 -> 4280;
    4280 [label="Identifier"];
    4280 -> 4281;
    4281[label="Event"];
    4277 -> 4282;
    4282[label=")"];
    4268 -> 4283;
    4283[label=";"];
    4113 -> 4284;
    4284 [label="Statement(Statement { syntax: 4284, statement: Some(4285), semicolon: None })"];
    4284 -> 4285;
    4285 [label="If(If { syntax: 4285, if_: Some(4286), lparen: Some(4287), condition: Some(4288), rparen: Some(4307), body: Some(4308), else_: None })"];
    4285 -> 4286;
    4286[label="if"];
    4285 -> 4287;
    4287[label="("];
    4285 -> 4288;
    4288 [label="Expr"];
    4288 -> 4301;
    4301 [label="FunctionCall(FunctionCall { syntax: 4301, lhs: Some(4291), lparen: Some(4302), args: [(4303, None)], rparen: Some(4306) })"];
    4301 -> 4291;
    4291 [label="BinaryOp(BinaryOp { syntax: 4291, lhs: Some(4289), operator: Some(4292), rhs: Some(4293) })"];
    4291 -> 4289;
    4289 [label="Identifier"];
    4289 -> 4290;
    4290[label="PickedUpObject"];
    4291 -> 4292;
    4292[label="&&"];
    4291 -> 4293;
    4293 [label="Expr"];
    4293 -> 4296;
    4296 [label="BinaryOp(BinaryOp { syntax: 4296, lhs: Some(4294), operator: Some(4297), rhs: Some(4298) })"];
    4296 -> 4294;
    4294 [label="Identifier"];
    4294 -> 4295;
    4295[label="MapLandmarks_ObjectAnchor"];
    4296 -> 4297;
    4297[label="."];
    4296 -> 4298;
    4298 [label="Expr"];
    4298 -> 4299;
    4299 [label="Identifier"];
    4299 -> 4300;
    4300[label="existskey"];
    4301 -> 4302;
    4302[label="("];
    4301 -> 4303;
    4303 [label="Expr"];
    4303 -> 4304;
    4304 [label="Identifier"];
    4304 -> 4305;
    4305[label="ObjectAnchorId"];
    4301 -> 4306;
    4306[label=")"];
    4285 -> 4307;
    4307[label=")"];
    4285 -> 4308;
    4308 [label="Statement(Statement { syntax: 4308, statement: Some(4309), semicolon: None })"];
    4308 -> 4309;
    4309 [label="Block(Block { syntax: 4309, lbrace: Some(4310), statements: [4311, 4327, 4338, 4349, 4371, 4381, 4410, 4425], rbrace: Some(4445) })"];
    4309 -> 4310;
    4310[label="{"];
    4309 -> 4311;
    4311 [label="Statement(Statement { syntax: 4311, statement: Some(4312), semicolon: None })"];
    4311 -> 4312;
    4312 [label="VarDec(VarDec { syntax: 4312, declare: Some(4313), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4314), as_: None, alias: None, for_: None, target: None, assignment: Some(4316), value: Some(4317) })"];
    4312 -> 4313;
    4313[label="declare"];
    4312 -> 4314;
    4314 [label="Type(Type { syntax: 4314, basename: Some(4315), members: [], arrays: [] })"];
    4314 -> 4315;
    4315[label="MapLandmark"];
    4312 -> 4316;
    4316[label="<=>"];
    4312 -> 4317;
    4317 [label="Expr"];
    4317 -> 4320;
    4320 [label="ArrayAccess(ArrayAccess { syntax: 4320, lhs: Some(4318), lsquare: Some(4321), index: Some(4322), rsquare: Some(4325) })"];
    4320 -> 4318;
    4318 [label="Identifier"];
    4318 -> 4319;
    4319[label="MapLandmarks_ObjectAnchor"];
    4320 -> 4321;
    4321[label="["];
    4320 -> 4322;
    4322 [label="Expr"];
    4322 -> 4323;
    4323 [label="Identifier"];
    4323 -> 4324;
    4324[label="ObjectAnchorId"];
    4320 -> 4325;
    4325[label="]"];
    4312 -> 4326;
    4326[label=";"];
    4309 -> 4327;
    4327 [label="Statement(Statement { syntax: 4327, statement: Some(4328), semicolon: None })"];
    4327 -> 4328;
    4328 [label="VarDec(VarDec { syntax: 4328, declare: Some(4329), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4330), name: Some(4332), as_: None, alias: None, for_: Some(4333), target: Some(4334), assignment: None, value: None })"];
    4328 -> 4329;
    4329[label="declare"];
    4328 -> 4330;
    4330 [label="Type(Type { syntax: 4330, basename: Some(4331), members: [], arrays: [] })"];
    4330 -> 4331;
    4331[label="Boolean"];
    4328 -> 4332;
    4332[label="ObjectSpawned"];
    4328 -> 4333;
    4333[label="for"];
    4328 -> 4334;
    4334 [label="Expr"];
    4334 -> 4335;
    4335 [label="Identifier"];
    4335 -> 4336;
    4336[label="MapLandmark"];
    4328 -> 4337;
    4337[label=";"];
    4309 -> 4338;
    4338 [label="Statement(Statement { syntax: 4338, statement: Some(4339), semicolon: None })"];
    4338 -> 4339;
    4339 [label="VarDec(VarDec { syntax: 4339, declare: Some(4340), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4341), name: Some(4343), as_: None, alias: None, for_: Some(4344), target: Some(4345), assignment: None, value: None })"];
    4339 -> 4340;
    4340[label="declare"];
    4339 -> 4341;
    4341 [label="Type(Type { syntax: 4341, basename: Some(4342), members: [], arrays: [] })"];
    4341 -> 4342;
    4342[label="Integer"];
    4339 -> 4343;
    4343[label="ObjectNextSpawn"];
    4339 -> 4344;
    4344[label="for"];
    4339 -> 4345;
    4345 [label="Expr"];
    4345 -> 4346;
    4346 [label="Identifier"];
    4346 -> 4347;
    4347[label="MapLandmark"];
    4339 -> 4348;
    4348[label=";"];
    4309 -> 4349;
    4349 [label="Statement(Statement { syntax: 4349, statement: Some(4350), semicolon: None })"];
    4349 -> 4350;
    4350 [label="VarDec(VarDec { syntax: 4350, declare: Some(4351), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4352), as_: None, alias: None, for_: None, target: None, assignment: Some(4354), value: Some(4355) })"];
    4350 -> 4351;
    4351[label="declare"];
    4350 -> 4352;
    4352 [label="Type(Type { syntax: 4352, basename: Some(4353), members: [], arrays: [] })"];
    4352 -> 4353;
    4353[label="FasterRespawnObjects"];
    4350 -> 4354;
    4354[label="="];
    4350 -> 4355;
    4355 [label="Expr"];
    4355 -> 4356;
    4356 [label="Array(Array { syntax: 4356, lsquare: Some(4357), values: [(4358, Some(4361)), (4362, Some(4365)), (4366, None)], rsquare: Some(4369) })"];
    4356 -> 4357;
    4357[label="["];
    4356 -> 4358;
    4358 [label="Expr"];
    4358 -> 4359;
    4359 [label="Literal"];
    4359 -> 4360;
    4360[label="\"Armor\""];
    4356 -> 4361;
    4361[label=","];
    4356 -> 4362;
    4362 [label="Expr"];
    4362 -> 4363;
    4363 [label="Literal"];
    4363 -> 4364;
    4364[label="\"Fuel\""];
    4356 -> 4365;
    4365[label=","];
    4356 -> 4366;
    4366 [label="Expr"];
    4366 -> 4367;
    4367 [label="Literal"];
    4367 -> 4368;
    4368[label="\"Replie\""];
    4356 -> 4369;
    4369[label="]"];
    4350 -> 4370;
    4370[label=";"];
    4309 -> 4371;
    4371 [label="Statement(Statement { syntax: 4371, statement: Some(4372), semicolon: None })"];
    4371 -> 4372;
    4372 [label="VarDec(VarDec { syntax: 4372, declare: Some(4373), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4374), as_: None, alias: None, for_: None, target: None, assignment: Some(4376), value: Some(4377) })"];
    4372 -> 4373;
    4373[label="declare"];
    4372 -> 4374;
    4374 [label="Type(Type { syntax: 4374, basename: Some(4375), members: [], arrays: [] })"];
    4374 -> 4375;
    4375[label="RespawnDuration"];
    4372 -> 4376;
    4376[label="="];
    4372 -> 4377;
    4377 [label="Expr"];
    4377 -> 4378;
    4378 [label="Identifier"];
    4378 -> 4379;
    4379[label="S_ObjectsRespawnTime"];
    4372 -> 4380;
    4380[label=";"];
    4309 -> 4381;
    4381 [label="Statement(Statement { syntax: 4381, statement: Some(4382), semicolon: None })"];
    4381 -> 4382;
    4382 [label="If(If { syntax: 4382, if_: Some(4383), lparen: Some(4384), condition: Some(4385), rparen: Some(4399), body: Some(4400), else_: None })"];
    4382 -> 4383;
    4383[label="if"];
    4382 -> 4384;
    4384[label="("];
    4382 -> 4385;
    4385 [label="Expr"];
    4385 -> 4393;
    4393 [label="FunctionCall(FunctionCall { syntax: 4393, lhs: Some(4388), lparen: Some(4394), args: [(4395, None)], rparen: Some(4398) })"];
    4393 -> 4388;
    4388 [label="BinaryOp(BinaryOp { syntax: 4388, lhs: Some(4386), operator: Some(4389), rhs: Some(4390) })"];
    4388 -> 4386;
    4386 [label="Identifier"];
    4386 -> 4387;
    4387[label="FasterRespawnObjects"];
    4388 -> 4389;
    4389[label="."];
    4388 -> 4390;
    4390 [label="Expr"];
    4390 -> 4391;
    4391 [label="Identifier"];
    4391 -> 4392;
    4392[label="exists"];
    4393 -> 4394;
    4394[label="("];
    4393 -> 4395;
    4395 [label="Expr"];
    4395 -> 4396;
    4396 [label="Identifier"];
    4396 -> 4397;
    4397[label="ObjectTag"];
    4393 -> 4398;
    4398[label=")"];
    4382 -> 4399;
    4399[label=")"];
    4382 -> 4400;
    4400 [label="Statement(Statement { syntax: 4400, statement: Some(4404), semicolon: Some(4409) })"];
    4400 -> 4401;
    4401 [label="Expr"];
    4401 -> 4402;
    4402 [label="Identifier"];
    4402 -> 4403;
    4403[label="RespawnDuration"];
    4400 -> 4404;
    4404 [label="Assignment(Assignment { syntax: 4404, lvalue: Some(4401), operator: Some(4405), rvalue: Some(4406) })"];
    4404 -> 4405;
    4405[label="="];
    4404 -> 4406;
    4406 [label="Expr"];
    4406 -> 4407;
    4407 [label="Identifier"];
    4407 -> 4408;
    4408[label="S_ArmorRespawnTime"];
    4400 -> 4409;
    4409[label=";"];
    4309 -> 4410;
    4410 [label="Statement(Statement { syntax: 4410, statement: Some(4414), semicolon: Some(4424) })"];
    4410 -> 4411;
    4411 [label="Expr"];
    4411 -> 4412;
    4412 [label="Identifier"];
    4412 -> 4413;
    4413[label="ObjectSpawned"];
    4410 -> 4414;
    4414 [label="Assignment(Assignment { syntax: 4414, lvalue: Some(4411), operator: Some(4415), rvalue: Some(4416) })"];
    4414 -> 4415;
    4415[label="="];
    4414 -> 4416;
    4416 [label="Expr"];
    4416 -> 4419;
    4419 [label="BinaryOp(BinaryOp { syntax: 4419, lhs: Some(4417), operator: Some(4420), rhs: Some(4421) })"];
    4419 -> 4417;
    4417 [label="Identifier"];
    4417 -> 4418;
    4418[label="RespawnDuration"];
    4419 -> 4420;
    4420[label="<="];
    4419 -> 4421;
    4421 [label="Expr"];
    4421 -> 4422;
    4422 [label="Literal"];
    4422 -> 4423;
    4423[label="0"];
    4410 -> 4424;
    4424[label=";"];
    4309 -> 4425;
    4425 [label="Statement(Statement { syntax: 4425, statement: Some(4429), semicolon: Some(4444) })"];
    4425 -> 4426;
    4426 [label="Expr"];
    4426 -> 4427;
    4427 [label="Identifier"];
    4427 -> 4428;
    4428[label="ObjectNextSpawn"];
    4425 -> 4429;
    4429 [label="Assignment(Assignment { syntax: 4429, lvalue: Some(4426), operator: Some(4430), rvalue: Some(4431) })"];
    4429 -> 4430;
    4430[label="="];
    4429 -> 4431;
    4431 [label="Expr"];
    4431 -> 4434;
    4434 [label="BinaryOp(BinaryOp { syntax: 4434, lhs: Some(4432), operator: Some(4435), rhs: Some(4436) })"];
    4434 -> 4432;
    4432 [label="Identifier"];
    4432 -> 4433;
    4433[label="Now"];
    4434 -> 4435;
    4435[label="+"];
    4434 -> 4436;
    4436 [label="Expr"];
    4436 -> 4439;
    4439 [label="BinaryOp(BinaryOp { syntax: 4439, lhs: Some(4437), operator: Some(4440), rhs: Some(4441) })"];
    4439 -> 4437;
    4437 [label="Identifier"];
    4437 -> 4438;
    4438[label="RespawnDuration"];
    4439 -> 4440;
    4440[label="*"];
    4439 -> 4441;
    4441 [label="Expr"];
    4441 -> 4442;
    4442 [label="Literal"];
    4442 -> 4443;
    4443[label="1000"];
    4425 -> 4444;
    4444[label=";"];
    4309 -> 4445;
    4445[label="}"];
    4113 -> 4446;
    4446[label="***"];
    0 -> 4447;
    4447 [label="LabelImpl(LabelImpl { syntax: 4447, stars1: Some(4448), name: Some(4449), stars2: Some(4450), stars3: Some(4451), statements: [4452], stars4: Some(4504) })"];
    4447 -> 4448;
    4448[label="***"];
    4447 -> 4449;
    4449[label="OnHitConditions"];
    4447 -> 4450;
    4450[label="***"];
    4447 -> 4451;
    4451[label="***"];
    4447 -> 4452;
    4452 [label="Statement(Statement { syntax: 4452, statement: Some(4453), semicolon: None })"];
    4452 -> 4453;
    4453 [label="If(If { syntax: 4453, if_: Some(4454), lparen: Some(4455), condition: Some(4456), rparen: Some(4484), body: Some(4485), else_: None })"];
    4453 -> 4454;
    4454[label="if"];
    4453 -> 4455;
    4455[label="("];
    4453 -> 4456;
    4456 [label="Expr"];
    4456 -> 4464;
    4464 [label="FunctionCall(FunctionCall { syntax: 4464, lhs: Some(4459), lparen: Some(4465), args: [(4466, Some(4474)), (4475, None)], rparen: Some(4483) })"];
    4464 -> 4459;
    4459 [label="BinaryOp(BinaryOp { syntax: 4459, lhs: Some(4457), operator: Some(4460), rhs: Some(4461) })"];
    4459 -> 4457;
    4457 [label="Identifier"];
    4457 -> 4458;
    4458[label="Clans"];
    4459 -> 4460;
    4460[label="::"];
    4459 -> 4461;
    4461 [label="Expr"];
    4461 -> 4462;
    4462 [label="Identifier"];
    4462 -> 4463;
    4463[label="AreTeammates"];
    4464 -> 4465;
    4465[label="("];
    4464 -> 4466;
    4466 [label="Expr"];
    4466 -> 4469;
    4469 [label="BinaryOp(BinaryOp { syntax: 4469, lhs: Some(4467), operator: Some(4470), rhs: Some(4471) })"];
    4469 -> 4467;
    4467 [label="Identifier"];
    4467 -> 4468;
    4468[label="Event"];
    4469 -> 4470;
    4470[label="."];
    4469 -> 4471;
    4471 [label="Expr"];
    4471 -> 4472;
    4472 [label="Identifier"];
    4472 -> 4473;
    4473[label="Shooter"];
    4464 -> 4474;
    4474[label=","];
    4464 -> 4475;
    4475 [label="Expr"];
    4475 -> 4478;
    4478 [label="BinaryOp(BinaryOp { syntax: 4478, lhs: Some(4476), operator: Some(4479), rhs: Some(4480) })"];
    4478 -> 4476;
    4476 [label="Identifier"];
    4476 -> 4477;
    4477[label="Event"];
    4478 -> 4479;
    4479[label="."];
    4478 -> 4480;
    4480 [label="Expr"];
    4480 -> 4481;
    4481 [label="Identifier"];
    4481 -> 4482;
    4482[label="Victim"];
    4464 -> 4483;
    4483[label=")"];
    4453 -> 4484;
    4484[label=")"];
    4453 -> 4485;
    4485 [label="Statement(Statement { syntax: 4485, statement: Some(4486), semicolon: None })"];
    4485 -> 4486;
    4486 [label="Block(Block { syntax: 4486, lbrace: Some(4487), statements: [4488, 4499], rbrace: Some(4503) })"];
    4486 -> 4487;
    4487[label="{"];
    4486 -> 4488;
    4488 [label="Statement(Statement { syntax: 4488, statement: Some(4489), semicolon: Some(4498) })"];
    4488 -> 4489;
    4489 [label="Expr"];
    4489 -> 4492;
    4492 [label="FunctionCall(FunctionCall { syntax: 4492, lhs: Some(4490), lparen: Some(4493), args: [(4494, None)], rparen: Some(4497) })"];
    4492 -> 4490;
    4490 [label="Identifier"];
    4490 -> 4491;
    4491[label="Discard"];
    4492 -> 4493;
    4493[label="("];
    4492 -> 4494;
    4494 [label="Expr"];
    4494 -> 4495;
    4495 [label="Identifier"];
    4495 -> 4496;
    4496[label="Event"];
    4492 -> 4497;
    4497[label=")"];
    4488 -> 4498;
    4498[label=";"];
    4486 -> 4499;
    4499 [label="Statement(Statement { syntax: 4499, statement: Some(4500), semicolon: Some(4502) })"];
    4499 -> 4500;
    4500 [label="Continue"];
    4500 -> 4501;
    4501[label="continue"];
    4499 -> 4502;
    4502[label=";"];
    4486 -> 4503;
    4503[label="}"];
    4447 -> 4504;
    4504[label="***"];
    0 -> 4505;
    4505 [label="LabelImpl(LabelImpl { syntax: 4505, stars1: Some(4506), name: Some(4507), stars2: Some(4508), stars3: Some(4509), statements: [4510, 4526, 4542], stars4: Some(4633) })"];
    4505 -> 4506;
    4506[label="***"];
    4505 -> 4507;
    4507[label="OnHit"];
    4505 -> 4508;
    4508[label="***"];
    4505 -> 4509;
    4509[label="***"];
    4505 -> 4510;
    4510 [label="Statement(Statement { syntax: 4510, statement: Some(4511), semicolon: None })"];
    4510 -> 4511;
    4511 [label="VarDec(VarDec { syntax: 4511, declare: Some(4512), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4513), name: Some(4515), as_: None, alias: None, for_: Some(4516), target: Some(4517), assignment: None, value: None })"];
    4511 -> 4512;
    4512[label="declare"];
    4511 -> 4513;
    4513 [label="Type(Type { syntax: 4513, basename: Some(4514), members: [], arrays: [] })"];
    4513 -> 4514;
    4514[label="Boolean"];
    4511 -> 4515;
    4515[label="PlayerRequestsRespawn"];
    4511 -> 4516;
    4516[label="for"];
    4511 -> 4517;
    4517 [label="Expr"];
    4517 -> 4520;
    4520 [label="BinaryOp(BinaryOp { syntax: 4520, lhs: Some(4518), operator: Some(4521), rhs: Some(4522) })"];
    4520 -> 4518;
    4518 [label="Identifier"];
    4518 -> 4519;
    4519[label="Event"];
    4520 -> 4521;
    4521[label="."];
    4520 -> 4522;
    4522 [label="Expr"];
    4522 -> 4523;
    4523 [label="Identifier"];
    4523 -> 4524;
    4524[label="Victim"];
    4511 -> 4525;
    4525[label=";"];
    4505 -> 4526;
    4526 [label="Statement(Statement { syntax: 4526, statement: Some(4527), semicolon: None })"];
    4526 -> 4527;
    4527 [label="VarDec(VarDec { syntax: 4527, declare: Some(4528), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4529), name: Some(4531), as_: None, alias: None, for_: Some(4532), target: Some(4533), assignment: None, value: None })"];
    4527 -> 4528;
    4528[label="declare"];
    4527 -> 4529;
    4529 [label="Type(Type { syntax: 4529, basename: Some(4530), members: [], arrays: [] })"];
    4529 -> 4530;
    4530[label="Integer"];
    4527 -> 4531;
    4531[label="PlayerRespawnStartTime"];
    4527 -> 4532;
    4532[label="for"];
    4527 -> 4533;
    4533 [label="Expr"];
    4533 -> 4536;
    4536 [label="BinaryOp(BinaryOp { syntax: 4536, lhs: Some(4534), operator: Some(4537), rhs: Some(4538) })"];
    4536 -> 4534;
    4534 [label="Identifier"];
    4534 -> 4535;
    4535[label="Event"];
    4536 -> 4537;
    4537[label="."];
    4536 -> 4538;
    4538 [label="Expr"];
    4538 -> 4539;
    4539 [label="Identifier"];
    4539 -> 4540;
    4540[label="Victim"];
    4527 -> 4541;
    4541[label=";"];
    4505 -> 4542;
    4542 [label="Statement(Statement { syntax: 4542, statement: Some(4543), semicolon: None })"];
    4542 -> 4543;
    4543 [label="If(If { syntax: 4543, if_: Some(4544), lparen: Some(4545), condition: Some(4546), rparen: Some(4549), body: Some(4550), else_: None })"];
    4543 -> 4544;
    4544[label="if"];
    4543 -> 4545;
    4545[label="("];
    4543 -> 4546;
    4546 [label="Expr"];
    4546 -> 4547;
    4547 [label="Identifier"];
    4547 -> 4548;
    4548[label="PlayerRequestsRespawn"];
    4543 -> 4549;
    4549[label=")"];
    4543 -> 4550;
    4550 [label="Statement(Statement { syntax: 4550, statement: Some(4551), semicolon: None })"];
    4550 -> 4551;
    4551 [label="Block(Block { syntax: 4551, lbrace: Some(4552), statements: [4553, 4586, 4596, 4609], rbrace: Some(4632) })"];
    4551 -> 4552;
    4552[label="{"];
    4551 -> 4553;
    4553 [label="Statement(Statement { syntax: 4553, statement: Some(4554), semicolon: Some(4585) })"];
    4553 -> 4554;
    4554 [label="Expr"];
    4554 -> 4562;
    4562 [label="FunctionCall(FunctionCall { syntax: 4562, lhs: Some(4557), lparen: Some(4563), args: [(4564, Some(4572)), (4573, Some(4576)), (4577, Some(4580)), (4581, None)], rparen: Some(4584) })"];
    4562 -> 4557;
    4557 [label="BinaryOp(BinaryOp { syntax: 4557, lhs: Some(4555), operator: Some(4558), rhs: Some(4559) })"];
    4557 -> 4555;
    4555 [label="Identifier"];
    4555 -> 4556;
    4556[label="Translations"];
    4557 -> 4558;
    4558[label="::"];
    4557 -> 4559;
    4559 [label="Expr"];
    4559 -> 4560;
    4560 [label="Identifier"];
    4560 -> 4561;
    4561[label="SendStatusMessage"];
    4562 -> 4563;
    4563[label="("];
    4562 -> 4564;
    4564 [label="Expr"];
    4564 -> 4567;
    4567 [label="BinaryOp(BinaryOp { syntax: 4567, lhs: Some(4565), operator: Some(4568), rhs: Some(4569) })"];
    4567 -> 4565;
    4565 [label="Identifier"];
    4565 -> 4566;
    4566[label="Event"];
    4567 -> 4568;
    4568[label="."];
    4567 -> 4569;
    4569 [label="Expr"];
    4569 -> 4570;
    4570 [label="Identifier"];
    4570 -> 4571;
    4571[label="Victim"];
    4562 -> 4572;
    4572[label=","];
    4562 -> 4573;
    4573 [label="Expr"];
    4573 -> 4574;
    4574 [label="Literal"];
    4574 -> 4575;
    4575[label="\"Respawn aborted: you've taken damage!\""];
    4562 -> 4576;
    4576[label=","];
    4562 -> 4577;
    4577 [label="Expr"];
    4577 -> 4578;
    4578 [label="Literal"];
    4578 -> 4579;
    4579[label="3000"];
    4562 -> 4580;
    4580[label=","];
    4562 -> 4581;
    4581 [label="Expr"];
    4581 -> 4582;
    4582 [label="Literal"];
    4582 -> 4583;
    4583[label="0"];
    4562 -> 4584;
    4584[label=")"];
    4553 -> 4585;
    4585[label=";"];
    4551 -> 4586;
    4586 [label="Statement(Statement { syntax: 4586, statement: Some(4590), semicolon: Some(4595) })"];
    4586 -> 4587;
    4587 [label="Expr"];
    4587 -> 4588;
    4588 [label="Identifier"];
    4588 -> 4589;
    4589[label="PlayerRequestsRespawn"];
    4586 -> 4590;
    4590 [label="Assignment(Assignment { syntax: 4590, lvalue: Some(4587), operator: Some(4591), rvalue: Some(4592) })"];
    4590 -> 4591;
    4591[label="="];
    4590 -> 4592;
    4592 [label="Expr"];
    4592 -> 4593;
    4593 [label="Literal"];
    4593 -> 4594;
    4594[label="False"];
    4586 -> 4595;
    4595[label=";"];
    4551 -> 4596;
    4596 [label="Statement(Statement { syntax: 4596, statement: Some(4600), semicolon: Some(4608) })"];
    4596 -> 4597;
    4597 [label="Expr"];
    4597 -> 4598;
    4598 [label="Identifier"];
    4598 -> 4599;
    4599[label="PlayerRespawnStartTime"];
    4596 -> 4600;
    4600 [label="Assignment(Assignment { syntax: 4600, lvalue: Some(4597), operator: Some(4601), rvalue: Some(4602) })"];
    4600 -> 4601;
    4601[label="="];
    4600 -> 4602;
    4602 [label="Expr"];
    4602 -> 4603;
    4603 [label="UnOp(UnOp { syntax: 4603, operator: Some(4604), operand: Some(4605) })"];
    4603 -> 4604;
    4604[label="-"];
    4603 -> 4605;
    4605 [label="Expr"];
    4605 -> 4606;
    4606 [label="Literal"];
    4606 -> 4607;
    4607[label="1"];
    4596 -> 4608;
    4608[label=";"];
    4551 -> 4609;
    4609 [label="Statement(Statement { syntax: 4609, statement: Some(4610), semicolon: Some(4631) })"];
    4609 -> 4610;
    4610 [label="Expr"];
    4610 -> 4613;
    4613 [label="FunctionCall(FunctionCall { syntax: 4613, lhs: Some(4611), lparen: Some(4614), args: [(4615, Some(4623)), (4624, None)], rparen: Some(4630) })"];
    4613 -> 4611;
    4611 [label="Identifier"];
    4611 -> 4612;
    4612[label="UISetRespawnStartTime"];
    4613 -> 4614;
    4614[label="("];
    4613 -> 4615;
    4615 [label="Expr"];
    4615 -> 4618;
    4618 [label="BinaryOp(BinaryOp { syntax: 4618, lhs: Some(4616), operator: Some(4619), rhs: Some(4620) })"];
    4618 -> 4616;
    4616 [label="Identifier"];
    4616 -> 4617;
    4617[label="Event"];
    4618 -> 4619;
    4619[label="."];
    4618 -> 4620;
    4620 [label="Expr"];
    4620 -> 4621;
    4621 [label="Identifier"];
    4621 -> 4622;
    4622[label="Victim"];
    4613 -> 4623;
    4623[label=","];
    4613 -> 4624;
    4624 [label="Expr"];
    4624 -> 4625;
    4625 [label="UnOp(UnOp { syntax: 4625, operator: Some(4626), operand: Some(4627) })"];
    4625 -> 4626;
    4626[label="-"];
    4625 -> 4627;
    4627 [label="Expr"];
    4627 -> 4628;
    4628 [label="Literal"];
    4628 -> 4629;
    4629[label="1"];
    4613 -> 4630;
    4630[label=")"];
    4609 -> 4631;
    4631[label=";"];
    4551 -> 4632;
    4632[label="}"];
    4505 -> 4633;
    4633[label="***"];
    0 -> 4634;
    4634 [label="LabelImpl(LabelImpl { syntax: 4634, stars1: Some(4635), name: Some(4636), stars2: Some(4637), stars3: Some(4638), statements: [4639, 4655, 4671], stars4: Some(4762) })"];
    4634 -> 4635;
    4635[label="***"];
    4634 -> 4636;
    4636[label="OnShoot"];
    4634 -> 4637;
    4637[label="***"];
    4634 -> 4638;
    4638[label="***"];
    4634 -> 4639;
    4639 [label="Statement(Statement { syntax: 4639, statement: Some(4640), semicolon: None })"];
    4639 -> 4640;
    4640 [label="VarDec(VarDec { syntax: 4640, declare: Some(4641), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4642), name: Some(4644), as_: None, alias: None, for_: Some(4645), target: Some(4646), assignment: None, value: None })"];
    4640 -> 4641;
    4641[label="declare"];
    4640 -> 4642;
    4642 [label="Type(Type { syntax: 4642, basename: Some(4643), members: [], arrays: [] })"];
    4642 -> 4643;
    4643[label="Boolean"];
    4640 -> 4644;
    4644[label="PlayerRequestsRespawn"];
    4640 -> 4645;
    4645[label="for"];
    4640 -> 4646;
    4646 [label="Expr"];
    4646 -> 4649;
    4649 [label="BinaryOp(BinaryOp { syntax: 4649, lhs: Some(4647), operator: Some(4650), rhs: Some(4651) })"];
    4649 -> 4647;
    4647 [label="Identifier"];
    4647 -> 4648;
    4648[label="Event"];
    4649 -> 4650;
    4650[label="."];
    4649 -> 4651;
    4651 [label="Expr"];
    4651 -> 4652;
    4652 [label="Identifier"];
    4652 -> 4653;
    4653[label="Shooter"];
    4640 -> 4654;
    4654[label=";"];
    4634 -> 4655;
    4655 [label="Statement(Statement { syntax: 4655, statement: Some(4656), semicolon: None })"];
    4655 -> 4656;
    4656 [label="VarDec(VarDec { syntax: 4656, declare: Some(4657), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(4658), name: Some(4660), as_: None, alias: None, for_: Some(4661), target: Some(4662), assignment: None, value: None })"];
    4656 -> 4657;
    4657[label="declare"];
    4656 -> 4658;
    4658 [label="Type(Type { syntax: 4658, basename: Some(4659), members: [], arrays: [] })"];
    4658 -> 4659;
    4659[label="Integer"];
    4656 -> 4660;
    4660[label="PlayerRespawnStartTime"];
    4656 -> 4661;
    4661[label="for"];
    4656 -> 4662;
    4662 [label="Expr"];
    4662 -> 4665;
    4665 [label="BinaryOp(BinaryOp { syntax: 4665, lhs: Some(4663), operator: Some(4666), rhs: Some(4667) })"];
    4665 -> 4663;
    4663 [label="Identifier"];
    4663 -> 4664;
    4664[label="Event"];
    4665 -> 4666;
    4666[label="."];
    4665 -> 4667;
    4667 [label="Expr"];
    4667 -> 4668;
    4668 [label="Identifier"];
    4668 -> 4669;
    4669[label="Shooter"];
    4656 -> 4670;
    4670[label=";"];
    4634 -> 4671;
    4671 [label="Statement(Statement { syntax: 4671, statement: Some(4672), semicolon: None })"];
    4671 -> 4672;
    4672 [label="If(If { syntax: 4672, if_: Some(4673), lparen: Some(4674), condition: Some(4675), rparen: Some(4678), body: Some(4679), else_: None })"];
    4672 -> 4673;
    4673[label="if"];
    4672 -> 4674;
    4674[label="("];
    4672 -> 4675;
    4675 [label="Expr"];
    4675 -> 4676;
    4676 [label="Identifier"];
    4676 -> 4677;
    4677[label="PlayerRequestsRespawn"];
    4672 -> 4678;
    4678[label=")"];
    4672 -> 4679;
    4679 [label="Statement(Statement { syntax: 4679, statement: Some(4680), semicolon: None })"];
    4679 -> 4680;
    4680 [label="Block(Block { syntax: 4680, lbrace: Some(4681), statements: [4682, 4715, 4725, 4738], rbrace: Some(4761) })"];
    4680 -> 4681;
    4681[label="{"];
    4680 -> 4682;
    4682 [label="Statement(Statement { syntax: 4682, statement: Some(4683), semicolon: Some(4714) })"];
    4682 -> 4683;
    4683 [label="Expr"];
    4683 -> 4691;
    4691 [label="FunctionCall(FunctionCall { syntax: 4691, lhs: Some(4686), lparen: Some(4692), args: [(4693, Some(4701)), (4702, Some(4705)), (4706, Some(4709)), (4710, None)], rparen: Some(4713) })"];
    4691 -> 4686;
    4686 [label="BinaryOp(BinaryOp { syntax: 4686, lhs: Some(4684), operator: Some(4687), rhs: Some(4688) })"];
    4686 -> 4684;
    4684 [label="Identifier"];
    4684 -> 4685;
    4685[label="Translations"];
    4686 -> 4687;
    4687[label="::"];
    4686 -> 4688;
    4688 [label="Expr"];
    4688 -> 4689;
    4689 [label="Identifier"];
    4689 -> 4690;
    4690[label="SendStatusMessage"];
    4691 -> 4692;
    4692[label="("];
    4691 -> 4693;
    4693 [label="Expr"];
    4693 -> 4696;
    4696 [label="BinaryOp(BinaryOp { syntax: 4696, lhs: Some(4694), operator: Some(4697), rhs: Some(4698) })"];
    4696 -> 4694;
    4694 [label="Identifier"];
    4694 -> 4695;
    4695[label="Event"];
    4696 -> 4697;
    4697[label="."];
    4696 -> 4698;
    4698 [label="Expr"];
    4698 -> 4699;
    4699 [label="Identifier"];
    4699 -> 4700;
    4700[label="Shooter"];
    4691 -> 4701;
    4701[label=","];
    4691 -> 4702;
    4702 [label="Expr"];
    4702 -> 4703;
    4703 [label="Literal"];
    4703 -> 4704;
    4704[label="\"Respawn aborted: you started attacking\""];
    4691 -> 4705;
    4705[label=","];
    4691 -> 4706;
    4706 [label="Expr"];
    4706 -> 4707;
    4707 [label="Literal"];
    4707 -> 4708;
    4708[label="3000"];
    4691 -> 4709;
    4709[label=","];
    4691 -> 4710;
    4710 [label="Expr"];
    4710 -> 4711;
    4711 [label="Literal"];
    4711 -> 4712;
    4712[label="0"];
    4691 -> 4713;
    4713[label=")"];
    4682 -> 4714;
    4714[label=";"];
    4680 -> 4715;
    4715 [label="Statement(Statement { syntax: 4715, statement: Some(4719), semicolon: Some(4724) })"];
    4715 -> 4716;
    4716 [label="Expr"];
    4716 -> 4717;
    4717 [label="Identifier"];
    4717 -> 4718;
    4718[label="PlayerRequestsRespawn"];
    4715 -> 4719;
    4719 [label="Assignment(Assignment { syntax: 4719, lvalue: Some(4716), operator: Some(4720), rvalue: Some(4721) })"];
    4719 -> 4720;
    4720[label="="];
    4719 -> 4721;
    4721 [label="Expr"];
    4721 -> 4722;
    4722 [label="Literal"];
    4722 -> 4723;
    4723[label="False"];
    4715 -> 4724;
    4724[label=";"];
    4680 -> 4725;
    4725 [label="Statement(Statement { syntax: 4725, statement: Some(4729), semicolon: Some(4737) })"];
    4725 -> 4726;
    4726 [label="Expr"];
    4726 -> 4727;
    4727 [label="Identifier"];
    4727 -> 4728;
    4728[label="PlayerRespawnStartTime"];
    4725 -> 4729;
    4729 [label="Assignment(Assignment { syntax: 4729, lvalue: Some(4726), operator: Some(4730), rvalue: Some(4731) })"];
    4729 -> 4730;
    4730[label="="];
    4729 -> 4731;
    4731 [label="Expr"];
    4731 -> 4732;
    4732 [label="UnOp(UnOp { syntax: 4732, operator: Some(4733), operand: Some(4734) })"];
    4732 -> 4733;
    4733[label="-"];
    4732 -> 4734;
    4734 [label="Expr"];
    4734 -> 4735;
    4735 [label="Literal"];
    4735 -> 4736;
    4736[label="1"];
    4725 -> 4737;
    4737[label=";"];
    4680 -> 4738;
    4738 [label="Statement(Statement { syntax: 4738, statement: Some(4739), semicolon: Some(4760) })"];
    4738 -> 4739;
    4739 [label="Expr"];
    4739 -> 4742;
    4742 [label="FunctionCall(FunctionCall { syntax: 4742, lhs: Some(4740), lparen: Some(4743), args: [(4744, Some(4752)), (4753, None)], rparen: Some(4759) })"];
    4742 -> 4740;
    4740 [label="Identifier"];
    4740 -> 4741;
    4741[label="UISetRespawnStartTime"];
    4742 -> 4743;
    4743[label="("];
    4742 -> 4744;
    4744 [label="Expr"];
    4744 -> 4747;
    4747 [label="BinaryOp(BinaryOp { syntax: 4747, lhs: Some(4745), operator: Some(4748), rhs: Some(4749) })"];
    4747 -> 4745;
    4745 [label="Identifier"];
    4745 -> 4746;
    4746[label="Event"];
    4747 -> 4748;
    4748[label="."];
    4747 -> 4749;
    4749 [label="Expr"];
    4749 -> 4750;
    4750 [label="Identifier"];
    4750 -> 4751;
    4751[label="Shooter"];
    4742 -> 4752;
    4752[label=","];
    4742 -> 4753;
    4753 [label="Expr"];
    4753 -> 4754;
    4754 [label="UnOp(UnOp { syntax: 4754, operator: Some(4755), operand: Some(4756) })"];
    4754 -> 4755;
    4755[label="-"];
    4754 -> 4756;
    4756 [label="Expr"];
    4756 -> 4757;
    4757 [label="Literal"];
    4757 -> 4758;
    4758[label="1"];
    4742 -> 4759;
    4759[label=")"];
    4738 -> 4760;
    4760[label=";"];
    4680 -> 4761;
    4761[label="}"];
    4634 -> 4762;
    4762[label="***"];
    0 -> 4763;
    4763 [label="LabelImpl(LabelImpl { syntax: 4763, stars1: Some(4764), name: Some(4765), stars2: Some(4766), stars3: Some(4767), statements: [4768, 4789, 5435, 5585, 6907, 7931, 8315, 8407], stars4: Some(8438) })"];
    4763 -> 4764;
    4764[label="***"];
    4763 -> 4765;
    4765[label="Match_PlayLoop"];
    4763 -> 4766;
    4766[label="***"];
    4763 -> 4767;
    4767[label="***"];
    4763 -> 4768;
    4768 [label="Statement(Statement { syntax: 4768, statement: Some(4769), semicolon: None })"];
    4768 -> 4769;
    4769 [label="If(If { syntax: 4769, if_: Some(4770), lparen: Some(4771), condition: Some(4772), rparen: Some(4780), body: Some(4781), else_: None })"];
    4769 -> 4770;
    4770[label="if"];
    4769 -> 4771;
    4771[label="("];
    4769 -> 4772;
    4772 [label="Expr"];
    4772 -> 4775;
    4775 [label="BinaryOp(BinaryOp { syntax: 4775, lhs: Some(4773), operator: Some(4776), rhs: Some(4777) })"];
    4775 -> 4773;
    4773 [label="Identifier"];
    4773 -> 4774;
    4774[label="Now"];
    4775 -> 4776;
    4776[label=">="];
    4775 -> 4777;
    4777 [label="Expr"];
    4777 -> 4778;
    4778 [label="Identifier"];
    4778 -> 4779;
    4779[label="StartTime"];
    4769 -> 4780;
    4780[label=")"];
    4769 -> 4781;
    4781 [label="Statement(Statement { syntax: 4781, statement: Some(4782), semicolon: Some(4788) })"];
    4781 -> 4782;
    4782 [label="Expr"];
    4782 -> 4785;
    4785 [label="FunctionCall(FunctionCall { syntax: 4785, lhs: Some(4783), lparen: Some(4786), args: [], rparen: Some(4787) })"];
    4785 -> 4783;
    4783 [label="Identifier"];
    4783 -> 4784;
    4784[label="SpawnObjects"];
    4785 -> 4786;
    4786[label="("];
    4785 -> 4787;
    4787[label=")"];
    4781 -> 4788;
    4788[label=";"];
    4763 -> 4789;
    4789 [label="Statement(Statement { syntax: 4789, statement: Some(4790), semicolon: None })"];
    4789 -> 4790;
    4790 [label="Foreach(Foreach { syntax: 4790, foreach: Some(4791), lparen: Some(4792), name1: Some(4793), arrow: None, name2: None, in_: Some(4794), value: Some(4795), rparen: Some(4798), body: Some(4799) })"];
    4790 -> 4791;
    4791[label="foreach"];
    4790 -> 4792;
    4792[label="("];
    4790 -> 4793;
    4793[label="Event"];
    4790 -> 4794;
    4794[label="in"];
    4790 -> 4795;
    4795 [label="Expr"];
    4795 -> 4796;
    4796 [label="Identifier"];
    4796 -> 4797;
    4797[label="PendingEvents"];
    4790 -> 4798;
    4798[label=")"];
    4790 -> 4799;
    4799 [label="Statement(Statement { syntax: 4799, statement: Some(4800), semicolon: None })"];
    4799 -> 4800;
    4800 [label="Block(Block { syntax: 4800, lbrace: Some(4801), statements: [4802], rbrace: Some(5434) })"];
    4800 -> 4801;
    4801[label="{"];
    4800 -> 4802;
    4802 [label="Statement(Statement { syntax: 4802, statement: Some(4803), semicolon: None })"];
    4802 -> 4803;
    4803 [label="If(If { syntax: 4803, if_: Some(4804), lparen: Some(4805), condition: Some(4806), rparen: Some(4829), body: Some(4830), else_: Some(5091) })"];
    4803 -> 4804;
    4804[label="if"];
    4803 -> 4805;
    4805[label="("];
    4803 -> 4806;
    4806 [label="Expr"];
    4806 -> 4814;
    4814 [label="BinaryOp(BinaryOp { syntax: 4814, lhs: Some(4809), operator: Some(4815), rhs: Some(4816) })"];
    4814 -> 4809;
    4809 [label="BinaryOp(BinaryOp { syntax: 4809, lhs: Some(4807), operator: Some(4810), rhs: Some(4811) })"];
    4809 -> 4807;
    4807 [label="Identifier"];
    4807 -> 4808;
    4808[label="Event"];
    4809 -> 4810;
    4810[label="."];
    4809 -> 4811;
    4811 [label="Expr"];
    4811 -> 4812;
    4812 [label="Identifier"];
    4812 -> 4813;
    4813[label="Type"];
    4814 -> 4815;
    4815[label="=="];
    4814 -> 4816;
    4816 [label="Expr"];
    4816 -> 4819;
    4819 [label="BinaryOp(BinaryOp { syntax: 4819, lhs: Some(4817), operator: Some(4820), rhs: Some(4821) })"];
    4819 -> 4817;
    4817 [label="Identifier"];
    4817 -> 4818;
    4818[label="CSmModeEvent"];
    4819 -> 4820;
    4820[label="::"];
    4819 -> 4821;
    4821 [label="Expr"];
    4821 -> 4824;
    4824 [label="BinaryOp(BinaryOp { syntax: 4824, lhs: Some(4822), operator: Some(4825), rhs: Some(4826) })"];
    4824 -> 4822;
    4822 [label="Identifier"];
    4822 -> 4823;
    4823[label="EType"];
    4824 -> 4825;
    4825[label="::"];
    4824 -> 4826;
    4826 [label="Expr"];
    4826 -> 4827;
    4827 [label="Identifier"];
    4827 -> 4828;
    4828[label="OnPlayerTriggersSector"];
    4803 -> 4829;
    4829[label=")"];
    4803 -> 4830;
    4830 [label="Statement(Statement { syntax: 4830, statement: Some(4831), semicolon: None })"];
    4830 -> 4831;
    4831 [label="Block(Block { syntax: 4831, lbrace: Some(4832), statements: [4833, 4843, 4891, 4908, 4941, 4967, 4987, 5023, 5064], rbrace: Some(5090) })"];
    4831 -> 4832;
    4832[label="{"];
    4831 -> 4833;
    4833 [label="Statement(Statement { syntax: 4833, statement: Some(4834), semicolon: None })"];
    4833 -> 4834;
    4834 [label="VarDec(VarDec { syntax: 4834, declare: Some(4835), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(4836), as_: None, alias: None, for_: None, target: None, assignment: Some(4838), value: Some(4839) })"];
    4834 -> 4835;
    4835[label="declare"];
    4834 -> 4836;
    4836 [label="Type(Type { syntax: 4836, basename: Some(4837), members: [], arrays: [] })"];
    4836 -> 4837;
    4837[label="LandmarkId"];
    4834 -> 4838;
    4838[label="="];
    4834 -> 4839;
    4839 [label="Expr"];
    4839 -> 4840;
    4840 [label="Literal"];
    4840 -> 4841;
    4841[label="NullId"];
    4834 -> 4842;
    4842[label=";"];
    4831 -> 4843;
    4843 [label="Statement(Statement { syntax: 4843, statement: Some(4844), semicolon: None })"];
    4843 -> 4844;
    4844 [label="Foreach(Foreach { syntax: 4844, foreach: Some(4845), lparen: Some(4846), name1: Some(4847), arrow: None, name2: None, in_: Some(4848), value: Some(4849), rparen: Some(4852), body: Some(4853) })"];
    4844 -> 4845;
    4845[label="foreach"];
    4844 -> 4846;
    4846[label="("];
    4844 -> 4847;
    4847[label="MapLandmark"];
    4844 -> 4848;
    4848[label="in"];
    4844 -> 4849;
    4849 [label="Expr"];
    4849 -> 4850;
    4850 [label="Identifier"];
    4850 -> 4851;
    4851[label="MapLandmarks_Sector"];
    4844 -> 4852;
    4852[label=")"];
    4844 -> 4853;
    4853 [label="Statement(Statement { syntax: 4853, statement: Some(4854), semicolon: None })"];
    4853 -> 4854;
    4854 [label="If(If { syntax: 4854, if_: Some(4855), lparen: Some(4856), condition: Some(4857), rparen: Some(4875), body: Some(4876), else_: None })"];
    4854 -> 4855;
    4855[label="if"];
    4854 -> 4856;
    4856[label="("];
    4854 -> 4857;
    4857 [label="Expr"];
    4857 -> 4865;
    4865 [label="BinaryOp(BinaryOp { syntax: 4865, lhs: Some(4860), operator: Some(4866), rhs: Some(4867) })"];
    4865 -> 4860;
    4860 [label="BinaryOp(BinaryOp { syntax: 4860, lhs: Some(4858), operator: Some(4861), rhs: Some(4862) })"];
    4860 -> 4858;
    4858 [label="Identifier"];
    4858 -> 4859;
    4859[label="MapLandmark"];
    4860 -> 4861;
    4861[label="."];
    4860 -> 4862;
    4862 [label="Expr"];
    4862 -> 4863;
    4863 [label="Identifier"];
    4863 -> 4864;
    4864[label="Sector"];
    4865 -> 4866;
    4866[label="=="];
    4865 -> 4867;
    4867 [label="Expr"];
    4867 -> 4870;
    4870 [label="BinaryOp(BinaryOp { syntax: 4870, lhs: Some(4868), operator: Some(4871), rhs: Some(4872) })"];
    4870 -> 4868;
    4868 [label="Identifier"];
    4868 -> 4869;
    4869[label="Event"];
    4870 -> 4871;
    4871[label="."];
    4870 -> 4872;
    4872 [label="Expr"];
    4872 -> 4873;
    4873 [label="Identifier"];
    4873 -> 4874;
    4874[label="Sector"];
    4854 -> 4875;
    4875[label=")"];
    4854 -> 4876;
    4876 [label="Statement(Statement { syntax: 4876, statement: Some(4880), semicolon: Some(4890) })"];
    4876 -> 4877;
    4877 [label="Expr"];
    4877 -> 4878;
    4878 [label="Identifier"];
    4878 -> 4879;
    4879[label="LandmarkId"];
    4876 -> 4880;
    4880 [label="Assignment(Assignment { syntax: 4880, lvalue: Some(4877), operator: Some(4881), rvalue: Some(4882) })"];
    4880 -> 4881;
    4881[label="="];
    4880 -> 4882;
    4882 [label="Expr"];
    4882 -> 4885;
    4885 [label="BinaryOp(BinaryOp { syntax: 4885, lhs: Some(4883), operator: Some(4886), rhs: Some(4887) })"];
    4885 -> 4883;
    4883 [label="Identifier"];
    4883 -> 4884;
    4884[label="MapLandmark"];
    4885 -> 4886;
    4886[label="."];
    4885 -> 4887;
    4887 [label="Expr"];
    4887 -> 4888;
    4888 [label="Identifier"];
    4888 -> 4889;
    4889[label="Id"];
    4876 -> 4890;
    4890[label=";"];
    4831 -> 4891;
    4891 [label="Statement(Statement { syntax: 4891, statement: Some(4892), semicolon: None })"];
    4891 -> 4892;
    4892 [label="If(If { syntax: 4892, if_: Some(4893), lparen: Some(4894), condition: Some(4895), rparen: Some(4903), body: Some(4904), else_: None })"];
    4892 -> 4893;
    4893[label="if"];
    4892 -> 4894;
    4894[label="("];
    4892 -> 4895;
    4895 [label="Expr"];
    4895 -> 4898;
    4898 [label="BinaryOp(BinaryOp { syntax: 4898, lhs: Some(4896), operator: Some(4899), rhs: Some(4900) })"];
    4898 -> 4896;
    4896 [label="Identifier"];
    4896 -> 4897;
    4897[label="LandmarkId"];
    4898 -> 4899;
    4899[label="!="];
    4898 -> 4900;
    4900 [label="Expr"];
    4900 -> 4901;
    4901 [label="Identifier"];
    4901 -> 4902;
    4902[label="CenterGoalLandmarkId"];
    4892 -> 4903;
    4903[label=")"];
    4892 -> 4904;
    4904 [label="Statement(Statement { syntax: 4904, statement: Some(4905), semicolon: Some(4907) })"];
    4904 -> 4905;
    4905 [label="Continue"];
    4905 -> 4906;
    4906[label="continue"];
    4904 -> 4907;
    4907[label=";"];
    4831 -> 4908;
    4908 [label="Statement(Statement { syntax: 4908, statement: Some(4909), semicolon: None })"];
    4908 -> 4909;
    4909 [label="If(If { syntax: 4909, if_: Some(4910), lparen: Some(4911), condition: Some(4912), rparen: Some(4936), body: Some(4937), else_: None })"];
    4909 -> 4910;
    4910[label="if"];
    4909 -> 4911;
    4911[label="("];
    4909 -> 4912;
    4912 [label="Expr"];
    4912 -> 4920;
    4920 [label="FunctionCall(FunctionCall { syntax: 4920, lhs: Some(4915), lparen: Some(4921), args: [(4922, None)], rparen: Some(4935) })"];
    4920 -> 4915;
    4915 [label="BinaryOp(BinaryOp { syntax: 4915, lhs: Some(4913), operator: Some(4916), rhs: Some(4917) })"];
    4915 -> 4913;
    4913 [label="Identifier"];
    4913 -> 4914;
    4914[label="G_LoginsTouchedGoal"];
    4915 -> 4916;
    4916[label="."];
    4915 -> 4917;
    4917 [label="Expr"];
    4917 -> 4918;
    4918 [label="Identifier"];
    4918 -> 4919;
    4919[label="exists"];
    4920 -> 4921;
    4921[label="("];
    4920 -> 4922;
    4922 [label="Expr"];
    4922 -> 4925;
    4925 [label="BinaryOp(BinaryOp { syntax: 4925, lhs: Some(4923), operator: Some(4926), rhs: Some(4927) })"];
    4925 -> 4923;
    4923 [label="Identifier"];
    4923 -> 4924;
    4924[label="Event"];
    4925 -> 4926;
    4926[label="."];
    4925 -> 4927;
    4927 [label="Expr"];
    4927 -> 4930;
    4930 [label="BinaryOp(BinaryOp { syntax: 4930, lhs: Some(4928), operator: Some(4931), rhs: Some(4932) })"];
    4930 -> 4928;
    4928 [label="Identifier"];
    4928 -> 4929;
    4929[label="Player"];
    4930 -> 4931;
    4931[label="."];
    4930 -> 4932;
    4932 [label="Expr"];
    4932 -> 4933;
    4933 [label="Identifier"];
    4933 -> 4934;
    4934[label="Login"];
    4920 -> 4935;
    4935[label=")"];
    4909 -> 4936;
    4936[label=")"];
    4909 -> 4937;
    4937 [label="Statement(Statement { syntax: 4937, statement: Some(4938), semicolon: Some(4940) })"];
    4937 -> 4938;
    4938 [label="Continue"];
    4938 -> 4939;
    4939[label="continue"];
    4937 -> 4940;
    4940[label=";"];
    4831 -> 4941;
    4941 [label="Statement(Statement { syntax: 4941, statement: Some(4942), semicolon: Some(4966) })"];
    4941 -> 4942;
    4942 [label="Expr"];
    4942 -> 4950;
    4950 [label="FunctionCall(FunctionCall { syntax: 4950, lhs: Some(4945), lparen: Some(4951), args: [(4952, None)], rparen: Some(4965) })"];
    4950 -> 4945;
    4945 [label="BinaryOp(BinaryOp { syntax: 4945, lhs: Some(4943), operator: Some(4946), rhs: Some(4947) })"];
    4945 -> 4943;
    4943 [label="Identifier"];
    4943 -> 4944;
    4944[label="G_LoginsTouchedGoal"];
    4945 -> 4946;
    4946[label="."];
    4945 -> 4947;
    4947 [label="Expr"];
    4947 -> 4948;
    4948 [label="Identifier"];
    4948 -> 4949;
    4949[label="add"];
    4950 -> 4951;
    4951[label="("];
    4950 -> 4952;
    4952 [label="Expr"];
    4952 -> 4955;
    4955 [label="BinaryOp(BinaryOp { syntax: 4955, lhs: Some(4953), operator: Some(4956), rhs: Some(4957) })"];
    4955 -> 4953;
    4953 [label="Identifier"];
    4953 -> 4954;
    4954[label="Event"];
    4955 -> 4956;
    4956[label="."];
    4955 -> 4957;
    4957 [label="Expr"];
    4957 -> 4960;
    4960 [label="BinaryOp(BinaryOp { syntax: 4960, lhs: Some(4958), operator: Some(4961), rhs: Some(4962) })"];
    4960 -> 4958;
    4958 [label="Identifier"];
    4958 -> 4959;
    4959[label="Player"];
    4960 -> 4961;
    4961[label="."];
    4960 -> 4962;
    4962 [label="Expr"];
    4962 -> 4963;
    4963 [label="Identifier"];
    4963 -> 4964;
    4964[label="Login"];
    4950 -> 4965;
    4965[label=")"];
    4941 -> 4966;
    4966[label=";"];
    4831 -> 4967;
    4967 [label="Statement(Statement { syntax: 4967, statement: Some(4981), semicolon: Some(4986) })"];
    4967 -> 4968;
    4968 [label="Expr"];
    4968 -> 4971;
    4971 [label="BinaryOp(BinaryOp { syntax: 4971, lhs: Some(4969), operator: Some(4972), rhs: Some(4973) })"];
    4971 -> 4969;
    4969 [label="Identifier"];
    4969 -> 4970;
    4970[label="Event"];
    4971 -> 4972;
    4972[label="."];
    4971 -> 4973;
    4973 [label="Expr"];
    4973 -> 4976;
    4976 [label="BinaryOp(BinaryOp { syntax: 4976, lhs: Some(4974), operator: Some(4977), rhs: Some(4978) })"];
    4976 -> 4974;
    4974 [label="Identifier"];
    4974 -> 4975;
    4975[label="Player"];
    4976 -> 4977;
    4977[label="."];
    4976 -> 4978;
    4978 [label="Expr"];
    4978 -> 4979;
    4979 [label="Identifier"];
    4979 -> 4980;
    4980[label="HasShield"];
    4967 -> 4981;
    4981 [label="Assignment(Assignment { syntax: 4981, lvalue: Some(4968), operator: Some(4982), rvalue: Some(4983) })"];
    4981 -> 4982;
    4982[label="="];
    4981 -> 4983;
    4983 [label="Expr"];
    4983 -> 4984;
    4984 [label="Literal"];
    4984 -> 4985;
    4985[label="True"];
    4967 -> 4986;
    4986[label=";"];
    4831 -> 4987;
    4987 [label="Statement(Statement { syntax: 4987, statement: Some(4988), semicolon: None })"];
    4987 -> 4988;
    4988 [label="Foreach(Foreach { syntax: 4988, foreach: Some(4989), lparen: Some(4990), name1: Some(4991), arrow: Some(4992), name2: Some(4993), in_: Some(4994), value: Some(4995), rparen: Some(4998), body: Some(4999) })"];
    4988 -> 4989;
    4989[label="foreach"];
    4988 -> 4990;
    4990[label="("];
    4988 -> 4991;
    4991[label="SkillType"];
    4988 -> 4992;
    4992[label="=>"];
    4988 -> 4993;
    4993[label="SkillPoints"];
    4988 -> 4994;
    4994[label="in"];
    4988 -> 4995;
    4995 [label="Expr"];
    4995 -> 4996;
    4996 [label="Identifier"];
    4996 -> 4997;
    4997[label="C_SkillsPointsOnGoal"];
    4988 -> 4998;
    4998[label=")"];
    4988 -> 4999;
    4999 [label="Statement(Statement { syntax: 4999, statement: Some(5000), semicolon: Some(5022) })"];
    4999 -> 5000;
    5000 [label="Expr"];
    5000 -> 5003;
    5003 [label="FunctionCall(FunctionCall { syntax: 5003, lhs: Some(5001), lparen: Some(5004), args: [(5005, Some(5013)), (5014, Some(5017)), (5018, None)], rparen: Some(5021) })"];
    5003 -> 5001;
    5001 [label="Identifier"];
    5001 -> 5002;
    5002[label="SetPlayerSkill"];
    5003 -> 5004;
    5004[label="("];
    5003 -> 5005;
    5005 [label="Expr"];
    5005 -> 5008;
    5008 [label="BinaryOp(BinaryOp { syntax: 5008, lhs: Some(5006), operator: Some(5009), rhs: Some(5010) })"];
    5008 -> 5006;
    5006 [label="Identifier"];
    5006 -> 5007;
    5007[label="Event"];
    5008 -> 5009;
    5009[label="."];
    5008 -> 5010;
    5010 [label="Expr"];
    5010 -> 5011;
    5011 [label="Identifier"];
    5011 -> 5012;
    5012[label="Player"];
    5003 -> 5013;
    5013[label=","];
    5003 -> 5014;
    5014 [label="Expr"];
    5014 -> 5015;
    5015 [label="Identifier"];
    5015 -> 5016;
    5016[label="SkillType"];
    5003 -> 5017;
    5017[label=","];
    5003 -> 5018;
    5018 [label="Expr"];
    5018 -> 5019;
    5019 [label="Identifier"];
    5019 -> 5020;
    5020[label="SkillPoints"];
    5003 -> 5021;
    5021[label=")"];
    4999 -> 5022;
    5022[label=";"];
    4831 -> 5023;
    5023 [label="Statement(Statement { syntax: 5023, statement: Some(5024), semicolon: None })"];
    5023 -> 5024;
    5024 [label="Foreach(Foreach { syntax: 5024, foreach: Some(5025), lparen: Some(5026), name1: Some(5027), arrow: Some(5028), name2: Some(5029), in_: Some(5030), value: Some(5031), rparen: Some(5034), body: Some(5035) })"];
    5024 -> 5025;
    5025[label="foreach"];
    5024 -> 5026;
    5026[label="("];
    5024 -> 5027;
    5027[label="Weapon"];
    5024 -> 5028;
    5028[label="=>"];
    5024 -> 5029;
    5029[label="Amount"];
    5024 -> 5030;
    5030[label="in"];
    5024 -> 5031;
    5031 [label="Expr"];
    5031 -> 5032;
    5032 [label="Identifier"];
    5032 -> 5033;
    5033[label="C_PlayerInitialWeapons"];
    5024 -> 5034;
    5034[label=")"];
    5024 -> 5035;
    5035 [label="Statement(Statement { syntax: 5035, statement: Some(5036), semicolon: Some(5063) })"];
    5035 -> 5036;
    5036 [label="Expr"];
    5036 -> 5044;
    5044 [label="FunctionCall(FunctionCall { syntax: 5044, lhs: Some(5039), lparen: Some(5045), args: [(5046, Some(5054)), (5055, Some(5058)), (5059, None)], rparen: Some(5062) })"];
    5044 -> 5039;
    5039 [label="BinaryOp(BinaryOp { syntax: 5039, lhs: Some(5037), operator: Some(5040), rhs: Some(5041) })"];
    5039 -> 5037;
    5037 [label="Identifier"];
    5037 -> 5038;
    5038[label="Inventory"];
    5039 -> 5040;
    5040[label="::"];
    5039 -> 5041;
    5041 [label="Expr"];
    5041 -> 5042;
    5042 [label="Identifier"];
    5042 -> 5043;
    5043[label="SetWeaponSlots"];
    5044 -> 5045;
    5045[label="("];
    5044 -> 5046;
    5046 [label="Expr"];
    5046 -> 5049;
    5049 [label="BinaryOp(BinaryOp { syntax: 5049, lhs: Some(5047), operator: Some(5050), rhs: Some(5051) })"];
    5049 -> 5047;
    5047 [label="Identifier"];
    5047 -> 5048;
    5048[label="Event"];
    5049 -> 5050;
    5050[label="."];
    5049 -> 5051;
    5051 [label="Expr"];
    5051 -> 5052;
    5052 [label="Identifier"];
    5052 -> 5053;
    5053[label="Player"];
    5044 -> 5054;
    5054[label=","];
    5044 -> 5055;
    5055 [label="Expr"];
    5055 -> 5056;
    5056 [label="Identifier"];
    5056 -> 5057;
    5057[label="Weapon"];
    5044 -> 5058;
    5058[label=","];
    5044 -> 5059;
    5059 [label="Expr"];
    5059 -> 5060;
    5060 [label="Identifier"];
    5060 -> 5061;
    5061[label="Amount"];
    5044 -> 5062;
    5062[label=")"];
    5035 -> 5063;
    5063[label=";"];
    4831 -> 5064;
    5064 [label="Statement(Statement { syntax: 5064, statement: Some(5065), semicolon: Some(5089) })"];
    5064 -> 5065;
    5065 [label="Expr"];
    5065 -> 5068;
    5068 [label="FunctionCall(FunctionCall { syntax: 5068, lhs: Some(5066), lparen: Some(5069), args: [(5070, None)], rparen: Some(5088) })"];
    5068 -> 5066;
    5066 [label="Identifier"];
    5066 -> 5067;
    5067[label="UIAddPlayerTouchingGoal"];
    5068 -> 5069;
    5069[label="("];
    5068 -> 5070;
    5070 [label="Expr"];
    5070 -> 5073;
    5073 [label="BinaryOp(BinaryOp { syntax: 5073, lhs: Some(5071), operator: Some(5074), rhs: Some(5075) })"];
    5073 -> 5071;
    5071 [label="Identifier"];
    5071 -> 5072;
    5072[label="Event"];
    5073 -> 5074;
    5074[label="."];
    5073 -> 5075;
    5075 [label="Expr"];
    5075 -> 5078;
    5078 [label="BinaryOp(BinaryOp { syntax: 5078, lhs: Some(5076), operator: Some(5079), rhs: Some(5080) })"];
    5078 -> 5076;
    5076 [label="Identifier"];
    5076 -> 5077;
    5077[label="Player"];
    5078 -> 5079;
    5079[label="."];
    5078 -> 5080;
    5080 [label="Expr"];
    5080 -> 5083;
    5083 [label="BinaryOp(BinaryOp { syntax: 5083, lhs: Some(5081), operator: Some(5084), rhs: Some(5085) })"];
    5083 -> 5081;
    5081 [label="Identifier"];
    5081 -> 5082;
    5082[label="User"];
    5083 -> 5084;
    5084[label="."];
    5083 -> 5085;
    5085 [label="Expr"];
    5085 -> 5086;
    5086 [label="Identifier"];
    5086 -> 5087;
    5087[label="Login"];
    5068 -> 5088;
    5088[label=")"];
    5064 -> 5089;
    5089[label=";"];
    4831 -> 5090;
    5090[label="}"];
    4803 -> 5091;
    5091 [label="Else(Else { syntax: 5091, else_: Some(5092), if_: Some(5093), body: None })"];
    5091 -> 5092;
    5092[label="else"];
    5091 -> 5093;
    5093 [label="If(If { syntax: 5093, if_: Some(5094), lparen: Some(5095), condition: Some(5096), rparen: Some(5119), body: Some(5120), else_: None })"];
    5093 -> 5094;
    5094[label="if"];
    5093 -> 5095;
    5095[label="("];
    5093 -> 5096;
    5096 [label="Expr"];
    5096 -> 5104;
    5104 [label="BinaryOp(BinaryOp { syntax: 5104, lhs: Some(5099), operator: Some(5105), rhs: Some(5106) })"];
    5104 -> 5099;
    5099 [label="BinaryOp(BinaryOp { syntax: 5099, lhs: Some(5097), operator: Some(5100), rhs: Some(5101) })"];
    5099 -> 5097;
    5097 [label="Identifier"];
    5097 -> 5098;
    5098[label="Event"];
    5099 -> 5100;
    5100[label="."];
    5099 -> 5101;
    5101 [label="Expr"];
    5101 -> 5102;
    5102 [label="Identifier"];
    5102 -> 5103;
    5103[label="Type"];
    5104 -> 5105;
    5105[label="=="];
    5104 -> 5106;
    5106 [label="Expr"];
    5106 -> 5109;
    5109 [label="BinaryOp(BinaryOp { syntax: 5109, lhs: Some(5107), operator: Some(5110), rhs: Some(5111) })"];
    5109 -> 5107;
    5107 [label="Identifier"];
    5107 -> 5108;
    5108[label="CSmModeEvent"];
    5109 -> 5110;
    5110[label="::"];
    5109 -> 5111;
    5111 [label="Expr"];
    5111 -> 5114;
    5114 [label="BinaryOp(BinaryOp { syntax: 5114, lhs: Some(5112), operator: Some(5115), rhs: Some(5116) })"];
    5114 -> 5112;
    5112 [label="Identifier"];
    5112 -> 5113;
    5113[label="EType"];
    5114 -> 5115;
    5115[label="::"];
    5114 -> 5116;
    5116 [label="Expr"];
    5116 -> 5117;
    5117 [label="Identifier"];
    5117 -> 5118;
    5118[label="OnPlayerRequestRespawn"];
    5093 -> 5119;
    5119[label=")"];
    5093 -> 5120;
    5120 [label="Statement(Statement { syntax: 5120, statement: Some(5121), semicolon: None })"];
    5120 -> 5121;
    5121 [label="Block(Block { syntax: 5121, lbrace: Some(5122), statements: [5123, 5139, 5155, 5422], rbrace: Some(5433) })"];
    5121 -> 5122;
    5122[label="{"];
    5121 -> 5123;
    5123 [label="Statement(Statement { syntax: 5123, statement: Some(5124), semicolon: None })"];
    5123 -> 5124;
    5124 [label="VarDec(VarDec { syntax: 5124, declare: Some(5125), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(5126), name: Some(5128), as_: None, alias: None, for_: Some(5129), target: Some(5130), assignment: None, value: None })"];
    5124 -> 5125;
    5125[label="declare"];
    5124 -> 5126;
    5126 [label="Type(Type { syntax: 5126, basename: Some(5127), members: [], arrays: [] })"];
    5126 -> 5127;
    5127[label="Boolean"];
    5124 -> 5128;
    5128[label="PlayerRequestsRespawn"];
    5124 -> 5129;
    5129[label="for"];
    5124 -> 5130;
    5130 [label="Expr"];
    5130 -> 5133;
    5133 [label="BinaryOp(BinaryOp { syntax: 5133, lhs: Some(5131), operator: Some(5134), rhs: Some(5135) })"];
    5133 -> 5131;
    5131 [label="Identifier"];
    5131 -> 5132;
    5132[label="Event"];
    5133 -> 5134;
    5134[label="."];
    5133 -> 5135;
    5135 [label="Expr"];
    5135 -> 5136;
    5136 [label="Identifier"];
    5136 -> 5137;
    5137[label="Player"];
    5124 -> 5138;
    5138[label=";"];
    5121 -> 5139;
    5139 [label="Statement(Statement { syntax: 5139, statement: Some(5140), semicolon: None })"];
    5139 -> 5140;
    5140 [label="VarDec(VarDec { syntax: 5140, declare: Some(5141), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(5142), name: Some(5144), as_: None, alias: None, for_: Some(5145), target: Some(5146), assignment: None, value: None })"];
    5140 -> 5141;
    5141[label="declare"];
    5140 -> 5142;
    5142 [label="Type(Type { syntax: 5142, basename: Some(5143), members: [], arrays: [] })"];
    5142 -> 5143;
    5143[label="Integer"];
    5140 -> 5144;
    5144[label="PlayerRespawnStartTime"];
    5140 -> 5145;
    5145[label="for"];
    5140 -> 5146;
    5146 [label="Expr"];
    5146 -> 5149;
    5149 [label="BinaryOp(BinaryOp { syntax: 5149, lhs: Some(5147), operator: Some(5150), rhs: Some(5151) })"];
    5149 -> 5147;
    5147 [label="Identifier"];
    5147 -> 5148;
    5148[label="Event"];
    5149 -> 5150;
    5150[label="."];
    5149 -> 5151;
    5151 [label="Expr"];
    5151 -> 5152;
    5152 [label="Identifier"];
    5152 -> 5153;
    5153[label="Player"];
    5140 -> 5154;
    5154[label=";"];
    5121 -> 5155;
    5155 [label="Statement(Statement { syntax: 5155, statement: Some(5156), semicolon: None })"];
    5155 -> 5156;
    5156 [label="If(If { syntax: 5156, if_: Some(5157), lparen: Some(5158), condition: Some(5159), rparen: Some(5162), body: Some(5163), else_: Some(5213) })"];
    5156 -> 5157;
    5157[label="if"];
    5156 -> 5158;
    5158[label="("];
    5156 -> 5159;
    5159 [label="Expr"];
    5159 -> 5160;
    5160 [label="Identifier"];
    5160 -> 5161;
    5161[label="PlayerRequestsRespawn"];
    5156 -> 5162;
    5162[label=")"];
    5156 -> 5163;
    5163 [label="Statement(Statement { syntax: 5163, statement: Some(5164), semicolon: None })"];
    5163 -> 5164;
    5164 [label="Block(Block { syntax: 5164, lbrace: Some(5165), statements: [5166, 5176, 5189], rbrace: Some(5212) })"];
    5164 -> 5165;
    5165[label="{"];
    5164 -> 5166;
    5166 [label="Statement(Statement { syntax: 5166, statement: Some(5170), semicolon: Some(5175) })"];
    5166 -> 5167;
    5167 [label="Expr"];
    5167 -> 5168;
    5168 [label="Identifier"];
    5168 -> 5169;
    5169[label="PlayerRequestsRespawn"];
    5166 -> 5170;
    5170 [label="Assignment(Assignment { syntax: 5170, lvalue: Some(5167), operator: Some(5171), rvalue: Some(5172) })"];
    5170 -> 5171;
    5171[label="="];
    5170 -> 5172;
    5172 [label="Expr"];
    5172 -> 5173;
    5173 [label="Literal"];
    5173 -> 5174;
    5174[label="False"];
    5166 -> 5175;
    5175[label=";"];
    5164 -> 5176;
    5176 [label="Statement(Statement { syntax: 5176, statement: Some(5180), semicolon: Some(5188) })"];
    5176 -> 5177;
    5177 [label="Expr"];
    5177 -> 5178;
    5178 [label="Identifier"];
    5178 -> 5179;
    5179[label="PlayerRespawnStartTime"];
    5176 -> 5180;
    5180 [label="Assignment(Assignment { syntax: 5180, lvalue: Some(5177), operator: Some(5181), rvalue: Some(5182) })"];
    5180 -> 5181;
    5181[label="="];
    5180 -> 5182;
    5182 [label="Expr"];
    5182 -> 5183;
    5183 [label="UnOp(UnOp { syntax: 5183, operator: Some(5184), operand: Some(5185) })"];
    5183 -> 5184;
    5184[label="-"];
    5183 -> 5185;
    5185 [label="Expr"];
    5185 -> 5186;
    5186 [label="Literal"];
    5186 -> 5187;
    5187[label="1"];
    5176 -> 5188;
    5188[label=";"];
    5164 -> 5189;
    5189 [label="Statement(Statement { syntax: 5189, statement: Some(5190), semicolon: Some(5211) })"];
    5189 -> 5190;
    5190 [label="Expr"];
    5190 -> 5193;
    5193 [label="FunctionCall(FunctionCall { syntax: 5193, lhs: Some(5191), lparen: Some(5194), args: [(5195, Some(5203)), (5204, None)], rparen: Some(5210) })"];
    5193 -> 5191;
    5191 [label="Identifier"];
    5191 -> 5192;
    5192[label="UISetRespawnStartTime"];
    5193 -> 5194;
    5194[label="("];
    5193 -> 5195;
    5195 [label="Expr"];
    5195 -> 5198;
    5198 [label="BinaryOp(BinaryOp { syntax: 5198, lhs: Some(5196), operator: Some(5199), rhs: Some(5200) })"];
    5198 -> 5196;
    5196 [label="Identifier"];
    5196 -> 5197;
    5197[label="Event"];
    5198 -> 5199;
    5199[label="."];
    5198 -> 5200;
    5200 [label="Expr"];
    5200 -> 5201;
    5201 [label="Identifier"];
    5201 -> 5202;
    5202[label="Player"];
    5193 -> 5203;
    5203[label=","];
    5193 -> 5204;
    5204 [label="Expr"];
    5204 -> 5205;
    5205 [label="UnOp(UnOp { syntax: 5205, operator: Some(5206), operand: Some(5207) })"];
    5205 -> 5206;
    5206[label="-"];
    5205 -> 5207;
    5207 [label="Expr"];
    5207 -> 5208;
    5208 [label="Literal"];
    5208 -> 5209;
    5209[label="1"];
    5193 -> 5210;
    5210[label=")"];
    5189 -> 5211;
    5211[label=";"];
    5164 -> 5212;
    5212[label="}"];
    5156 -> 5213;
    5213 [label="Else(Else { syntax: 5213, else_: Some(5214), if_: Some(5215), body: None })"];
    5213 -> 5214;
    5214[label="else"];
    5213 -> 5215;
    5215 [label="If(If { syntax: 5215, if_: Some(5216), lparen: Some(5217), condition: Some(5218), rparen: Some(5224), body: Some(5225), else_: Some(5258) })"];
    5215 -> 5216;
    5216[label="if"];
    5215 -> 5217;
    5217[label="("];
    5215 -> 5218;
    5218 [label="Expr"];
    5218 -> 5219;
    5219 [label="UnOp(UnOp { syntax: 5219, operator: Some(5220), operand: Some(5221) })"];
    5219 -> 5220;
    5220[label="!"];
    5219 -> 5221;
    5221 [label="Expr"];
    5221 -> 5222;
    5222 [label="Identifier"];
    5222 -> 5223;
    5223[label="S_AllowPlayersRespawn"];
    5215 -> 5224;
    5224[label=")"];
    5215 -> 5225;
    5225 [label="Statement(Statement { syntax: 5225, statement: Some(5226), semicolon: Some(5257) })"];
    5225 -> 5226;
    5226 [label="Expr"];
    5226 -> 5234;
    5234 [label="FunctionCall(FunctionCall { syntax: 5234, lhs: Some(5229), lparen: Some(5235), args: [(5236, Some(5244)), (5245, Some(5248)), (5249, Some(5252)), (5253, None)], rparen: Some(5256) })"];
    5234 -> 5229;
    5229 [label="BinaryOp(BinaryOp { syntax: 5229, lhs: Some(5227), operator: Some(5230), rhs: Some(5231) })"];
    5229 -> 5227;
    5227 [label="Identifier"];
    5227 -> 5228;
    5228[label="Translations"];
    5229 -> 5230;
    5230[label="::"];
    5229 -> 5231;
    5231 [label="Expr"];
    5231 -> 5232;
    5232 [label="Identifier"];
    5232 -> 5233;
    5233[label="SendStatusMessage"];
    5234 -> 5235;
    5235[label="("];
    5234 -> 5236;
    5236 [label="Expr"];
    5236 -> 5239;
    5239 [label="BinaryOp(BinaryOp { syntax: 5239, lhs: Some(5237), operator: Some(5240), rhs: Some(5241) })"];
    5239 -> 5237;
    5237 [label="Identifier"];
    5237 -> 5238;
    5238[label="Event"];
    5239 -> 5240;
    5240[label="."];
    5239 -> 5241;
    5241 [label="Expr"];
    5241 -> 5242;
    5242 [label="Identifier"];
    5242 -> 5243;
    5243[label="Player"];
    5234 -> 5244;
    5244[label=","];
    5234 -> 5245;
    5245 [label="Expr"];
    5245 -> 5246;
    5246 [label="Literal"];
    5246 -> 5247;
    5247[label="\"Respawn is not allowed on this server\""];
    5234 -> 5248;
    5248[label=","];
    5234 -> 5249;
    5249 [label="Expr"];
    5249 -> 5250;
    5250 [label="Literal"];
    5250 -> 5251;
    5251[label="3000"];
    5234 -> 5252;
    5252[label=","];
    5234 -> 5253;
    5253 [label="Expr"];
    5253 -> 5254;
    5254 [label="Literal"];
    5254 -> 5255;
    5255[label="0"];
    5234 -> 5256;
    5256[label=")"];
    5225 -> 5257;
    5257[label=";"];
    5215 -> 5258;
    5258 [label="Else(Else { syntax: 5258, else_: Some(5259), if_: Some(5260), body: None })"];
    5258 -> 5259;
    5259[label="else"];
    5258 -> 5260;
    5260 [label="If(If { syntax: 5260, if_: Some(5261), lparen: Some(5262), condition: Some(5263), rparen: Some(5290), body: Some(5291), else_: Some(5324) })"];
    5260 -> 5261;
    5261[label="if"];
    5260 -> 5262;
    5262[label="("];
    5260 -> 5263;
    5263 [label="Expr"];
    5263 -> 5274;
    5274 [label="FunctionCall(FunctionCall { syntax: 5274, lhs: Some(5264), lparen: Some(5275), args: [(5276, None)], rparen: Some(5289) })"];
    5274 -> 5264;
    5264 [label="UnOp(UnOp { syntax: 5264, operator: Some(5265), operand: Some(5266) })"];
    5264 -> 5265;
    5265[label="!"];
    5264 -> 5266;
    5266 [label="Expr"];
    5266 -> 5269;
    5269 [label="BinaryOp(BinaryOp { syntax: 5269, lhs: Some(5267), operator: Some(5270), rhs: Some(5271) })"];
    5269 -> 5267;
    5267 [label="Identifier"];
    5267 -> 5268;
    5268[label="G_LoginsTouchedGoal"];
    5269 -> 5270;
    5270[label="."];
    5269 -> 5271;
    5271 [label="Expr"];
    5271 -> 5272;
    5272 [label="Identifier"];
    5272 -> 5273;
    5273[label="exists"];
    5274 -> 5275;
    5275[label="("];
    5274 -> 5276;
    5276 [label="Expr"];
    5276 -> 5279;
    5279 [label="BinaryOp(BinaryOp { syntax: 5279, lhs: Some(5277), operator: Some(5280), rhs: Some(5281) })"];
    5279 -> 5277;
    5277 [label="Identifier"];
    5277 -> 5278;
    5278[label="Event"];
    5279 -> 5280;
    5280[label="."];
    5279 -> 5281;
    5281 [label="Expr"];
    5281 -> 5284;
    5284 [label="BinaryOp(BinaryOp { syntax: 5284, lhs: Some(5282), operator: Some(5285), rhs: Some(5286) })"];
    5284 -> 5282;
    5282 [label="Identifier"];
    5282 -> 5283;
    5283[label="Player"];
    5284 -> 5285;
    5285[label="."];
    5284 -> 5286;
    5286 [label="Expr"];
    5286 -> 5287;
    5287 [label="Identifier"];
    5287 -> 5288;
    5288[label="Login"];
    5274 -> 5289;
    5289[label=")"];
    5260 -> 5290;
    5290[label=")"];
    5260 -> 5291;
    5291 [label="Statement(Statement { syntax: 5291, statement: Some(5292), semicolon: Some(5323) })"];
    5291 -> 5292;
    5292 [label="Expr"];
    5292 -> 5300;
    5300 [label="FunctionCall(FunctionCall { syntax: 5300, lhs: Some(5295), lparen: Some(5301), args: [(5302, Some(5310)), (5311, Some(5314)), (5315, Some(5318)), (5319, None)], rparen: Some(5322) })"];
    5300 -> 5295;
    5295 [label="BinaryOp(BinaryOp { syntax: 5295, lhs: Some(5293), operator: Some(5296), rhs: Some(5297) })"];
    5295 -> 5293;
    5293 [label="Identifier"];
    5293 -> 5294;
    5294[label="Translations"];
    5295 -> 5296;
    5296[label="::"];
    5295 -> 5297;
    5297 [label="Expr"];
    5297 -> 5298;
    5298 [label="Identifier"];
    5298 -> 5299;
    5299[label="SendStatusMessage"];
    5300 -> 5301;
    5301[label="("];
    5300 -> 5302;
    5302 [label="Expr"];
    5302 -> 5305;
    5305 [label="BinaryOp(BinaryOp { syntax: 5305, lhs: Some(5303), operator: Some(5306), rhs: Some(5307) })"];
    5305 -> 5303;
    5303 [label="Identifier"];
    5303 -> 5304;
    5304[label="Event"];
    5305 -> 5306;
    5306[label="."];
    5305 -> 5307;
    5307 [label="Expr"];
    5307 -> 5308;
    5308 [label="Identifier"];
    5308 -> 5309;
    5309[label="Player"];
    5300 -> 5310;
    5310[label=","];
    5300 -> 5311;
    5311 [label="Expr"];
    5311 -> 5312;
    5312 [label="Literal"];
    5312 -> 5313;
    5313[label="\"You must touch the Goal before respawning!\""];
    5300 -> 5314;
    5314[label=","];
    5300 -> 5315;
    5315 [label="Expr"];
    5315 -> 5316;
    5316 [label="Literal"];
    5316 -> 5317;
    5317[label="3000"];
    5300 -> 5318;
    5318[label=","];
    5300 -> 5319;
    5319 [label="Expr"];
    5319 -> 5320;
    5320 [label="Literal"];
    5320 -> 5321;
    5321[label="0"];
    5300 -> 5322;
    5322[label=")"];
    5291 -> 5323;
    5323[label=";"];
    5260 -> 5324;
    5324 [label="Else(Else { syntax: 5324, else_: Some(5325), if_: Some(5326), body: None })"];
    5324 -> 5325;
    5325[label="else"];
    5324 -> 5326;
    5326 [label="If(If { syntax: 5326, if_: Some(5327), lparen: Some(5328), condition: Some(5329), rparen: Some(5342), body: Some(5343), else_: Some(5376) })"];
    5326 -> 5327;
    5327[label="if"];
    5326 -> 5328;
    5328[label="("];
    5326 -> 5329;
    5329 [label="Expr"];
    5329 -> 5337;
    5337 [label="BinaryOp(BinaryOp { syntax: 5337, lhs: Some(5332), operator: Some(5338), rhs: Some(5339) })"];
    5337 -> 5332;
    5332 [label="BinaryOp(BinaryOp { syntax: 5332, lhs: Some(5330), operator: Some(5333), rhs: Some(5334) })"];
    5332 -> 5330;
    5330 [label="Identifier"];
    5330 -> 5331;
    5331[label="G_RespawnLandmarks"];
    5332 -> 5333;
    5333[label="."];
    5332 -> 5334;
    5334 [label="Expr"];
    5334 -> 5335;
    5335 [label="Identifier"];
    5335 -> 5336;
    5336[label="count"];
    5337 -> 5338;
    5338[label="<="];
    5337 -> 5339;
    5339 [label="Expr"];
    5339 -> 5340;
    5340 [label="Literal"];
    5340 -> 5341;
    5341[label="0"];
    5326 -> 5342;
    5342[label=")"];
    5326 -> 5343;
    5343 [label="Statement(Statement { syntax: 5343, statement: Some(5344), semicolon: Some(5375) })"];
    5343 -> 5344;
    5344 [label="Expr"];
    5344 -> 5352;
    5352 [label="FunctionCall(FunctionCall { syntax: 5352, lhs: Some(5347), lparen: Some(5353), args: [(5354, Some(5362)), (5363, Some(5366)), (5367, Some(5370)), (5371, None)], rparen: Some(5374) })"];
    5352 -> 5347;
    5347 [label="BinaryOp(BinaryOp { syntax: 5347, lhs: Some(5345), operator: Some(5348), rhs: Some(5349) })"];
    5347 -> 5345;
    5345 [label="Identifier"];
    5345 -> 5346;
    5346[label="Translations"];
    5347 -> 5348;
    5348[label="::"];
    5347 -> 5349;
    5349 [label="Expr"];
    5349 -> 5350;
    5350 [label="Identifier"];
    5350 -> 5351;
    5351[label="SendStatusMessage"];
    5352 -> 5353;
    5353[label="("];
    5352 -> 5354;
    5354 [label="Expr"];
    5354 -> 5357;
    5357 [label="BinaryOp(BinaryOp { syntax: 5357, lhs: Some(5355), operator: Some(5358), rhs: Some(5359) })"];
    5357 -> 5355;
    5355 [label="Identifier"];
    5355 -> 5356;
    5356[label="Event"];
    5357 -> 5358;
    5358[label="."];
    5357 -> 5359;
    5359 [label="Expr"];
    5359 -> 5360;
    5360 [label="Identifier"];
    5360 -> 5361;
    5361[label="Player"];
    5352 -> 5362;
    5362[label=","];
    5352 -> 5363;
    5363 [label="Expr"];
    5363 -> 5364;
    5364 [label="Literal"];
    5364 -> 5365;
    5365[label="\"No respawn Checkpoints available on map!\""];
    5352 -> 5366;
    5366[label=","];
    5352 -> 5367;
    5367 [label="Expr"];
    5367 -> 5368;
    5368 [label="Literal"];
    5368 -> 5369;
    5369[label="3000"];
    5352 -> 5370;
    5370[label=","];
    5352 -> 5371;
    5371 [label="Expr"];
    5371 -> 5372;
    5372 [label="Literal"];
    5372 -> 5373;
    5373[label="0"];
    5352 -> 5374;
    5374[label=")"];
    5343 -> 5375;
    5375[label=";"];
    5326 -> 5376;
    5376 [label="Else(Else { syntax: 5376, else_: Some(5377), if_: None, body: Some(5378) })"];
    5376 -> 5377;
    5377[label="else"];
    5376 -> 5378;
    5378 [label="Statement(Statement { syntax: 5378, statement: Some(5379), semicolon: None })"];
    5378 -> 5379;
    5379 [label="Block(Block { syntax: 5379, lbrace: Some(5380), statements: [5381, 5391, 5401], rbrace: Some(5421) })"];
    5379 -> 5380;
    5380[label="{"];
    5379 -> 5381;
    5381 [label="Statement(Statement { syntax: 5381, statement: Some(5385), semicolon: Some(5390) })"];
    5381 -> 5382;
    5382 [label="Expr"];
    5382 -> 5383;
    5383 [label="Identifier"];
    5383 -> 5384;
    5384[label="PlayerRequestsRespawn"];
    5381 -> 5385;
    5385 [label="Assignment(Assignment { syntax: 5385, lvalue: Some(5382), operator: Some(5386), rvalue: Some(5387) })"];
    5385 -> 5386;
    5386[label="="];
    5385 -> 5387;
    5387 [label="Expr"];
    5387 -> 5388;
    5388 [label="Literal"];
    5388 -> 5389;
    5389[label="True"];
    5381 -> 5390;
    5390[label=";"];
    5379 -> 5391;
    5391 [label="Statement(Statement { syntax: 5391, statement: Some(5395), semicolon: Some(5400) })"];
    5391 -> 5392;
    5392 [label="Expr"];
    5392 -> 5393;
    5393 [label="Identifier"];
    5393 -> 5394;
    5394[label="PlayerRespawnStartTime"];
    5391 -> 5395;
    5395 [label="Assignment(Assignment { syntax: 5395, lvalue: Some(5392), operator: Some(5396), rvalue: Some(5397) })"];
    5395 -> 5396;
    5396[label="="];
    5395 -> 5397;
    5397 [label="Expr"];
    5397 -> 5398;
    5398 [label="Identifier"];
    5398 -> 5399;
    5399[label="Now"];
    5391 -> 5400;
    5400[label=";"];
    5379 -> 5401;
    5401 [label="Statement(Statement { syntax: 5401, statement: Some(5402), semicolon: Some(5420) })"];
    5401 -> 5402;
    5402 [label="Expr"];
    5402 -> 5405;
    5405 [label="FunctionCall(FunctionCall { syntax: 5405, lhs: Some(5403), lparen: Some(5406), args: [(5407, Some(5415)), (5416, None)], rparen: Some(5419) })"];
    5405 -> 5403;
    5403 [label="Identifier"];
    5403 -> 5404;
    5404[label="UISetRespawnStartTime"];
    5405 -> 5406;
    5406[label="("];
    5405 -> 5407;
    5407 [label="Expr"];
    5407 -> 5410;
    5410 [label="BinaryOp(BinaryOp { syntax: 5410, lhs: Some(5408), operator: Some(5411), rhs: Some(5412) })"];
    5410 -> 5408;
    5408 [label="Identifier"];
    5408 -> 5409;
    5409[label="Event"];
    5410 -> 5411;
    5411[label="."];
    5410 -> 5412;
    5412 [label="Expr"];
    5412 -> 5413;
    5413 [label="Identifier"];
    5413 -> 5414;
    5414[label="Player"];
    5405 -> 5415;
    5415[label=","];
    5405 -> 5416;
    5416 [label="Expr"];
    5416 -> 5417;
    5417 [label="Identifier"];
    5417 -> 5418;
    5418[label="Now"];
    5405 -> 5419;
    5419[label=")"];
    5401 -> 5420;
    5420[label=";"];
    5379 -> 5421;
    5421[label="}"];
    5121 -> 5422;
    5422 [label="Statement(Statement { syntax: 5422, statement: Some(5423), semicolon: Some(5432) })"];
    5422 -> 5423;
    5423 [label="Expr"];
    5423 -> 5426;
    5426 [label="FunctionCall(FunctionCall { syntax: 5426, lhs: Some(5424), lparen: Some(5427), args: [(5428, None)], rparen: Some(5431) })"];
    5426 -> 5424;
    5424 [label="Identifier"];
    5424 -> 5425;
    5425[label="Discard"];
    5426 -> 5427;
    5427[label="("];
    5426 -> 5428;
    5428 [label="Expr"];
    5428 -> 5429;
    5429 [label="Identifier"];
    5429 -> 5430;
    5430[label="Event"];
    5426 -> 5431;
    5431[label=")"];
    5422 -> 5432;
    5432[label=";"];
    5121 -> 5433;
    5433[label="}"];
    4800 -> 5434;
    5434[label="}"];
    4763 -> 5435;
    5435 [label="Statement(Statement { syntax: 5435, statement: Some(5436), semicolon: None })"];
    5435 -> 5436;
    5436 [label="If(If { syntax: 5436, if_: Some(5437), lparen: Some(5438), condition: Some(5439), rparen: Some(5482), body: Some(5483), else_: None })"];
    5436 -> 5437;
    5437[label="if"];
    5436 -> 5438;
    5438[label="("];
    5436 -> 5439;
    5439 [label="Expr"];
    5439 -> 5452;
    5452 [label="BinaryOp(BinaryOp { syntax: 5452, lhs: Some(5442), operator: Some(5453), rhs: Some(5454) })"];
    5452 -> 5442;
    5442 [label="BinaryOp(BinaryOp { syntax: 5442, lhs: Some(5440), operator: Some(5443), rhs: Some(5444) })"];
    5442 -> 5440;
    5440 [label="Identifier"];
    5440 -> 5441;
    5441[label="Now"];
    5442 -> 5443;
    5443[label=">="];
    5442 -> 5444;
    5444 [label="Expr"];
    5444 -> 5447;
    5447 [label="BinaryOp(BinaryOp { syntax: 5447, lhs: Some(5445), operator: Some(5448), rhs: Some(5449) })"];
    5447 -> 5445;
    5445 [label="Identifier"];
    5445 -> 5446;
    5446[label="StartTime"];
    5447 -> 5448;
    5448[label="-"];
    5447 -> 5449;
    5449 [label="Expr"];
    5449 -> 5450;
    5450 [label="Literal"];
    5450 -> 5451;
    5451[label="1500"];
    5452 -> 5453;
    5453[label="&&"];
    5452 -> 5454;
    5454 [label="Expr"];
    5454 -> 5467;
    5467 [label="BinaryOp(BinaryOp { syntax: 5467, lhs: Some(5457), operator: Some(5468), rhs: Some(5469) })"];
    5467 -> 5457;
    5457 [label="BinaryOp(BinaryOp { syntax: 5457, lhs: Some(5455), operator: Some(5458), rhs: Some(5459) })"];
    5457 -> 5455;
    5455 [label="Identifier"];
    5455 -> 5456;
    5456[label="UIManager"];
    5457 -> 5458;
    5458[label="."];
    5457 -> 5459;
    5459 [label="Expr"];
    5459 -> 5462;
    5462 [label="BinaryOp(BinaryOp { syntax: 5462, lhs: Some(5460), operator: Some(5463), rhs: Some(5464) })"];
    5462 -> 5460;
    5460 [label="Identifier"];
    5460 -> 5461;
    5461[label="UIAll"];
    5462 -> 5463;
    5463[label="."];
    5462 -> 5464;
    5464 [label="Expr"];
    5464 -> 5465;
    5465 [label="Identifier"];
    5465 -> 5466;
    5466[label="UISequence"];
    5467 -> 5468;
    5468[label="!="];
    5467 -> 5469;
    5469 [label="Expr"];
    5469 -> 5472;
    5472 [label="BinaryOp(BinaryOp { syntax: 5472, lhs: Some(5470), operator: Some(5473), rhs: Some(5474) })"];
    5472 -> 5470;
    5470 [label="Identifier"];
    5470 -> 5471;
    5471[label="CUIConfig"];
    5472 -> 5473;
    5473[label="::"];
    5472 -> 5474;
    5474 [label="Expr"];
    5474 -> 5477;
    5477 [label="BinaryOp(BinaryOp { syntax: 5477, lhs: Some(5475), operator: Some(5478), rhs: Some(5479) })"];
    5477 -> 5475;
    5475 [label="Identifier"];
    5475 -> 5476;
    5476[label="EUISequence"];
    5477 -> 5478;
    5478[label="::"];
    5477 -> 5479;
    5479 [label="Expr"];
    5479 -> 5480;
    5480 [label="Identifier"];
    5480 -> 5481;
    5481[label="Playing"];
    5436 -> 5482;
    5482[label=")"];
    5436 -> 5483;
    5483 [label="Statement(Statement { syntax: 5483, statement: Some(5484), semicolon: None })"];
    5483 -> 5484;
    5484 [label="Block(Block { syntax: 5484, lbrace: Some(5485), statements: [5486, 5521, 5551, 5571], rbrace: Some(5584) })"];
    5484 -> 5485;
    5485[label="{"];
    5484 -> 5486;
    5486 [label="Statement(Statement { syntax: 5486, statement: Some(5487), semicolon: Some(5520) })"];
    5486 -> 5487;
    5487 [label="Expr"];
    5487 -> 5495;
    5495 [label="FunctionCall(FunctionCall { syntax: 5495, lhs: Some(5490), lparen: Some(5496), args: [(5497, Some(5500)), (5501, None)], rparen: Some(5519) })"];
    5495 -> 5490;
    5490 [label="BinaryOp(BinaryOp { syntax: 5490, lhs: Some(5488), operator: Some(5491), rhs: Some(5492) })"];
    5490 -> 5488;
    5488 [label="Identifier"];
    5488 -> 5489;
    5489[label="Interfancy"];
    5490 -> 5491;
    5491[label="::"];
    5490 -> 5492;
    5492 [label="Expr"];
    5492 -> 5493;
    5493 [label="Identifier"];
    5493 -> 5494;
    5494[label="SetModuleVisibility"];
    5495 -> 5496;
    5496[label="("];
    5495 -> 5497;
    5497 [label="Expr"];
    5497 -> 5498;
    5498 [label="Literal"];
    5498 -> 5499;
    5499[label="\"Countdown\""];
    5495 -> 5500;
    5500[label=","];
    5495 -> 5501;
    5501 [label="Expr"];
    5501 -> 5504;
    5504 [label="BinaryOp(BinaryOp { syntax: 5504, lhs: Some(5502), operator: Some(5505), rhs: Some(5506) })"];
    5504 -> 5502;
    5502 [label="Identifier"];
    5502 -> 5503;
    5503[label="Now"];
    5504 -> 5505;
    5505[label="<"];
    5504 -> 5506;
    5506 [label="Expr"];
    5506 -> 5509;
    5509 [label="BinaryOp(BinaryOp { syntax: 5509, lhs: Some(5507), operator: Some(5510), rhs: Some(5511) })"];
    5509 -> 5507;
    5507 [label="Identifier"];
    5507 -> 5508;
    5508[label="UIManager"];
    5509 -> 5510;
    5510[label="."];
    5509 -> 5511;
    5511 [label="Expr"];
    5511 -> 5514;
    5514 [label="BinaryOp(BinaryOp { syntax: 5514, lhs: Some(5512), operator: Some(5515), rhs: Some(5516) })"];
    5514 -> 5512;
    5512 [label="Identifier"];
    5512 -> 5513;
    5513[label="UIAll"];
    5514 -> 5515;
    5515[label="."];
    5514 -> 5516;
    5516 [label="Expr"];
    5516 -> 5517;
    5517 [label="Identifier"];
    5517 -> 5518;
    5518[label="CountdownEndTime"];
    5495 -> 5519;
    5519[label=")"];
    5486 -> 5520;
    5520[label=";"];
    5484 -> 5521;
    5521 [label="Statement(Statement { syntax: 5521, statement: Some(5535), semicolon: Some(5550) })"];
    5521 -> 5522;
    5522 [label="Expr"];
    5522 -> 5525;
    5525 [label="BinaryOp(BinaryOp { syntax: 5525, lhs: Some(5523), operator: Some(5526), rhs: Some(5527) })"];
    5525 -> 5523;
    5523 [label="Identifier"];
    5523 -> 5524;
    5524[label="UIManager"];
    5525 -> 5526;
    5526[label="."];
    5525 -> 5527;
    5527 [label="Expr"];
    5527 -> 5530;
    5530 [label="BinaryOp(BinaryOp { syntax: 5530, lhs: Some(5528), operator: Some(5531), rhs: Some(5532) })"];
    5530 -> 5528;
    5528 [label="Identifier"];
    5528 -> 5529;
    5529[label="UIAll"];
    5530 -> 5531;
    5531[label="."];
    5530 -> 5532;
    5532 [label="Expr"];
    5532 -> 5533;
    5533 [label="Identifier"];
    5533 -> 5534;
    5534[label="UISequence"];
    5521 -> 5535;
    5535 [label="Assignment(Assignment { syntax: 5535, lvalue: Some(5522), operator: Some(5536), rvalue: Some(5537) })"];
    5535 -> 5536;
    5536[label="="];
    5535 -> 5537;
    5537 [label="Expr"];
    5537 -> 5540;
    5540 [label="BinaryOp(BinaryOp { syntax: 5540, lhs: Some(5538), operator: Some(5541), rhs: Some(5542) })"];
    5540 -> 5538;
    5538 [label="Identifier"];
    5538 -> 5539;
    5539[label="CUIConfig"];
    5540 -> 5541;
    5541[label="::"];
    5540 -> 5542;
    5542 [label="Expr"];
    5542 -> 5545;
    5545 [label="BinaryOp(BinaryOp { syntax: 5545, lhs: Some(5543), operator: Some(5546), rhs: Some(5547) })"];
    5545 -> 5543;
    5543 [label="Identifier"];
    5543 -> 5544;
    5544[label="EUISequence"];
    5545 -> 5546;
    5546[label="::"];
    5545 -> 5547;
    5547 [label="Expr"];
    5547 -> 5548;
    5548 [label="Identifier"];
    5548 -> 5549;
    5549[label="Playing"];
    5521 -> 5550;
    5550[label=";"];
    5484 -> 5551;
    5551 [label="Statement(Statement { syntax: 5551, statement: Some(5565), semicolon: Some(5570) })"];
    5551 -> 5552;
    5552 [label="Expr"];
    5552 -> 5555;
    5555 [label="BinaryOp(BinaryOp { syntax: 5555, lhs: Some(5553), operator: Some(5556), rhs: Some(5557) })"];
    5555 -> 5553;
    5553 [label="Identifier"];
    5553 -> 5554;
    5554[label="UIManager"];
    5555 -> 5556;
    5556[label="."];
    5555 -> 5557;
    5557 [label="Expr"];
    5557 -> 5560;
    5560 [label="BinaryOp(BinaryOp { syntax: 5560, lhs: Some(5558), operator: Some(5561), rhs: Some(5562) })"];
    5560 -> 5558;
    5558 [label="Identifier"];
    5558 -> 5559;
    5559[label="UIAll"];
    5560 -> 5561;
    5561[label="."];
    5560 -> 5562;
    5562 [label="Expr"];
    5562 -> 5563;
    5563 [label="Identifier"];
    5563 -> 5564;
    5564[label="SpectatorForcedTarget"];
    5551 -> 5565;
    5565 [label="Assignment(Assignment { syntax: 5565, lvalue: Some(5552), operator: Some(5566), rvalue: Some(5567) })"];
    5565 -> 5566;
    5566[label="="];
    5565 -> 5567;
    5567 [label="Expr"];
    5567 -> 5568;
    5568 [label="Literal"];
    5568 -> 5569;
    5569[label="NullId"];
    5551 -> 5570;
    5570[label=";"];
    5484 -> 5571;
    5571 [label="Statement(Statement { syntax: 5571, statement: Some(5572), semicolon: Some(5583) })"];
    5571 -> 5572;
    5572 [label="Expr"];
    5572 -> 5580;
    5580 [label="FunctionCall(FunctionCall { syntax: 5580, lhs: Some(5575), lparen: Some(5581), args: [], rparen: Some(5582) })"];
    5580 -> 5575;
    5575 [label="BinaryOp(BinaryOp { syntax: 5575, lhs: Some(5573), operator: Some(5576), rhs: Some(5577) })"];
    5575 -> 5573;
    5573 [label="Identifier"];
    5573 -> 5574;
    5574[label="MiniMap"];
    5575 -> 5576;
    5576[label="::"];
    5575 -> 5577;
    5577 [label="Expr"];
    5577 -> 5578;
    5578 [label="Identifier"];
    5578 -> 5579;
    5579[label="Show"];
    5580 -> 5581;
    5581[label="("];
    5580 -> 5582;
    5582[label=")"];
    5571 -> 5583;
    5583[label=";"];
    5484 -> 5584;
    5584[label="}"];
    4763 -> 5585;
    5585 [label="Statement(Statement { syntax: 5585, statement: Some(5586), semicolon: None })"];
    5585 -> 5586;
    5586 [label="If(If { syntax: 5586, if_: Some(5587), lparen: Some(5588), condition: Some(5589), rparen: Some(5595), body: Some(5596), else_: Some(6260) })"];
    5586 -> 5587;
    5587[label="if"];
    5586 -> 5588;
    5588[label="("];
    5586 -> 5589;
    5589 [label="Expr"];
    5589 -> 5590;
    5590 [label="UnOp(UnOp { syntax: 5590, operator: Some(5591), operand: Some(5592) })"];
    5590 -> 5591;
    5591[label="!"];
    5590 -> 5592;
    5592 [label="Expr"];
    5592 -> 5593;
    5593 [label="Identifier"];
    5593 -> 5594;
    5594[label="G_IsOffZoneActivated"];
    5586 -> 5595;
    5595[label=")"];
    5586 -> 5596;
    5596 [label="Statement(Statement { syntax: 5596, statement: Some(5597), semicolon: None })"];
    5596 -> 5597;
    5597 [label="Block(Block { syntax: 5597, lbrace: Some(5598), statements: [5599, 5748, 5819], rbrace: Some(6259) })"];
    5597 -> 5598;
    5598[label="{"];
    5597 -> 5599;
    5599 [label="Statement(Statement { syntax: 5599, statement: Some(5600), semicolon: None })"];
    5599 -> 5600;
    5600 [label="If(If { syntax: 5600, if_: Some(5601), lparen: Some(5602), condition: Some(5603), rparen: Some(5611), body: Some(5612), else_: None })"];
    5600 -> 5601;
    5601[label="if"];
    5600 -> 5602;
    5602[label="("];
    5600 -> 5603;
    5603 [label="Expr"];
    5603 -> 5606;
    5606 [label="BinaryOp(BinaryOp { syntax: 5606, lhs: Some(5604), operator: Some(5607), rhs: Some(5608) })"];
    5606 -> 5604;
    5604 [label="Identifier"];
    5604 -> 5605;
    5605[label="PrevTimeLimit"];
    5606 -> 5607;
    5607[label="!="];
    5606 -> 5608;
    5608 [label="Expr"];
    5608 -> 5609;
    5609 [label="Identifier"];
    5609 -> 5610;
    5610[label="S_OffZoneActivationTime"];
    5600 -> 5611;
    5611[label=")"];
    5600 -> 5612;
    5612 [label="Statement(Statement { syntax: 5612, statement: Some(5613), semicolon: None })"];
    5612 -> 5613;
    5613 [label="Block(Block { syntax: 5613, lbrace: Some(5614), statements: [5615, 5625, 5697], rbrace: Some(5747) })"];
    5613 -> 5614;
    5614[label="{"];
    5613 -> 5615;
    5615 [label="Statement(Statement { syntax: 5615, statement: Some(5619), semicolon: Some(5624) })"];
    5615 -> 5616;
    5616 [label="Expr"];
    5616 -> 5617;
    5617 [label="Identifier"];
    5617 -> 5618;
    5618[label="PrevTimeLimit"];
    5615 -> 5619;
    5619 [label="Assignment(Assignment { syntax: 5619, lvalue: Some(5616), operator: Some(5620), rvalue: Some(5621) })"];
    5619 -> 5620;
    5620[label="="];
    5619 -> 5621;
    5621 [label="Expr"];
    5621 -> 5622;
    5622 [label="Identifier"];
    5622 -> 5623;
    5623[label="S_OffZoneActivationTime"];
    5615 -> 5624;
    5624[label=";"];
    5613 -> 5625;
    5625 [label="Statement(Statement { syntax: 5625, statement: Some(5626), semicolon: None })"];
    5625 -> 5626;
    5626 [label="If(If { syntax: 5626, if_: Some(5627), lparen: Some(5628), condition: Some(5629), rparen: Some(5637), body: Some(5638), else_: Some(5661) })"];
    5626 -> 5627;
    5627[label="if"];
    5626 -> 5628;
    5628[label="("];
    5626 -> 5629;
    5629 [label="Expr"];
    5629 -> 5632;
    5632 [label="BinaryOp(BinaryOp { syntax: 5632, lhs: Some(5630), operator: Some(5633), rhs: Some(5634) })"];
    5632 -> 5630;
    5630 [label="Identifier"];
    5630 -> 5631;
    5631[label="S_OffZoneActivationTime"];
    5632 -> 5633;
    5633[label="<="];
    5632 -> 5634;
    5634 [label="Expr"];
    5634 -> 5635;
    5635 [label="Literal"];
    5635 -> 5636;
    5636[label="0"];
    5626 -> 5637;
    5637[label=")"];
    5626 -> 5638;
    5638 [label="Statement(Statement { syntax: 5638, statement: Some(5652), semicolon: Some(5660) })"];
    5638 -> 5639;
    5639 [label="Expr"];
    5639 -> 5642;
    5642 [label="BinaryOp(BinaryOp { syntax: 5642, lhs: Some(5640), operator: Some(5643), rhs: Some(5644) })"];
    5642 -> 5640;
    5640 [label="Identifier"];
    5640 -> 5641;
    5641[label="UIManager"];
    5642 -> 5643;
    5643[label="."];
    5642 -> 5644;
    5644 [label="Expr"];
    5644 -> 5647;
    5647 [label="BinaryOp(BinaryOp { syntax: 5647, lhs: Some(5645), operator: Some(5648), rhs: Some(5649) })"];
    5647 -> 5645;
    5645 [label="Identifier"];
    5645 -> 5646;
    5646[label="UIAll"];
    5647 -> 5648;
    5648[label="."];
    5647 -> 5649;
    5649 [label="Expr"];
    5649 -> 5650;
    5650 [label="Identifier"];
    5650 -> 5651;
    5651[label="CountdownEndTime"];
    5638 -> 5652;
    5652 [label="Assignment(Assignment { syntax: 5652, lvalue: Some(5639), operator: Some(5653), rvalue: Some(5654) })"];
    5652 -> 5653;
    5653[label="="];
    5652 -> 5654;
    5654 [label="Expr"];
    5654 -> 5655;
    5655 [label="UnOp(UnOp { syntax: 5655, operator: Some(5656), operand: Some(5657) })"];
    5655 -> 5656;
    5656[label="-"];
    5655 -> 5657;
    5657 [label="Expr"];
    5657 -> 5658;
    5658 [label="Literal"];
    5658 -> 5659;
    5659[label="1"];
    5638 -> 5660;
    5660[label=";"];
    5626 -> 5661;
    5661 [label="Else(Else { syntax: 5661, else_: Some(5662), if_: None, body: Some(5663) })"];
    5661 -> 5662;
    5662[label="else"];
    5661 -> 5663;
    5663 [label="Statement(Statement { syntax: 5663, statement: Some(5677), semicolon: Some(5696) })"];
    5663 -> 5664;
    5664 [label="Expr"];
    5664 -> 5667;
    5667 [label="BinaryOp(BinaryOp { syntax: 5667, lhs: Some(5665), operator: Some(5668), rhs: Some(5669) })"];
    5667 -> 5665;
    5665 [label="Identifier"];
    5665 -> 5666;
    5666[label="UIManager"];
    5667 -> 5668;
    5668[label="."];
    5667 -> 5669;
    5669 [label="Expr"];
    5669 -> 5672;
    5672 [label="BinaryOp(BinaryOp { syntax: 5672, lhs: Some(5670), operator: Some(5673), rhs: Some(5674) })"];
    5672 -> 5670;
    5670 [label="Identifier"];
    5670 -> 5671;
    5671[label="UIAll"];
    5672 -> 5673;
    5673[label="."];
    5672 -> 5674;
    5674 [label="Expr"];
    5674 -> 5675;
    5675 [label="Identifier"];
    5675 -> 5676;
    5676[label="CountdownEndTime"];
    5663 -> 5677;
    5677 [label="Assignment(Assignment { syntax: 5677, lvalue: Some(5664), operator: Some(5678), rvalue: Some(5679) })"];
    5677 -> 5678;
    5678[label="="];
    5677 -> 5679;
    5679 [label="Expr"];
    5679 -> 5682;
    5682 [label="BinaryOp(BinaryOp { syntax: 5682, lhs: Some(5680), operator: Some(5683), rhs: Some(5684) })"];
    5682 -> 5680;
    5680 [label="Identifier"];
    5680 -> 5681;
    5681[label="StartTime"];
    5682 -> 5683;
    5683[label="+"];
    5682 -> 5684;
    5684 [label="Expr"];
    5684 -> 5685;
    5685 [label="Parenthesised(Parenthesised { syntax: 5685, lparen: Some(5686), expr: Some(5687), rparen: Some(5695) })"];
    5685 -> 5686;
    5686[label="("];
    5685 -> 5687;
    5687 [label="Expr"];
    5687 -> 5690;
    5690 [label="BinaryOp(BinaryOp { syntax: 5690, lhs: Some(5688), operator: Some(5691), rhs: Some(5692) })"];
    5690 -> 5688;
    5688 [label="Identifier"];
    5688 -> 5689;
    5689[label="S_OffZoneActivationTime"];
    5690 -> 5691;
    5691[label="*"];
    5690 -> 5692;
    5692 [label="Expr"];
    5692 -> 5693;
    5693 [label="Literal"];
    5693 -> 5694;
    5694[label="1000"];
    5685 -> 5695;
    5695[label=")"];
    5663 -> 5696;
    5696[label=";"];
    5613 -> 5697;
    5697 [label="Statement(Statement { syntax: 5697, statement: Some(5698), semicolon: Some(5746) })"];
    5697 -> 5698;
    5698 [label="Expr"];
    5698 -> 5706;
    5706 [label="FunctionCall(FunctionCall { syntax: 5706, lhs: Some(5701), lparen: Some(5707), args: [(5708, Some(5711)), (5712, None)], rparen: Some(5745) })"];
    5706 -> 5701;
    5701 [label="BinaryOp(BinaryOp { syntax: 5701, lhs: Some(5699), operator: Some(5702), rhs: Some(5703) })"];
    5701 -> 5699;
    5699 [label="Identifier"];
    5699 -> 5700;
    5700[label="Interfancy"];
    5701 -> 5702;
    5702[label="::"];
    5701 -> 5703;
    5703 [label="Expr"];
    5703 -> 5704;
    5704 [label="Identifier"];
    5704 -> 5705;
    5705[label="SetModuleVisibility"];
    5706 -> 5707;
    5707[label="("];
    5706 -> 5708;
    5708 [label="Expr"];
    5708 -> 5709;
    5709 [label="Literal"];
    5709 -> 5710;
    5710[label="\"Countdown\""];
    5706 -> 5711;
    5711[label=","];
    5706 -> 5712;
    5712 [label="Expr"];
    5712 -> 5725;
    5725 [label="BinaryOp(BinaryOp { syntax: 5725, lhs: Some(5715), operator: Some(5726), rhs: Some(5727) })"];
    5725 -> 5715;
    5715 [label="BinaryOp(BinaryOp { syntax: 5715, lhs: Some(5713), operator: Some(5716), rhs: Some(5717) })"];
    5715 -> 5713;
    5713 [label="Identifier"];
    5713 -> 5714;
    5714[label="Now"];
    5715 -> 5716;
    5716[label=">="];
    5715 -> 5717;
    5717 [label="Expr"];
    5717 -> 5720;
    5720 [label="BinaryOp(BinaryOp { syntax: 5720, lhs: Some(5718), operator: Some(5721), rhs: Some(5722) })"];
    5720 -> 5718;
    5718 [label="Identifier"];
    5718 -> 5719;
    5719[label="StartTime"];
    5720 -> 5721;
    5721[label="-"];
    5720 -> 5722;
    5722 [label="Expr"];
    5722 -> 5723;
    5723 [label="Literal"];
    5723 -> 5724;
    5724[label="1500"];
    5725 -> 5726;
    5726[label="&&"];
    5725 -> 5727;
    5727 [label="Expr"];
    5727 -> 5730;
    5730 [label="BinaryOp(BinaryOp { syntax: 5730, lhs: Some(5728), operator: Some(5731), rhs: Some(5732) })"];
    5730 -> 5728;
    5728 [label="Identifier"];
    5728 -> 5729;
    5729[label="Now"];
    5730 -> 5731;
    5731[label="<"];
    5730 -> 5732;
    5732 [label="Expr"];
    5732 -> 5735;
    5735 [label="BinaryOp(BinaryOp { syntax: 5735, lhs: Some(5733), operator: Some(5736), rhs: Some(5737) })"];
    5735 -> 5733;
    5733 [label="Identifier"];
    5733 -> 5734;
    5734[label="UIManager"];
    5735 -> 5736;
    5736[label="."];
    5735 -> 5737;
    5737 [label="Expr"];
    5737 -> 5740;
    5740 [label="BinaryOp(BinaryOp { syntax: 5740, lhs: Some(5738), operator: Some(5741), rhs: Some(5742) })"];
    5740 -> 5738;
    5738 [label="Identifier"];
    5738 -> 5739;
    5739[label="UIAll"];
    5740 -> 5741;
    5741[label="."];
    5740 -> 5742;
    5742 [label="Expr"];
    5742 -> 5743;
    5743 [label="Identifier"];
    5743 -> 5744;
    5744[label="CountdownEndTime"];
    5706 -> 5745;
    5745[label=")"];
    5697 -> 5746;
    5746[label=";"];
    5613 -> 5747;
    5747[label="}"];
    5597 -> 5748;
    5748 [label="Statement(Statement { syntax: 5748, statement: Some(5749), semicolon: None })"];
    5748 -> 5749;
    5749 [label="If(If { syntax: 5749, if_: Some(5750), lparen: Some(5751), condition: Some(5752), rparen: Some(5788), body: Some(5789), else_: None })"];
    5749 -> 5750;
    5750[label="if"];
    5749 -> 5751;
    5751[label="("];
    5749 -> 5752;
    5752 [label="Expr"];
    5752 -> 5760;
    5760 [label="BinaryOp(BinaryOp { syntax: 5760, lhs: Some(5755), operator: Some(5761), rhs: Some(5762) })"];
    5760 -> 5755;
    5755 [label="BinaryOp(BinaryOp { syntax: 5755, lhs: Some(5753), operator: Some(5756), rhs: Some(5757) })"];
    5755 -> 5753;
    5753 [label="Identifier"];
    5753 -> 5754;
    5754[label="S_ToadsFirstSpawnDelay"];
    5755 -> 5756;
    5756[label=">="];
    5755 -> 5757;
    5757 [label="Expr"];
    5757 -> 5758;
    5758 [label="Literal"];
    5758 -> 5759;
    5759[label="0"];
    5760 -> 5761;
    5761[label="&&"];
    5760 -> 5762;
    5762 [label="Expr"];
    5762 -> 5768;
    5768 [label="BinaryOp(BinaryOp { syntax: 5768, lhs: Some(5763), operator: Some(5769), rhs: Some(5770) })"];
    5768 -> 5763;
    5763 [label="UnOp(UnOp { syntax: 5763, operator: Some(5764), operand: Some(5765) })"];
    5763 -> 5764;
    5764[label="!"];
    5763 -> 5765;
    5765 [label="Expr"];
    5765 -> 5766;
    5766 [label="Identifier"];
    5766 -> 5767;
    5767[label="SpawnedToads"];
    5768 -> 5769;
    5769[label="&&"];
    5768 -> 5770;
    5770 [label="Expr"];
    5770 -> 5773;
    5773 [label="BinaryOp(BinaryOp { syntax: 5773, lhs: Some(5771), operator: Some(5774), rhs: Some(5775) })"];
    5773 -> 5771;
    5771 [label="Identifier"];
    5771 -> 5772;
    5772[label="Now"];
    5773 -> 5774;
    5774[label=">="];
    5773 -> 5775;
    5775 [label="Expr"];
    5775 -> 5778;
    5778 [label="BinaryOp(BinaryOp { syntax: 5778, lhs: Some(5776), operator: Some(5779), rhs: Some(5780) })"];
    5778 -> 5776;
    5776 [label="Identifier"];
    5776 -> 5777;
    5777[label="StartTime"];
    5778 -> 5779;
    5779[label="+"];
    5778 -> 5780;
    5780 [label="Expr"];
    5780 -> 5783;
    5783 [label="BinaryOp(BinaryOp { syntax: 5783, lhs: Some(5781), operator: Some(5784), rhs: Some(5785) })"];
    5783 -> 5781;
    5781 [label="Identifier"];
    5781 -> 5782;
    5782[label="S_ToadsFirstSpawnDelay"];
    5783 -> 5784;
    5784[label="*"];
    5783 -> 5785;
    5785 [label="Expr"];
    5785 -> 5786;
    5786 [label="Literal"];
    5786 -> 5787;
    5787[label="1000"];
    5749 -> 5788;
    5788[label=")"];
    5749 -> 5789;
    5789 [label="Statement(Statement { syntax: 5789, statement: Some(5790), semicolon: None })"];
    5789 -> 5790;
    5790 [label="Block(Block { syntax: 5790, lbrace: Some(5791), statements: [5792, 5808], rbrace: Some(5818) })"];
    5790 -> 5791;
    5791[label="{"];
    5790 -> 5792;
    5792 [label="Statement(Statement { syntax: 5792, statement: Some(5793), semicolon: Some(5807) })"];
    5792 -> 5793;
    5793 [label="Expr"];
    5793 -> 5801;
    5801 [label="FunctionCall(FunctionCall { syntax: 5801, lhs: Some(5796), lparen: Some(5802), args: [(5803, None)], rparen: Some(5806) })"];
    5801 -> 5796;
    5796 [label="BinaryOp(BinaryOp { syntax: 5796, lhs: Some(5794), operator: Some(5797), rhs: Some(5798) })"];
    5796 -> 5794;
    5794 [label="Identifier"];
    5794 -> 5795;
    5795[label="GalaxyTitles"];
    5796 -> 5797;
    5797[label="::"];
    5796 -> 5798;
    5798 [label="Expr"];
    5798 -> 5799;
    5799 [label="Identifier"];
    5799 -> 5800;
    5800[label="InitToads"];
    5801 -> 5802;
    5802[label="("];
    5801 -> 5803;
    5803 [label="Expr"];
    5803 -> 5804;
    5804 [label="Identifier"];
    5804 -> 5805;
    5805[label="S_ToadsSpawnRatio"];
    5801 -> 5806;
    5806[label=")"];
    5792 -> 5807;
    5807[label=";"];
    5790 -> 5808;
    5808 [label="Statement(Statement { syntax: 5808, statement: Some(5812), semicolon: Some(5817) })"];
    5808 -> 5809;
    5809 [label="Expr"];
    5809 -> 5810;
    5810 [label="Identifier"];
    5810 -> 5811;
    5811[label="SpawnedToads"];
    5808 -> 5812;
    5812 [label="Assignment(Assignment { syntax: 5812, lvalue: Some(5809), operator: Some(5813), rvalue: Some(5814) })"];
    5812 -> 5813;
    5813[label="="];
    5812 -> 5814;
    5814 [label="Expr"];
    5814 -> 5815;
    5815 [label="Literal"];
    5815 -> 5816;
    5816[label="True"];
    5808 -> 5817;
    5817[label=";"];
    5790 -> 5818;
    5818[label="}"];
    5597 -> 5819;
    5819 [label="Statement(Statement { syntax: 5819, statement: Some(5820), semicolon: None })"];
    5819 -> 5820;
    5820 [label="If(If { syntax: 5820, if_: Some(5821), lparen: Some(5822), condition: Some(5823), rparen: Some(5875), body: Some(5876), else_: None })"];
    5820 -> 5821;
    5821[label="if"];
    5820 -> 5822;
    5822[label="("];
    5820 -> 5823;
    5823 [label="Expr"];
    5823 -> 5831;
    5831 [label="BinaryOp(BinaryOp { syntax: 5831, lhs: Some(5826), operator: Some(5832), rhs: Some(5833) })"];
    5831 -> 5826;
    5826 [label="BinaryOp(BinaryOp { syntax: 5826, lhs: Some(5824), operator: Some(5827), rhs: Some(5828) })"];
    5826 -> 5824;
    5824 [label="Identifier"];
    5824 -> 5825;
    5825[label="Now"];
    5826 -> 5827;
    5827[label=">"];
    5826 -> 5828;
    5828 [label="Expr"];
    5828 -> 5829;
    5829 [label="Identifier"];
    5829 -> 5830;
    5830[label="StartTime"];
    5831 -> 5832;
    5832[label="&&"];
    5831 -> 5833;
    5833 [label="Expr"];
    5833 -> 5841;
    5841 [label="BinaryOp(BinaryOp { syntax: 5841, lhs: Some(5836), operator: Some(5842), rhs: Some(5843) })"];
    5841 -> 5836;
    5836 [label="BinaryOp(BinaryOp { syntax: 5836, lhs: Some(5834), operator: Some(5837), rhs: Some(5838) })"];
    5836 -> 5834;
    5834 [label="Identifier"];
    5834 -> 5835;
    5835[label="S_OffZoneActivationTime"];
    5836 -> 5837;
    5837[label=">"];
    5836 -> 5838;
    5838 [label="Expr"];
    5838 -> 5839;
    5839 [label="Literal"];
    5839 -> 5840;
    5840[label="0"];
    5841 -> 5842;
    5842[label="&&"];
    5841 -> 5843;
    5843 [label="Expr"];
    5843 -> 5844;
    5844 [label="Parenthesised(Parenthesised { syntax: 5844, lparen: Some(5845), expr: Some(5846), rparen: Some(5874) })"];
    5844 -> 5845;
    5845[label="("];
    5844 -> 5846;
    5846 [label="Expr"];
    5846 -> 5854;
    5854 [label="BinaryOp(BinaryOp { syntax: 5854, lhs: Some(5849), operator: Some(5855), rhs: Some(5856) })"];
    5854 -> 5849;
    5849 [label="BinaryOp(BinaryOp { syntax: 5849, lhs: Some(5847), operator: Some(5850), rhs: Some(5851) })"];
    5849 -> 5847;
    5847 [label="Identifier"];
    5847 -> 5848;
    5848[label="PlayersNbAlive"];
    5849 -> 5850;
    5850[label="<="];
    5849 -> 5851;
    5851 [label="Expr"];
    5851 -> 5852;
    5852 [label="Literal"];
    5852 -> 5853;
    5853[label="2"];
    5854 -> 5855;
    5855[label="||"];
    5854 -> 5856;
    5856 [label="Expr"];
    5856 -> 5859;
    5859 [label="BinaryOp(BinaryOp { syntax: 5859, lhs: Some(5857), operator: Some(5860), rhs: Some(5861) })"];
    5859 -> 5857;
    5857 [label="Identifier"];
    5857 -> 5858;
    5858[label="Now"];
    5859 -> 5860;
    5860[label=">="];
    5859 -> 5861;
    5861 [label="Expr"];
    5861 -> 5864;
    5864 [label="BinaryOp(BinaryOp { syntax: 5864, lhs: Some(5862), operator: Some(5865), rhs: Some(5866) })"];
    5864 -> 5862;
    5862 [label="Identifier"];
    5862 -> 5863;
    5863[label="UIManager"];
    5864 -> 5865;
    5865[label="."];
    5864 -> 5866;
    5866 [label="Expr"];
    5866 -> 5869;
    5869 [label="BinaryOp(BinaryOp { syntax: 5869, lhs: Some(5867), operator: Some(5870), rhs: Some(5871) })"];
    5869 -> 5867;
    5867 [label="Identifier"];
    5867 -> 5868;
    5868[label="UIAll"];
    5869 -> 5870;
    5870[label="."];
    5869 -> 5871;
    5871 [label="Expr"];
    5871 -> 5872;
    5872 [label="Identifier"];
    5872 -> 5873;
    5873[label="CountdownEndTime"];
    5844 -> 5874;
    5874[label=")"];
    5820 -> 5875;
    5875[label=")"];
    5820 -> 5876;
    5876 [label="Statement(Statement { syntax: 5876, statement: Some(5877), semicolon: None })"];
    5876 -> 5877;
    5877 [label="Block(Block { syntax: 5877, lbrace: Some(5878), statements: [5879, 5889, 5912, 5986, 6043, 6068, 6078, 6102, 6112, 6137, 6167, 6190, 6238], rbrace: Some(6258) })"];
    5877 -> 5878;
    5878[label="{"];
    5877 -> 5879;
    5879 [label="Statement(Statement { syntax: 5879, statement: Some(5883), semicolon: Some(5888) })"];
    5879 -> 5880;
    5880 [label="Expr"];
    5880 -> 5881;
    5881 [label="Identifier"];
    5881 -> 5882;
    5882[label="G_IsOffZoneActivated"];
    5879 -> 5883;
    5883 [label="Assignment(Assignment { syntax: 5883, lvalue: Some(5880), operator: Some(5884), rvalue: Some(5885) })"];
    5883 -> 5884;
    5884[label="="];
    5883 -> 5885;
    5885 [label="Expr"];
    5885 -> 5886;
    5886 [label="Literal"];
    5886 -> 5887;
    5887[label="True"];
    5879 -> 5888;
    5888[label=";"];
    5877 -> 5889;
    5889 [label="Statement(Statement { syntax: 5889, statement: Some(5903), semicolon: Some(5911) })"];
    5889 -> 5890;
    5890 [label="Expr"];
    5890 -> 5893;
    5893 [label="BinaryOp(BinaryOp { syntax: 5893, lhs: Some(5891), operator: Some(5894), rhs: Some(5895) })"];
    5893 -> 5891;
    5891 [label="Identifier"];
    5891 -> 5892;
    5892[label="UIManager"];
    5893 -> 5894;
    5894[label="."];
    5893 -> 5895;
    5895 [label="Expr"];
    5895 -> 5898;
    5898 [label="BinaryOp(BinaryOp { syntax: 5898, lhs: Some(5896), operator: Some(5899), rhs: Some(5900) })"];
    5898 -> 5896;
    5896 [label="Identifier"];
    5896 -> 5897;
    5897[label="UIAll"];
    5898 -> 5899;
    5899[label="."];
    5898 -> 5900;
    5900 [label="Expr"];
    5900 -> 5901;
    5901 [label="Identifier"];
    5901 -> 5902;
    5902[label="CountdownEndTime"];
    5889 -> 5903;
    5903 [label="Assignment(Assignment { syntax: 5903, lvalue: Some(5890), operator: Some(5904), rvalue: Some(5905) })"];
    5903 -> 5904;
    5904[label="="];
    5903 -> 5905;
    5905 [label="Expr"];
    5905 -> 5906;
    5906 [label="UnOp(UnOp { syntax: 5906, operator: Some(5907), operand: Some(5908) })"];
    5906 -> 5907;
    5907[label="-"];
    5906 -> 5908;
    5908 [label="Expr"];
    5908 -> 5909;
    5909 [label="Literal"];
    5909 -> 5910;
    5910[label="1"];
    5889 -> 5911;
    5911[label=";"];
    5877 -> 5912;
    5912 [label="Statement(Statement { syntax: 5912, statement: Some(5913), semicolon: None })"];
    5912 -> 5913;
    5913 [label="VarDec(VarDec { syntax: 5913, declare: Some(5914), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(5915), as_: None, alias: None, for_: None, target: None, assignment: Some(5917), value: Some(5918) })"];
    5913 -> 5914;
    5914[label="declare"];
    5913 -> 5915;
    5915 [label="Type(Type { syntax: 5915, basename: Some(5916), members: [], arrays: [] })"];
    5915 -> 5916;
    5916[label="MapCorners"];
    5913 -> 5917;
    5917[label="="];
    5913 -> 5918;
    5918 [label="Expr"];
    5918 -> 5919;
    5919 [label="Array(Array { syntax: 5919, lsquare: Some(5920), values: [(5921, Some(5936)), (5937, Some(5952)), (5953, Some(5968)), (5969, None)], rsquare: Some(5984) })"];
    5919 -> 5920;
    5920[label="["];
    5919 -> 5921;
    5921 [label="Expr"];
    5921 -> 5922;
    5922 [label="Vector(Vector { syntax: 5922, langle: Some(5923), values: [(5924, Some(5927)), (5928, Some(5931)), (5932, None)], rangle: Some(5935) })"];
    5922 -> 5923;
    5923[label="<"];
    5922 -> 5924;
    5924 [label="Expr"];
    5924 -> 5925;
    5925 [label="Literal"];
    5925 -> 5926;
    5926[label="0."];
    5922 -> 5927;
    5927[label=","];
    5922 -> 5928;
    5928 [label="Expr"];
    5928 -> 5929;
    5929 [label="Literal"];
    5929 -> 5930;
    5930[label="0."];
    5922 -> 5931;
    5931[label=","];
    5922 -> 5932;
    5932 [label="Expr"];
    5932 -> 5933;
    5933 [label="Literal"];
    5933 -> 5934;
    5934[label="0."];
    5922 -> 5935;
    5935[label=">"];
    5919 -> 5936;
    5936[label=","];
    5919 -> 5937;
    5937 [label="Expr"];
    5937 -> 5938;
    5938 [label="Vector(Vector { syntax: 5938, langle: Some(5939), values: [(5940, Some(5943)), (5944, Some(5947)), (5948, None)], rangle: Some(5951) })"];
    5938 -> 5939;
    5939[label="<"];
    5938 -> 5940;
    5940 [label="Expr"];
    5940 -> 5941;
    5941 [label="Literal"];
    5941 -> 5942;
    5942[label="384."];
    5938 -> 5943;
    5943[label=","];
    5938 -> 5944;
    5944 [label="Expr"];
    5944 -> 5945;
    5945 [label="Literal"];
    5945 -> 5946;
    5946[label="0."];
    5938 -> 5947;
    5947[label=","];
    5938 -> 5948;
    5948 [label="Expr"];
    5948 -> 5949;
    5949 [label="Literal"];
    5949 -> 5950;
    5950[label="0."];
    5938 -> 5951;
    5951[label=">"];
    5919 -> 5952;
    5952[label=","];
    5919 -> 5953;
    5953 [label="Expr"];
    5953 -> 5954;
    5954 [label="Vector(Vector { syntax: 5954, langle: Some(5955), values: [(5956, Some(5959)), (5960, Some(5963)), (5964, None)], rangle: Some(5967) })"];
    5954 -> 5955;
    5955[label="<"];
    5954 -> 5956;
    5956 [label="Expr"];
    5956 -> 5957;
    5957 [label="Literal"];
    5957 -> 5958;
    5958[label="0."];
    5954 -> 5959;
    5959[label=","];
    5954 -> 5960;
    5960 [label="Expr"];
    5960 -> 5961;
    5961 [label="Literal"];
    5961 -> 5962;
    5962[label="0."];
    5954 -> 5963;
    5963[label=","];
    5954 -> 5964;
    5964 [label="Expr"];
    5964 -> 5965;
    5965 [label="Literal"];
    5965 -> 5966;
    5966[label="384."];
    5954 -> 5967;
    5967[label=">"];
    5919 -> 5968;
    5968[label=","];
    5919 -> 5969;
    5969 [label="Expr"];
    5969 -> 5970;
    5970 [label="Vector(Vector { syntax: 5970, langle: Some(5971), values: [(5972, Some(5975)), (5976, Some(5979)), (5980, None)], rangle: Some(5983) })"];
    5970 -> 5971;
    5971[label="<"];
    5970 -> 5972;
    5972 [label="Expr"];
    5972 -> 5973;
    5973 [label="Literal"];
    5973 -> 5974;
    5974[label="384."];
    5970 -> 5975;
    5975[label=","];
    5970 -> 5976;
    5976 [label="Expr"];
    5976 -> 5977;
    5977 [label="Literal"];
    5977 -> 5978;
    5978[label="0."];
    5970 -> 5979;
    5979[label=","];
    5970 -> 5980;
    5980 [label="Expr"];
    5980 -> 5981;
    5981 [label="Literal"];
    5981 -> 5982;
    5982[label="384."];
    5970 -> 5983;
    5983[label=">"];
    5919 -> 5984;
    5984[label="]"];
    5913 -> 5985;
    5985[label=";"];
    5877 -> 5986;
    5986 [label="Statement(Statement { syntax: 5986, statement: Some(5987), semicolon: None })"];
    5986 -> 5987;
    5987 [label="Foreach(Foreach { syntax: 5987, foreach: Some(5988), lparen: Some(5989), name1: Some(5990), arrow: None, name2: None, in_: Some(5991), value: Some(5992), rparen: Some(5995), body: Some(5996) })"];
    5987 -> 5988;
    5988[label="foreach"];
    5987 -> 5989;
    5989[label="("];
    5987 -> 5990;
    5990[label="CornerPosition"];
    5987 -> 5991;
    5991[label="in"];
    5987 -> 5992;
    5992 [label="Expr"];
    5992 -> 5993;
    5993 [label="Identifier"];
    5993 -> 5994;
    5994[label="MapCorners"];
    5987 -> 5995;
    5995[label=")"];
    5987 -> 5996;
    5996 [label="Statement(Statement { syntax: 5996, statement: Some(5997), semicolon: None })"];
    5996 -> 5997;
    5997 [label="Block(Block { syntax: 5997, lbrace: Some(5998), statements: [5999, 6019], rbrace: Some(6042) })"];
    5997 -> 5998;
    5998[label="{"];
    5997 -> 5999;
    5999 [label="Statement(Statement { syntax: 5999, statement: Some(6000), semicolon: None })"];
    5999 -> 6000;
    6000 [label="VarDec(VarDec { syntax: 6000, declare: Some(6001), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(6002), as_: None, alias: None, for_: None, target: None, assignment: Some(6004), value: Some(6005) })"];
    6000 -> 6001;
    6001[label="declare"];
    6000 -> 6002;
    6002 [label="Type(Type { syntax: 6002, basename: Some(6003), members: [], arrays: [] })"];
    6002 -> 6003;
    6003[label="Distance"];
    6000 -> 6004;
    6004[label="="];
    6000 -> 6005;
    6005 [label="Expr"];
    6005 -> 6008;
    6008 [label="FunctionCall(FunctionCall { syntax: 6008, lhs: Some(6006), lparen: Some(6009), args: [(6010, Some(6013)), (6014, None)], rparen: Some(6017) })"];
    6008 -> 6006;
    6006 [label="Identifier"];
    6006 -> 6007;
    6007[label="GT_Distance2D"];
    6008 -> 6009;
    6009[label="("];
    6008 -> 6010;
    6010 [label="Expr"];
    6010 -> 6011;
    6011 [label="Identifier"];
    6011 -> 6012;
    6012[label="G_CenterGoalPosition"];
    6008 -> 6013;
    6013[label=","];
    6008 -> 6014;
    6014 [label="Expr"];
    6014 -> 6015;
    6015 [label="Identifier"];
    6015 -> 6016;
    6016[label="CornerPosition"];
    6008 -> 6017;
    6017[label=")"];
    6000 -> 6018;
    6018[label=";"];
    5997 -> 6019;
    6019 [label="Statement(Statement { syntax: 6019, statement: Some(6020), semicolon: None })"];
    6019 -> 6020;
    6020 [label="If(If { syntax: 6020, if_: Some(6021), lparen: Some(6022), condition: Some(6023), rparen: Some(6031), body: Some(6032), else_: None })"];
    6020 -> 6021;
    6021[label="if"];
    6020 -> 6022;
    6022[label="("];
    6020 -> 6023;
    6023 [label="Expr"];
    6023 -> 6026;
    6026 [label="BinaryOp(BinaryOp { syntax: 6026, lhs: Some(6024), operator: Some(6027), rhs: Some(6028) })"];
    6026 -> 6024;
    6024 [label="Identifier"];
    6024 -> 6025;
    6025[label="Distance"];
    6026 -> 6027;
    6027[label=">"];
    6026 -> 6028;
    6028 [label="Expr"];
    6028 -> 6029;
    6029 [label="Identifier"];
    6029 -> 6030;
    6030[label="OffZoneRadiusMax"];
    6020 -> 6031;
    6031[label=")"];
    6020 -> 6032;
    6032 [label="Statement(Statement { syntax: 6032, statement: Some(6036), semicolon: Some(6041) })"];
    6032 -> 6033;
    6033 [label="Expr"];
    6033 -> 6034;
    6034 [label="Identifier"];
    6034 -> 6035;
    6035[label="OffZoneRadiusMax"];
    6032 -> 6036;
    6036 [label="Assignment(Assignment { syntax: 6036, lvalue: Some(6033), operator: Some(6037), rvalue: Some(6038) })"];
    6036 -> 6037;
    6037[label="="];
    6036 -> 6038;
    6038 [label="Expr"];
    6038 -> 6039;
    6039 [label="Identifier"];
    6039 -> 6040;
    6040[label="Distance"];
    6032 -> 6041;
    6041[label=";"];
    5997 -> 6042;
    6042[label="}"];
    5877 -> 6043;
    6043 [label="Statement(Statement { syntax: 6043, statement: Some(6044), semicolon: None })"];
    6043 -> 6044;
    6044 [label="VarDec(VarDec { syntax: 6044, declare: Some(6045), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(6046), as_: None, alias: None, for_: None, target: None, assignment: Some(6048), value: Some(6049) })"];
    6044 -> 6045;
    6045[label="declare"];
    6044 -> 6046;
    6046 [label="Type(Type { syntax: 6046, basename: Some(6047), members: [], arrays: [] })"];
    6046 -> 6047;
    6047[label="OffZoneShrinkDuration"];
    6044 -> 6048;
    6048[label="="];
    6044 -> 6049;
    6049 [label="Expr"];
    6049 -> 6057;
    6057 [label="FunctionCall(FunctionCall { syntax: 6057, lhs: Some(6052), lparen: Some(6058), args: [(6059, Some(6062)), (6063, None)], rparen: Some(6066) })"];
    6057 -> 6052;
    6052 [label="BinaryOp(BinaryOp { syntax: 6052, lhs: Some(6050), operator: Some(6053), rhs: Some(6054) })"];
    6052 -> 6050;
    6050 [label="Identifier"];
    6050 -> 6051;
    6051[label="ML"];
    6052 -> 6053;
    6053[label="::"];
    6052 -> 6054;
    6054 [label="Expr"];
    6054 -> 6055;
    6055 [label="Identifier"];
    6055 -> 6056;
    6056[label="Max"];
    6057 -> 6058;
    6058[label="("];
    6057 -> 6059;
    6059 [label="Expr"];
    6059 -> 6060;
    6060 [label="Identifier"];
    6060 -> 6061;
    6061[label="S_OffZoneShrinkDuration"];
    6057 -> 6062;
    6062[label=","];
    6057 -> 6063;
    6063 [label="Expr"];
    6063 -> 6064;
    6064 [label="Identifier"];
    6064 -> 6065;
    6065[label="C_OffZoneMinShrinkDuration"];
    6057 -> 6066;
    6066[label=")"];
    6044 -> 6067;
    6067[label=";"];
    5877 -> 6068;
    6068 [label="Statement(Statement { syntax: 6068, statement: Some(6072), semicolon: Some(6077) })"];
    6068 -> 6069;
    6069 [label="Expr"];
    6069 -> 6070;
    6070 [label="Identifier"];
    6070 -> 6071;
    6071[label="OffZoneCenterLandmarkId"];
    6068 -> 6072;
    6072 [label="Assignment(Assignment { syntax: 6072, lvalue: Some(6069), operator: Some(6073), rvalue: Some(6074) })"];
    6072 -> 6073;
    6073[label="="];
    6072 -> 6074;
    6074 [label="Expr"];
    6074 -> 6075;
    6075 [label="Identifier"];
    6075 -> 6076;
    6076[label="CenterGoalLandmarkId"];
    6068 -> 6077;
    6077[label=";"];
    5877 -> 6078;
    6078 [label="Statement(Statement { syntax: 6078, statement: Some(6082), semicolon: Some(6101) })"];
    6078 -> 6079;
    6079 [label="Expr"];
    6079 -> 6080;
    6080 [label="Identifier"];
    6080 -> 6081;
    6081[label="OffZoneRadiusSpeed"];
    6078 -> 6082;
    6082 [label="Assignment(Assignment { syntax: 6082, lvalue: Some(6079), operator: Some(6083), rvalue: Some(6084) })"];
    6082 -> 6083;
    6083[label="="];
    6082 -> 6084;
    6084 [label="Expr"];
    6084 -> 6096;
    6096 [label="BinaryOp(BinaryOp { syntax: 6096, lhs: Some(6085), operator: Some(6097), rhs: Some(6098) })"];
    6096 -> 6085;
    6085 [label="Parenthesised(Parenthesised { syntax: 6085, lparen: Some(6086), expr: Some(6087), rparen: Some(6095) })"];
    6085 -> 6086;
    6086[label="("];
    6085 -> 6087;
    6087 [label="Expr"];
    6087 -> 6090;
    6090 [label="BinaryOp(BinaryOp { syntax: 6090, lhs: Some(6088), operator: Some(6091), rhs: Some(6092) })"];
    6090 -> 6088;
    6088 [label="Identifier"];
    6088 -> 6089;
    6089[label="OffZoneRadiusMax"];
    6090 -> 6091;
    6091[label="-"];
    6090 -> 6092;
    6092 [label="Expr"];
    6092 -> 6093;
    6093 [label="Identifier"];
    6093 -> 6094;
    6094[label="C_OffZoneMinimumRadius"];
    6085 -> 6095;
    6095[label=")"];
    6096 -> 6097;
    6097[label="/"];
    6096 -> 6098;
    6098 [label="Expr"];
    6098 -> 6099;
    6099 [label="Identifier"];
    6099 -> 6100;
    6100[label="OffZoneShrinkDuration"];
    6078 -> 6101;
    6101[label=";"];
    5877 -> 6102;
    6102 [label="Statement(Statement { syntax: 6102, statement: Some(6106), semicolon: Some(6111) })"];
    6102 -> 6103;
    6103 [label="Expr"];
    6103 -> 6104;
    6104 [label="Identifier"];
    6104 -> 6105;
    6105[label="OffZoneRadius"];
    6102 -> 6106;
    6106 [label="Assignment(Assignment { syntax: 6106, lvalue: Some(6103), operator: Some(6107), rvalue: Some(6108) })"];
    6106 -> 6107;
    6107[label="="];
    6106 -> 6108;
    6108 [label="Expr"];
    6108 -> 6109;
    6109 [label="Identifier"];
    6109 -> 6110;
    6110[label="OffZoneRadiusMax"];
    6102 -> 6111;
    6111[label=";"];
    5877 -> 6112;
    6112 [label="Statement(Statement { syntax: 6112, statement: Some(6126), semicolon: Some(6136) })"];
    6112 -> 6113;
    6113 [label="Expr"];
    6113 -> 6116;
    6116 [label="BinaryOp(BinaryOp { syntax: 6116, lhs: Some(6114), operator: Some(6117), rhs: Some(6118) })"];
    6116 -> 6114;
    6114 [label="Identifier"];
    6114 -> 6115;
    6115[label="CenterGoal"];
    6116 -> 6117;
    6117[label="."];
    6116 -> 6118;
    6118 [label="Expr"];
    6118 -> 6121;
    6121 [label="BinaryOp(BinaryOp { syntax: 6121, lhs: Some(6119), operator: Some(6122), rhs: Some(6123) })"];
    6121 -> 6119;
    6119 [label="Identifier"];
    6119 -> 6120;
    6120[label="Gauge"];
    6121 -> 6122;
    6122[label="."];
    6121 -> 6123;
    6123 [label="Expr"];
    6123 -> 6124;
    6124 [label="Identifier"];
    6124 -> 6125;
    6125[label="Max"];
    6112 -> 6126;
    6126 [label="Assignment(Assignment { syntax: 6126, lvalue: Some(6113), operator: Some(6127), rvalue: Some(6128) })"];
    6126 -> 6127;
    6127[label="="];
    6126 -> 6128;
    6128 [label="Expr"];
    6128 -> 6131;
    6131 [label="BinaryOp(BinaryOp { syntax: 6131, lhs: Some(6129), operator: Some(6132), rhs: Some(6133) })"];
    6131 -> 6129;
    6129 [label="Identifier"];
    6129 -> 6130;
    6130[label="OffZoneShrinkDuration"];
    6131 -> 6132;
    6132[label="*"];
    6131 -> 6133;
    6133 [label="Expr"];
    6133 -> 6134;
    6134 [label="Literal"];
    6134 -> 6135;
    6135[label="1000"];
    6112 -> 6136;
    6136[label=";"];
    5877 -> 6137;
    6137 [label="Statement(Statement { syntax: 6137, statement: Some(6151), semicolon: Some(6166) })"];
    6137 -> 6138;
    6138 [label="Expr"];
    6138 -> 6141;
    6141 [label="BinaryOp(BinaryOp { syntax: 6141, lhs: Some(6139), operator: Some(6142), rhs: Some(6143) })"];
    6141 -> 6139;
    6139 [label="Identifier"];
    6139 -> 6140;
    6140[label="CenterGoal"];
    6141 -> 6142;
    6142[label="."];
    6141 -> 6143;
    6143 [label="Expr"];
    6143 -> 6146;
    6146 [label="BinaryOp(BinaryOp { syntax: 6146, lhs: Some(6144), operator: Some(6147), rhs: Some(6148) })"];
    6146 -> 6144;
    6144 [label="Identifier"];
    6144 -> 6145;
    6145[label="Gauge"];
    6146 -> 6147;
    6147[label="."];
    6146 -> 6148;
    6148 [label="Expr"];
    6148 -> 6149;
    6149 [label="Identifier"];
    6149 -> 6150;
    6150[label="Value"];
    6137 -> 6151;
    6151 [label="Assignment(Assignment { syntax: 6151, lvalue: Some(6138), operator: Some(6152), rvalue: Some(6153) })"];
    6151 -> 6152;
    6152[label="="];
    6151 -> 6153;
    6153 [label="Expr"];
    6153 -> 6156;
    6156 [label="BinaryOp(BinaryOp { syntax: 6156, lhs: Some(6154), operator: Some(6157), rhs: Some(6158) })"];
    6156 -> 6154;
    6154 [label="Identifier"];
    6154 -> 6155;
    6155[label="CenterGoal"];
    6156 -> 6157;
    6157[label="."];
    6156 -> 6158;
    6158 [label="Expr"];
    6158 -> 6161;
    6161 [label="BinaryOp(BinaryOp { syntax: 6161, lhs: Some(6159), operator: Some(6162), rhs: Some(6163) })"];
    6161 -> 6159;
    6159 [label="Identifier"];
    6159 -> 6160;
    6160[label="Gauge"];
    6161 -> 6162;
    6162[label="."];
    6161 -> 6163;
    6163 [label="Expr"];
    6163 -> 6164;
    6164 [label="Identifier"];
    6164 -> 6165;
    6165[label="Max"];
    6137 -> 6166;
    6166[label=";"];
    5877 -> 6167;
    6167 [label="Statement(Statement { syntax: 6167, statement: Some(6181), semicolon: Some(6189) })"];
    6167 -> 6168;
    6168 [label="Expr"];
    6168 -> 6171;
    6171 [label="BinaryOp(BinaryOp { syntax: 6171, lhs: Some(6169), operator: Some(6172), rhs: Some(6173) })"];
    6171 -> 6169;
    6169 [label="Identifier"];
    6169 -> 6170;
    6170[label="CenterGoal"];
    6171 -> 6172;
    6172[label="."];
    6171 -> 6173;
    6173 [label="Expr"];
    6173 -> 6176;
    6176 [label="BinaryOp(BinaryOp { syntax: 6176, lhs: Some(6174), operator: Some(6177), rhs: Some(6178) })"];
    6176 -> 6174;
    6174 [label="Identifier"];
    6174 -> 6175;
    6175[label="Gauge"];
    6176 -> 6177;
    6177[label="."];
    6176 -> 6178;
    6178 [label="Expr"];
    6178 -> 6179;
    6179 [label="Identifier"];
    6179 -> 6180;
    6180[label="Speed"];
    6167 -> 6181;
    6181 [label="Assignment(Assignment { syntax: 6181, lvalue: Some(6168), operator: Some(6182), rvalue: Some(6183) })"];
    6181 -> 6182;
    6182[label="="];
    6181 -> 6183;
    6183 [label="Expr"];
    6183 -> 6184;
    6184 [label="UnOp(UnOp { syntax: 6184, operator: Some(6185), operand: Some(6186) })"];
    6184 -> 6185;
    6185[label="-"];
    6184 -> 6186;
    6186 [label="Expr"];
    6186 -> 6187;
    6187 [label="Literal"];
    6187 -> 6188;
    6188[label="1"];
    6167 -> 6189;
    6189[label=";"];
    5877 -> 6190;
    6190 [label="Statement(Statement { syntax: 6190, statement: Some(6191), semicolon: Some(6237) })"];
    6190 -> 6191;
    6191 [label="Expr"];
    6191 -> 6199;
    6199 [label="FunctionCall(FunctionCall { syntax: 6199, lhs: Some(6194), lparen: Some(6200), args: [(6201, Some(6210)), (6211, Some(6214)), (6215, Some(6218)), (6219, Some(6232)), (6233, None)], rparen: Some(6236) })"];
    6199 -> 6194;
    6194 [label="BinaryOp(BinaryOp { syntax: 6194, lhs: Some(6192), operator: Some(6195), rhs: Some(6196) })"];
    6194 -> 6192;
    6192 [label="Identifier"];
    6192 -> 6193;
    6193[label="Message"];
    6194 -> 6195;
    6195[label="::"];
    6194 -> 6196;
    6196 [label="Expr"];
    6196 -> 6197;
    6197 [label="Identifier"];
    6197 -> 6198;
    6198[label="SendStatusMessage"];
    6199 -> 6200;
    6200[label="("];
    6199 -> 6201;
    6201 [label="Expr"];
    6201 -> 6204;
    6204 [label="FunctionCall(FunctionCall { syntax: 6204, lhs: Some(6202), lparen: Some(6205), args: [(6206, None)], rparen: Some(6209) })"];
    6204 -> 6202;
    6202 [label="Identifier"];
    6202 -> 6203;
    6203[label="_"];
    6204 -> 6205;
    6205[label="("];
    6204 -> 6206;
    6206 [label="Expr"];
    6206 -> 6207;
    6207 [label="Literal"];
    6207 -> 6208;
    6208[label="\"Tornado activated.\""];
    6204 -> 6209;
    6209[label=")"];
    6199 -> 6210;
    6210[label=","];
    6199 -> 6211;
    6211 [label="Expr"];
    6211 -> 6212;
    6212 [label="Literal"];
    6212 -> 6213;
    6213[label="4000"];
    6199 -> 6214;
    6214[label=","];
    6199 -> 6215;
    6215 [label="Expr"];
    6215 -> 6216;
    6216 [label="Literal"];
    6216 -> 6217;
    6217[label="1"];
    6199 -> 6218;
    6218[label=","];
    6199 -> 6219;
    6219 [label="Expr"];
    6219 -> 6222;
    6222 [label="BinaryOp(BinaryOp { syntax: 6222, lhs: Some(6220), operator: Some(6223), rhs: Some(6224) })"];
    6222 -> 6220;
    6220 [label="Identifier"];
    6220 -> 6221;
    6221[label="CUIConfig"];
    6222 -> 6223;
    6223[label="::"];
    6222 -> 6224;
    6224 [label="Expr"];
    6224 -> 6227;
    6227 [label="BinaryOp(BinaryOp { syntax: 6227, lhs: Some(6225), operator: Some(6228), rhs: Some(6229) })"];
    6227 -> 6225;
    6225 [label="Identifier"];
    6225 -> 6226;
    6226[label="EUISound"];
    6227 -> 6228;
    6228[label="::"];
    6227 -> 6229;
    6229 [label="Expr"];
    6229 -> 6230;
    6230 [label="Identifier"];
    6230 -> 6231;
    6231[label="Notice"];
    6199 -> 6232;
    6232[label=","];
    6199 -> 6233;
    6233 [label="Expr"];
    6233 -> 6234;
    6234 [label="Literal"];
    6234 -> 6235;
    6235[label="0"];
    6199 -> 6236;
    6236[label=")"];
    6190 -> 6237;
    6237[label=";"];
    5877 -> 6238;
    6238 [label="Statement(Statement { syntax: 6238, statement: Some(6239), semicolon: Some(6257) })"];
    6238 -> 6239;
    6239 [label="Expr"];
    6239 -> 6247;
    6247 [label="FunctionCall(FunctionCall { syntax: 6247, lhs: Some(6242), lparen: Some(6248), args: [(6249, Some(6252)), (6253, None)], rparen: Some(6256) })"];
    6247 -> 6242;
    6242 [label="BinaryOp(BinaryOp { syntax: 6242, lhs: Some(6240), operator: Some(6243), rhs: Some(6244) })"];
    6242 -> 6240;
    6240 [label="Identifier"];
    6240 -> 6241;
    6241[label="Interfancy"];
    6242 -> 6243;
    6243[label="::"];
    6242 -> 6244;
    6244 [label="Expr"];
    6244 -> 6245;
    6245 [label="Identifier"];
    6245 -> 6246;
    6246[label="SetModuleVisibility"];
    6247 -> 6248;
    6248[label="("];
    6247 -> 6249;
    6249 [label="Expr"];
    6249 -> 6250;
    6250 [label="Literal"];
    6250 -> 6251;
    6251[label="\"Countdown\""];
    6247 -> 6252;
    6252[label=","];
    6247 -> 6253;
    6253 [label="Expr"];
    6253 -> 6254;
    6254 [label="Literal"];
    6254 -> 6255;
    6255[label="False"];
    6247 -> 6256;
    6256[label=")"];
    6238 -> 6257;
    6257[label=";"];
    5877 -> 6258;
    6258[label="}"];
    5597 -> 6259;
    6259[label="}"];
    5586 -> 6260;
    6260 [label="Else(Else { syntax: 6260, else_: Some(6261), if_: Some(6262), body: None })"];
    6260 -> 6261;
    6261[label="else"];
    6260 -> 6262;
    6262 [label="If(If { syntax: 6262, if_: Some(6263), lparen: Some(6264), condition: Some(6265), rparen: Some(6273), body: Some(6274), else_: None })"];
    6262 -> 6263;
    6263[label="if"];
    6262 -> 6264;
    6264[label="("];
    6262 -> 6265;
    6265 [label="Expr"];
    6265 -> 6268;
    6268 [label="BinaryOp(BinaryOp { syntax: 6268, lhs: Some(6266), operator: Some(6269), rhs: Some(6270) })"];
    6268 -> 6266;
    6266 [label="Identifier"];
    6266 -> 6267;
    6267[label="OffZoneRadius"];
    6268 -> 6269;
    6269[label=">"];
    6268 -> 6270;
    6270 [label="Expr"];
    6270 -> 6271;
    6271 [label="Literal"];
    6271 -> 6272;
    6272[label="0"];
    6262 -> 6273;
    6273[label=")"];
    6262 -> 6274;
    6274 [label="Statement(Statement { syntax: 6274, statement: Some(6275), semicolon: None })"];
    6274 -> 6275;
    6275 [label="Block(Block { syntax: 6275, lbrace: Some(6276), statements: [6277, 6334, 6343, 6426, 6504], rbrace: Some(6906) })"];
    6275 -> 6276;
    6276[label="{"];
    6275 -> 6277;
    6277 [label="Statement(Statement { syntax: 6277, statement: Some(6278), semicolon: None })"];
    6277 -> 6278;
    6278 [label="If(If { syntax: 6278, if_: Some(6279), lparen: Some(6280), condition: Some(6281), rparen: Some(6289), body: Some(6290), else_: None })"];
    6278 -> 6279;
    6279[label="if"];
    6278 -> 6280;
    6280[label="("];
    6278 -> 6281;
    6281 [label="Expr"];
    6281 -> 6284;
    6284 [label="BinaryOp(BinaryOp { syntax: 6284, lhs: Some(6282), operator: Some(6285), rhs: Some(6286) })"];
    6284 -> 6282;
    6282 [label="Identifier"];
    6282 -> 6283;
    6283[label="OffZoneRadius"];
    6284 -> 6285;
    6285[label="<="];
    6284 -> 6286;
    6286 [label="Expr"];
    6286 -> 6287;
    6287 [label="Identifier"];
    6287 -> 6288;
    6288[label="C_OffZoneMinimumRadius"];
    6278 -> 6289;
    6289[label=")"];
    6278 -> 6290;
    6290 [label="Statement(Statement { syntax: 6290, statement: Some(6291), semicolon: None })"];
    6290 -> 6291;
    6291 [label="Block(Block { syntax: 6291, lbrace: Some(6292), statements: [6293, 6303, 6313], rbrace: Some(6333) })"];
    6291 -> 6292;
    6292[label="{"];
    6291 -> 6293;
    6293 [label="Statement(Statement { syntax: 6293, statement: Some(6297), semicolon: Some(6302) })"];
    6293 -> 6294;
    6294 [label="Expr"];
    6294 -> 6295;
    6295 [label="Identifier"];
    6295 -> 6296;
    6296[label="OffZoneRadius"];
    6293 -> 6297;
    6297 [label="Assignment(Assignment { syntax: 6297, lvalue: Some(6294), operator: Some(6298), rvalue: Some(6299) })"];
    6297 -> 6298;
    6298[label="="];
    6297 -> 6299;
    6299 [label="Expr"];
    6299 -> 6300;
    6300 [label="Identifier"];
    6300 -> 6301;
    6301[label="C_OffZoneMinimumRadius"];
    6293 -> 6302;
    6302[label=";"];
    6291 -> 6303;
    6303 [label="Statement(Statement { syntax: 6303, statement: Some(6307), semicolon: Some(6312) })"];
    6303 -> 6304;
    6304 [label="Expr"];
    6304 -> 6305;
    6305 [label="Identifier"];
    6305 -> 6306;
    6306[label="OffZoneRadiusSpeed"];
    6303 -> 6307;
    6307 [label="Assignment(Assignment { syntax: 6307, lvalue: Some(6304), operator: Some(6308), rvalue: Some(6309) })"];
    6307 -> 6308;
    6308[label="="];
    6307 -> 6309;
    6309 [label="Expr"];
    6309 -> 6310;
    6310 [label="Literal"];
    6310 -> 6311;
    6311[label="0."];
    6303 -> 6312;
    6312[label=";"];
    6291 -> 6313;
    6313 [label="Statement(Statement { syntax: 6313, statement: Some(6327), semicolon: Some(6332) })"];
    6313 -> 6314;
    6314 [label="Expr"];
    6314 -> 6317;
    6317 [label="BinaryOp(BinaryOp { syntax: 6317, lhs: Some(6315), operator: Some(6318), rhs: Some(6319) })"];
    6317 -> 6315;
    6315 [label="Identifier"];
    6315 -> 6316;
    6316[label="CenterGoal"];
    6317 -> 6318;
    6318[label="."];
    6317 -> 6319;
    6319 [label="Expr"];
    6319 -> 6322;
    6322 [label="BinaryOp(BinaryOp { syntax: 6322, lhs: Some(6320), operator: Some(6323), rhs: Some(6324) })"];
    6322 -> 6320;
    6320 [label="Identifier"];
    6320 -> 6321;
    6321[label="Gauge"];
    6322 -> 6323;
    6323[label="."];
    6322 -> 6324;
    6324 [label="Expr"];
    6324 -> 6325;
    6325 [label="Identifier"];
    6325 -> 6326;
    6326[label="ValueReal"];
    6313 -> 6327;
    6327 [label="Assignment(Assignment { syntax: 6327, lvalue: Some(6314), operator: Some(6328), rvalue: Some(6329) })"];
    6327 -> 6328;
    6328[label="="];
    6327 -> 6329;
    6329 [label="Expr"];
    6329 -> 6330;
    6330 [label="Literal"];
    6330 -> 6331;
    6331[label="0."];
    6313 -> 6332;
    6332[label=";"];
    6291 -> 6333;
    6333[label="}"];
    6275 -> 6334;
    6334 [label="Statement(Statement { syntax: 6334, statement: Some(6335), semicolon: None })"];
    6334 -> 6335;
    6335 [label="VarDec(VarDec { syntax: 6335, declare: Some(6336), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(6337), name: Some(6341), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    6335 -> 6336;
    6336[label="declare"];
    6335 -> 6337;
    6337 [label="Type(Type { syntax: 6337, basename: Some(6338), members: [], arrays: [(6339, None, 6340)] })"];
    6337 -> 6338;
    6338[label="Ident"];
    6337 -> 6339;
    6339[label="["];
    6337 -> 6340;
    6340[label="]"];
    6335 -> 6341;
    6341[label="ObjectsToDestroy"];
    6335 -> 6342;
    6342[label=";"];
    6275 -> 6343;
    6343 [label="Statement(Statement { syntax: 6343, statement: Some(6344), semicolon: None })"];
    6343 -> 6344;
    6344 [label="Foreach(Foreach { syntax: 6344, foreach: Some(6345), lparen: Some(6346), name1: Some(6347), arrow: None, name2: None, in_: Some(6348), value: Some(6349), rparen: Some(6352), body: Some(6353) })"];
    6344 -> 6345;
    6345[label="foreach"];
    6344 -> 6346;
    6346[label="("];
    6344 -> 6347;
    6347[label="Object"];
    6344 -> 6348;
    6348[label="in"];
    6344 -> 6349;
    6349 [label="Expr"];
    6349 -> 6350;
    6350 [label="Identifier"];
    6350 -> 6351;
    6351[label="Objects"];
    6344 -> 6352;
    6352[label=")"];
    6344 -> 6353;
    6353 [label="Statement(Statement { syntax: 6353, statement: Some(6354), semicolon: None })"];
    6353 -> 6354;
    6354 [label="Block(Block { syntax: 6354, lbrace: Some(6355), statements: [6356, 6367], rbrace: Some(6425) })"];
    6354 -> 6355;
    6355[label="{"];
    6354 -> 6356;
    6356 [label="Statement(Statement { syntax: 6356, statement: Some(6357), semicolon: None })"];
    6356 -> 6357;
    6357 [label="VarDec(VarDec { syntax: 6357, declare: Some(6358), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(6359), name: Some(6361), as_: None, alias: None, for_: Some(6362), target: Some(6363), assignment: None, value: None })"];
    6357 -> 6358;
    6358[label="declare"];
    6357 -> 6359;
    6359 [label="Type(Type { syntax: 6359, basename: Some(6360), members: [], arrays: [] })"];
    6359 -> 6360;
    6360[label="Real"];
    6357 -> 6361;
    6361[label="CenterGoalDistance"];
    6357 -> 6362;
    6362[label="for"];
    6357 -> 6363;
    6363 [label="Expr"];
    6363 -> 6364;
    6364 [label="Identifier"];
    6364 -> 6365;
    6365[label="Object"];
    6357 -> 6366;
    6366[label=";"];
    6354 -> 6367;
    6367 [label="Statement(Statement { syntax: 6367, statement: Some(6368), semicolon: None })"];
    6367 -> 6368;
    6368 [label="If(If { syntax: 6368, if_: Some(6369), lparen: Some(6370), condition: Some(6371), rparen: Some(6403), body: Some(6404), else_: None })"];
    6368 -> 6369;
    6369[label="if"];
    6368 -> 6370;
    6370[label="("];
    6368 -> 6371;
    6371 [label="Expr"];
    6371 -> 6392;
    6392 [label="FunctionCall(FunctionCall { syntax: 6392, lhs: Some(6379), lparen: Some(6393), args: [(6394, None)], rparen: Some(6402) })"];
    6392 -> 6379;
    6379 [label="BinaryOp(BinaryOp { syntax: 6379, lhs: Some(6374), operator: Some(6380), rhs: Some(6381) })"];
    6379 -> 6374;
    6374 [label="BinaryOp(BinaryOp { syntax: 6374, lhs: Some(6372), operator: Some(6375), rhs: Some(6376) })"];
    6374 -> 6372;
    6372 [label="Identifier"];
    6372 -> 6373;
    6373[label="CenterGoalDistance"];
    6374 -> 6375;
    6375[label=">="];
    6374 -> 6376;
    6376 [label="Expr"];
    6376 -> 6377;
    6377 [label="Identifier"];
    6377 -> 6378;
    6378[label="OffZoneRadius"];
    6379 -> 6380;
    6380[label="&&"];
    6379 -> 6381;
    6381 [label="Expr"];
    6381 -> 6382;
    6382 [label="UnOp(UnOp { syntax: 6382, operator: Some(6383), operand: Some(6384) })"];
    6382 -> 6383;
    6383[label="!"];
    6382 -> 6384;
    6384 [label="Expr"];
    6384 -> 6387;
    6387 [label="BinaryOp(BinaryOp { syntax: 6387, lhs: Some(6385), operator: Some(6388), rhs: Some(6389) })"];
    6387 -> 6385;
    6385 [label="Identifier"];
    6385 -> 6386;
    6386[label="ObjectsToDestroy"];
    6387 -> 6388;
    6388[label="."];
    6387 -> 6389;
    6389 [label="Expr"];
    6389 -> 6390;
    6390 [label="Identifier"];
    6390 -> 6391;
    6391[label="exists"];
    6392 -> 6393;
    6393[label="("];
    6392 -> 6394;
    6394 [label="Expr"];
    6394 -> 6397;
    6397 [label="BinaryOp(BinaryOp { syntax: 6397, lhs: Some(6395), operator: Some(6398), rhs: Some(6399) })"];
    6397 -> 6395;
    6395 [label="Identifier"];
    6395 -> 6396;
    6396[label="Object"];
    6397 -> 6398;
    6398[label="."];
    6397 -> 6399;
    6399 [label="Expr"];
    6399 -> 6400;
    6400 [label="Identifier"];
    6400 -> 6401;
    6401[label="Id"];
    6392 -> 6402;
    6402[label=")"];
    6368 -> 6403;
    6403[label=")"];
    6368 -> 6404;
    6404 [label="Statement(Statement { syntax: 6404, statement: Some(6405), semicolon: Some(6424) })"];
    6404 -> 6405;
    6405 [label="Expr"];
    6405 -> 6413;
    6413 [label="FunctionCall(FunctionCall { syntax: 6413, lhs: Some(6408), lparen: Some(6414), args: [(6415, None)], rparen: Some(6423) })"];
    6413 -> 6408;
    6408 [label="BinaryOp(BinaryOp { syntax: 6408, lhs: Some(6406), operator: Some(6409), rhs: Some(6410) })"];
    6408 -> 6406;
    6406 [label="Identifier"];
    6406 -> 6407;
    6407[label="ObjectsToDestroy"];
    6408 -> 6409;
    6409[label="."];
    6408 -> 6410;
    6410 [label="Expr"];
    6410 -> 6411;
    6411 [label="Identifier"];
    6411 -> 6412;
    6412[label="add"];
    6413 -> 6414;
    6414[label="("];
    6413 -> 6415;
    6415 [label="Expr"];
    6415 -> 6418;
    6418 [label="BinaryOp(BinaryOp { syntax: 6418, lhs: Some(6416), operator: Some(6419), rhs: Some(6420) })"];
    6418 -> 6416;
    6416 [label="Identifier"];
    6416 -> 6417;
    6417[label="Object"];
    6418 -> 6419;
    6419[label="."];
    6418 -> 6420;
    6420 [label="Expr"];
    6420 -> 6421;
    6421 [label="Identifier"];
    6421 -> 6422;
    6422[label="Id"];
    6413 -> 6423;
    6423[label=")"];
    6404 -> 6424;
    6424[label=";"];
    6354 -> 6425;
    6425[label="}"];
    6275 -> 6426;
    6426 [label="Statement(Statement { syntax: 6426, statement: Some(6427), semicolon: None })"];
    6426 -> 6427;
    6427 [label="While(While { syntax: 6427, while_: Some(6428), lparen: Some(6429), condition: Some(6430), rparen: Some(6443), body: Some(6444) })"];
    6427 -> 6428;
    6428[label="while"];
    6427 -> 6429;
    6429[label="("];
    6427 -> 6430;
    6430 [label="Expr"];
    6430 -> 6438;
    6438 [label="BinaryOp(BinaryOp { syntax: 6438, lhs: Some(6433), operator: Some(6439), rhs: Some(6440) })"];
    6438 -> 6433;
    6433 [label="BinaryOp(BinaryOp { syntax: 6433, lhs: Some(6431), operator: Some(6434), rhs: Some(6435) })"];
    6433 -> 6431;
    6431 [label="Identifier"];
    6431 -> 6432;
    6432[label="ObjectsToDestroy"];
    6433 -> 6434;
    6434[label="."];
    6433 -> 6435;
    6435 [label="Expr"];
    6435 -> 6436;
    6436 [label="Identifier"];
    6436 -> 6437;
    6437[label="count"];
    6438 -> 6439;
    6439[label=">"];
    6438 -> 6440;
    6440 [label="Expr"];
    6440 -> 6441;
    6441 [label="Literal"];
    6441 -> 6442;
    6442[label="0"];
    6427 -> 6443;
    6443[label=")"];
    6427 -> 6444;
    6444 [label="Statement(Statement { syntax: 6444, statement: Some(6445), semicolon: None })"];
    6444 -> 6445;
    6445 [label="Block(Block { syntax: 6445, lbrace: Some(6446), statements: [6447, 6454, 6482], rbrace: Some(6503) })"];
    6445 -> 6446;
    6446[label="{"];
    6445 -> 6447;
    6447 [label="Statement(Statement { syntax: 6447, statement: Some(6448), semicolon: None })"];
    6447 -> 6448;
    6448 [label="VarDec(VarDec { syntax: 6448, declare: Some(6449), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(6450), name: Some(6452), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    6448 -> 6449;
    6449[label="declare"];
    6448 -> 6450;
    6450 [label="Type(Type { syntax: 6450, basename: Some(6451), members: [], arrays: [] })"];
    6450 -> 6451;
    6451[label="Boolean"];
    6448 -> 6452;
    6452[label="Removed"];
    6448 -> 6453;
    6453[label=";"];
    6445 -> 6454;
    6454 [label="Statement(Statement { syntax: 6454, statement: Some(6458), semicolon: Some(6481) })"];
    6454 -> 6455;
    6455 [label="Expr"];
    6455 -> 6456;
    6456 [label="Identifier"];
    6456 -> 6457;
    6457[label="Removed"];
    6454 -> 6458;
    6458 [label="Assignment(Assignment { syntax: 6458, lvalue: Some(6455), operator: Some(6459), rvalue: Some(6460) })"];
    6458 -> 6459;
    6459[label="="];
    6458 -> 6460;
    6460 [label="Expr"];
    6460 -> 6463;
    6463 [label="FunctionCall(FunctionCall { syntax: 6463, lhs: Some(6461), lparen: Some(6464), args: [(6465, None)], rparen: Some(6480) })"];
    6463 -> 6461;
    6461 [label="Identifier"];
    6461 -> 6462;
    6462[label="DestroyObject"];
    6463 -> 6464;
    6464[label="("];
    6463 -> 6465;
    6465 [label="Expr"];
    6465 -> 6468;
    6468 [label="ArrayAccess(ArrayAccess { syntax: 6468, lhs: Some(6466), lsquare: Some(6469), index: Some(6470), rsquare: Some(6479) })"];
    6468 -> 6466;
    6466 [label="Identifier"];
    6466 -> 6467;
    6467[label="Objects"];
    6468 -> 6469;
    6469[label="["];
    6468 -> 6470;
    6470 [label="Expr"];
    6470 -> 6473;
    6473 [label="ArrayAccess(ArrayAccess { syntax: 6473, lhs: Some(6471), lsquare: Some(6474), index: Some(6475), rsquare: Some(6478) })"];
    6473 -> 6471;
    6471 [label="Identifier"];
    6471 -> 6472;
    6472[label="ObjectsToDestroy"];
    6473 -> 6474;
    6474[label="["];
    6473 -> 6475;
    6475 [label="Expr"];
    6475 -> 6476;
    6476 [label="Literal"];
    6476 -> 6477;
    6477[label="0"];
    6473 -> 6478;
    6478[label="]"];
    6468 -> 6479;
    6479[label="]"];
    6463 -> 6480;
    6480[label=")"];
    6454 -> 6481;
    6481[label=";"];
    6445 -> 6482;
    6482 [label="Statement(Statement { syntax: 6482, statement: Some(6486), semicolon: Some(6502) })"];
    6482 -> 6483;
    6483 [label="Expr"];
    6483 -> 6484;
    6484 [label="Identifier"];
    6484 -> 6485;
    6485[label="Removed"];
    6482 -> 6486;
    6486 [label="Assignment(Assignment { syntax: 6486, lvalue: Some(6483), operator: Some(6487), rvalue: Some(6488) })"];
    6486 -> 6487;
    6487[label="="];
    6486 -> 6488;
    6488 [label="Expr"];
    6488 -> 6496;
    6496 [label="FunctionCall(FunctionCall { syntax: 6496, lhs: Some(6491), lparen: Some(6497), args: [(6498, None)], rparen: Some(6501) })"];
    6496 -> 6491;
    6491 [label="BinaryOp(BinaryOp { syntax: 6491, lhs: Some(6489), operator: Some(6492), rhs: Some(6493) })"];
    6491 -> 6489;
    6489 [label="Identifier"];
    6489 -> 6490;
    6490[label="ObjectsToDestroy"];
    6491 -> 6492;
    6492[label="."];
    6491 -> 6493;
    6493 [label="Expr"];
    6493 -> 6494;
    6494 [label="Identifier"];
    6494 -> 6495;
    6495[label="removekey"];
    6496 -> 6497;
    6497[label="("];
    6496 -> 6498;
    6498 [label="Expr"];
    6498 -> 6499;
    6499 [label="Literal"];
    6499 -> 6500;
    6500[label="0"];
    6496 -> 6501;
    6501[label=")"];
    6482 -> 6502;
    6502[label=";"];
    6445 -> 6503;
    6503[label="}"];
    6275 -> 6504;
    6504 [label="Statement(Statement { syntax: 6504, statement: Some(6505), semicolon: None })"];
    6504 -> 6505;
    6505 [label="Foreach(Foreach { syntax: 6505, foreach: Some(6506), lparen: Some(6507), name1: Some(6508), arrow: None, name2: None, in_: Some(6509), value: Some(6510), rparen: Some(6513), body: Some(6514) })"];
    6505 -> 6506;
    6506[label="foreach"];
    6505 -> 6507;
    6507[label="("];
    6505 -> 6508;
    6508[label="MapLandmark"];
    6505 -> 6509;
    6509[label="in"];
    6505 -> 6510;
    6510 [label="Expr"];
    6510 -> 6511;
    6511 [label="Identifier"];
    6511 -> 6512;
    6512[label="MapLandmarks"];
    6505 -> 6513;
    6513[label=")"];
    6505 -> 6514;
    6514 [label="Statement(Statement { syntax: 6514, statement: Some(6515), semicolon: None })"];
    6514 -> 6515;
    6515 [label="Block(Block { syntax: 6515, lbrace: Some(6516), statements: [6517, 6539, 6550, 6567, 6630, 6821], rbrace: Some(6905) })"];
    6515 -> 6516;
    6516[label="{"];
    6515 -> 6517;
    6517 [label="Statement(Statement { syntax: 6517, statement: Some(6518), semicolon: None })"];
    6517 -> 6518;
    6518 [label="If(If { syntax: 6518, if_: Some(6519), lparen: Some(6520), condition: Some(6521), rparen: Some(6534), body: Some(6535), else_: None })"];
    6518 -> 6519;
    6519[label="if"];
    6518 -> 6520;
    6520[label="("];
    6518 -> 6521;
    6521 [label="Expr"];
    6521 -> 6529;
    6529 [label="BinaryOp(BinaryOp { syntax: 6529, lhs: Some(6524), operator: Some(6530), rhs: Some(6531) })"];
    6529 -> 6524;
    6524 [label="BinaryOp(BinaryOp { syntax: 6524, lhs: Some(6522), operator: Some(6525), rhs: Some(6526) })"];
    6524 -> 6522;
    6522 [label="Identifier"];
    6522 -> 6523;
    6523[label="MapLandmark"];
    6524 -> 6525;
    6525[label="."];
    6524 -> 6526;
    6526 [label="Expr"];
    6526 -> 6527;
    6527 [label="Identifier"];
    6527 -> 6528;
    6528[label="Id"];
    6529 -> 6530;
    6530[label="=="];
    6529 -> 6531;
    6531 [label="Expr"];
    6531 -> 6532;
    6532 [label="Identifier"];
    6532 -> 6533;
    6533[label="CenterGoalLandmarkId"];
    6518 -> 6534;
    6534[label=")"];
    6518 -> 6535;
    6535 [label="Statement(Statement { syntax: 6535, statement: Some(6536), semicolon: Some(6538) })"];
    6535 -> 6536;
    6536 [label="Continue"];
    6536 -> 6537;
    6537[label="continue"];
    6535 -> 6538;
    6538[label=";"];
    6515 -> 6539;
    6539 [label="Statement(Statement { syntax: 6539, statement: Some(6540), semicolon: None })"];
    6539 -> 6540;
    6540 [label="VarDec(VarDec { syntax: 6540, declare: Some(6541), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(6542), name: Some(6544), as_: None, alias: None, for_: Some(6545), target: Some(6546), assignment: None, value: None })"];
    6540 -> 6541;
    6541[label="declare"];
    6540 -> 6542;
    6542 [label="Type(Type { syntax: 6542, basename: Some(6543), members: [], arrays: [] })"];
    6542 -> 6543;
    6543[label="Real"];
    6540 -> 6544;
    6544[label="CenterGoalDistance"];
    6540 -> 6545;
    6545[label="for"];
    6540 -> 6546;
    6546 [label="Expr"];
    6546 -> 6547;
    6547 [label="Identifier"];
    6547 -> 6548;
    6548[label="MapLandmark"];
    6540 -> 6549;
    6549[label=";"];
    6515 -> 6550;
    6550 [label="Statement(Statement { syntax: 6550, statement: Some(6551), semicolon: None })"];
    6550 -> 6551;
    6551 [label="If(If { syntax: 6551, if_: Some(6552), lparen: Some(6553), condition: Some(6554), rparen: Some(6562), body: Some(6563), else_: None })"];
    6551 -> 6552;
    6552[label="if"];
    6551 -> 6553;
    6553[label="("];
    6551 -> 6554;
    6554 [label="Expr"];
    6554 -> 6557;
    6557 [label="BinaryOp(BinaryOp { syntax: 6557, lhs: Some(6555), operator: Some(6558), rhs: Some(6559) })"];
    6557 -> 6555;
    6555 [label="Identifier"];
    6555 -> 6556;
    6556[label="CenterGoalDistance"];
    6557 -> 6558;
    6558[label="<="];
    6557 -> 6559;
    6559 [label="Expr"];
    6559 -> 6560;
    6560 [label="Literal"];
    6560 -> 6561;
    6561[label="0"];
    6551 -> 6562;
    6562[label=")"];
    6551 -> 6563;
    6563 [label="Statement(Statement { syntax: 6563, statement: Some(6564), semicolon: Some(6566) })"];
    6563 -> 6564;
    6564 [label="Continue"];
    6564 -> 6565;
    6565[label="continue"];
    6563 -> 6566;
    6566[label=";"];
    6515 -> 6567;
    6567 [label="Statement(Statement { syntax: 6567, statement: Some(6568), semicolon: None })"];
    6567 -> 6568;
    6568 [label="If(If { syntax: 6568, if_: Some(6569), lparen: Some(6570), condition: Some(6571), rparen: Some(6609), body: Some(6610), else_: None })"];
    6568 -> 6569;
    6569[label="if"];
    6568 -> 6570;
    6570[label="("];
    6568 -> 6571;
    6571 [label="Expr"];
    6571 -> 6584;
    6584 [label="BinaryOp(BinaryOp { syntax: 6584, lhs: Some(6579), operator: Some(6585), rhs: Some(6586) })"];
    6584 -> 6579;
    6579 [label="BinaryOp(BinaryOp { syntax: 6579, lhs: Some(6574), operator: Some(6580), rhs: Some(6581) })"];
    6579 -> 6574;
    6574 [label="BinaryOp(BinaryOp { syntax: 6574, lhs: Some(6572), operator: Some(6575), rhs: Some(6576) })"];
    6574 -> 6572;
    6572 [label="Identifier"];
    6572 -> 6573;
    6573[label="MapLandmark"];
    6574 -> 6575;
    6575[label="."];
    6574 -> 6576;
    6576 [label="Expr"];
    6576 -> 6577;
    6577 [label="Identifier"];
    6577 -> 6578;
    6578[label="Base"];
    6579 -> 6580;
    6580[label="!="];
    6579 -> 6581;
    6581 [label="Expr"];
    6581 -> 6582;
    6582 [label="Literal"];
    6582 -> 6583;
    6583[label="Null"];
    6584 -> 6585;
    6585[label="&&"];
    6584 -> 6586;
    6586 [label="Expr"];
    6586 -> 6599;
    6599 [label="BinaryOp(BinaryOp { syntax: 6599, lhs: Some(6589), operator: Some(6600), rhs: Some(6601) })"];
    6599 -> 6589;
    6589 [label="BinaryOp(BinaryOp { syntax: 6589, lhs: Some(6587), operator: Some(6590), rhs: Some(6591) })"];
    6589 -> 6587;
    6587 [label="Identifier"];
    6587 -> 6588;
    6588[label="MapLandmark"];
    6589 -> 6590;
    6590[label="."];
    6589 -> 6591;
    6591 [label="Expr"];
    6591 -> 6594;
    6594 [label="BinaryOp(BinaryOp { syntax: 6594, lhs: Some(6592), operator: Some(6595), rhs: Some(6596) })"];
    6594 -> 6592;
    6592 [label="Identifier"];
    6592 -> 6593;
    6593[label="Base"];
    6594 -> 6595;
    6595[label="."];
    6594 -> 6596;
    6596 [label="Expr"];
    6596 -> 6597;
    6597 [label="Identifier"];
    6597 -> 6598;
    6598[label="IsActive"];
    6599 -> 6600;
    6600[label="&&"];
    6599 -> 6601;
    6601 [label="Expr"];
    6601 -> 6604;
    6604 [label="BinaryOp(BinaryOp { syntax: 6604, lhs: Some(6602), operator: Some(6605), rhs: Some(6606) })"];
    6604 -> 6602;
    6602 [label="Identifier"];
    6602 -> 6603;
    6603[label="CenterGoalDistance"];
    6604 -> 6605;
    6605[label=">="];
    6604 -> 6606;
    6606 [label="Expr"];
    6606 -> 6607;
    6607 [label="Identifier"];
    6607 -> 6608;
    6608[label="OffZoneRadius"];
    6568 -> 6609;
    6609[label=")"];
    6568 -> 6610;
    6610 [label="Statement(Statement { syntax: 6610, statement: Some(6624), semicolon: Some(6629) })"];
    6610 -> 6611;
    6611 [label="Expr"];
    6611 -> 6614;
    6614 [label="BinaryOp(BinaryOp { syntax: 6614, lhs: Some(6612), operator: Some(6615), rhs: Some(6616) })"];
    6614 -> 6612;
    6612 [label="Identifier"];
    6612 -> 6613;
    6613[label="MapLandmark"];
    6614 -> 6615;
    6615[label="."];
    6614 -> 6616;
    6616 [label="Expr"];
    6616 -> 6619;
    6619 [label="BinaryOp(BinaryOp { syntax: 6619, lhs: Some(6617), operator: Some(6620), rhs: Some(6621) })"];
    6619 -> 6617;
    6617 [label="Identifier"];
    6617 -> 6618;
    6618[label="Base"];
    6619 -> 6620;
    6620[label="."];
    6619 -> 6621;
    6621 [label="Expr"];
    6621 -> 6622;
    6622 [label="Identifier"];
    6622 -> 6623;
    6623[label="IsActive"];
    6610 -> 6624;
    6624 [label="Assignment(Assignment { syntax: 6624, lvalue: Some(6611), operator: Some(6625), rvalue: Some(6626) })"];
    6624 -> 6625;
    6625[label="="];
    6624 -> 6626;
    6626 [label="Expr"];
    6626 -> 6627;
    6627 [label="Literal"];
    6627 -> 6628;
    6628[label="False"];
    6610 -> 6629;
    6629[label=";"];
    6515 -> 6630;
    6630 [label="Statement(Statement { syntax: 6630, statement: Some(6631), semicolon: None })"];
    6630 -> 6631;
    6631 [label="If(If { syntax: 6631, if_: Some(6632), lparen: Some(6633), condition: Some(6634), rparen: Some(6662), body: Some(6663), else_: None })"];
    6631 -> 6632;
    6632[label="if"];
    6631 -> 6633;
    6633[label="("];
    6631 -> 6634;
    6634 [label="Expr"];
    6634 -> 6647;
    6647 [label="BinaryOp(BinaryOp { syntax: 6647, lhs: Some(6642), operator: Some(6648), rhs: Some(6649) })"];
    6647 -> 6642;
    6642 [label="BinaryOp(BinaryOp { syntax: 6642, lhs: Some(6637), operator: Some(6643), rhs: Some(6644) })"];
    6642 -> 6637;
    6637 [label="BinaryOp(BinaryOp { syntax: 6637, lhs: Some(6635), operator: Some(6638), rhs: Some(6639) })"];
    6637 -> 6635;
    6635 [label="Identifier"];
    6635 -> 6636;
    6636[label="MapLandmark"];
    6637 -> 6638;
    6638[label="."];
    6637 -> 6639;
    6639 [label="Expr"];
    6639 -> 6640;
    6640 [label="Identifier"];
    6640 -> 6641;
    6641[label="Gate"];
    6642 -> 6643;
    6643[label="!="];
    6642 -> 6644;
    6644 [label="Expr"];
    6644 -> 6645;
    6645 [label="Literal"];
    6645 -> 6646;
    6646[label="Null"];
    6647 -> 6648;
    6648[label="&&"];
    6647 -> 6649;
    6649 [label="Expr"];
    6649 -> 6652;
    6652 [label="BinaryOp(BinaryOp { syntax: 6652, lhs: Some(6650), operator: Some(6653), rhs: Some(6654) })"];
    6652 -> 6650;
    6650 [label="Identifier"];
    6650 -> 6651;
    6651[label="MapLandmark"];
    6652 -> 6653;
    6653[label="."];
    6652 -> 6654;
    6654 [label="Expr"];
    6654 -> 6657;
    6657 [label="BinaryOp(BinaryOp { syntax: 6657, lhs: Some(6655), operator: Some(6658), rhs: Some(6659) })"];
    6657 -> 6655;
    6655 [label="Identifier"];
    6655 -> 6656;
    6656[label="Gate"];
    6657 -> 6658;
    6658[label="."];
    6657 -> 6659;
    6659 [label="Expr"];
    6659 -> 6660;
    6660 [label="Identifier"];
    6660 -> 6661;
    6661[label="Automatic"];
    6631 -> 6662;
    6662[label=")"];
    6631 -> 6663;
    6663 [label="Statement(Statement { syntax: 6663, statement: Some(6664), semicolon: None })"];
    6663 -> 6664;
    6664 [label="Block(Block { syntax: 6664, lbrace: Some(6665), statements: [6666], rbrace: Some(6820) })"];
    6664 -> 6665;
    6665[label="{"];
    6664 -> 6666;
    6666 [label="Statement(Statement { syntax: 6666, statement: Some(6667), semicolon: None })"];
    6666 -> 6667;
    6667 [label="If(If { syntax: 6667, if_: Some(6668), lparen: Some(6669), condition: Some(6670), rparen: Some(6678), body: Some(6679), else_: Some(6743) })"];
    6667 -> 6668;
    6668[label="if"];
    6667 -> 6669;
    6669[label="("];
    6667 -> 6670;
    6670 [label="Expr"];
    6670 -> 6673;
    6673 [label="BinaryOp(BinaryOp { syntax: 6673, lhs: Some(6671), operator: Some(6674), rhs: Some(6675) })"];
    6673 -> 6671;
    6671 [label="Identifier"];
    6671 -> 6672;
    6672[label="CenterGoalDistance"];
    6673 -> 6674;
    6674[label=">="];
    6673 -> 6675;
    6675 [label="Expr"];
    6675 -> 6676;
    6676 [label="Identifier"];
    6676 -> 6677;
    6677[label="OffZoneRadius"];
    6667 -> 6678;
    6678[label=")"];
    6667 -> 6679;
    6679 [label="Statement(Statement { syntax: 6679, statement: Some(6680), semicolon: None })"];
    6679 -> 6680;
    6680 [label="Block(Block { syntax: 6680, lbrace: Some(6681), statements: [6682, 6702, 6722], rbrace: Some(6742) })"];
    6680 -> 6681;
    6681[label="{"];
    6680 -> 6682;
    6682 [label="Statement(Statement { syntax: 6682, statement: Some(6696), semicolon: Some(6701) })"];
    6682 -> 6683;
    6683 [label="Expr"];
    6683 -> 6686;
    6686 [label="BinaryOp(BinaryOp { syntax: 6686, lhs: Some(6684), operator: Some(6687), rhs: Some(6688) })"];
    6686 -> 6684;
    6684 [label="Identifier"];
    6684 -> 6685;
    6685[label="MapLandmark"];
    6686 -> 6687;
    6687[label="."];
    6686 -> 6688;
    6688 [label="Expr"];
    6688 -> 6691;
    6691 [label="BinaryOp(BinaryOp { syntax: 6691, lhs: Some(6689), operator: Some(6692), rhs: Some(6693) })"];
    6691 -> 6689;
    6689 [label="Identifier"];
    6689 -> 6690;
    6690[label="Gate"];
    6691 -> 6692;
    6692[label="."];
    6691 -> 6693;
    6693 [label="Expr"];
    6693 -> 6694;
    6694 [label="Identifier"];
    6694 -> 6695;
    6695[label="Automatic"];
    6682 -> 6696;
    6696 [label="Assignment(Assignment { syntax: 6696, lvalue: Some(6683), operator: Some(6697), rvalue: Some(6698) })"];
    6696 -> 6697;
    6697[label="="];
    6696 -> 6698;
    6698 [label="Expr"];
    6698 -> 6699;
    6699 [label="Literal"];
    6699 -> 6700;
    6700[label="False"];
    6682 -> 6701;
    6701[label=";"];
    6680 -> 6702;
    6702 [label="Statement(Statement { syntax: 6702, statement: Some(6716), semicolon: Some(6721) })"];
    6702 -> 6703;
    6703 [label="Expr"];
    6703 -> 6706;
    6706 [label="BinaryOp(BinaryOp { syntax: 6706, lhs: Some(6704), operator: Some(6707), rhs: Some(6708) })"];
    6706 -> 6704;
    6704 [label="Identifier"];
    6704 -> 6705;
    6705[label="MapLandmark"];
    6706 -> 6707;
    6707[label="."];
    6706 -> 6708;
    6708 [label="Expr"];
    6708 -> 6711;
    6711 [label="BinaryOp(BinaryOp { syntax: 6711, lhs: Some(6709), operator: Some(6712), rhs: Some(6713) })"];
    6711 -> 6709;
    6709 [label="Identifier"];
    6709 -> 6710;
    6710[label="Gate"];
    6711 -> 6712;
    6712[label="."];
    6711 -> 6713;
    6713 [label="Expr"];
    6713 -> 6714;
    6714 [label="Identifier"];
    6714 -> 6715;
    6715[label="ManualClosed"];
    6702 -> 6716;
    6716 [label="Assignment(Assignment { syntax: 6716, lvalue: Some(6703), operator: Some(6717), rvalue: Some(6718) })"];
    6716 -> 6717;
    6717[label="="];
    6716 -> 6718;
    6718 [label="Expr"];
    6718 -> 6719;
    6719 [label="Literal"];
    6719 -> 6720;
    6720[label="False"];
    6702 -> 6721;
    6721[label=";"];
    6680 -> 6722;
    6722 [label="Statement(Statement { syntax: 6722, statement: Some(6736), semicolon: Some(6741) })"];
    6722 -> 6723;
    6723 [label="Expr"];
    6723 -> 6726;
    6726 [label="BinaryOp(BinaryOp { syntax: 6726, lhs: Some(6724), operator: Some(6727), rhs: Some(6728) })"];
    6726 -> 6724;
    6724 [label="Identifier"];
    6724 -> 6725;
    6725[label="MapLandmark"];
    6726 -> 6727;
    6727[label="."];
    6726 -> 6728;
    6728 [label="Expr"];
    6728 -> 6731;
    6731 [label="BinaryOp(BinaryOp { syntax: 6731, lhs: Some(6729), operator: Some(6732), rhs: Some(6733) })"];
    6731 -> 6729;
    6729 [label="Identifier"];
    6729 -> 6730;
    6730[label="Gauge"];
    6731 -> 6732;
    6732[label="."];
    6731 -> 6733;
    6733 [label="Expr"];
    6733 -> 6734;
    6734 [label="Identifier"];
    6734 -> 6735;
    6735[label="ValueReal"];
    6722 -> 6736;
    6736 [label="Assignment(Assignment { syntax: 6736, lvalue: Some(6723), operator: Some(6737), rvalue: Some(6738) })"];
    6736 -> 6737;
    6737[label="="];
    6736 -> 6738;
    6738 [label="Expr"];
    6738 -> 6739;
    6739 [label="Literal"];
    6739 -> 6740;
    6740[label="0."];
    6722 -> 6741;
    6741[label=";"];
    6680 -> 6742;
    6742[label="}"];
    6667 -> 6743;
    6743 [label="Else(Else { syntax: 6743, else_: Some(6744), if_: None, body: Some(6745) })"];
    6743 -> 6744;
    6744[label="else"];
    6743 -> 6745;
    6745 [label="Statement(Statement { syntax: 6745, statement: Some(6746), semicolon: None })"];
    6745 -> 6746;
    6746 [label="Block(Block { syntax: 6746, lbrace: Some(6747), statements: [6748, 6763, 6778], rbrace: Some(6819) })"];
    6746 -> 6747;
    6747[label="{"];
    6746 -> 6748;
    6748 [label="Statement(Statement { syntax: 6748, statement: Some(6749), semicolon: None })"];
    6748 -> 6749;
    6749 [label="VarDec(VarDec { syntax: 6749, declare: Some(6750), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(6751), as_: None, alias: None, for_: None, target: None, assignment: Some(6753), value: Some(6754) })"];
    6749 -> 6750;
    6750[label="declare"];
    6749 -> 6751;
    6751 [label="Type(Type { syntax: 6751, basename: Some(6752), members: [], arrays: [] })"];
    6751 -> 6752;
    6752[label="TornadoDistance"];
    6749 -> 6753;
    6753[label="="];
    6749 -> 6754;
    6754 [label="Expr"];
    6754 -> 6757;
    6757 [label="BinaryOp(BinaryOp { syntax: 6757, lhs: Some(6755), operator: Some(6758), rhs: Some(6759) })"];
    6757 -> 6755;
    6755 [label="Identifier"];
    6755 -> 6756;
    6756[label="OffZoneRadius"];
    6757 -> 6758;
    6758[label="-"];
    6757 -> 6759;
    6759 [label="Expr"];
    6759 -> 6760;
    6760 [label="Identifier"];
    6760 -> 6761;
    6761[label="CenterGoalDistance"];
    6749 -> 6762;
    6762[label=";"];
    6746 -> 6763;
    6763 [label="Statement(Statement { syntax: 6763, statement: Some(6764), semicolon: None })"];
    6763 -> 6764;
    6764 [label="VarDec(VarDec { syntax: 6764, declare: Some(6765), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(6766), as_: None, alias: None, for_: None, target: None, assignment: Some(6768), value: Some(6769) })"];
    6764 -> 6765;
    6765[label="declare"];
    6764 -> 6766;
    6766 [label="Type(Type { syntax: 6766, basename: Some(6767), members: [], arrays: [] })"];
    6766 -> 6767;
    6767[label="TornadoDistanceMax"];
    6764 -> 6768;
    6768[label="="];
    6764 -> 6769;
    6769 [label="Expr"];
    6769 -> 6772;
    6772 [label="BinaryOp(BinaryOp { syntax: 6772, lhs: Some(6770), operator: Some(6773), rhs: Some(6774) })"];
    6772 -> 6770;
    6770 [label="Identifier"];
    6770 -> 6771;
    6771[label="OffZoneRadiusMax"];
    6772 -> 6773;
    6773[label="-"];
    6772 -> 6774;
    6774 [label="Expr"];
    6774 -> 6775;
    6775 [label="Identifier"];
    6775 -> 6776;
    6776[label="CenterGoalDistance"];
    6764 -> 6777;
    6777[label=";"];
    6746 -> 6778;
    6778 [label="Statement(Statement { syntax: 6778, statement: Some(6792), semicolon: Some(6818) })"];
    6778 -> 6779;
    6779 [label="Expr"];
    6779 -> 6782;
    6782 [label="BinaryOp(BinaryOp { syntax: 6782, lhs: Some(6780), operator: Some(6783), rhs: Some(6784) })"];
    6782 -> 6780;
    6780 [label="Identifier"];
    6780 -> 6781;
    6781[label="MapLandmark"];
    6782 -> 6783;
    6783[label="."];
    6782 -> 6784;
    6784 [label="Expr"];
    6784 -> 6787;
    6787 [label="BinaryOp(BinaryOp { syntax: 6787, lhs: Some(6785), operator: Some(6788), rhs: Some(6789) })"];
    6787 -> 6785;
    6785 [label="Identifier"];
    6785 -> 6786;
    6786[label="Gauge"];
    6787 -> 6788;
    6788[label="."];
    6787 -> 6789;
    6789 [label="Expr"];
    6789 -> 6790;
    6790 [label="Identifier"];
    6790 -> 6791;
    6791[label="Max"];
    6778 -> 6792;
    6792 [label="Assignment(Assignment { syntax: 6792, lvalue: Some(6779), operator: Some(6793), rvalue: Some(6794) })"];
    6792 -> 6793;
    6793[label="="];
    6792 -> 6794;
    6794 [label="Expr"];
    6794 -> 6802;
    6802 [label="FunctionCall(FunctionCall { syntax: 6802, lhs: Some(6797), lparen: Some(6803), args: [(6804, None)], rparen: Some(6817) })"];
    6802 -> 6797;
    6797 [label="BinaryOp(BinaryOp { syntax: 6797, lhs: Some(6795), operator: Some(6798), rhs: Some(6799) })"];
    6797 -> 6795;
    6795 [label="Identifier"];
    6795 -> 6796;
    6796[label="ML"];
    6797 -> 6798;
    6798[label="::"];
    6797 -> 6799;
    6799 [label="Expr"];
    6799 -> 6800;
    6800 [label="Identifier"];
    6800 -> 6801;
    6801[label="FloorInteger"];
    6802 -> 6803;
    6803[label="("];
    6802 -> 6804;
    6804 [label="Expr"];
    6804 -> 6807;
    6807 [label="BinaryOp(BinaryOp { syntax: 6807, lhs: Some(6805), operator: Some(6808), rhs: Some(6809) })"];
    6807 -> 6805;
    6805 [label="Identifier"];
    6805 -> 6806;
    6806[label="C_GateOpeningDuration"];
    6807 -> 6808;
    6808[label="*"];
    6807 -> 6809;
    6809 [label="Expr"];
    6809 -> 6812;
    6812 [label="BinaryOp(BinaryOp { syntax: 6812, lhs: Some(6810), operator: Some(6813), rhs: Some(6814) })"];
    6812 -> 6810;
    6810 [label="Identifier"];
    6810 -> 6811;
    6811[label="TornadoDistance"];
    6812 -> 6813;
    6813[label="/"];
    6812 -> 6814;
    6814 [label="Expr"];
    6814 -> 6815;
    6815 [label="Identifier"];
    6815 -> 6816;
    6816[label="TornadoDistanceMax"];
    6802 -> 6817;
    6817[label=")"];
    6778 -> 6818;
    6818[label=";"];
    6746 -> 6819;
    6819[label="}"];
    6664 -> 6820;
    6820[label="}"];
    6515 -> 6821;
    6821 [label="Statement(Statement { syntax: 6821, statement: Some(6822), semicolon: None })"];
    6821 -> 6822;
    6822 [label="If(If { syntax: 6822, if_: Some(6823), lparen: Some(6824), condition: Some(6825), rparen: Some(6874), body: Some(6875), else_: None })"];
    6822 -> 6823;
    6823[label="if"];
    6822 -> 6824;
    6824[label="("];
    6822 -> 6825;
    6825 [label="Expr"];
    6825 -> 6859;
    6859 [label="BinaryOp(BinaryOp { syntax: 6859, lhs: Some(6848), operator: Some(6860), rhs: Some(6861) })"];
    6859 -> 6848;
    6848 [label="FunctionCall(FunctionCall { syntax: 6848, lhs: Some(6838), lparen: Some(6849), args: [(6850, None)], rparen: Some(6858) })"];
    6848 -> 6838;
    6838 [label="BinaryOp(BinaryOp { syntax: 6838, lhs: Some(6833), operator: Some(6839), rhs: Some(6840) })"];
    6838 -> 6833;
    6833 [label="BinaryOp(BinaryOp { syntax: 6833, lhs: Some(6828), operator: Some(6834), rhs: Some(6835) })"];
    6833 -> 6828;
    6828 [label="BinaryOp(BinaryOp { syntax: 6828, lhs: Some(6826), operator: Some(6829), rhs: Some(6830) })"];
    6828 -> 6826;
    6826 [label="Identifier"];
    6826 -> 6827;
    6827[label="MapLandmark"];
    6828 -> 6829;
    6829[label="."];
    6828 -> 6830;
    6830 [label="Expr"];
    6830 -> 6831;
    6831 [label="Identifier"];
    6831 -> 6832;
    6832[label="Gauge"];
    6833 -> 6834;
    6834[label="!="];
    6833 -> 6835;
    6835 [label="Expr"];
    6835 -> 6836;
    6836 [label="Literal"];
    6836 -> 6837;
    6837[label="Null"];
    6838 -> 6839;
    6839[label="&&"];
    6838 -> 6840;
    6840 [label="Expr"];
    6840 -> 6843;
    6843 [label="BinaryOp(BinaryOp { syntax: 6843, lhs: Some(6841), operator: Some(6844), rhs: Some(6845) })"];
    6843 -> 6841;
    6841 [label="Identifier"];
    6841 -> 6842;
    6842[label="G_RespawnLandmarks"];
    6843 -> 6844;
    6844[label="."];
    6843 -> 6845;
    6845 [label="Expr"];
    6845 -> 6846;
    6846 [label="Identifier"];
    6846 -> 6847;
    6847[label="exists"];
    6848 -> 6849;
    6849[label="("];
    6848 -> 6850;
    6850 [label="Expr"];
    6850 -> 6853;
    6853 [label="BinaryOp(BinaryOp { syntax: 6853, lhs: Some(6851), operator: Some(6854), rhs: Some(6855) })"];
    6853 -> 6851;
    6851 [label="Identifier"];
    6851 -> 6852;
    6852[label="MapLandmark"];
    6853 -> 6854;
    6854[label="."];
    6853 -> 6855;
    6855 [label="Expr"];
    6855 -> 6856;
    6856 [label="Identifier"];
    6856 -> 6857;
    6857[label="Id"];
    6848 -> 6858;
    6858[label=")"];
    6859 -> 6860;
    6860[label="&&"];
    6859 -> 6861;
    6861 [label="Expr"];
    6861 -> 6864;
    6864 [label="BinaryOp(BinaryOp { syntax: 6864, lhs: Some(6862), operator: Some(6865), rhs: Some(6866) })"];
    6864 -> 6862;
    6862 [label="Identifier"];
    6862 -> 6863;
    6863[label="CenterGoalDistance"];
    6864 -> 6865;
    6865[label=">="];
    6864 -> 6866;
    6866 [label="Expr"];
    6866 -> 6869;
    6869 [label="BinaryOp(BinaryOp { syntax: 6869, lhs: Some(6867), operator: Some(6870), rhs: Some(6871) })"];
    6869 -> 6867;
    6867 [label="Identifier"];
    6867 -> 6868;
    6868[label="OffZoneRadius"];
    6869 -> 6870;
    6870[label="-"];
    6869 -> 6871;
    6871 [label="Expr"];
    6871 -> 6872;
    6872 [label="Identifier"];
    6872 -> 6873;
    6873[label="C_CheckpointSafeDistance"];
    6822 -> 6874;
    6874[label=")"];
    6822 -> 6875;
    6875 [label="Statement(Statement { syntax: 6875, statement: Some(6876), semicolon: None })"];
    6875 -> 6876;
    6876 [label="Block(Block { syntax: 6876, lbrace: Some(6877), statements: [6878], rbrace: Some(6904) })"];
    6876 -> 6877;
    6877[label="{"];
    6876 -> 6878;
    6878 [label="Statement(Statement { syntax: 6878, statement: Some(6879), semicolon: None })"];
    6878 -> 6879;
    6879 [label="VarDec(VarDec { syntax: 6879, declare: Some(6880), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(6881), as_: None, alias: None, for_: None, target: None, assignment: Some(6883), value: Some(6884) })"];
    6879 -> 6880;
    6880[label="declare"];
    6879 -> 6881;
    6881 [label="Type(Type { syntax: 6881, basename: Some(6882), members: [], arrays: [] })"];
    6881 -> 6882;
    6882[label="Removed"];
    6879 -> 6883;
    6883[label="="];
    6879 -> 6884;
    6884 [label="Expr"];
    6884 -> 6892;
    6892 [label="FunctionCall(FunctionCall { syntax: 6892, lhs: Some(6887), lparen: Some(6893), args: [(6894, None)], rparen: Some(6902) })"];
    6892 -> 6887;
    6887 [label="BinaryOp(BinaryOp { syntax: 6887, lhs: Some(6885), operator: Some(6888), rhs: Some(6889) })"];
    6887 -> 6885;
    6885 [label="Identifier"];
    6885 -> 6886;
    6886[label="G_RespawnLandmarks"];
    6887 -> 6888;
    6888[label="."];
    6887 -> 6889;
    6889 [label="Expr"];
    6889 -> 6890;
    6890 [label="Identifier"];
    6890 -> 6891;
    6891[label="remove"];
    6892 -> 6893;
    6893[label="("];
    6892 -> 6894;
    6894 [label="Expr"];
    6894 -> 6897;
    6897 [label="BinaryOp(BinaryOp { syntax: 6897, lhs: Some(6895), operator: Some(6898), rhs: Some(6899) })"];
    6897 -> 6895;
    6895 [label="Identifier"];
    6895 -> 6896;
    6896[label="MapLandmark"];
    6897 -> 6898;
    6898[label="."];
    6897 -> 6899;
    6899 [label="Expr"];
    6899 -> 6900;
    6900 [label="Identifier"];
    6900 -> 6901;
    6901[label="Id"];
    6892 -> 6902;
    6902[label=")"];
    6879 -> 6903;
    6903[label=";"];
    6876 -> 6904;
    6904[label="}"];
    6515 -> 6905;
    6905[label="}"];
    6275 -> 6906;
    6906[label="}"];
    4763 -> 6907;
    6907 [label="Statement(Statement { syntax: 6907, statement: Some(6908), semicolon: None })"];
    6907 -> 6908;
    6908 [label="Foreach(Foreach { syntax: 6908, foreach: Some(6909), lparen: Some(6910), name1: Some(6911), arrow: None, name2: None, in_: Some(6912), value: Some(6913), rparen: Some(6916), body: Some(6917) })"];
    6908 -> 6909;
    6909[label="foreach"];
    6908 -> 6910;
    6910[label="("];
    6908 -> 6911;
    6911[label="Player"];
    6908 -> 6912;
    6912[label="in"];
    6908 -> 6913;
    6913 [label="Expr"];
    6913 -> 6914;
    6914 [label="Identifier"];
    6914 -> 6915;
    6915[label="Players"];
    6908 -> 6916;
    6916[label=")"];
    6908 -> 6917;
    6917 [label="Statement(Statement { syntax: 6917, statement: Some(6918), semicolon: None })"];
    6917 -> 6918;
    6918 [label="Block(Block { syntax: 6918, lbrace: Some(6919), statements: [6920, 7106, 7356, 7367, 7378, 7388, 7877], rbrace: Some(7930) })"];
    6918 -> 6919;
    6919[label="{"];
    6918 -> 6920;
    6920 [label="Statement(Statement { syntax: 6920, statement: Some(6921), semicolon: None })"];
    6920 -> 6921;
    6921 [label="If(If { syntax: 6921, if_: Some(6922), lparen: Some(6923), condition: Some(6924), rparen: Some(6951), body: Some(6952), else_: None })"];
    6921 -> 6922;
    6922[label="if"];
    6921 -> 6923;
    6923[label="("];
    6921 -> 6924;
    6924 [label="Expr"];
    6924 -> 6935;
    6935 [label="FunctionCall(FunctionCall { syntax: 6935, lhs: Some(6925), lparen: Some(6936), args: [(6937, None)], rparen: Some(6950) })"];
    6935 -> 6925;
    6925 [label="UnOp(UnOp { syntax: 6925, operator: Some(6926), operand: Some(6927) })"];
    6925 -> 6926;
    6926[label="!"];
    6925 -> 6927;
    6927 [label="Expr"];
    6927 -> 6930;
    6930 [label="BinaryOp(BinaryOp { syntax: 6930, lhs: Some(6928), operator: Some(6931), rhs: Some(6932) })"];
    6930 -> 6928;
    6928 [label="Identifier"];
    6928 -> 6929;
    6929[label="G_SpawnedPlayers"];
    6930 -> 6931;
    6931[label="."];
    6930 -> 6932;
    6932 [label="Expr"];
    6932 -> 6933;
    6933 [label="Identifier"];
    6933 -> 6934;
    6934[label="exists"];
    6935 -> 6936;
    6936[label="("];
    6935 -> 6937;
    6937 [label="Expr"];
    6937 -> 6940;
    6940 [label="BinaryOp(BinaryOp { syntax: 6940, lhs: Some(6938), operator: Some(6941), rhs: Some(6942) })"];
    6940 -> 6938;
    6938 [label="Identifier"];
    6938 -> 6939;
    6939[label="Player"];
    6940 -> 6941;
    6941[label="."];
    6940 -> 6942;
    6942 [label="Expr"];
    6942 -> 6945;
    6945 [label="BinaryOp(BinaryOp { syntax: 6945, lhs: Some(6943), operator: Some(6946), rhs: Some(6947) })"];
    6945 -> 6943;
    6943 [label="Identifier"];
    6943 -> 6944;
    6944[label="User"];
    6945 -> 6946;
    6946[label="."];
    6945 -> 6947;
    6947 [label="Expr"];
    6947 -> 6948;
    6948 [label="Identifier"];
    6948 -> 6949;
    6949[label="Login"];
    6935 -> 6950;
    6950[label=")"];
    6921 -> 6951;
    6951[label=")"];
    6921 -> 6952;
    6952 [label="Statement(Statement { syntax: 6952, statement: Some(6953), semicolon: None })"];
    6952 -> 6953;
    6953 [label="Block(Block { syntax: 6953, lbrace: Some(6954), statements: [6955], rbrace: Some(7105) })"];
    6953 -> 6954;
    6954[label="{"];
    6953 -> 6955;
    6955 [label="Statement(Statement { syntax: 6955, statement: Some(6956), semicolon: None })"];
    6955 -> 6956;
    6956 [label="If(If { syntax: 6956, if_: Some(6957), lparen: Some(6958), condition: Some(6959), rparen: Some(6995), body: Some(6996), else_: Some(7058) })"];
    6956 -> 6957;
    6957[label="if"];
    6956 -> 6958;
    6958[label="("];
    6956 -> 6959;
    6959 [label="Expr"];
    6959 -> 6965;
    6965 [label="BinaryOp(BinaryOp { syntax: 6965, lhs: Some(6960), operator: Some(6966), rhs: Some(6967) })"];
    6965 -> 6960;
    6960 [label="UnOp(UnOp { syntax: 6960, operator: Some(6961), operand: Some(6962) })"];
    6960 -> 6961;
    6961[label="!"];
    6960 -> 6962;
    6962 [label="Expr"];
    6962 -> 6963;
    6963 [label="Identifier"];
    6963 -> 6964;
    6964[label="G_IsOffZoneActivated"];
    6965 -> 6966;
    6966[label="&&"];
    6965 -> 6967;
    6967 [label="Expr"];
    6967 -> 6975;
    6975 [label="BinaryOp(BinaryOp { syntax: 6975, lhs: Some(6970), operator: Some(6976), rhs: Some(6977) })"];
    6975 -> 6970;
    6970 [label="BinaryOp(BinaryOp { syntax: 6970, lhs: Some(6968), operator: Some(6971), rhs: Some(6972) })"];
    6970 -> 6968;
    6968 [label="Identifier"];
    6968 -> 6969;
    6969[label="S_NewcomersJoinTime"];
    6970 -> 6971;
    6971[label=">"];
    6970 -> 6972;
    6972 [label="Expr"];
    6972 -> 6973;
    6973 [label="Literal"];
    6973 -> 6974;
    6974[label="0"];
    6975 -> 6976;
    6976[label="&&"];
    6975 -> 6977;
    6977 [label="Expr"];
    6977 -> 6985;
    6985 [label="BinaryOp(BinaryOp { syntax: 6985, lhs: Some(6980), operator: Some(6986), rhs: Some(6987) })"];
    6985 -> 6980;
    6980 [label="BinaryOp(BinaryOp { syntax: 6980, lhs: Some(6978), operator: Some(6981), rhs: Some(6982) })"];
    6980 -> 6978;
    6978 [label="Identifier"];
    6978 -> 6979;
    6979[label="Now"];
    6980 -> 6981;
    6981[label="-"];
    6980 -> 6982;
    6982 [label="Expr"];
    6982 -> 6983;
    6983 [label="Identifier"];
    6983 -> 6984;
    6984[label="StartTime"];
    6985 -> 6986;
    6986[label="<="];
    6985 -> 6987;
    6987 [label="Expr"];
    6987 -> 6990;
    6990 [label="BinaryOp(BinaryOp { syntax: 6990, lhs: Some(6988), operator: Some(6991), rhs: Some(6992) })"];
    6990 -> 6988;
    6988 [label="Identifier"];
    6988 -> 6989;
    6989[label="S_NewcomersJoinTime"];
    6990 -> 6991;
    6991[label="*"];
    6990 -> 6992;
    6992 [label="Expr"];
    6992 -> 6993;
    6993 [label="Literal"];
    6993 -> 6994;
    6994[label="1000"];
    6956 -> 6995;
    6995[label=")"];
    6956 -> 6996;
    6996 [label="Statement(Statement { syntax: 6996, statement: Some(6997), semicolon: None })"];
    6996 -> 6997;
    6997 [label="Block(Block { syntax: 6997, lbrace: Some(6998), statements: [6999, 7010], rbrace: Some(7057) })"];
    6997 -> 6998;
    6998[label="{"];
    6997 -> 6999;
    6999 [label="Statement(Statement { syntax: 6999, statement: Some(7000), semicolon: Some(7009) })"];
    6999 -> 7000;
    7000 [label="Expr"];
    7000 -> 7003;
    7003 [label="FunctionCall(FunctionCall { syntax: 7003, lhs: Some(7001), lparen: Some(7004), args: [(7005, None)], rparen: Some(7008) })"];
    7003 -> 7001;
    7001 [label="Identifier"];
    7001 -> 7002;
    7002[label="HG_SpawnPlayer"];
    7003 -> 7004;
    7004[label="("];
    7003 -> 7005;
    7005 [label="Expr"];
    7005 -> 7006;
    7006 [label="Identifier"];
    7006 -> 7007;
    7007[label="Player"];
    7003 -> 7008;
    7008[label=")"];
    6999 -> 7009;
    7009[label=";"];
    6997 -> 7010;
    7010 [label="Statement(Statement { syntax: 7010, statement: Some(7011), semicolon: None })"];
    7010 -> 7011;
    7011 [label="If(If { syntax: 7011, if_: Some(7012), lparen: Some(7013), condition: Some(7014), rparen: Some(7022), body: Some(7023), else_: None })"];
    7011 -> 7012;
    7012[label="if"];
    7011 -> 7013;
    7013[label="("];
    7011 -> 7014;
    7014 [label="Expr"];
    7014 -> 7017;
    7017 [label="BinaryOp(BinaryOp { syntax: 7017, lhs: Some(7015), operator: Some(7018), rhs: Some(7019) })"];
    7017 -> 7015;
    7015 [label="Identifier"];
    7015 -> 7016;
    7016[label="Now"];
    7017 -> 7018;
    7018[label=">"];
    7017 -> 7019;
    7019 [label="Expr"];
    7019 -> 7020;
    7020 [label="Identifier"];
    7020 -> 7021;
    7021[label="StartTime"];
    7011 -> 7022;
    7022[label=")"];
    7011 -> 7023;
    7023 [label="Statement(Statement { syntax: 7023, statement: Some(7024), semicolon: Some(7056) })"];
    7023 -> 7024;
    7024 [label="Expr"];
    7024 -> 7032;
    7032 [label="FunctionCall(FunctionCall { syntax: 7032, lhs: Some(7027), lparen: Some(7033), args: [(7034, None)], rparen: Some(7055) })"];
    7032 -> 7027;
    7027 [label="BinaryOp(BinaryOp { syntax: 7027, lhs: Some(7025), operator: Some(7028), rhs: Some(7029) })"];
    7027 -> 7025;
    7025 [label="Identifier"];
    7025 -> 7026;
    7026[label="Killfeed"];
    7027 -> 7028;
    7028[label="::"];
    7027 -> 7029;
    7029 [label="Expr"];
    7029 -> 7030;
    7030 [label="Identifier"];
    7030 -> 7031;
    7031[label="SendNotice"];
    7032 -> 7033;
    7033[label="("];
    7032 -> 7034;
    7034 [label="Expr"];
    7034 -> 7035;
    7035 [label="Array(Array { syntax: 7035, lsquare: Some(7036), values: [(7037, Some(7040)), (7041, None)], rsquare: Some(7054) })"];
    7035 -> 7036;
    7036[label="["];
    7035 -> 7037;
    7037 [label="Expr"];
    7037 -> 7038;
    7038 [label="Literal"];
    7038 -> 7039;
    7039[label="\"$<%1$> is now playing in Games\""];
    7035 -> 7040;
    7040[label=","];
    7035 -> 7041;
    7041 [label="Expr"];
    7041 -> 7044;
    7044 [label="BinaryOp(BinaryOp { syntax: 7044, lhs: Some(7042), operator: Some(7045), rhs: Some(7046) })"];
    7044 -> 7042;
    7042 [label="Identifier"];
    7042 -> 7043;
    7043[label="Player"];
    7044 -> 7045;
    7045[label="."];
    7044 -> 7046;
    7046 [label="Expr"];
    7046 -> 7049;
    7049 [label="BinaryOp(BinaryOp { syntax: 7049, lhs: Some(7047), operator: Some(7050), rhs: Some(7051) })"];
    7049 -> 7047;
    7047 [label="Identifier"];
    7047 -> 7048;
    7048[label="User"];
    7049 -> 7050;
    7050[label="."];
    7049 -> 7051;
    7051 [label="Expr"];
    7051 -> 7052;
    7052 [label="Identifier"];
    7052 -> 7053;
    7053[label="Name"];
    7035 -> 7054;
    7054[label="]"];
    7032 -> 7055;
    7055[label=")"];
    7023 -> 7056;
    7056[label=";"];
    6997 -> 7057;
    7057[label="}"];
    6956 -> 7058;
    7058 [label="Else(Else { syntax: 7058, else_: Some(7059), if_: None, body: Some(7060) })"];
    7058 -> 7059;
    7059[label="else"];
    7058 -> 7060;
    7060 [label="Statement(Statement { syntax: 7060, statement: Some(7061), semicolon: None })"];
    7060 -> 7061;
    7061 [label="Block(Block { syntax: 7061, lbrace: Some(7062), statements: [7063, 7084], rbrace: Some(7104) })"];
    7061 -> 7062;
    7062[label="{"];
    7061 -> 7063;
    7063 [label="Statement(Statement { syntax: 7063, statement: Some(7064), semicolon: Some(7083) })"];
    7063 -> 7064;
    7064 [label="Expr"];
    7064 -> 7072;
    7072 [label="FunctionCall(FunctionCall { syntax: 7072, lhs: Some(7067), lparen: Some(7073), args: [(7074, None)], rparen: Some(7082) })"];
    7072 -> 7067;
    7067 [label="BinaryOp(BinaryOp { syntax: 7067, lhs: Some(7065), operator: Some(7068), rhs: Some(7069) })"];
    7067 -> 7065;
    7065 [label="Identifier"];
    7065 -> 7066;
    7066[label="G_SpawnedPlayers"];
    7067 -> 7068;
    7068[label="."];
    7067 -> 7069;
    7069 [label="Expr"];
    7069 -> 7070;
    7070 [label="Identifier"];
    7070 -> 7071;
    7071[label="add"];
    7072 -> 7073;
    7073[label="("];
    7072 -> 7074;
    7074 [label="Expr"];
    7074 -> 7077;
    7077 [label="BinaryOp(BinaryOp { syntax: 7077, lhs: Some(7075), operator: Some(7078), rhs: Some(7079) })"];
    7077 -> 7075;
    7075 [label="Identifier"];
    7075 -> 7076;
    7076[label="Player"];
    7077 -> 7078;
    7078[label="."];
    7077 -> 7079;
    7079 [label="Expr"];
    7079 -> 7080;
    7080 [label="Identifier"];
    7080 -> 7081;
    7081[label="Login"];
    7072 -> 7082;
    7082[label=")"];
    7063 -> 7083;
    7083[label=";"];
    7061 -> 7084;
    7084 [label="Statement(Statement { syntax: 7084, statement: Some(7085), semicolon: Some(7103) })"];
    7084 -> 7085;
    7085 [label="Expr"];
    7085 -> 7093;
    7093 [label="FunctionCall(FunctionCall { syntax: 7093, lhs: Some(7088), lparen: Some(7094), args: [(7095, Some(7098)), (7099, None)], rparen: Some(7102) })"];
    7093 -> 7088;
    7088 [label="BinaryOp(BinaryOp { syntax: 7088, lhs: Some(7086), operator: Some(7089), rhs: Some(7090) })"];
    7088 -> 7086;
    7086 [label="Identifier"];
    7086 -> 7087;
    7087[label="Translations"];
    7088 -> 7089;
    7089[label="::"];
    7088 -> 7090;
    7090 [label="Expr"];
    7090 -> 7091;
    7091 [label="Identifier"];
    7091 -> 7092;
    7092[label="SendChat"];
    7093 -> 7094;
    7094[label="("];
    7093 -> 7095;
    7095 [label="Expr"];
    7095 -> 7096;
    7096 [label="Identifier"];
    7096 -> 7097;
    7097[label="Player"];
    7093 -> 7098;
    7098[label=","];
    7093 -> 7099;
    7099 [label="Expr"];
    7099 -> 7100;
    7100 [label="Literal"];
    7100 -> 7101;
    7101[label="\"You came too late to join this match. Please wait for the next map. Good luck!\""];
    7093 -> 7102;
    7102[label=")"];
    7084 -> 7103;
    7103[label=";"];
    7061 -> 7104;
    7104[label="}"];
    6953 -> 7105;
    7105[label="}"];
    6918 -> 7106;
    7106 [label="Statement(Statement { syntax: 7106, statement: Some(7107), semicolon: None })"];
    7106 -> 7107;
    7107 [label="If(If { syntax: 7107, if_: Some(7108), lparen: Some(7109), condition: Some(7110), rparen: Some(7133), body: Some(7134), else_: None })"];
    7107 -> 7108;
    7108[label="if"];
    7107 -> 7109;
    7109[label="("];
    7107 -> 7110;
    7110 [label="Expr"];
    7110 -> 7118;
    7118 [label="BinaryOp(BinaryOp { syntax: 7118, lhs: Some(7113), operator: Some(7119), rhs: Some(7120) })"];
    7118 -> 7113;
    7113 [label="BinaryOp(BinaryOp { syntax: 7113, lhs: Some(7111), operator: Some(7114), rhs: Some(7115) })"];
    7113 -> 7111;
    7111 [label="Identifier"];
    7111 -> 7112;
    7112[label="Player"];
    7113 -> 7114;
    7114[label="."];
    7113 -> 7115;
    7115 [label="Expr"];
    7115 -> 7116;
    7116 [label="Identifier"];
    7116 -> 7117;
    7117[label="SpawnStatus"];
    7118 -> 7119;
    7119[label="=="];
    7118 -> 7120;
    7120 [label="Expr"];
    7120 -> 7123;
    7123 [label="BinaryOp(BinaryOp { syntax: 7123, lhs: Some(7121), operator: Some(7124), rhs: Some(7125) })"];
    7123 -> 7121;
    7121 [label="Identifier"];
    7121 -> 7122;
    7122[label="CSmPlayer"];
    7123 -> 7124;
    7124[label="::"];
    7123 -> 7125;
    7125 [label="Expr"];
    7125 -> 7128;
    7128 [label="BinaryOp(BinaryOp { syntax: 7128, lhs: Some(7126), operator: Some(7129), rhs: Some(7130) })"];
    7128 -> 7126;
    7126 [label="Identifier"];
    7126 -> 7127;
    7127[label="ESpawnStatus"];
    7128 -> 7129;
    7129[label="::"];
    7128 -> 7130;
    7130 [label="Expr"];
    7130 -> 7131;
    7131 [label="Identifier"];
    7131 -> 7132;
    7132[label="Spawned"];
    7107 -> 7133;
    7133[label=")"];
    7107 -> 7134;
    7134 [label="Statement(Statement { syntax: 7134, statement: Some(7135), semicolon: None })"];
    7134 -> 7135;
    7135 [label="Block(Block { syntax: 7135, lbrace: Some(7136), statements: [7137, 7147, 7230, 7266], rbrace: Some(7355) })"];
    7135 -> 7136;
    7136[label="{"];
    7135 -> 7137;
    7137 [label="Statement(Statement { syntax: 7137, statement: Some(7138), semicolon: None })"];
    7137 -> 7138;
    7138 [label="VarDec(VarDec { syntax: 7138, declare: Some(7139), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(7140), as_: None, alias: None, for_: None, target: None, assignment: Some(7142), value: Some(7143) })"];
    7138 -> 7139;
    7139[label="declare"];
    7138 -> 7140;
    7140 [label="Type(Type { syntax: 7140, basename: Some(7141), members: [], arrays: [] })"];
    7140 -> 7141;
    7141[label="IsOutsideArena"];
    7138 -> 7142;
    7142[label="="];
    7138 -> 7143;
    7143 [label="Expr"];
    7143 -> 7144;
    7144 [label="Literal"];
    7144 -> 7145;
    7145[label="False"];
    7138 -> 7146;
    7146[label=";"];
    7135 -> 7147;
    7147 [label="Statement(Statement { syntax: 7147, statement: Some(7148), semicolon: None })"];
    7147 -> 7148;
    7148 [label="For(For { syntax: 7148, for_: Some(7149), lparen: Some(7150), name: Some(7151), comma1: Some(7152), value_start: Some(7153), comma2: Some(7156), value_end: Some(7157), rparen: Some(7160), body: Some(7161) })"];
    7148 -> 7149;
    7149[label="for"];
    7148 -> 7150;
    7150[label="("];
    7148 -> 7151;
    7151[label="I"];
    7148 -> 7152;
    7152[label=","];
    7148 -> 7153;
    7153 [label="Expr"];
    7153 -> 7154;
    7154 [label="Literal"];
    7154 -> 7155;
    7155[label="0"];
    7148 -> 7156;
    7156[label=","];
    7148 -> 7157;
    7157 [label="Expr"];
    7157 -> 7158;
    7158 [label="Literal"];
    7158 -> 7159;
    7159[label="2"];
    7148 -> 7160;
    7160[label=")"];
    7148 -> 7161;
    7161 [label="Statement(Statement { syntax: 7161, statement: Some(7162), semicolon: None })"];
    7161 -> 7162;
    7162 [label="If(If { syntax: 7162, if_: Some(7163), lparen: Some(7164), condition: Some(7165), rparen: Some(7219), body: Some(7220), else_: None })"];
    7162 -> 7163;
    7163[label="if"];
    7162 -> 7164;
    7164[label="("];
    7162 -> 7165;
    7165 [label="Expr"];
    7165 -> 7173;
    7173 [label="BinaryOp(BinaryOp { syntax: 7173, lhs: Some(7168), operator: Some(7174), rhs: Some(7175) })"];
    7173 -> 7168;
    7168 [label="BinaryOp(BinaryOp { syntax: 7168, lhs: Some(7166), operator: Some(7169), rhs: Some(7170) })"];
    7168 -> 7166;
    7166 [label="Identifier"];
    7166 -> 7167;
    7167[label="I"];
    7168 -> 7169;
    7169[label="!="];
    7168 -> 7170;
    7170 [label="Expr"];
    7170 -> 7171;
    7171 [label="Literal"];
    7171 -> 7172;
    7172[label="1"];
    7173 -> 7174;
    7174[label="&&"];
    7173 -> 7175;
    7175 [label="Expr"];
    7175 -> 7176;
    7176 [label="Parenthesised(Parenthesised { syntax: 7176, lparen: Some(7177), expr: Some(7178), rparen: Some(7218) })"];
    7176 -> 7177;
    7177[label="("];
    7176 -> 7178;
    7178 [label="Expr"];
    7178 -> 7213;
    7213 [label="BinaryOp(BinaryOp { syntax: 7213, lhs: Some(7207), operator: Some(7214), rhs: Some(7215) })"];
    7213 -> 7207;
    7207 [label="ArrayAccess(ArrayAccess { syntax: 7207, lhs: Some(7197), lsquare: Some(7208), index: Some(7209), rsquare: Some(7212) })"];
    7207 -> 7197;
    7197 [label="BinaryOp(BinaryOp { syntax: 7197, lhs: Some(7192), operator: Some(7198), rhs: Some(7199) })"];
    7197 -> 7192;
    7192 [label="BinaryOp(BinaryOp { syntax: 7192, lhs: Some(7186), operator: Some(7193), rhs: Some(7194) })"];
    7192 -> 7186;
    7186 [label="ArrayAccess(ArrayAccess { syntax: 7186, lhs: Some(7181), lsquare: Some(7187), index: Some(7188), rsquare: Some(7191) })"];
    7186 -> 7181;
    7181 [label="BinaryOp(BinaryOp { syntax: 7181, lhs: Some(7179), operator: Some(7182), rhs: Some(7183) })"];
    7181 -> 7179;
    7179 [label="Identifier"];
    7179 -> 7180;
    7180[label="Player"];
    7181 -> 7182;
    7182[label="."];
    7181 -> 7183;
    7183 [label="Expr"];
    7183 -> 7184;
    7184 [label="Identifier"];
    7184 -> 7185;
    7185[label="Position"];
    7186 -> 7187;
    7187[label="["];
    7186 -> 7188;
    7188 [label="Expr"];
    7188 -> 7189;
    7189 [label="Identifier"];
    7189 -> 7190;
    7190[label="I"];
    7186 -> 7191;
    7191[label="]"];
    7192 -> 7193;
    7193[label="<"];
    7192 -> 7194;
    7194 [label="Expr"];
    7194 -> 7195;
    7195 [label="Literal"];
    7195 -> 7196;
    7196[label="0"];
    7197 -> 7198;
    7198[label="||"];
    7197 -> 7199;
    7199 [label="Expr"];
    7199 -> 7202;
    7202 [label="BinaryOp(BinaryOp { syntax: 7202, lhs: Some(7200), operator: Some(7203), rhs: Some(7204) })"];
    7202 -> 7200;
    7200 [label="Identifier"];
    7200 -> 7201;
    7201[label="Player"];
    7202 -> 7203;
    7203[label="."];
    7202 -> 7204;
    7204 [label="Expr"];
    7204 -> 7205;
    7205 [label="Identifier"];
    7205 -> 7206;
    7206[label="Position"];
    7207 -> 7208;
    7208[label="["];
    7207 -> 7209;
    7209 [label="Expr"];
    7209 -> 7210;
    7210 [label="Identifier"];
    7210 -> 7211;
    7211[label="I"];
    7207 -> 7212;
    7212[label="]"];
    7213 -> 7214;
    7214[label=">"];
    7213 -> 7215;
    7215 [label="Expr"];
    7215 -> 7216;
    7216 [label="Literal"];
    7216 -> 7217;
    7217[label="384"];
    7176 -> 7218;
    7218[label=")"];
    7162 -> 7219;
    7219[label=")"];
    7162 -> 7220;
    7220 [label="Statement(Statement { syntax: 7220, statement: Some(7224), semicolon: Some(7229) })"];
    7220 -> 7221;
    7221 [label="Expr"];
    7221 -> 7222;
    7222 [label="Identifier"];
    7222 -> 7223;
    7223[label="IsOutsideArena"];
    7220 -> 7224;
    7224 [label="Assignment(Assignment { syntax: 7224, lvalue: Some(7221), operator: Some(7225), rvalue: Some(7226) })"];
    7224 -> 7225;
    7225[label="="];
    7224 -> 7226;
    7226 [label="Expr"];
    7226 -> 7227;
    7227 [label="Literal"];
    7227 -> 7228;
    7228[label="True"];
    7220 -> 7229;
    7229[label=";"];
    7135 -> 7230;
    7230 [label="Statement(Statement { syntax: 7230, statement: Some(7231), semicolon: None })"];
    7230 -> 7231;
    7231 [label="If(If { syntax: 7231, if_: Some(7232), lparen: Some(7233), condition: Some(7234), rparen: Some(7255), body: Some(7256), else_: None })"];
    7231 -> 7232;
    7232[label="if"];
    7231 -> 7233;
    7233[label="("];
    7231 -> 7234;
    7234 [label="Expr"];
    7234 -> 7247;
    7247 [label="BinaryOp(BinaryOp { syntax: 7247, lhs: Some(7237), operator: Some(7248), rhs: Some(7249) })"];
    7247 -> 7237;
    7237 [label="BinaryOp(BinaryOp { syntax: 7237, lhs: Some(7235), operator: Some(7238), rhs: Some(7239) })"];
    7237 -> 7235;
    7235 [label="Identifier"];
    7235 -> 7236;
    7236[label="Player"];
    7237 -> 7238;
    7238[label="."];
    7237 -> 7239;
    7239 [label="Expr"];
    7239 -> 7242;
    7242 [label="BinaryOp(BinaryOp { syntax: 7242, lhs: Some(7240), operator: Some(7243), rhs: Some(7244) })"];
    7242 -> 7240;
    7240 [label="Identifier"];
    7240 -> 7241;
    7241[label="Position"];
    7242 -> 7243;
    7243[label="."];
    7242 -> 7244;
    7244 [label="Expr"];
    7244 -> 7245;
    7245 [label="Identifier"];
    7245 -> 7246;
    7246[label="Y"];
    7247 -> 7248;
    7248[label="<"];
    7247 -> 7249;
    7249 [label="Expr"];
    7249 -> 7250;
    7250 [label="UnOp(UnOp { syntax: 7250, operator: Some(7251), operand: Some(7252) })"];
    7250 -> 7251;
    7251[label="-"];
    7250 -> 7252;
    7252 [label="Expr"];
    7252 -> 7253;
    7253 [label="Literal"];
    7253 -> 7254;
    7254[label="50"];
    7231 -> 7255;
    7255[label=")"];
    7231 -> 7256;
    7256 [label="Statement(Statement { syntax: 7256, statement: Some(7260), semicolon: Some(7265) })"];
    7256 -> 7257;
    7257 [label="Expr"];
    7257 -> 7258;
    7258 [label="Identifier"];
    7258 -> 7259;
    7259[label="IsOutsideArena"];
    7256 -> 7260;
    7260 [label="Assignment(Assignment { syntax: 7260, lvalue: Some(7257), operator: Some(7261), rvalue: Some(7262) })"];
    7260 -> 7261;
    7261[label="="];
    7260 -> 7262;
    7262 [label="Expr"];
    7262 -> 7263;
    7263 [label="Literal"];
    7263 -> 7264;
    7264[label="True"];
    7256 -> 7265;
    7265[label=";"];
    7135 -> 7266;
    7266 [label="Statement(Statement { syntax: 7266, statement: Some(7267), semicolon: None })"];
    7266 -> 7267;
    7267 [label="If(If { syntax: 7267, if_: Some(7268), lparen: Some(7269), condition: Some(7270), rparen: Some(7273), body: Some(7274), else_: None })"];
    7267 -> 7268;
    7268[label="if"];
    7267 -> 7269;
    7269[label="("];
    7267 -> 7270;
    7270 [label="Expr"];
    7270 -> 7271;
    7271 [label="Identifier"];
    7271 -> 7272;
    7272[label="IsOutsideArena"];
    7267 -> 7273;
    7273[label=")"];
    7267 -> 7274;
    7274 [label="Statement(Statement { syntax: 7274, statement: Some(7275), semicolon: None })"];
    7274 -> 7275;
    7275 [label="Block(Block { syntax: 7275, lbrace: Some(7276), statements: [7277, 7343], rbrace: Some(7354) })"];
    7275 -> 7276;
    7276[label="{"];
    7275 -> 7277;
    7277 [label="Statement(Statement { syntax: 7277, statement: Some(7278), semicolon: None })"];
    7277 -> 7278;
    7278 [label="If(If { syntax: 7278, if_: Some(7279), lparen: Some(7280), condition: Some(7281), rparen: Some(7289), body: Some(7290), else_: None })"];
    7278 -> 7279;
    7279[label="if"];
    7278 -> 7280;
    7280[label="("];
    7278 -> 7281;
    7281 [label="Expr"];
    7281 -> 7284;
    7284 [label="BinaryOp(BinaryOp { syntax: 7284, lhs: Some(7282), operator: Some(7285), rhs: Some(7286) })"];
    7284 -> 7282;
    7282 [label="Identifier"];
    7282 -> 7283;
    7283[label="PlayersNbAlive"];
    7284 -> 7285;
    7285[label=">="];
    7284 -> 7286;
    7286 [label="Expr"];
    7286 -> 7287;
    7287 [label="Literal"];
    7287 -> 7288;
    7288[label="2"];
    7278 -> 7289;
    7289[label=")"];
    7278 -> 7290;
    7290 [label="Statement(Statement { syntax: 7290, statement: Some(7291), semicolon: None })"];
    7290 -> 7291;
    7291 [label="Block(Block { syntax: 7291, lbrace: Some(7292), statements: [7293, 7327], rbrace: Some(7342) })"];
    7291 -> 7292;
    7292[label="{"];
    7291 -> 7293;
    7293 [label="Statement(Statement { syntax: 7293, statement: Some(7294), semicolon: Some(7326) })"];
    7293 -> 7294;
    7294 [label="Expr"];
    7294 -> 7302;
    7302 [label="FunctionCall(FunctionCall { syntax: 7302, lhs: Some(7297), lparen: Some(7303), args: [(7304, None)], rparen: Some(7325) })"];
    7302 -> 7297;
    7297 [label="BinaryOp(BinaryOp { syntax: 7297, lhs: Some(7295), operator: Some(7298), rhs: Some(7299) })"];
    7297 -> 7295;
    7295 [label="Identifier"];
    7295 -> 7296;
    7296[label="Killfeed"];
    7297 -> 7298;
    7298[label="::"];
    7297 -> 7299;
    7299 [label="Expr"];
    7299 -> 7300;
    7300 [label="Identifier"];
    7300 -> 7301;
    7301[label="SendNotice"];
    7302 -> 7303;
    7303[label="("];
    7302 -> 7304;
    7304 [label="Expr"];
    7304 -> 7305;
    7305 [label="Array(Array { syntax: 7305, lsquare: Some(7306), values: [(7307, Some(7310)), (7311, None)], rsquare: Some(7324) })"];
    7305 -> 7306;
    7306[label="["];
    7305 -> 7307;
    7307 [label="Expr"];
    7307 -> 7308;
    7308 [label="Literal"];
    7308 -> 7309;
    7309[label="\"$<%1$> tried to escape arena\""];
    7305 -> 7310;
    7310[label=","];
    7305 -> 7311;
    7311 [label="Expr"];
    7311 -> 7314;
    7314 [label="BinaryOp(BinaryOp { syntax: 7314, lhs: Some(7312), operator: Some(7315), rhs: Some(7316) })"];
    7314 -> 7312;
    7312 [label="Identifier"];
    7312 -> 7313;
    7313[label="Player"];
    7314 -> 7315;
    7315[label="."];
    7314 -> 7316;
    7316 [label="Expr"];
    7316 -> 7319;
    7319 [label="BinaryOp(BinaryOp { syntax: 7319, lhs: Some(7317), operator: Some(7320), rhs: Some(7321) })"];
    7319 -> 7317;
    7317 [label="Identifier"];
    7317 -> 7318;
    7318[label="User"];
    7319 -> 7320;
    7320[label="."];
    7319 -> 7321;
    7321 [label="Expr"];
    7321 -> 7322;
    7322 [label="Identifier"];
    7322 -> 7323;
    7323[label="Name"];
    7305 -> 7324;
    7324[label="]"];
    7302 -> 7325;
    7325[label=")"];
    7293 -> 7326;
    7326[label=";"];
    7291 -> 7327;
    7327 [label="Statement(Statement { syntax: 7327, statement: Some(7328), semicolon: Some(7341) })"];
    7327 -> 7328;
    7328 [label="Expr"];
    7328 -> 7331;
    7331 [label="FunctionCall(FunctionCall { syntax: 7331, lhs: Some(7329), lparen: Some(7332), args: [(7333, Some(7336)), (7337, None)], rparen: Some(7340) })"];
    7331 -> 7329;
    7329 [label="Identifier"];
    7329 -> 7330;
    7330[label="DropPlayerObjects"];
    7331 -> 7332;
    7332[label="("];
    7331 -> 7333;
    7333 [label="Expr"];
    7333 -> 7334;
    7334 [label="Identifier"];
    7334 -> 7335;
    7335[label="Player"];
    7331 -> 7336;
    7336[label=","];
    7331 -> 7337;
    7337 [label="Expr"];
    7337 -> 7338;
    7338 [label="Identifier"];
    7338 -> 7339;
    7339[label="S_ObjectsDroppingRatio"];
    7331 -> 7340;
    7340[label=")"];
    7327 -> 7341;
    7341[label=";"];
    7291 -> 7342;
    7342[label="}"];
    7275 -> 7343;
    7343 [label="Statement(Statement { syntax: 7343, statement: Some(7344), semicolon: Some(7353) })"];
    7343 -> 7344;
    7344 [label="Expr"];
    7344 -> 7347;
    7347 [label="FunctionCall(FunctionCall { syntax: 7347, lhs: Some(7345), lparen: Some(7348), args: [(7349, None)], rparen: Some(7352) })"];
    7347 -> 7345;
    7345 [label="Identifier"];
    7345 -> 7346;
    7346[label="UnspawnPlayer"];
    7347 -> 7348;
    7348[label="("];
    7347 -> 7349;
    7349 [label="Expr"];
    7349 -> 7350;
    7350 [label="Identifier"];
    7350 -> 7351;
    7351[label="Player"];
    7347 -> 7352;
    7352[label=")"];
    7343 -> 7353;
    7353[label=";"];
    7275 -> 7354;
    7354[label="}"];
    7135 -> 7355;
    7355[label="}"];
    6918 -> 7356;
    7356 [label="Statement(Statement { syntax: 7356, statement: Some(7357), semicolon: None })"];
    7356 -> 7357;
    7357 [label="VarDec(VarDec { syntax: 7357, declare: Some(7358), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(7359), name: Some(7361), as_: None, alias: None, for_: Some(7362), target: Some(7363), assignment: None, value: None })"];
    7357 -> 7358;
    7358[label="declare"];
    7357 -> 7359;
    7359 [label="Type(Type { syntax: 7359, basename: Some(7360), members: [], arrays: [] })"];
    7359 -> 7360;
    7360[label="Boolean"];
    7357 -> 7361;
    7361[label="PlayerRequestsRespawn"];
    7357 -> 7362;
    7362[label="for"];
    7357 -> 7363;
    7363 [label="Expr"];
    7363 -> 7364;
    7364 [label="Identifier"];
    7364 -> 7365;
    7365[label="Player"];
    7357 -> 7366;
    7366[label=";"];
    6918 -> 7367;
    7367 [label="Statement(Statement { syntax: 7367, statement: Some(7368), semicolon: None })"];
    7367 -> 7368;
    7368 [label="VarDec(VarDec { syntax: 7368, declare: Some(7369), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(7370), name: Some(7372), as_: None, alias: None, for_: Some(7373), target: Some(7374), assignment: None, value: None })"];
    7368 -> 7369;
    7369[label="declare"];
    7368 -> 7370;
    7370 [label="Type(Type { syntax: 7370, basename: Some(7371), members: [], arrays: [] })"];
    7370 -> 7371;
    7371[label="Integer"];
    7368 -> 7372;
    7372[label="PlayerRespawnStartTime"];
    7368 -> 7373;
    7373[label="for"];
    7368 -> 7374;
    7374 [label="Expr"];
    7374 -> 7375;
    7375 [label="Identifier"];
    7375 -> 7376;
    7376[label="Player"];
    7368 -> 7377;
    7377[label=";"];
    6918 -> 7378;
    7378 [label="Statement(Statement { syntax: 7378, statement: Some(7379), semicolon: None })"];
    7378 -> 7379;
    7379 [label="VarDec(VarDec { syntax: 7379, declare: Some(7380), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(7381), as_: None, alias: None, for_: None, target: None, assignment: Some(7383), value: Some(7384) })"];
    7379 -> 7380;
    7380[label="declare"];
    7379 -> 7381;
    7381 [label="Type(Type { syntax: 7381, basename: Some(7382), members: [], arrays: [] })"];
    7381 -> 7382;
    7382[label="StopRespawnRequest"];
    7379 -> 7383;
    7383[label="="];
    7379 -> 7384;
    7384 [label="Expr"];
    7384 -> 7385;
    7385 [label="Literal"];
    7385 -> 7386;
    7386[label="False"];
    7379 -> 7387;
    7387[label=";"];
    6918 -> 7388;
    7388 [label="Statement(Statement { syntax: 7388, statement: Some(7389), semicolon: None })"];
    7388 -> 7389;
    7389 [label="If(If { syntax: 7389, if_: Some(7390), lparen: Some(7391), condition: Some(7392), rparen: Some(7395), body: Some(7396), else_: None })"];
    7389 -> 7390;
    7390[label="if"];
    7389 -> 7391;
    7391[label="("];
    7389 -> 7392;
    7392 [label="Expr"];
    7392 -> 7393;
    7393 [label="Identifier"];
    7393 -> 7394;
    7394[label="PlayerRequestsRespawn"];
    7389 -> 7395;
    7395[label=")"];
    7389 -> 7396;
    7396 [label="Statement(Statement { syntax: 7396, statement: Some(7397), semicolon: None })"];
    7396 -> 7397;
    7397 [label="Block(Block { syntax: 7397, lbrace: Some(7398), statements: [7399], rbrace: Some(7876) })"];
    7397 -> 7398;
    7398[label="{"];
    7397 -> 7399;
    7399 [label="Statement(Statement { syntax: 7399, statement: Some(7400), semicolon: None })"];
    7399 -> 7400;
    7400 [label="If(If { syntax: 7400, if_: Some(7401), lparen: Some(7402), condition: Some(7403), rparen: Some(7426), body: Some(7427), else_: Some(7437) })"];
    7400 -> 7401;
    7401[label="if"];
    7400 -> 7402;
    7402[label="("];
    7400 -> 7403;
    7403 [label="Expr"];
    7403 -> 7411;
    7411 [label="BinaryOp(BinaryOp { syntax: 7411, lhs: Some(7406), operator: Some(7412), rhs: Some(7413) })"];
    7411 -> 7406;
    7406 [label="BinaryOp(BinaryOp { syntax: 7406, lhs: Some(7404), operator: Some(7407), rhs: Some(7408) })"];
    7406 -> 7404;
    7404 [label="Identifier"];
    7404 -> 7405;
    7405[label="Player"];
    7406 -> 7407;
    7407[label="."];
    7406 -> 7408;
    7408 [label="Expr"];
    7408 -> 7409;
    7409 [label="Identifier"];
    7409 -> 7410;
    7410[label="SpawnStatus"];
    7411 -> 7412;
    7412[label="!="];
    7411 -> 7413;
    7413 [label="Expr"];
    7413 -> 7416;
    7416 [label="BinaryOp(BinaryOp { syntax: 7416, lhs: Some(7414), operator: Some(7417), rhs: Some(7418) })"];
    7416 -> 7414;
    7414 [label="Identifier"];
    7414 -> 7415;
    7415[label="CSmPlayer"];
    7416 -> 7417;
    7417[label="::"];
    7416 -> 7418;
    7418 [label="Expr"];
    7418 -> 7421;
    7421 [label="BinaryOp(BinaryOp { syntax: 7421, lhs: Some(7419), operator: Some(7422), rhs: Some(7423) })"];
    7421 -> 7419;
    7419 [label="Identifier"];
    7419 -> 7420;
    7420[label="ESpawnStatus"];
    7421 -> 7422;
    7422[label="::"];
    7421 -> 7423;
    7423 [label="Expr"];
    7423 -> 7424;
    7424 [label="Identifier"];
    7424 -> 7425;
    7425[label="Spawned"];
    7400 -> 7426;
    7426[label=")"];
    7400 -> 7427;
    7427 [label="Statement(Statement { syntax: 7427, statement: Some(7431), semicolon: Some(7436) })"];
    7427 -> 7428;
    7428 [label="Expr"];
    7428 -> 7429;
    7429 [label="Identifier"];
    7429 -> 7430;
    7430[label="StopRespawnRequest"];
    7427 -> 7431;
    7431 [label="Assignment(Assignment { syntax: 7431, lvalue: Some(7428), operator: Some(7432), rvalue: Some(7433) })"];
    7431 -> 7432;
    7432[label="="];
    7431 -> 7433;
    7433 [label="Expr"];
    7433 -> 7434;
    7434 [label="Literal"];
    7434 -> 7435;
    7435[label="True"];
    7427 -> 7436;
    7436[label=";"];
    7400 -> 7437;
    7437 [label="Else(Else { syntax: 7437, else_: Some(7438), if_: Some(7439), body: None })"];
    7437 -> 7438;
    7438[label="else"];
    7437 -> 7439;
    7439 [label="If(If { syntax: 7439, if_: Some(7440), lparen: Some(7441), condition: Some(7442), rparen: Some(7455), body: Some(7456), else_: Some(7754) })"];
    7439 -> 7440;
    7440[label="if"];
    7439 -> 7441;
    7441[label="("];
    7439 -> 7442;
    7442 [label="Expr"];
    7442 -> 7445;
    7445 [label="BinaryOp(BinaryOp { syntax: 7445, lhs: Some(7443), operator: Some(7446), rhs: Some(7447) })"];
    7445 -> 7443;
    7443 [label="Identifier"];
    7443 -> 7444;
    7444[label="Now"];
    7445 -> 7446;
    7446[label=">="];
    7445 -> 7447;
    7447 [label="Expr"];
    7447 -> 7450;
    7450 [label="BinaryOp(BinaryOp { syntax: 7450, lhs: Some(7448), operator: Some(7451), rhs: Some(7452) })"];
    7450 -> 7448;
    7448 [label="Identifier"];
    7448 -> 7449;
    7449[label="PlayerRespawnStartTime"];
    7450 -> 7451;
    7451[label="+"];
    7450 -> 7452;
    7452 [label="Expr"];
    7452 -> 7453;
    7453 [label="Identifier"];
    7453 -> 7454;
    7454[label="C_RespawnWaitingDuration"];
    7439 -> 7455;
    7455[label=")"];
    7439 -> 7456;
    7456 [label="Statement(Statement { syntax: 7456, statement: Some(7457), semicolon: None })"];
    7456 -> 7457;
    7457 [label="Block(Block { syntax: 7457, lbrace: Some(7458), statements: [7459, 7469, 7671, 7689, 7730, 7740], rbrace: Some(7753) })"];
    7457 -> 7458;
    7458[label="{"];
    7457 -> 7459;
    7459 [label="Statement(Statement { syntax: 7459, statement: Some(7460), semicolon: None })"];
    7459 -> 7460;
    7460 [label="VarDec(VarDec { syntax: 7460, declare: Some(7461), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(7462), name: Some(7467), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    7460 -> 7461;
    7461[label="declare"];
    7460 -> 7462;
    7462 [label="Type(Type { syntax: 7462, basename: Some(7463), members: [], arrays: [(7464, Some(7465), 7466)] })"];
    7462 -> 7463;
    7463[label="Real"];
    7462 -> 7464;
    7464[label="["];
    7462 -> 7465;
    7465[label="Ident"];
    7462 -> 7466;
    7466[label="]"];
    7460 -> 7467;
    7467[label="LandmarksDistances"];
    7460 -> 7468;
    7468[label=";"];
    7457 -> 7469;
    7469 [label="Statement(Statement { syntax: 7469, statement: Some(7470), semicolon: None })"];
    7469 -> 7470;
    7470 [label="Foreach(Foreach { syntax: 7470, foreach: Some(7471), lparen: Some(7472), name1: Some(7473), arrow: None, name2: None, in_: Some(7474), value: Some(7475), rparen: Some(7478), body: Some(7479) })"];
    7470 -> 7471;
    7471[label="foreach"];
    7470 -> 7472;
    7472[label="("];
    7470 -> 7473;
    7473[label="MapLandmark"];
    7470 -> 7474;
    7474[label="in"];
    7470 -> 7475;
    7475 [label="Expr"];
    7475 -> 7476;
    7476 [label="Identifier"];
    7476 -> 7477;
    7477[label="MapLandmarks_Gauge"];
    7470 -> 7478;
    7478[label=")"];
    7470 -> 7479;
    7479 [label="Statement(Statement { syntax: 7479, statement: Some(7480), semicolon: None })"];
    7479 -> 7480;
    7480 [label="Block(Block { syntax: 7480, lbrace: Some(7481), statements: [7482, 7513, 7523, 7633], rbrace: Some(7670) })"];
    7480 -> 7481;
    7481[label="{"];
    7480 -> 7482;
    7482 [label="Statement(Statement { syntax: 7482, statement: Some(7483), semicolon: None })"];
    7482 -> 7483;
    7483 [label="If(If { syntax: 7483, if_: Some(7484), lparen: Some(7485), condition: Some(7486), rparen: Some(7508), body: Some(7509), else_: None })"];
    7483 -> 7484;
    7484[label="if"];
    7483 -> 7485;
    7485[label="("];
    7483 -> 7486;
    7486 [label="Expr"];
    7486 -> 7497;
    7497 [label="FunctionCall(FunctionCall { syntax: 7497, lhs: Some(7487), lparen: Some(7498), args: [(7499, None)], rparen: Some(7507) })"];
    7497 -> 7487;
    7487 [label="UnOp(UnOp { syntax: 7487, operator: Some(7488), operand: Some(7489) })"];
    7487 -> 7488;
    7488[label="!"];
    7487 -> 7489;
    7489 [label="Expr"];
    7489 -> 7492;
    7492 [label="BinaryOp(BinaryOp { syntax: 7492, lhs: Some(7490), operator: Some(7493), rhs: Some(7494) })"];
    7492 -> 7490;
    7490 [label="Identifier"];
    7490 -> 7491;
    7491[label="G_RespawnLandmarks"];
    7492 -> 7493;
    7493[label="."];
    7492 -> 7494;
    7494 [label="Expr"];
    7494 -> 7495;
    7495 [label="Identifier"];
    7495 -> 7496;
    7496[label="exists"];
    7497 -> 7498;
    7498[label="("];
    7497 -> 7499;
    7499 [label="Expr"];
    7499 -> 7502;
    7502 [label="BinaryOp(BinaryOp { syntax: 7502, lhs: Some(7500), operator: Some(7503), rhs: Some(7504) })"];
    7502 -> 7500;
    7500 [label="Identifier"];
    7500 -> 7501;
    7501[label="MapLandmark"];
    7502 -> 7503;
    7503[label="."];
    7502 -> 7504;
    7504 [label="Expr"];
    7504 -> 7505;
    7505 [label="Identifier"];
    7505 -> 7506;
    7506[label="Id"];
    7497 -> 7507;
    7507[label=")"];
    7483 -> 7508;
    7508[label=")"];
    7483 -> 7509;
    7509 [label="Statement(Statement { syntax: 7509, statement: Some(7510), semicolon: Some(7512) })"];
    7509 -> 7510;
    7510 [label="Continue"];
    7510 -> 7511;
    7511[label="continue"];
    7509 -> 7512;
    7512[label=";"];
    7480 -> 7513;
    7513 [label="Statement(Statement { syntax: 7513, statement: Some(7514), semicolon: None })"];
    7513 -> 7514;
    7514 [label="VarDec(VarDec { syntax: 7514, declare: Some(7515), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(7516), as_: None, alias: None, for_: None, target: None, assignment: Some(7518), value: Some(7519) })"];
    7514 -> 7515;
    7515[label="declare"];
    7514 -> 7516;
    7516 [label="Type(Type { syntax: 7516, basename: Some(7517), members: [], arrays: [] })"];
    7516 -> 7517;
    7517[label="NearestPlayerDistance"];
    7514 -> 7518;
    7518[label="="];
    7514 -> 7519;
    7519 [label="Expr"];
    7519 -> 7520;
    7520 [label="Literal"];
    7520 -> 7521;
    7521[label="0."];
    7514 -> 7522;
    7522[label=";"];
    7480 -> 7523;
    7523 [label="Statement(Statement { syntax: 7523, statement: Some(7524), semicolon: None })"];
    7523 -> 7524;
    7524 [label="Foreach(Foreach { syntax: 7524, foreach: Some(7525), lparen: Some(7526), name1: Some(7527), arrow: None, name2: None, in_: Some(7528), value: Some(7529), rparen: Some(7532), body: Some(7533) })"];
    7524 -> 7525;
    7525[label="foreach"];
    7524 -> 7526;
    7526[label="("];
    7524 -> 7527;
    7527[label="Player2"];
    7524 -> 7528;
    7528[label="in"];
    7524 -> 7529;
    7529 [label="Expr"];
    7529 -> 7530;
    7530 [label="Identifier"];
    7530 -> 7531;
    7531[label="Players"];
    7524 -> 7532;
    7532[label=")"];
    7524 -> 7533;
    7533 [label="Statement(Statement { syntax: 7533, statement: Some(7534), semicolon: None })"];
    7533 -> 7534;
    7534 [label="If(If { syntax: 7534, if_: Some(7535), lparen: Some(7536), condition: Some(7537), rparen: Some(7560), body: Some(7561), else_: None })"];
    7534 -> 7535;
    7535[label="if"];
    7534 -> 7536;
    7536[label="("];
    7534 -> 7537;
    7537 [label="Expr"];
    7537 -> 7545;
    7545 [label="BinaryOp(BinaryOp { syntax: 7545, lhs: Some(7540), operator: Some(7546), rhs: Some(7547) })"];
    7545 -> 7540;
    7540 [label="BinaryOp(BinaryOp { syntax: 7540, lhs: Some(7538), operator: Some(7541), rhs: Some(7542) })"];
    7540 -> 7538;
    7538 [label="Identifier"];
    7538 -> 7539;
    7539[label="Player2"];
    7540 -> 7541;
    7541[label="."];
    7540 -> 7542;
    7542 [label="Expr"];
    7542 -> 7543;
    7543 [label="Identifier"];
    7543 -> 7544;
    7544[label="SpawnStatus"];
    7545 -> 7546;
    7546[label="=="];
    7545 -> 7547;
    7547 [label="Expr"];
    7547 -> 7550;
    7550 [label="BinaryOp(BinaryOp { syntax: 7550, lhs: Some(7548), operator: Some(7551), rhs: Some(7552) })"];
    7550 -> 7548;
    7548 [label="Identifier"];
    7548 -> 7549;
    7549[label="CSmPlayer"];
    7550 -> 7551;
    7551[label="::"];
    7550 -> 7552;
    7552 [label="Expr"];
    7552 -> 7555;
    7555 [label="BinaryOp(BinaryOp { syntax: 7555, lhs: Some(7553), operator: Some(7556), rhs: Some(7557) })"];
    7555 -> 7553;
    7553 [label="Identifier"];
    7553 -> 7554;
    7554[label="ESpawnStatus"];
    7555 -> 7556;
    7556[label="::"];
    7555 -> 7557;
    7557 [label="Expr"];
    7557 -> 7558;
    7558 [label="Identifier"];
    7558 -> 7559;
    7559[label="Spawned"];
    7534 -> 7560;
    7560[label=")"];
    7534 -> 7561;
    7561 [label="Statement(Statement { syntax: 7561, statement: Some(7562), semicolon: None })"];
    7561 -> 7562;
    7562 [label="Block(Block { syntax: 7562, lbrace: Some(7563), statements: [7564, 7599], rbrace: Some(7632) })"];
    7562 -> 7563;
    7563[label="{"];
    7562 -> 7564;
    7564 [label="Statement(Statement { syntax: 7564, statement: Some(7565), semicolon: None })"];
    7564 -> 7565;
    7565 [label="VarDec(VarDec { syntax: 7565, declare: Some(7566), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(7567), as_: None, alias: None, for_: None, target: None, assignment: Some(7569), value: Some(7570) })"];
    7565 -> 7566;
    7566[label="declare"];
    7565 -> 7567;
    7567 [label="Type(Type { syntax: 7567, basename: Some(7568), members: [], arrays: [] })"];
    7567 -> 7568;
    7568[label="Distance"];
    7565 -> 7569;
    7569[label="="];
    7565 -> 7570;
    7570 [label="Expr"];
    7570 -> 7578;
    7578 [label="FunctionCall(FunctionCall { syntax: 7578, lhs: Some(7573), lparen: Some(7579), args: [(7580, Some(7588)), (7589, None)], rparen: Some(7597) })"];
    7578 -> 7573;
    7573 [label="BinaryOp(BinaryOp { syntax: 7573, lhs: Some(7571), operator: Some(7574), rhs: Some(7575) })"];
    7573 -> 7571;
    7571 [label="Identifier"];
    7571 -> 7572;
    7572[label="ML"];
    7573 -> 7574;
    7574[label="::"];
    7573 -> 7575;
    7575 [label="Expr"];
    7575 -> 7576;
    7576 [label="Identifier"];
    7576 -> 7577;
    7577[label="Distance"];
    7578 -> 7579;
    7579[label="("];
    7578 -> 7580;
    7580 [label="Expr"];
    7580 -> 7583;
    7583 [label="BinaryOp(BinaryOp { syntax: 7583, lhs: Some(7581), operator: Some(7584), rhs: Some(7585) })"];
    7583 -> 7581;
    7581 [label="Identifier"];
    7581 -> 7582;
    7582[label="Player2"];
    7583 -> 7584;
    7584[label="."];
    7583 -> 7585;
    7585 [label="Expr"];
    7585 -> 7586;
    7586 [label="Identifier"];
    7586 -> 7587;
    7587[label="Position"];
    7578 -> 7588;
    7588[label=","];
    7578 -> 7589;
    7589 [label="Expr"];
    7589 -> 7592;
    7592 [label="BinaryOp(BinaryOp { syntax: 7592, lhs: Some(7590), operator: Some(7593), rhs: Some(7594) })"];
    7592 -> 7590;
    7590 [label="Identifier"];
    7590 -> 7591;
    7591[label="MapLandmark"];
    7592 -> 7593;
    7593[label="."];
    7592 -> 7594;
    7594 [label="Expr"];
    7594 -> 7595;
    7595 [label="Identifier"];
    7595 -> 7596;
    7596[label="Position"];
    7578 -> 7597;
    7597[label=")"];
    7565 -> 7598;
    7598[label=";"];
    7562 -> 7599;
    7599 [label="Statement(Statement { syntax: 7599, statement: Some(7600), semicolon: None })"];
    7599 -> 7600;
    7600 [label="If(If { syntax: 7600, if_: Some(7601), lparen: Some(7602), condition: Some(7603), rparen: Some(7621), body: Some(7622), else_: None })"];
    7600 -> 7601;
    7601[label="if"];
    7600 -> 7602;
    7602[label="("];
    7600 -> 7603;
    7603 [label="Expr"];
    7603 -> 7611;
    7611 [label="BinaryOp(BinaryOp { syntax: 7611, lhs: Some(7606), operator: Some(7612), rhs: Some(7613) })"];
    7611 -> 7606;
    7606 [label="BinaryOp(BinaryOp { syntax: 7606, lhs: Some(7604), operator: Some(7607), rhs: Some(7608) })"];
    7606 -> 7604;
    7604 [label="Identifier"];
    7604 -> 7605;
    7605[label="NearestPlayerDistance"];
    7606 -> 7607;
    7607[label="<="];
    7606 -> 7608;
    7608 [label="Expr"];
    7608 -> 7609;
    7609 [label="Literal"];
    7609 -> 7610;
    7610[label="0"];
    7611 -> 7612;
    7612[label="||"];
    7611 -> 7613;
    7613 [label="Expr"];
    7613 -> 7616;
    7616 [label="BinaryOp(BinaryOp { syntax: 7616, lhs: Some(7614), operator: Some(7617), rhs: Some(7618) })"];
    7616 -> 7614;
    7614 [label="Identifier"];
    7614 -> 7615;
    7615[label="Distance"];
    7616 -> 7617;
    7617[label="<"];
    7616 -> 7618;
    7618 [label="Expr"];
    7618 -> 7619;
    7619 [label="Identifier"];
    7619 -> 7620;
    7620[label="NearestPlayerDistance"];
    7600 -> 7621;
    7621[label=")"];
    7600 -> 7622;
    7622 [label="Statement(Statement { syntax: 7622, statement: Some(7626), semicolon: Some(7631) })"];
    7622 -> 7623;
    7623 [label="Expr"];
    7623 -> 7624;
    7624 [label="Identifier"];
    7624 -> 7625;
    7625[label="NearestPlayerDistance"];
    7622 -> 7626;
    7626 [label="Assignment(Assignment { syntax: 7626, lvalue: Some(7623), operator: Some(7627), rvalue: Some(7628) })"];
    7626 -> 7627;
    7627[label="="];
    7626 -> 7628;
    7628 [label="Expr"];
    7628 -> 7629;
    7629 [label="Identifier"];
    7629 -> 7630;
    7630[label="Distance"];
    7622 -> 7631;
    7631[label=";"];
    7562 -> 7632;
    7632[label="}"];
    7480 -> 7633;
    7633 [label="Statement(Statement { syntax: 7633, statement: Some(7634), semicolon: None })"];
    7633 -> 7634;
    7634 [label="If(If { syntax: 7634, if_: Some(7635), lparen: Some(7636), condition: Some(7637), rparen: Some(7645), body: Some(7646), else_: None })"];
    7634 -> 7635;
    7635[label="if"];
    7634 -> 7636;
    7636[label="("];
    7634 -> 7637;
    7637 [label="Expr"];
    7637 -> 7640;
    7640 [label="BinaryOp(BinaryOp { syntax: 7640, lhs: Some(7638), operator: Some(7641), rhs: Some(7642) })"];
    7640 -> 7638;
    7638 [label="Identifier"];
    7638 -> 7639;
    7639[label="NearestPlayerDistance"];
    7640 -> 7641;
    7641[label=">"];
    7640 -> 7642;
    7642 [label="Expr"];
    7642 -> 7643;
    7643 [label="Literal"];
    7643 -> 7644;
    7644[label="0"];
    7634 -> 7645;
    7645[label=")"];
    7634 -> 7646;
    7646 [label="Statement(Statement { syntax: 7646, statement: Some(7661), semicolon: Some(7669) })"];
    7646 -> 7647;
    7647 [label="Expr"];
    7647 -> 7650;
    7650 [label="ArrayAccess(ArrayAccess { syntax: 7650, lhs: Some(7648), lsquare: Some(7651), index: Some(7652), rsquare: Some(7660) })"];
    7650 -> 7648;
    7648 [label="Identifier"];
    7648 -> 7649;
    7649[label="LandmarksDistances"];
    7650 -> 7651;
    7651[label="["];
    7650 -> 7652;
    7652 [label="Expr"];
    7652 -> 7655;
    7655 [label="BinaryOp(BinaryOp { syntax: 7655, lhs: Some(7653), operator: Some(7656), rhs: Some(7657) })"];
    7655 -> 7653;
    7653 [label="Identifier"];
    7653 -> 7654;
    7654[label="MapLandmark"];
    7655 -> 7656;
    7656[label="."];
    7655 -> 7657;
    7657 [label="Expr"];
    7657 -> 7658;
    7658 [label="Identifier"];
    7658 -> 7659;
    7659[label="Id"];
    7650 -> 7660;
    7660[label="]"];
    7646 -> 7661;
    7661 [label="Assignment(Assignment { syntax: 7661, lvalue: Some(7647), operator: Some(7662), rvalue: Some(7663) })"];
    7661 -> 7662;
    7662[label="="];
    7661 -> 7663;
    7663 [label="Expr"];
    7663 -> 7664;
    7664 [label="UnOp(UnOp { syntax: 7664, operator: Some(7665), operand: Some(7666) })"];
    7664 -> 7665;
    7665[label="-"];
    7664 -> 7666;
    7666 [label="Expr"];
    7666 -> 7667;
    7667 [label="Identifier"];
    7667 -> 7668;
    7668[label="NearestPlayerDistance"];
    7646 -> 7669;
    7669[label=";"];
    7480 -> 7670;
    7670[label="}"];
    7457 -> 7671;
    7671 [label="Statement(Statement { syntax: 7671, statement: Some(7675), semicolon: Some(7688) })"];
    7671 -> 7672;
    7672 [label="Expr"];
    7672 -> 7673;
    7673 [label="Identifier"];
    7673 -> 7674;
    7674[label="LandmarksDistances"];
    7671 -> 7675;
    7675 [label="Assignment(Assignment { syntax: 7675, lvalue: Some(7672), operator: Some(7676), rvalue: Some(7677) })"];
    7675 -> 7676;
    7676[label="="];
    7675 -> 7677;
    7677 [label="Expr"];
    7677 -> 7685;
    7685 [label="FunctionCall(FunctionCall { syntax: 7685, lhs: Some(7680), lparen: Some(7686), args: [], rparen: Some(7687) })"];
    7685 -> 7680;
    7680 [label="BinaryOp(BinaryOp { syntax: 7680, lhs: Some(7678), operator: Some(7681), rhs: Some(7682) })"];
    7680 -> 7678;
    7678 [label="Identifier"];
    7678 -> 7679;
    7679[label="LandmarksDistances"];
    7680 -> 7681;
    7681[label="."];
    7680 -> 7682;
    7682 [label="Expr"];
    7682 -> 7683;
    7683 [label="Identifier"];
    7683 -> 7684;
    7684[label="sort"];
    7685 -> 7686;
    7686[label="("];
    7685 -> 7687;
    7687[label=")"];
    7671 -> 7688;
    7688[label=";"];
    7457 -> 7689;
    7689 [label="Statement(Statement { syntax: 7689, statement: Some(7690), semicolon: None })"];
    7689 -> 7690;
    7690 [label="Foreach(Foreach { syntax: 7690, foreach: Some(7691), lparen: Some(7692), name1: Some(7693), arrow: Some(7694), name2: Some(7695), in_: Some(7696), value: Some(7697), rparen: Some(7700), body: Some(7701) })"];
    7690 -> 7691;
    7691[label="foreach"];
    7690 -> 7692;
    7692[label="("];
    7690 -> 7693;
    7693[label="MapLandmarkId"];
    7690 -> 7694;
    7694[label="=>"];
    7690 -> 7695;
    7695[label="Distance"];
    7690 -> 7696;
    7696[label="in"];
    7690 -> 7697;
    7697 [label="Expr"];
    7697 -> 7698;
    7698 [label="Identifier"];
    7698 -> 7699;
    7699[label="LandmarksDistances"];
    7690 -> 7700;
    7700[label=")"];
    7690 -> 7701;
    7701 [label="Statement(Statement { syntax: 7701, statement: Some(7702), semicolon: None })"];
    7701 -> 7702;
    7702 [label="Block(Block { syntax: 7702, lbrace: Some(7703), statements: [7704, 7725], rbrace: Some(7729) })"];
    7702 -> 7703;
    7703[label="{"];
    7702 -> 7704;
    7704 [label="Statement(Statement { syntax: 7704, statement: Some(7705), semicolon: Some(7724) })"];
    7704 -> 7705;
    7705 [label="Expr"];
    7705 -> 7708;
    7708 [label="FunctionCall(FunctionCall { syntax: 7708, lhs: Some(7706), lparen: Some(7709), args: [(7710, Some(7713)), (7714, None)], rparen: Some(7723) })"];
    7708 -> 7706;
    7706 [label="Identifier"];
    7706 -> 7707;
    7707[label="RespawnPlayer"];
    7708 -> 7709;
    7709[label="("];
    7708 -> 7710;
    7710 [label="Expr"];
    7710 -> 7711;
    7711 [label="Identifier"];
    7711 -> 7712;
    7712[label="Player"];
    7708 -> 7713;
    7713[label=","];
    7708 -> 7714;
    7714 [label="Expr"];
    7714 -> 7717;
    7717 [label="ArrayAccess(ArrayAccess { syntax: 7717, lhs: Some(7715), lsquare: Some(7718), index: Some(7719), rsquare: Some(7722) })"];
    7717 -> 7715;
    7715 [label="Identifier"];
    7715 -> 7716;
    7716[label="MapLandmarks"];
    7717 -> 7718;
    7718[label="["];
    7717 -> 7719;
    7719 [label="Expr"];
    7719 -> 7720;
    7720 [label="Identifier"];
    7720 -> 7721;
    7721[label="MapLandmarkId"];
    7717 -> 7722;
    7722[label="]"];
    7708 -> 7723;
    7723[label=")"];
    7704 -> 7724;
    7724[label=";"];
    7702 -> 7725;
    7725 [label="Statement(Statement { syntax: 7725, statement: Some(7726), semicolon: Some(7728) })"];
    7725 -> 7726;
    7726 [label="Break"];
    7726 -> 7727;
    7727[label="break"];
    7725 -> 7728;
    7728[label=";"];
    7702 -> 7729;
    7729[label="}"];
    7457 -> 7730;
    7730 [label="Statement(Statement { syntax: 7730, statement: Some(7734), semicolon: Some(7739) })"];
    7730 -> 7731;
    7731 [label="Expr"];
    7731 -> 7732;
    7732 [label="Identifier"];
    7732 -> 7733;
    7733[label="PlayerRequestsRespawn"];
    7730 -> 7734;
    7734 [label="Assignment(Assignment { syntax: 7734, lvalue: Some(7731), operator: Some(7735), rvalue: Some(7736) })"];
    7734 -> 7735;
    7735[label="="];
    7734 -> 7736;
    7736 [label="Expr"];
    7736 -> 7737;
    7737 [label="Literal"];
    7737 -> 7738;
    7738[label="False"];
    7730 -> 7739;
    7739[label=";"];
    7457 -> 7740;
    7740 [label="Statement(Statement { syntax: 7740, statement: Some(7744), semicolon: Some(7752) })"];
    7740 -> 7741;
    7741 [label="Expr"];
    7741 -> 7742;
    7742 [label="Identifier"];
    7742 -> 7743;
    7743[label="PlayerRespawnStartTime"];
    7740 -> 7744;
    7744 [label="Assignment(Assignment { syntax: 7744, lvalue: Some(7741), operator: Some(7745), rvalue: Some(7746) })"];
    7744 -> 7745;
    7745[label="="];
    7744 -> 7746;
    7746 [label="Expr"];
    7746 -> 7747;
    7747 [label="UnOp(UnOp { syntax: 7747, operator: Some(7748), operand: Some(7749) })"];
    7747 -> 7748;
    7748[label="-"];
    7747 -> 7749;
    7749 [label="Expr"];
    7749 -> 7750;
    7750 [label="Literal"];
    7750 -> 7751;
    7751[label="1"];
    7740 -> 7752;
    7752[label=";"];
    7457 -> 7753;
    7753[label="}"];
    7439 -> 7754;
    7754 [label="Else(Else { syntax: 7754, else_: Some(7755), if_: Some(7756), body: None })"];
    7754 -> 7755;
    7755[label="else"];
    7754 -> 7756;
    7756 [label="If(If { syntax: 7756, if_: Some(7757), lparen: Some(7758), condition: Some(7759), rparen: Some(7772), body: Some(7773), else_: Some(7815) })"];
    7756 -> 7757;
    7757[label="if"];
    7756 -> 7758;
    7758[label="("];
    7756 -> 7759;
    7759 [label="Expr"];
    7759 -> 7767;
    7767 [label="BinaryOp(BinaryOp { syntax: 7767, lhs: Some(7762), operator: Some(7768), rhs: Some(7769) })"];
    7767 -> 7762;
    7762 [label="BinaryOp(BinaryOp { syntax: 7762, lhs: Some(7760), operator: Some(7763), rhs: Some(7764) })"];
    7762 -> 7760;
    7760 [label="Identifier"];
    7760 -> 7761;
    7761[label="Player"];
    7762 -> 7763;
    7763[label="."];
    7762 -> 7764;
    7764 [label="Expr"];
    7764 -> 7765;
    7765 [label="Identifier"];
    7765 -> 7766;
    7766[label="Speed"];
    7767 -> 7768;
    7768[label=">="];
    7767 -> 7769;
    7769 [label="Expr"];
    7769 -> 7770;
    7770 [label="Identifier"];
    7770 -> 7771;
    7771[label="C_RespawnCancellingSpeed"];
    7756 -> 7772;
    7772[label=")"];
    7756 -> 7773;
    7773 [label="Statement(Statement { syntax: 7773, statement: Some(7774), semicolon: None })"];
    7773 -> 7774;
    7774 [label="Block(Block { syntax: 7774, lbrace: Some(7775), statements: [7776, 7804], rbrace: Some(7814) })"];
    7774 -> 7775;
    7775[label="{"];
    7774 -> 7776;
    7776 [label="Statement(Statement { syntax: 7776, statement: Some(7777), semicolon: Some(7803) })"];
    7776 -> 7777;
    7777 [label="Expr"];
    7777 -> 7785;
    7785 [label="FunctionCall(FunctionCall { syntax: 7785, lhs: Some(7780), lparen: Some(7786), args: [(7787, Some(7790)), (7791, Some(7794)), (7795, Some(7798)), (7799, None)], rparen: Some(7802) })"];
    7785 -> 7780;
    7780 [label="BinaryOp(BinaryOp { syntax: 7780, lhs: Some(7778), operator: Some(7781), rhs: Some(7782) })"];
    7780 -> 7778;
    7778 [label="Identifier"];
    7778 -> 7779;
    7779[label="Translations"];
    7780 -> 7781;
    7781[label="::"];
    7780 -> 7782;
    7782 [label="Expr"];
    7782 -> 7783;
    7783 [label="Identifier"];
    7783 -> 7784;
    7784[label="SendStatusMessage"];
    7785 -> 7786;
    7786[label="("];
    7785 -> 7787;
    7787 [label="Expr"];
    7787 -> 7788;
    7788 [label="Identifier"];
    7788 -> 7789;
    7789[label="Player"];
    7785 -> 7790;
    7790[label=","];
    7785 -> 7791;
    7791 [label="Expr"];
    7791 -> 7792;
    7792 [label="Literal"];
    7792 -> 7793;
    7793[label="\"Respawn aborted: you moved!\""];
    7785 -> 7794;
    7794[label=","];
    7785 -> 7795;
    7795 [label="Expr"];
    7795 -> 7796;
    7796 [label="Literal"];
    7796 -> 7797;
    7797[label="3000"];
    7785 -> 7798;
    7798[label=","];
    7785 -> 7799;
    7799 [label="Expr"];
    7799 -> 7800;
    7800 [label="Literal"];
    7800 -> 7801;
    7801[label="0"];
    7785 -> 7802;
    7802[label=")"];
    7776 -> 7803;
    7803[label=";"];
    7774 -> 7804;
    7804 [label="Statement(Statement { syntax: 7804, statement: Some(7808), semicolon: Some(7813) })"];
    7804 -> 7805;
    7805 [label="Expr"];
    7805 -> 7806;
    7806 [label="Identifier"];
    7806 -> 7807;
    7807[label="StopRespawnRequest"];
    7804 -> 7808;
    7808 [label="Assignment(Assignment { syntax: 7808, lvalue: Some(7805), operator: Some(7809), rvalue: Some(7810) })"];
    7808 -> 7809;
    7809[label="="];
    7808 -> 7810;
    7810 [label="Expr"];
    7810 -> 7811;
    7811 [label="Literal"];
    7811 -> 7812;
    7812[label="True"];
    7804 -> 7813;
    7813[label=";"];
    7774 -> 7814;
    7814[label="}"];
    7756 -> 7815;
    7815 [label="Else(Else { syntax: 7815, else_: Some(7816), if_: Some(7817), body: None })"];
    7815 -> 7816;
    7816[label="else"];
    7815 -> 7817;
    7817 [label="If(If { syntax: 7817, if_: Some(7818), lparen: Some(7819), condition: Some(7820), rparen: Some(7833), body: Some(7834), else_: None })"];
    7817 -> 7818;
    7818[label="if"];
    7817 -> 7819;
    7819[label="("];
    7817 -> 7820;
    7820 [label="Expr"];
    7820 -> 7828;
    7828 [label="BinaryOp(BinaryOp { syntax: 7828, lhs: Some(7823), operator: Some(7829), rhs: Some(7830) })"];
    7828 -> 7823;
    7823 [label="BinaryOp(BinaryOp { syntax: 7823, lhs: Some(7821), operator: Some(7824), rhs: Some(7825) })"];
    7823 -> 7821;
    7821 [label="Identifier"];
    7821 -> 7822;
    7822[label="G_RespawnLandmarks"];
    7823 -> 7824;
    7824[label="."];
    7823 -> 7825;
    7825 [label="Expr"];
    7825 -> 7826;
    7826 [label="Identifier"];
    7826 -> 7827;
    7827[label="count"];
    7828 -> 7829;
    7829[label="<="];
    7828 -> 7830;
    7830 [label="Expr"];
    7830 -> 7831;
    7831 [label="Literal"];
    7831 -> 7832;
    7832[label="0"];
    7817 -> 7833;
    7833[label=")"];
    7817 -> 7834;
    7834 [label="Statement(Statement { syntax: 7834, statement: Some(7835), semicolon: None })"];
    7834 -> 7835;
    7835 [label="Block(Block { syntax: 7835, lbrace: Some(7836), statements: [7837, 7865], rbrace: Some(7875) })"];
    7835 -> 7836;
    7836[label="{"];
    7835 -> 7837;
    7837 [label="Statement(Statement { syntax: 7837, statement: Some(7838), semicolon: Some(7864) })"];
    7837 -> 7838;
    7838 [label="Expr"];
    7838 -> 7846;
    7846 [label="FunctionCall(FunctionCall { syntax: 7846, lhs: Some(7841), lparen: Some(7847), args: [(7848, Some(7851)), (7852, Some(7855)), (7856, Some(7859)), (7860, None)], rparen: Some(7863) })"];
    7846 -> 7841;
    7841 [label="BinaryOp(BinaryOp { syntax: 7841, lhs: Some(7839), operator: Some(7842), rhs: Some(7843) })"];
    7841 -> 7839;
    7839 [label="Identifier"];
    7839 -> 7840;
    7840[label="Translations"];
    7841 -> 7842;
    7842[label="::"];
    7841 -> 7843;
    7843 [label="Expr"];
    7843 -> 7844;
    7844 [label="Identifier"];
    7844 -> 7845;
    7845[label="SendStatusMessage"];
    7846 -> 7847;
    7847[label="("];
    7846 -> 7848;
    7848 [label="Expr"];
    7848 -> 7849;
    7849 [label="Identifier"];
    7849 -> 7850;
    7850[label="Player"];
    7846 -> 7851;
    7851[label=","];
    7846 -> 7852;
    7852 [label="Expr"];
    7852 -> 7853;
    7853 [label="Literal"];
    7853 -> 7854;
    7854[label="\"Respawn aborted: no respawn Checkpoints avaliable anymore\""];
    7846 -> 7855;
    7855[label=","];
    7846 -> 7856;
    7856 [label="Expr"];
    7856 -> 7857;
    7857 [label="Literal"];
    7857 -> 7858;
    7858[label="3000"];
    7846 -> 7859;
    7859[label=","];
    7846 -> 7860;
    7860 [label="Expr"];
    7860 -> 7861;
    7861 [label="Literal"];
    7861 -> 7862;
    7862[label="0"];
    7846 -> 7863;
    7863[label=")"];
    7837 -> 7864;
    7864[label=";"];
    7835 -> 7865;
    7865 [label="Statement(Statement { syntax: 7865, statement: Some(7869), semicolon: Some(7874) })"];
    7865 -> 7866;
    7866 [label="Expr"];
    7866 -> 7867;
    7867 [label="Identifier"];
    7867 -> 7868;
    7868[label="StopRespawnRequest"];
    7865 -> 7869;
    7869 [label="Assignment(Assignment { syntax: 7869, lvalue: Some(7866), operator: Some(7870), rvalue: Some(7871) })"];
    7869 -> 7870;
    7870[label="="];
    7869 -> 7871;
    7871 [label="Expr"];
    7871 -> 7872;
    7872 [label="Literal"];
    7872 -> 7873;
    7873[label="True"];
    7865 -> 7874;
    7874[label=";"];
    7835 -> 7875;
    7875[label="}"];
    7397 -> 7876;
    7876[label="}"];
    6918 -> 7877;
    7877 [label="Statement(Statement { syntax: 7877, statement: Some(7878), semicolon: None })"];
    7877 -> 7878;
    7878 [label="If(If { syntax: 7878, if_: Some(7879), lparen: Some(7880), condition: Some(7881), rparen: Some(7884), body: Some(7885), else_: None })"];
    7878 -> 7879;
    7879[label="if"];
    7878 -> 7880;
    7880[label="("];
    7878 -> 7881;
    7881 [label="Expr"];
    7881 -> 7882;
    7882 [label="Identifier"];
    7882 -> 7883;
    7883[label="StopRespawnRequest"];
    7878 -> 7884;
    7884[label=")"];
    7878 -> 7885;
    7885 [label="Statement(Statement { syntax: 7885, statement: Some(7886), semicolon: None })"];
    7885 -> 7886;
    7886 [label="Block(Block { syntax: 7886, lbrace: Some(7887), statements: [7888, 7898, 7911], rbrace: Some(7929) })"];
    7886 -> 7887;
    7887[label="{"];
    7886 -> 7888;
    7888 [label="Statement(Statement { syntax: 7888, statement: Some(7892), semicolon: Some(7897) })"];
    7888 -> 7889;
    7889 [label="Expr"];
    7889 -> 7890;
    7890 [label="Identifier"];
    7890 -> 7891;
    7891[label="PlayerRequestsRespawn"];
    7888 -> 7892;
    7892 [label="Assignment(Assignment { syntax: 7892, lvalue: Some(7889), operator: Some(7893), rvalue: Some(7894) })"];
    7892 -> 7893;
    7893[label="="];
    7892 -> 7894;
    7894 [label="Expr"];
    7894 -> 7895;
    7895 [label="Literal"];
    7895 -> 7896;
    7896[label="False"];
    7888 -> 7897;
    7897[label=";"];
    7886 -> 7898;
    7898 [label="Statement(Statement { syntax: 7898, statement: Some(7902), semicolon: Some(7910) })"];
    7898 -> 7899;
    7899 [label="Expr"];
    7899 -> 7900;
    7900 [label="Identifier"];
    7900 -> 7901;
    7901[label="PlayerRespawnStartTime"];
    7898 -> 7902;
    7902 [label="Assignment(Assignment { syntax: 7902, lvalue: Some(7899), operator: Some(7903), rvalue: Some(7904) })"];
    7902 -> 7903;
    7903[label="="];
    7902 -> 7904;
    7904 [label="Expr"];
    7904 -> 7905;
    7905 [label="UnOp(UnOp { syntax: 7905, operator: Some(7906), operand: Some(7907) })"];
    7905 -> 7906;
    7906[label="-"];
    7905 -> 7907;
    7907 [label="Expr"];
    7907 -> 7908;
    7908 [label="Literal"];
    7908 -> 7909;
    7909[label="1"];
    7898 -> 7910;
    7910[label=";"];
    7886 -> 7911;
    7911 [label="Statement(Statement { syntax: 7911, statement: Some(7912), semicolon: Some(7928) })"];
    7911 -> 7912;
    7912 [label="Expr"];
    7912 -> 7915;
    7915 [label="FunctionCall(FunctionCall { syntax: 7915, lhs: Some(7913), lparen: Some(7916), args: [(7917, Some(7920)), (7921, None)], rparen: Some(7927) })"];
    7915 -> 7913;
    7913 [label="Identifier"];
    7913 -> 7914;
    7914[label="UISetRespawnStartTime"];
    7915 -> 7916;
    7916[label="("];
    7915 -> 7917;
    7917 [label="Expr"];
    7917 -> 7918;
    7918 [label="Identifier"];
    7918 -> 7919;
    7919[label="Player"];
    7915 -> 7920;
    7920[label=","];
    7915 -> 7921;
    7921 [label="Expr"];
    7921 -> 7922;
    7922 [label="UnOp(UnOp { syntax: 7922, operator: Some(7923), operand: Some(7924) })"];
    7922 -> 7923;
    7923[label="-"];
    7922 -> 7924;
    7924 [label="Expr"];
    7924 -> 7925;
    7925 [label="Literal"];
    7925 -> 7926;
    7926[label="1"];
    7915 -> 7927;
    7927[label=")"];
    7911 -> 7928;
    7928[label=";"];
    7886 -> 7929;
    7929[label="}"];
    6918 -> 7930;
    7930[label="}"];
    4763 -> 7931;
    7931 [label="Statement(Statement { syntax: 7931, statement: Some(7932), semicolon: None })"];
    7931 -> 7932;
    7932 [label="If(If { syntax: 7932, if_: Some(7933), lparen: Some(7934), condition: Some(7935), rparen: Some(7943), body: Some(7944), else_: None })"];
    7932 -> 7933;
    7933[label="if"];
    7932 -> 7934;
    7934[label="("];
    7932 -> 7935;
    7935 [label="Expr"];
    7935 -> 7938;
    7938 [label="BinaryOp(BinaryOp { syntax: 7938, lhs: Some(7936), operator: Some(7939), rhs: Some(7940) })"];
    7938 -> 7936;
    7936 [label="Identifier"];
    7936 -> 7937;
    7937[label="PrevPlayersNbAlive"];
    7938 -> 7939;
    7939[label="!="];
    7938 -> 7940;
    7940 [label="Expr"];
    7940 -> 7941;
    7941 [label="Identifier"];
    7941 -> 7942;
    7942[label="PlayersNbAlive"];
    7932 -> 7943;
    7943[label=")"];
    7932 -> 7944;
    7944 [label="Statement(Statement { syntax: 7944, statement: Some(7945), semicolon: None })"];
    7944 -> 7945;
    7945 [label="Block(Block { syntax: 7945, lbrace: Some(7946), statements: [7947, 7989, 8000, 8304], rbrace: Some(8314) })"];
    7945 -> 7946;
    7946[label="{"];
    7945 -> 7947;
    7947 [label="Statement(Statement { syntax: 7947, statement: Some(7948), semicolon: Some(7988) })"];
    7947 -> 7948;
    7948 [label="Expr"];
    7948 -> 7956;
    7956 [label="FunctionCall(FunctionCall { syntax: 7956, lhs: Some(7951), lparen: Some(7957), args: [(7958, None)], rparen: Some(7987) })"];
    7956 -> 7951;
    7951 [label="BinaryOp(BinaryOp { syntax: 7951, lhs: Some(7949), operator: Some(7952), rhs: Some(7953) })"];
    7951 -> 7949;
    7949 [label="Identifier"];
    7949 -> 7950;
    7950[label="ST2"];
    7951 -> 7952;
    7952[label="::"];
    7951 -> 7953;
    7953 [label="Expr"];
    7953 -> 7954;
    7954 [label="Identifier"];
    7954 -> 7955;
    7955[label="SetFooterText"];
    7956 -> 7957;
    7957[label="("];
    7956 -> 7958;
    7958 [label="Expr"];
    7958 -> 7966;
    7966 [label="FunctionCall(FunctionCall { syntax: 7966, lhs: Some(7961), lparen: Some(7967), args: [(7968, Some(7976)), (7977, None)], rparen: Some(7986) })"];
    7966 -> 7961;
    7961 [label="BinaryOp(BinaryOp { syntax: 7961, lhs: Some(7959), operator: Some(7962), rhs: Some(7963) })"];
    7961 -> 7959;
    7959 [label="Identifier"];
    7959 -> 7960;
    7960[label="TL"];
    7961 -> 7962;
    7962[label="::"];
    7961 -> 7963;
    7963 [label="Expr"];
    7963 -> 7964;
    7964 [label="Identifier"];
    7964 -> 7965;
    7965[label="Compose"];
    7966 -> 7967;
    7967[label="("];
    7966 -> 7968;
    7968 [label="Expr"];
    7968 -> 7971;
    7971 [label="BinaryOp(BinaryOp { syntax: 7971, lhs: Some(7969), operator: Some(7972), rhs: Some(7973) })"];
    7971 -> 7969;
    7969 [label="Literal"];
    7969 -> 7970;
    7970[label="\"%1 \""];
    7971 -> 7972;
    7972[label="^"];
    7971 -> 7973;
    7973 [label="Expr"];
    7973 -> 7974;
    7974 [label="Identifier"];
    7974 -> 7975;
    7975[label="PlayersNbAlive"];
    7966 -> 7976;
    7976[label=","];
    7966 -> 7977;
    7977 [label="Expr"];
    7977 -> 7980;
    7980 [label="FunctionCall(FunctionCall { syntax: 7980, lhs: Some(7978), lparen: Some(7981), args: [(7982, None)], rparen: Some(7985) })"];
    7980 -> 7978;
    7978 [label="Identifier"];
    7978 -> 7979;
    7979[label="_"];
    7980 -> 7981;
    7981[label="("];
    7980 -> 7982;
    7982 [label="Expr"];
    7982 -> 7983;
    7983 [label="Literal"];
    7983 -> 7984;
    7984[label="\"Remaining players: \""];
    7980 -> 7985;
    7985[label=")"];
    7966 -> 7986;
    7986[label=")"];
    7956 -> 7987;
    7987[label=")"];
    7947 -> 7988;
    7988[label=";"];
    7945 -> 7989;
    7989 [label="Statement(Statement { syntax: 7989, statement: Some(7990), semicolon: Some(7999) })"];
    7989 -> 7990;
    7990 [label="Expr"];
    7990 -> 7993;
    7993 [label="FunctionCall(FunctionCall { syntax: 7993, lhs: Some(7991), lparen: Some(7994), args: [(7995, None)], rparen: Some(7998) })"];
    7993 -> 7991;
    7991 [label="Identifier"];
    7991 -> 7992;
    7992[label="UISetNbPlayersAlive"];
    7993 -> 7994;
    7994[label="("];
    7993 -> 7995;
    7995 [label="Expr"];
    7995 -> 7996;
    7996 [label="Identifier"];
    7996 -> 7997;
    7997[label="PlayersNbAlive"];
    7993 -> 7998;
    7998[label=")"];
    7989 -> 7999;
    7999[label=";"];
    7945 -> 8000;
    8000 [label="Statement(Statement { syntax: 8000, statement: Some(8001), semicolon: None })"];
    8000 -> 8001;
    8001 [label="If(If { syntax: 8001, if_: Some(8002), lparen: Some(8003), condition: Some(8004), rparen: Some(8012), body: Some(8013), else_: None })"];
    8001 -> 8002;
    8002[label="if"];
    8001 -> 8003;
    8003[label="("];
    8001 -> 8004;
    8004 [label="Expr"];
    8004 -> 8007;
    8007 [label="BinaryOp(BinaryOp { syntax: 8007, lhs: Some(8005), operator: Some(8008), rhs: Some(8009) })"];
    8007 -> 8005;
    8005 [label="Identifier"];
    8005 -> 8006;
    8006[label="Now"];
    8007 -> 8008;
    8008[label=">"];
    8007 -> 8009;
    8009 [label="Expr"];
    8009 -> 8010;
    8010 [label="Identifier"];
    8010 -> 8011;
    8011[label="StartTime"];
    8001 -> 8012;
    8012[label=")"];
    8001 -> 8013;
    8013 [label="Statement(Statement { syntax: 8013, statement: Some(8014), semicolon: None })"];
    8013 -> 8014;
    8014 [label="Block(Block { syntax: 8014, lbrace: Some(8015), statements: [8016, 8196], rbrace: Some(8303) })"];
    8014 -> 8015;
    8015[label="{"];
    8014 -> 8016;
    8016 [label="Statement(Statement { syntax: 8016, statement: Some(8017), semicolon: None })"];
    8016 -> 8017;
    8017 [label="If(If { syntax: 8017, if_: Some(8018), lparen: Some(8019), condition: Some(8020), rparen: Some(8028), body: Some(8029), else_: None })"];
    8017 -> 8018;
    8018[label="if"];
    8017 -> 8019;
    8019[label="("];
    8017 -> 8020;
    8020 [label="Expr"];
    8020 -> 8023;
    8023 [label="BinaryOp(BinaryOp { syntax: 8023, lhs: Some(8021), operator: Some(8024), rhs: Some(8025) })"];
    8023 -> 8021;
    8021 [label="Identifier"];
    8021 -> 8022;
    8022[label="PlayersNbAlive"];
    8023 -> 8024;
    8024[label="<"];
    8023 -> 8025;
    8025 [label="Expr"];
    8025 -> 8026;
    8026 [label="Identifier"];
    8026 -> 8027;
    8027[label="PrevPlayersNbAlive"];
    8017 -> 8028;
    8028[label=")"];
    8017 -> 8029;
    8029 [label="Statement(Statement { syntax: 8029, statement: Some(8030), semicolon: None })"];
    8029 -> 8030;
    8030 [label="Block(Block { syntax: 8030, lbrace: Some(8031), statements: [8032, 8132], rbrace: Some(8195) })"];
    8030 -> 8031;
    8031[label="{"];
    8030 -> 8032;
    8032 [label="Statement(Statement { syntax: 8032, statement: Some(8033), semicolon: None })"];
    8032 -> 8033;
    8033 [label="Foreach(Foreach { syntax: 8033, foreach: Some(8034), lparen: Some(8035), name1: Some(8036), arrow: None, name2: None, in_: Some(8037), value: Some(8038), rparen: Some(8041), body: Some(8042) })"];
    8033 -> 8034;
    8034[label="foreach"];
    8033 -> 8035;
    8035[label="("];
    8033 -> 8036;
    8036[label="Player"];
    8033 -> 8037;
    8037[label="in"];
    8033 -> 8038;
    8038 [label="Expr"];
    8038 -> 8039;
    8039 [label="Identifier"];
    8039 -> 8040;
    8040[label="Players"];
    8033 -> 8041;
    8041[label=")"];
    8033 -> 8042;
    8042 [label="Statement(Statement { syntax: 8042, statement: Some(8043), semicolon: None })"];
    8042 -> 8043;
    8043 [label="Block(Block { syntax: 8043, lbrace: Some(8044), statements: [8045, 8077, 8106], rbrace: Some(8131) })"];
    8043 -> 8044;
    8044[label="{"];
    8043 -> 8045;
    8045 [label="Statement(Statement { syntax: 8045, statement: Some(8046), semicolon: None })"];
    8045 -> 8046;
    8046 [label="If(If { syntax: 8046, if_: Some(8047), lparen: Some(8048), condition: Some(8049), rparen: Some(8072), body: Some(8073), else_: None })"];
    8046 -> 8047;
    8047[label="if"];
    8046 -> 8048;
    8048[label="("];
    8046 -> 8049;
    8049 [label="Expr"];
    8049 -> 8057;
    8057 [label="BinaryOp(BinaryOp { syntax: 8057, lhs: Some(8052), operator: Some(8058), rhs: Some(8059) })"];
    8057 -> 8052;
    8052 [label="BinaryOp(BinaryOp { syntax: 8052, lhs: Some(8050), operator: Some(8053), rhs: Some(8054) })"];
    8052 -> 8050;
    8050 [label="Identifier"];
    8050 -> 8051;
    8051[label="Player"];
    8052 -> 8053;
    8053[label="."];
    8052 -> 8054;
    8054 [label="Expr"];
    8054 -> 8055;
    8055 [label="Identifier"];
    8055 -> 8056;
    8056[label="SpawnStatus"];
    8057 -> 8058;
    8058[label="!="];
    8057 -> 8059;
    8059 [label="Expr"];
    8059 -> 8062;
    8062 [label="BinaryOp(BinaryOp { syntax: 8062, lhs: Some(8060), operator: Some(8063), rhs: Some(8064) })"];
    8062 -> 8060;
    8060 [label="Identifier"];
    8060 -> 8061;
    8061[label="CSmPlayer"];
    8062 -> 8063;
    8063[label="::"];
    8062 -> 8064;
    8064 [label="Expr"];
    8064 -> 8067;
    8067 [label="BinaryOp(BinaryOp { syntax: 8067, lhs: Some(8065), operator: Some(8068), rhs: Some(8069) })"];
    8067 -> 8065;
    8065 [label="Identifier"];
    8065 -> 8066;
    8066[label="ESpawnStatus"];
    8067 -> 8068;
    8068[label="::"];
    8067 -> 8069;
    8069 [label="Expr"];
    8069 -> 8070;
    8070 [label="Identifier"];
    8070 -> 8071;
    8071[label="Spawned"];
    8046 -> 8072;
    8072[label=")"];
    8046 -> 8073;
    8073 [label="Statement(Statement { syntax: 8073, statement: Some(8074), semicolon: Some(8076) })"];
    8073 -> 8074;
    8074 [label="Continue"];
    8074 -> 8075;
    8075[label="continue"];
    8073 -> 8076;
    8076[label=";"];
    8043 -> 8077;
    8077 [label="Statement(Statement { syntax: 8077, statement: Some(8078), semicolon: Some(8105) })"];
    8077 -> 8078;
    8078 [label="Expr"];
    8078 -> 8086;
    8086 [label="FunctionCall(FunctionCall { syntax: 8086, lhs: Some(8081), lparen: Some(8087), args: [(8088, Some(8096)), (8097, Some(8100)), (8101, None)], rparen: Some(8104) })"];
    8086 -> 8081;
    8081 [label="BinaryOp(BinaryOp { syntax: 8081, lhs: Some(8079), operator: Some(8082), rhs: Some(8083) })"];
    8081 -> 8079;
    8079 [label="Identifier"];
    8079 -> 8080;
    8080[label="TopScores"];
    8081 -> 8082;
    8082[label="::"];
    8081 -> 8083;
    8083 [label="Expr"];
    8083 -> 8084;
    8084 [label="Identifier"];
    8084 -> 8085;
    8085[label="AddPoints"];
    8086 -> 8087;
    8087[label="("];
    8086 -> 8088;
    8088 [label="Expr"];
    8088 -> 8091;
    8091 [label="BinaryOp(BinaryOp { syntax: 8091, lhs: Some(8089), operator: Some(8092), rhs: Some(8093) })"];
    8091 -> 8089;
    8089 [label="Identifier"];
    8089 -> 8090;
    8090[label="Player"];
    8091 -> 8092;
    8092[label="."];
    8091 -> 8093;
    8093 [label="Expr"];
    8093 -> 8094;
    8094 [label="Identifier"];
    8094 -> 8095;
    8095[label="Score"];
    8086 -> 8096;
    8096[label=","];
    8086 -> 8097;
    8097 [label="Expr"];
    8097 -> 8098;
    8098 [label="Literal"];
    8098 -> 8099;
    8099[label="\"Survival\""];
    8086 -> 8100;
    8100[label=","];
    8086 -> 8101;
    8101 [label="Expr"];
    8101 -> 8102;
    8102 [label="Literal"];
    8102 -> 8103;
    8103[label="1"];
    8086 -> 8104;
    8104[label=")"];
    8077 -> 8105;
    8105[label=";"];
    8043 -> 8106;
    8106 [label="Statement(Statement { syntax: 8106, statement: Some(8107), semicolon: Some(8130) })"];
    8106 -> 8107;
    8107 [label="Expr"];
    8107 -> 8115;
    8115 [label="FunctionCall(FunctionCall { syntax: 8115, lhs: Some(8110), lparen: Some(8116), args: [(8117, Some(8125)), (8126, None)], rparen: Some(8129) })"];
    8115 -> 8110;
    8110 [label="BinaryOp(BinaryOp { syntax: 8110, lhs: Some(8108), operator: Some(8111), rhs: Some(8112) })"];
    8110 -> 8108;
    8108 [label="Identifier"];
    8108 -> 8109;
    8109[label="Scores"];
    8110 -> 8111;
    8111[label="::"];
    8110 -> 8112;
    8112 [label="Expr"];
    8112 -> 8113;
    8113 [label="Identifier"];
    8113 -> 8114;
    8114[label="AddPlayerMapPoints"];
    8115 -> 8116;
    8116[label="("];
    8115 -> 8117;
    8117 [label="Expr"];
    8117 -> 8120;
    8120 [label="BinaryOp(BinaryOp { syntax: 8120, lhs: Some(8118), operator: Some(8121), rhs: Some(8122) })"];
    8120 -> 8118;
    8118 [label="Identifier"];
    8118 -> 8119;
    8119[label="Player"];
    8120 -> 8121;
    8121[label="."];
    8120 -> 8122;
    8122 [label="Expr"];
    8122 -> 8123;
    8123 [label="Identifier"];
    8123 -> 8124;
    8124[label="Score"];
    8115 -> 8125;
    8125[label=","];
    8115 -> 8126;
    8126 [label="Expr"];
    8126 -> 8127;
    8127 [label="Identifier"];
    8127 -> 8128;
    8128[label="C_PlayerPointsForSurvival"];
    8115 -> 8129;
    8129[label=")"];
    8106 -> 8130;
    8130[label=";"];
    8043 -> 8131;
    8131[label="}"];
    8030 -> 8132;
    8132 [label="Statement(Statement { syntax: 8132, statement: Some(8133), semicolon: None })"];
    8132 -> 8133;
    8133 [label="If(If { syntax: 8133, if_: Some(8134), lparen: Some(8135), condition: Some(8136), rparen: Some(8144), body: Some(8145), else_: None })"];
    8133 -> 8134;
    8134[label="if"];
    8133 -> 8135;
    8135[label="("];
    8133 -> 8136;
    8136 [label="Expr"];
    8136 -> 8139;
    8139 [label="BinaryOp(BinaryOp { syntax: 8139, lhs: Some(8137), operator: Some(8140), rhs: Some(8141) })"];
    8139 -> 8137;
    8137 [label="Identifier"];
    8137 -> 8138;
    8138[label="PlayersNbAlive"];
    8139 -> 8140;
    8140[label=">="];
    8139 -> 8141;
    8141 [label="Expr"];
    8141 -> 8142;
    8142 [label="Literal"];
    8142 -> 8143;
    8143[label="2"];
    8133 -> 8144;
    8144[label=")"];
    8133 -> 8145;
    8145 [label="Statement(Statement { syntax: 8145, statement: Some(8146), semicolon: Some(8194) })"];
    8145 -> 8146;
    8146 [label="Expr"];
    8146 -> 8154;
    8154 [label="FunctionCall(FunctionCall { syntax: 8154, lhs: Some(8149), lparen: Some(8155), args: [(8156, Some(8185)), (8186, Some(8189)), (8190, None)], rparen: Some(8193) })"];
    8154 -> 8149;
    8149 [label="BinaryOp(BinaryOp { syntax: 8149, lhs: Some(8147), operator: Some(8150), rhs: Some(8151) })"];
    8149 -> 8147;
    8147 [label="Identifier"];
    8147 -> 8148;
    8148[label="Message"];
    8149 -> 8150;
    8150[label="::"];
    8149 -> 8151;
    8151 [label="Expr"];
    8151 -> 8152;
    8152 [label="Identifier"];
    8152 -> 8153;
    8153[label="SendStatusMessage"];
    8154 -> 8155;
    8155[label="("];
    8154 -> 8156;
    8156 [label="Expr"];
    8156 -> 8164;
    8164 [label="FunctionCall(FunctionCall { syntax: 8164, lhs: Some(8159), lparen: Some(8165), args: [(8166, Some(8174)), (8175, None)], rparen: Some(8184) })"];
    8164 -> 8159;
    8159 [label="BinaryOp(BinaryOp { syntax: 8159, lhs: Some(8157), operator: Some(8160), rhs: Some(8161) })"];
    8159 -> 8157;
    8157 [label="Identifier"];
    8157 -> 8158;
    8158[label="TL"];
    8159 -> 8160;
    8160[label="::"];
    8159 -> 8161;
    8161 [label="Expr"];
    8161 -> 8162;
    8162 [label="Identifier"];
    8162 -> 8163;
    8163[label="Compose"];
    8164 -> 8165;
    8165[label="("];
    8164 -> 8166;
    8166 [label="Expr"];
    8166 -> 8169;
    8169 [label="BinaryOp(BinaryOp { syntax: 8169, lhs: Some(8167), operator: Some(8170), rhs: Some(8171) })"];
    8169 -> 8167;
    8167 [label="Literal"];
    8167 -> 8168;
    8168[label="\"%1 \""];
    8169 -> 8170;
    8170[label="^"];
    8169 -> 8171;
    8171 [label="Expr"];
    8171 -> 8172;
    8172 [label="Identifier"];
    8172 -> 8173;
    8173[label="PlayersNbAlive"];
    8164 -> 8174;
    8174[label=","];
    8164 -> 8175;
    8175 [label="Expr"];
    8175 -> 8178;
    8178 [label="FunctionCall(FunctionCall { syntax: 8178, lhs: Some(8176), lparen: Some(8179), args: [(8180, None)], rparen: Some(8183) })"];
    8178 -> 8176;
    8176 [label="Identifier"];
    8176 -> 8177;
    8177[label="_"];
    8178 -> 8179;
    8179[label="("];
    8178 -> 8180;
    8180 [label="Expr"];
    8180 -> 8181;
    8181 [label="Literal"];
    8181 -> 8182;
    8182[label="\"Remaining players: \""];
    8178 -> 8183;
    8183[label=")"];
    8164 -> 8184;
    8184[label=")"];
    8154 -> 8185;
    8185[label=","];
    8154 -> 8186;
    8186 [label="Expr"];
    8186 -> 8187;
    8187 [label="Literal"];
    8187 -> 8188;
    8188[label="4000"];
    8154 -> 8189;
    8189[label=","];
    8154 -> 8190;
    8190 [label="Expr"];
    8190 -> 8191;
    8191 [label="Literal"];
    8191 -> 8192;
    8192[label="2"];
    8154 -> 8193;
    8193[label=")"];
    8145 -> 8194;
    8194[label=";"];
    8030 -> 8195;
    8195[label="}"];
    8014 -> 8196;
    8196 [label="Statement(Statement { syntax: 8196, statement: Some(8197), semicolon: None })"];
    8196 -> 8197;
    8197 [label="If(If { syntax: 8197, if_: Some(8198), lparen: Some(8199), condition: Some(8200), rparen: Some(8219), body: Some(8220), else_: None })"];
    8197 -> 8198;
    8198[label="if"];
    8197 -> 8199;
    8199[label="("];
    8197 -> 8200;
    8200 [label="Expr"];
    8200 -> 8214;
    8214 [label="BinaryOp(BinaryOp { syntax: 8214, lhs: Some(8208), operator: Some(8215), rhs: Some(8216) })"];
    8214 -> 8208;
    8208 [label="FunctionCall(FunctionCall { syntax: 8208, lhs: Some(8203), lparen: Some(8209), args: [(8210, None)], rparen: Some(8213) })"];
    8208 -> 8203;
    8203 [label="BinaryOp(BinaryOp { syntax: 8203, lhs: Some(8201), operator: Some(8204), rhs: Some(8205) })"];
    8203 -> 8201;
    8201 [label="Identifier"];
    8201 -> 8202;
    8202[label="Clans"];
    8203 -> 8204;
    8204[label="::"];
    8203 -> 8205;
    8205 [label="Expr"];
    8205 -> 8206;
    8206 [label="Identifier"];
    8206 -> 8207;
    8207[label="GetNbAliveClans"];
    8208 -> 8209;
    8209[label="("];
    8208 -> 8210;
    8210 [label="Expr"];
    8210 -> 8211;
    8211 [label="Literal"];
    8211 -> 8212;
    8212[label="True"];
    8208 -> 8213;
    8213[label=")"];
    8214 -> 8215;
    8215[label="=="];
    8214 -> 8216;
    8216 [label="Expr"];
    8216 -> 8217;
    8217 [label="Literal"];
    8217 -> 8218;
    8218[label="1"];
    8197 -> 8219;
    8219[label=")"];
    8197 -> 8220;
    8220 [label="Statement(Statement { syntax: 8220, statement: Some(8221), semicolon: None })"];
    8220 -> 8221;
    8221 [label="Block(Block { syntax: 8221, lbrace: Some(8222), statements: [8223, 8294], rbrace: Some(8302) })"];
    8221 -> 8222;
    8222[label="{"];
    8221 -> 8223;
    8223 [label="Statement(Statement { syntax: 8223, statement: Some(8224), semicolon: Some(8293) })"];
    8223 -> 8224;
    8224 [label="Expr"];
    8224 -> 8237;
    8237 [label="FunctionCall(FunctionCall { syntax: 8237, lhs: Some(8227), lparen: Some(8238), args: [(8239, Some(8242)), (8243, Some(8256)), (8257, Some(8260)), (8261, Some(8274)), (8275, Some(8288)), (8289, None)], rparen: Some(8292) })"];
    8237 -> 8227;
    8227 [label="BinaryOp(BinaryOp { syntax: 8227, lhs: Some(8225), operator: Some(8228), rhs: Some(8229) })"];
    8227 -> 8225;
    8225 [label="Identifier"];
    8225 -> 8226;
    8226[label="UIManager"];
    8227 -> 8228;
    8228[label="."];
    8227 -> 8229;
    8229 [label="Expr"];
    8229 -> 8232;
    8232 [label="BinaryOp(BinaryOp { syntax: 8232, lhs: Some(8230), operator: Some(8233), rhs: Some(8234) })"];
    8232 -> 8230;
    8230 [label="Identifier"];
    8230 -> 8231;
    8231[label="UIAll"];
    8232 -> 8233;
    8233[label="."];
    8232 -> 8234;
    8234 [label="Expr"];
    8234 -> 8235;
    8235 [label="Identifier"];
    8235 -> 8236;
    8236[label="SendNotice"];
    8237 -> 8238;
    8238[label="("];
    8237 -> 8239;
    8239 [label="Expr"];
    8239 -> 8240;
    8240 [label="Literal"];
    8240 -> 8241;
    8241[label="\"\""];
    8237 -> 8242;
    8242[label=","];
    8237 -> 8243;
    8243 [label="Expr"];
    8243 -> 8246;
    8246 [label="BinaryOp(BinaryOp { syntax: 8246, lhs: Some(8244), operator: Some(8247), rhs: Some(8248) })"];
    8246 -> 8244;
    8244 [label="Identifier"];
    8244 -> 8245;
    8245[label="CUIConfig"];
    8246 -> 8247;
    8247[label="::"];
    8246 -> 8248;
    8248 [label="Expr"];
    8248 -> 8251;
    8251 [label="BinaryOp(BinaryOp { syntax: 8251, lhs: Some(8249), operator: Some(8252), rhs: Some(8253) })"];
    8251 -> 8249;
    8249 [label="Identifier"];
    8249 -> 8250;
    8250[label="ENoticeLevel"];
    8251 -> 8252;
    8252[label="::"];
    8251 -> 8253;
    8253 [label="Expr"];
    8253 -> 8254;
    8254 [label="Identifier"];
    8254 -> 8255;
    8255[label="Default"];
    8237 -> 8256;
    8256[label=","];
    8237 -> 8257;
    8257 [label="Expr"];
    8257 -> 8258;
    8258 [label="Literal"];
    8258 -> 8259;
    8259[label="Null"];
    8237 -> 8260;
    8260[label=","];
    8237 -> 8261;
    8261 [label="Expr"];
    8261 -> 8264;
    8264 [label="BinaryOp(BinaryOp { syntax: 8264, lhs: Some(8262), operator: Some(8265), rhs: Some(8266) })"];
    8264 -> 8262;
    8262 [label="Identifier"];
    8262 -> 8263;
    8263[label="CUIConfig"];
    8264 -> 8265;
    8265[label="::"];
    8264 -> 8266;
    8266 [label="Expr"];
    8266 -> 8269;
    8269 [label="BinaryOp(BinaryOp { syntax: 8269, lhs: Some(8267), operator: Some(8270), rhs: Some(8271) })"];
    8269 -> 8267;
    8267 [label="Identifier"];
    8267 -> 8268;
    8268[label="EAvatarVariant"];
    8269 -> 8270;
    8270[label="::"];
    8269 -> 8271;
    8271 [label="Expr"];
    8271 -> 8272;
    8272 [label="Identifier"];
    8272 -> 8273;
    8273[label="Default"];
    8237 -> 8274;
    8274[label=","];
    8237 -> 8275;
    8275 [label="Expr"];
    8275 -> 8278;
    8278 [label="BinaryOp(BinaryOp { syntax: 8278, lhs: Some(8276), operator: Some(8279), rhs: Some(8280) })"];
    8278 -> 8276;
    8276 [label="Identifier"];
    8276 -> 8277;
    8277[label="CUIConfig"];
    8278 -> 8279;
    8279[label="::"];
    8278 -> 8280;
    8280 [label="Expr"];
    8280 -> 8283;
    8283 [label="BinaryOp(BinaryOp { syntax: 8283, lhs: Some(8281), operator: Some(8284), rhs: Some(8285) })"];
    8283 -> 8281;
    8281 [label="Identifier"];
    8281 -> 8282;
    8282[label="EUISound"];
    8283 -> 8284;
    8284[label="::"];
    8283 -> 8285;
    8285 [label="Expr"];
    8285 -> 8286;
    8286 [label="Identifier"];
    8286 -> 8287;
    8287[label="VictoryPoint"];
    8237 -> 8288;
    8288[label=","];
    8237 -> 8289;
    8289 [label="Expr"];
    8289 -> 8290;
    8290 [label="Literal"];
    8290 -> 8291;
    8291[label="0"];
    8237 -> 8292;
    8292[label=")"];
    8223 -> 8293;
    8293[label=";"];
    8221 -> 8294;
    8294 [label="Statement(Statement { syntax: 8294, statement: Some(8295), semicolon: Some(8301) })"];
    8294 -> 8295;
    8295 [label="Expr"];
    8295 -> 8298;
    8298 [label="FunctionCall(FunctionCall { syntax: 8298, lhs: Some(8296), lparen: Some(8299), args: [], rparen: Some(8300) })"];
    8298 -> 8296;
    8296 [label="Identifier"];
    8296 -> 8297;
    8297[label="MB_StopMatch"];
    8298 -> 8299;
    8299[label="("];
    8298 -> 8300;
    8300[label=")"];
    8294 -> 8301;
    8301[label=";"];
    8221 -> 8302;
    8302[label="}"];
    8014 -> 8303;
    8303[label="}"];
    7945 -> 8304;
    8304 [label="Statement(Statement { syntax: 8304, statement: Some(8308), semicolon: Some(8313) })"];
    8304 -> 8305;
    8305 [label="Expr"];
    8305 -> 8306;
    8306 [label="Identifier"];
    8306 -> 8307;
    8307[label="PrevPlayersNbAlive"];
    8304 -> 8308;
    8308 [label="Assignment(Assignment { syntax: 8308, lvalue: Some(8305), operator: Some(8309), rvalue: Some(8310) })"];
    8308 -> 8309;
    8309[label="="];
    8308 -> 8310;
    8310 [label="Expr"];
    8310 -> 8311;
    8311 [label="Identifier"];
    8311 -> 8312;
    8312[label="PlayersNbAlive"];
    8304 -> 8313;
    8313[label=";"];
    7945 -> 8314;
    8314[label="}"];
    4763 -> 8315;
    8315 [label="Statement(Statement { syntax: 8315, statement: Some(8316), semicolon: None })"];
    8315 -> 8316;
    8316 [label="Foreach(Foreach { syntax: 8316, foreach: Some(8317), lparen: Some(8318), name1: Some(8319), arrow: None, name2: None, in_: Some(8320), value: Some(8321), rparen: Some(8324), body: Some(8325) })"];
    8316 -> 8317;
    8317[label="foreach"];
    8316 -> 8318;
    8318[label="("];
    8316 -> 8319;
    8319[label="Score"];
    8316 -> 8320;
    8320[label="in"];
    8316 -> 8321;
    8321 [label="Expr"];
    8321 -> 8322;
    8322 [label="Identifier"];
    8322 -> 8323;
    8323[label="Scores"];
    8316 -> 8324;
    8324[label=")"];
    8316 -> 8325;
    8325 [label="Statement(Statement { syntax: 8325, statement: Some(8326), semicolon: None })"];
    8325 -> 8326;
    8326 [label="Block(Block { syntax: 8326, lbrace: Some(8327), statements: [8328, 8349, 8366, 8386], rbrace: Some(8406) })"];
    8326 -> 8327;
    8327[label="{"];
    8326 -> 8328;
    8328 [label="Statement(Statement { syntax: 8328, statement: Some(8329), semicolon: None })"];
    8328 -> 8329;
    8329 [label="VarDec(VarDec { syntax: 8329, declare: Some(8330), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(8331), as_: None, alias: None, for_: None, target: None, assignment: Some(8333), value: Some(8334) })"];
    8329 -> 8330;
    8330[label="declare"];
    8329 -> 8331;
    8331 [label="Type(Type { syntax: 8331, basename: Some(8332), members: [], arrays: [] })"];
    8331 -> 8332;
    8332[label="RoundPoints"];
    8329 -> 8333;
    8333[label="="];
    8329 -> 8334;
    8334 [label="Expr"];
    8334 -> 8342;
    8342 [label="FunctionCall(FunctionCall { syntax: 8342, lhs: Some(8337), lparen: Some(8343), args: [(8344, None)], rparen: Some(8347) })"];
    8342 -> 8337;
    8337 [label="BinaryOp(BinaryOp { syntax: 8337, lhs: Some(8335), operator: Some(8338), rhs: Some(8339) })"];
    8337 -> 8335;
    8335 [label="Identifier"];
    8335 -> 8336;
    8336[label="Scores"];
    8337 -> 8338;
    8338[label="::"];
    8337 -> 8339;
    8339 [label="Expr"];
    8339 -> 8340;
    8340 [label="Identifier"];
    8340 -> 8341;
    8341[label="GetPlayerRoundPoints"];
    8342 -> 8343;
    8343[label="("];
    8342 -> 8344;
    8344 [label="Expr"];
    8344 -> 8345;
    8345 [label="Identifier"];
    8345 -> 8346;
    8346[label="Score"];
    8342 -> 8347;
    8347[label=")"];
    8329 -> 8348;
    8348[label=";"];
    8326 -> 8349;
    8349 [label="Statement(Statement { syntax: 8349, statement: Some(8350), semicolon: None })"];
    8349 -> 8350;
    8350 [label="If(If { syntax: 8350, if_: Some(8351), lparen: Some(8352), condition: Some(8353), rparen: Some(8361), body: Some(8362), else_: None })"];
    8350 -> 8351;
    8351[label="if"];
    8350 -> 8352;
    8352[label="("];
    8350 -> 8353;
    8353 [label="Expr"];
    8353 -> 8356;
    8356 [label="BinaryOp(BinaryOp { syntax: 8356, lhs: Some(8354), operator: Some(8357), rhs: Some(8358) })"];
    8356 -> 8354;
    8354 [label="Identifier"];
    8354 -> 8355;
    8355[label="RoundPoints"];
    8356 -> 8357;
    8357[label="=="];
    8356 -> 8358;
    8358 [label="Expr"];
    8358 -> 8359;
    8359 [label="Literal"];
    8359 -> 8360;
    8360[label="0"];
    8350 -> 8361;
    8361[label=")"];
    8350 -> 8362;
    8362 [label="Statement(Statement { syntax: 8362, statement: Some(8363), semicolon: Some(8365) })"];
    8362 -> 8363;
    8363 [label="Continue"];
    8363 -> 8364;
    8364[label="continue"];
    8362 -> 8365;
    8365[label=";"];
    8326 -> 8366;
    8366 [label="Statement(Statement { syntax: 8366, statement: Some(8367), semicolon: Some(8385) })"];
    8366 -> 8367;
    8367 [label="Expr"];
    8367 -> 8375;
    8375 [label="FunctionCall(FunctionCall { syntax: 8375, lhs: Some(8370), lparen: Some(8376), args: [(8377, Some(8380)), (8381, None)], rparen: Some(8384) })"];
    8375 -> 8370;
    8370 [label="BinaryOp(BinaryOp { syntax: 8370, lhs: Some(8368), operator: Some(8371), rhs: Some(8372) })"];
    8370 -> 8368;
    8368 [label="Identifier"];
    8368 -> 8369;
    8369[label="Scores"];
    8370 -> 8371;
    8371[label="::"];
    8370 -> 8372;
    8372 [label="Expr"];
    8372 -> 8373;
    8373 [label="Identifier"];
    8373 -> 8374;
    8374[label="AddPlayerMapPoints"];
    8375 -> 8376;
    8376[label="("];
    8375 -> 8377;
    8377 [label="Expr"];
    8377 -> 8378;
    8378 [label="Identifier"];
    8378 -> 8379;
    8379[label="Score"];
    8375 -> 8380;
    8380[label=","];
    8375 -> 8381;
    8381 [label="Expr"];
    8381 -> 8382;
    8382 [label="Identifier"];
    8382 -> 8383;
    8383[label="RoundPoints"];
    8375 -> 8384;
    8384[label=")"];
    8366 -> 8385;
    8385[label=";"];
    8326 -> 8386;
    8386 [label="Statement(Statement { syntax: 8386, statement: Some(8387), semicolon: Some(8405) })"];
    8386 -> 8387;
    8387 [label="Expr"];
    8387 -> 8395;
    8395 [label="FunctionCall(FunctionCall { syntax: 8395, lhs: Some(8390), lparen: Some(8396), args: [(8397, Some(8400)), (8401, None)], rparen: Some(8404) })"];
    8395 -> 8390;
    8390 [label="BinaryOp(BinaryOp { syntax: 8390, lhs: Some(8388), operator: Some(8391), rhs: Some(8392) })"];
    8390 -> 8388;
    8388 [label="Identifier"];
    8388 -> 8389;
    8389[label="Scores"];
    8390 -> 8391;
    8391[label="::"];
    8390 -> 8392;
    8392 [label="Expr"];
    8392 -> 8393;
    8393 [label="Identifier"];
    8393 -> 8394;
    8394[label="SetPlayerRoundPoints"];
    8395 -> 8396;
    8396[label="("];
    8395 -> 8397;
    8397 [label="Expr"];
    8397 -> 8398;
    8398 [label="Identifier"];
    8398 -> 8399;
    8399[label="Score"];
    8395 -> 8400;
    8400[label=","];
    8395 -> 8401;
    8401 [label="Expr"];
    8401 -> 8402;
    8402 [label="Literal"];
    8402 -> 8403;
    8403[label="0"];
    8395 -> 8404;
    8404[label=")"];
    8386 -> 8405;
    8405[label=";"];
    8326 -> 8406;
    8406[label="}"];
    4763 -> 8407;
    8407 [label="Statement(Statement { syntax: 8407, statement: Some(8408), semicolon: None })"];
    8407 -> 8408;
    8408 [label="If(If { syntax: 8408, if_: Some(8409), lparen: Some(8410), condition: Some(8411), rparen: Some(8429), body: Some(8430), else_: None })"];
    8408 -> 8409;
    8409[label="if"];
    8408 -> 8410;
    8410[label="("];
    8408 -> 8411;
    8411 [label="Expr"];
    8411 -> 8419;
    8419 [label="BinaryOp(BinaryOp { syntax: 8419, lhs: Some(8414), operator: Some(8420), rhs: Some(8421) })"];
    8419 -> 8414;
    8414 [label="BinaryOp(BinaryOp { syntax: 8414, lhs: Some(8412), operator: Some(8415), rhs: Some(8416) })"];
    8414 -> 8412;
    8412 [label="Identifier"];
    8412 -> 8413;
    8413[label="Now"];
    8414 -> 8415;
    8415[label=">"];
    8414 -> 8416;
    8416 [label="Expr"];
    8416 -> 8417;
    8417 [label="Identifier"];
    8417 -> 8418;
    8418[label="StartTime"];
    8419 -> 8420;
    8420[label="&&"];
    8419 -> 8421;
    8421 [label="Expr"];
    8421 -> 8424;
    8424 [label="BinaryOp(BinaryOp { syntax: 8424, lhs: Some(8422), operator: Some(8425), rhs: Some(8426) })"];
    8424 -> 8422;
    8422 [label="Identifier"];
    8422 -> 8423;
    8423[label="PlayersNbAlive"];
    8424 -> 8425;
    8425[label="<="];
    8424 -> 8426;
    8426 [label="Expr"];
    8426 -> 8427;
    8427 [label="Literal"];
    8427 -> 8428;
    8428[label="1"];
    8408 -> 8429;
    8429[label=")"];
    8408 -> 8430;
    8430 [label="Statement(Statement { syntax: 8430, statement: Some(8431), semicolon: Some(8437) })"];
    8430 -> 8431;
    8431 [label="Expr"];
    8431 -> 8434;
    8434 [label="FunctionCall(FunctionCall { syntax: 8434, lhs: Some(8432), lparen: Some(8435), args: [], rparen: Some(8436) })"];
    8434 -> 8432;
    8432 [label="Identifier"];
    8432 -> 8433;
    8433[label="MB_StopMatch"];
    8434 -> 8435;
    8435[label="("];
    8434 -> 8436;
    8436[label=")"];
    8430 -> 8437;
    8437[label=";"];
    4763 -> 8438;
    8438[label="***"];
    0 -> 8439;
    8439 [label="LabelImpl(LabelImpl { syntax: 8439, stars1: Some(8440), name: Some(8441), stars2: Some(8442), stars3: Some(8443), statements: [8444, 8460, 8480, 8491, 8505, 8513, 8529, 8539, 8549, 8582, 8592, 8900, 8930, 8941, 8971, 8982, 8998, 9020, 9036, 9043, 9088, 9118, 9148, 9168, 9250, 9261, 9291, 9320, 9350], stars4: Some(9370) })"];
    8439 -> 8440;
    8440[label="***"];
    8439 -> 8441;
    8441[label="Match_EndMap"];
    8439 -> 8442;
    8442[label="***"];
    8439 -> 8443;
    8443[label="***"];
    8439 -> 8444;
    8444 [label="Statement(Statement { syntax: 8444, statement: Some(8445), semicolon: Some(8459) })"];
    8444 -> 8445;
    8445 [label="Expr"];
    8445 -> 8453;
    8453 [label="FunctionCall(FunctionCall { syntax: 8453, lhs: Some(8448), lparen: Some(8454), args: [(8455, None)], rparen: Some(8458) })"];
    8453 -> 8448;
    8448 [label="BinaryOp(BinaryOp { syntax: 8448, lhs: Some(8446), operator: Some(8449), rhs: Some(8450) })"];
    8448 -> 8446;
    8446 [label="Identifier"];
    8446 -> 8447;
    8447[label="Layers"];
    8448 -> 8449;
    8449[label="::"];
    8448 -> 8450;
    8450 [label="Expr"];
    8450 -> 8451;
    8451 [label="Identifier"];
    8451 -> 8452;
    8452[label="Detach"];
    8453 -> 8454;
    8454[label="("];
    8453 -> 8455;
    8455 [label="Expr"];
    8455 -> 8456;
    8456 [label="Literal"];
    8456 -> 8457;
    8457[label="\"HungerGames:Interface\""];
    8453 -> 8458;
    8458[label=")"];
    8444 -> 8459;
    8459[label=";"];
    8439 -> 8460;
    8460 [label="Statement(Statement { syntax: 8460, statement: Some(8461), semicolon: Some(8479) })"];
    8460 -> 8461;
    8461 [label="Expr"];
    8461 -> 8469;
    8469 [label="FunctionCall(FunctionCall { syntax: 8469, lhs: Some(8464), lparen: Some(8470), args: [(8471, Some(8474)), (8475, None)], rparen: Some(8478) })"];
    8469 -> 8464;
    8464 [label="BinaryOp(BinaryOp { syntax: 8464, lhs: Some(8462), operator: Some(8465), rhs: Some(8466) })"];
    8464 -> 8462;
    8462 [label="Identifier"];
    8462 -> 8463;
    8463[label="Interfancy"];
    8464 -> 8465;
    8465[label="::"];
    8464 -> 8466;
    8466 [label="Expr"];
    8466 -> 8467;
    8467 [label="Identifier"];
    8467 -> 8468;
    8468[label="SetModuleVisibility"];
    8469 -> 8470;
    8470[label="("];
    8469 -> 8471;
    8471 [label="Expr"];
    8471 -> 8472;
    8472 [label="Literal"];
    8472 -> 8473;
    8473[label="\"Countdown\""];
    8469 -> 8474;
    8474[label=","];
    8469 -> 8475;
    8475 [label="Expr"];
    8475 -> 8476;
    8476 [label="Literal"];
    8476 -> 8477;
    8477[label="False"];
    8469 -> 8478;
    8478[label=")"];
    8460 -> 8479;
    8479[label=";"];
    8439 -> 8480;
    8480 [label="Statement(Statement { syntax: 8480, statement: Some(8481), semicolon: Some(8490) })"];
    8480 -> 8481;
    8481 [label="Expr"];
    8481 -> 8484;
    8484 [label="FunctionCall(FunctionCall { syntax: 8484, lhs: Some(8482), lparen: Some(8485), args: [(8486, None)], rparen: Some(8489) })"];
    8484 -> 8482;
    8482 [label="Identifier"];
    8482 -> 8483;
    8483[label="UISetNbPlayersAlive"];
    8484 -> 8485;
    8485[label="("];
    8484 -> 8486;
    8486 [label="Expr"];
    8486 -> 8487;
    8487 [label="Literal"];
    8487 -> 8488;
    8488[label="0"];
    8484 -> 8489;
    8489[label=")"];
    8480 -> 8490;
    8490[label=";"];
    8439 -> 8491;
    8491 [label="Statement(Statement { syntax: 8491, statement: Some(8492), semicolon: Some(8504) })"];
    8491 -> 8492;
    8492 [label="Expr"];
    8492 -> 8495;
    8495 [label="FunctionCall(FunctionCall { syntax: 8495, lhs: Some(8493), lparen: Some(8496), args: [(8497, None)], rparen: Some(8503) })"];
    8495 -> 8493;
    8493 [label="Identifier"];
    8493 -> 8494;
    8494[label="UISetStartTime"];
    8495 -> 8496;
    8496[label="("];
    8495 -> 8497;
    8497 [label="Expr"];
    8497 -> 8498;
    8498 [label="UnOp(UnOp { syntax: 8498, operator: Some(8499), operand: Some(8500) })"];
    8498 -> 8499;
    8499[label="-"];
    8498 -> 8500;
    8500 [label="Expr"];
    8500 -> 8501;
    8501 [label="Literal"];
    8501 -> 8502;
    8502[label="1"];
    8495 -> 8503;
    8503[label=")"];
    8491 -> 8504;
    8504[label=";"];
    8439 -> 8505;
    8505 [label="Statement(Statement { syntax: 8505, statement: Some(8506), semicolon: Some(8512) })"];
    8505 -> 8506;
    8506 [label="Expr"];
    8506 -> 8509;
    8509 [label="FunctionCall(FunctionCall { syntax: 8509, lhs: Some(8507), lparen: Some(8510), args: [], rparen: Some(8511) })"];
    8509 -> 8507;
    8507 [label="Identifier"];
    8507 -> 8508;
    8508[label="DestroyAllObjects"];
    8509 -> 8510;
    8510[label="("];
    8509 -> 8511;
    8511[label=")"];
    8505 -> 8512;
    8512[label=";"];
    8439 -> 8513;
    8513 [label="Statement(Statement { syntax: 8513, statement: Some(8514), semicolon: Some(8528) })"];
    8513 -> 8514;
    8514 [label="Expr"];
    8514 -> 8522;
    8522 [label="FunctionCall(FunctionCall { syntax: 8522, lhs: Some(8517), lparen: Some(8523), args: [(8524, None)], rparen: Some(8527) })"];
    8522 -> 8517;
    8517 [label="BinaryOp(BinaryOp { syntax: 8517, lhs: Some(8515), operator: Some(8518), rhs: Some(8519) })"];
    8517 -> 8515;
    8515 [label="Identifier"];
    8515 -> 8516;
    8516[label="MiniMap"];
    8517 -> 8518;
    8518[label="::"];
    8517 -> 8519;
    8519 [label="Expr"];
    8519 -> 8520;
    8520 [label="Identifier"];
    8520 -> 8521;
    8521[label="DestroyMarker"];
    8522 -> 8523;
    8523[label="("];
    8522 -> 8524;
    8524 [label="Expr"];
    8524 -> 8525;
    8525 [label="Literal"];
    8525 -> 8526;
    8526[label="\"Goal\""];
    8522 -> 8527;
    8527[label=")"];
    8513 -> 8528;
    8528[label=";"];
    8439 -> 8529;
    8529 [label="Statement(Statement { syntax: 8529, statement: Some(8533), semicolon: Some(8538) })"];
    8529 -> 8530;
    8530 [label="Expr"];
    8530 -> 8531;
    8531 [label="Identifier"];
    8531 -> 8532;
    8532[label="OffZoneRadiusSpeed"];
    8529 -> 8533;
    8533 [label="Assignment(Assignment { syntax: 8533, lvalue: Some(8530), operator: Some(8534), rvalue: Some(8535) })"];
    8533 -> 8534;
    8534[label="="];
    8533 -> 8535;
    8535 [label="Expr"];
    8535 -> 8536;
    8536 [label="Literal"];
    8536 -> 8537;
    8537[label="0."];
    8529 -> 8538;
    8538[label=";"];
    8439 -> 8539;
    8539 [label="Statement(Statement { syntax: 8539, statement: Some(8543), semicolon: Some(8548) })"];
    8539 -> 8540;
    8540 [label="Expr"];
    8540 -> 8541;
    8541 [label="Identifier"];
    8541 -> 8542;
    8542[label="OffZoneRadius"];
    8539 -> 8543;
    8543 [label="Assignment(Assignment { syntax: 8543, lvalue: Some(8540), operator: Some(8544), rvalue: Some(8545) })"];
    8543 -> 8544;
    8544[label="="];
    8543 -> 8545;
    8545 [label="Expr"];
    8545 -> 8546;
    8546 [label="Literal"];
    8546 -> 8547;
    8547[label="0."];
    8539 -> 8548;
    8548[label=";"];
    8439 -> 8549;
    8549 [label="Statement(Statement { syntax: 8549, statement: Some(8550), semicolon: None })"];
    8549 -> 8550;
    8550 [label="If(If { syntax: 8550, if_: Some(8551), lparen: Some(8552), condition: Some(8553), rparen: Some(8561), body: Some(8562), else_: None })"];
    8550 -> 8551;
    8551[label="if"];
    8550 -> 8552;
    8552[label="("];
    8550 -> 8553;
    8553 [label="Expr"];
    8553 -> 8556;
    8556 [label="BinaryOp(BinaryOp { syntax: 8556, lhs: Some(8554), operator: Some(8557), rhs: Some(8558) })"];
    8556 -> 8554;
    8554 [label="Identifier"];
    8554 -> 8555;
    8555[label="CenterGoal"];
    8556 -> 8557;
    8557[label="!="];
    8556 -> 8558;
    8558 [label="Expr"];
    8558 -> 8559;
    8559 [label="Literal"];
    8559 -> 8560;
    8560[label="Null"];
    8550 -> 8561;
    8561[label=")"];
    8550 -> 8562;
    8562 [label="Statement(Statement { syntax: 8562, statement: Some(8576), semicolon: Some(8581) })"];
    8562 -> 8563;
    8563 [label="Expr"];
    8563 -> 8566;
    8566 [label="BinaryOp(BinaryOp { syntax: 8566, lhs: Some(8564), operator: Some(8567), rhs: Some(8568) })"];
    8566 -> 8564;
    8564 [label="Identifier"];
    8564 -> 8565;
    8565[label="CenterGoal"];
    8566 -> 8567;
    8567[label="."];
    8566 -> 8568;
    8568 [label="Expr"];
    8568 -> 8571;
    8571 [label="BinaryOp(BinaryOp { syntax: 8571, lhs: Some(8569), operator: Some(8572), rhs: Some(8573) })"];
    8571 -> 8569;
    8569 [label="Identifier"];
    8569 -> 8570;
    8570[label="Gauge"];
    8571 -> 8572;
    8572[label="."];
    8571 -> 8573;
    8573 [label="Expr"];
    8573 -> 8574;
    8574 [label="Identifier"];
    8574 -> 8575;
    8575[label="Speed"];
    8562 -> 8576;
    8576 [label="Assignment(Assignment { syntax: 8576, lvalue: Some(8563), operator: Some(8577), rvalue: Some(8578) })"];
    8576 -> 8577;
    8577[label="="];
    8576 -> 8578;
    8578 [label="Expr"];
    8578 -> 8579;
    8579 [label="Literal"];
    8579 -> 8580;
    8580[label="0"];
    8562 -> 8581;
    8581[label=";"];
    8439 -> 8582;
    8582 [label="Statement(Statement { syntax: 8582, statement: Some(8583), semicolon: None })"];
    8582 -> 8583;
    8583 [label="VarDec(VarDec { syntax: 8583, declare: Some(8584), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(8585), as_: None, alias: None, for_: None, target: None, assignment: Some(8587), value: Some(8588) })"];
    8583 -> 8584;
    8584[label="declare"];
    8583 -> 8585;
    8585 [label="Type(Type { syntax: 8585, basename: Some(8586), members: [], arrays: [] })"];
    8585 -> 8586;
    8586[label="WinnerId"];
    8583 -> 8587;
    8587[label="="];
    8583 -> 8588;
    8588 [label="Expr"];
    8588 -> 8589;
    8589 [label="Literal"];
    8589 -> 8590;
    8590[label="NullId"];
    8583 -> 8591;
    8591[label=";"];
    8439 -> 8592;
    8592 [label="Statement(Statement { syntax: 8592, statement: Some(8593), semicolon: None })"];
    8592 -> 8593;
    8593 [label="Foreach(Foreach { syntax: 8593, foreach: Some(8594), lparen: Some(8595), name1: Some(8596), arrow: None, name2: None, in_: Some(8597), value: Some(8598), rparen: Some(8601), body: Some(8602) })"];
    8593 -> 8594;
    8594[label="foreach"];
    8593 -> 8595;
    8595[label="("];
    8593 -> 8596;
    8596[label="Player"];
    8593 -> 8597;
    8597[label="in"];
    8593 -> 8598;
    8598 [label="Expr"];
    8598 -> 8599;
    8599 [label="Identifier"];
    8599 -> 8600;
    8600[label="Players"];
    8593 -> 8601;
    8601[label=")"];
    8593 -> 8602;
    8602 [label="Statement(Statement { syntax: 8602, statement: Some(8603), semicolon: None })"];
    8602 -> 8603;
    8603 [label="Block(Block { syntax: 8603, lbrace: Some(8604), statements: [8605, 8622, 8654, 8669, 8679, 8759, 8785, 8800, 8895], rbrace: Some(8899) })"];
    8603 -> 8604;
    8604[label="{"];
    8603 -> 8605;
    8605 [label="Statement(Statement { syntax: 8605, statement: Some(8606), semicolon: None })"];
    8605 -> 8606;
    8606 [label="If(If { syntax: 8606, if_: Some(8607), lparen: Some(8608), condition: Some(8609), rparen: Some(8617), body: Some(8618), else_: None })"];
    8606 -> 8607;
    8607[label="if"];
    8606 -> 8608;
    8608[label="("];
    8606 -> 8609;
    8609 [label="Expr"];
    8609 -> 8612;
    8612 [label="BinaryOp(BinaryOp { syntax: 8612, lhs: Some(8610), operator: Some(8613), rhs: Some(8614) })"];
    8612 -> 8610;
    8610 [label="Identifier"];
    8610 -> 8611;
    8611[label="PlayersNbAlive"];
    8612 -> 8613;
    8613[label="!="];
    8612 -> 8614;
    8614 [label="Expr"];
    8614 -> 8615;
    8615 [label="Literal"];
    8615 -> 8616;
    8616[label="1"];
    8606 -> 8617;
    8617[label=")"];
    8606 -> 8618;
    8618 [label="Statement(Statement { syntax: 8618, statement: Some(8619), semicolon: Some(8621) })"];
    8618 -> 8619;
    8619 [label="Break"];
    8619 -> 8620;
    8620[label="break"];
    8618 -> 8621;
    8621[label=";"];
    8603 -> 8622;
    8622 [label="Statement(Statement { syntax: 8622, statement: Some(8623), semicolon: None })"];
    8622 -> 8623;
    8623 [label="If(If { syntax: 8623, if_: Some(8624), lparen: Some(8625), condition: Some(8626), rparen: Some(8649), body: Some(8650), else_: None })"];
    8623 -> 8624;
    8624[label="if"];
    8623 -> 8625;
    8625[label="("];
    8623 -> 8626;
    8626 [label="Expr"];
    8626 -> 8634;
    8634 [label="BinaryOp(BinaryOp { syntax: 8634, lhs: Some(8629), operator: Some(8635), rhs: Some(8636) })"];
    8634 -> 8629;
    8629 [label="BinaryOp(BinaryOp { syntax: 8629, lhs: Some(8627), operator: Some(8630), rhs: Some(8631) })"];
    8629 -> 8627;
    8627 [label="Identifier"];
    8627 -> 8628;
    8628[label="Player"];
    8629 -> 8630;
    8630[label="."];
    8629 -> 8631;
    8631 [label="Expr"];
    8631 -> 8632;
    8632 [label="Identifier"];
    8632 -> 8633;
    8633[label="SpawnStatus"];
    8634 -> 8635;
    8635[label="!="];
    8634 -> 8636;
    8636 [label="Expr"];
    8636 -> 8639;
    8639 [label="BinaryOp(BinaryOp { syntax: 8639, lhs: Some(8637), operator: Some(8640), rhs: Some(8641) })"];
    8639 -> 8637;
    8637 [label="Identifier"];
    8637 -> 8638;
    8638[label="CSmPlayer"];
    8639 -> 8640;
    8640[label="::"];
    8639 -> 8641;
    8641 [label="Expr"];
    8641 -> 8644;
    8644 [label="BinaryOp(BinaryOp { syntax: 8644, lhs: Some(8642), operator: Some(8645), rhs: Some(8646) })"];
    8644 -> 8642;
    8642 [label="Identifier"];
    8642 -> 8643;
    8643[label="ESpawnStatus"];
    8644 -> 8645;
    8645[label="::"];
    8644 -> 8646;
    8646 [label="Expr"];
    8646 -> 8647;
    8647 [label="Identifier"];
    8647 -> 8648;
    8648[label="Spawned"];
    8623 -> 8649;
    8649[label=")"];
    8623 -> 8650;
    8650 [label="Statement(Statement { syntax: 8650, statement: Some(8651), semicolon: Some(8653) })"];
    8650 -> 8651;
    8651 [label="Continue"];
    8651 -> 8652;
    8652[label="continue"];
    8650 -> 8653;
    8653[label=";"];
    8603 -> 8654;
    8654 [label="Statement(Statement { syntax: 8654, statement: Some(8658), semicolon: Some(8668) })"];
    8654 -> 8655;
    8655 [label="Expr"];
    8655 -> 8656;
    8656 [label="Identifier"];
    8656 -> 8657;
    8657[label="WinnerId"];
    8654 -> 8658;
    8658 [label="Assignment(Assignment { syntax: 8658, lvalue: Some(8655), operator: Some(8659), rvalue: Some(8660) })"];
    8658 -> 8659;
    8659[label="="];
    8658 -> 8660;
    8660 [label="Expr"];
    8660 -> 8663;
    8663 [label="BinaryOp(BinaryOp { syntax: 8663, lhs: Some(8661), operator: Some(8664), rhs: Some(8665) })"];
    8663 -> 8661;
    8661 [label="Identifier"];
    8661 -> 8662;
    8662[label="Player"];
    8663 -> 8664;
    8664[label="."];
    8663 -> 8665;
    8665 [label="Expr"];
    8665 -> 8666;
    8666 [label="Identifier"];
    8666 -> 8667;
    8667[label="Id"];
    8654 -> 8668;
    8668[label=";"];
    8603 -> 8669;
    8669 [label="Statement(Statement { syntax: 8669, statement: Some(8670), semicolon: None })"];
    8669 -> 8670;
    8670 [label="VarDec(VarDec { syntax: 8670, declare: Some(8671), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(8672), as_: None, alias: None, for_: None, target: None, assignment: Some(8674), value: Some(8675) })"];
    8670 -> 8671;
    8671[label="declare"];
    8670 -> 8672;
    8672 [label="Type(Type { syntax: 8672, basename: Some(8673), members: [], arrays: [] })"];
    8672 -> 8673;
    8673[label="MinTargetScore"];
    8670 -> 8674;
    8674[label="="];
    8670 -> 8675;
    8675 [label="Expr"];
    8675 -> 8676;
    8676 [label="Literal"];
    8676 -> 8677;
    8677[label="0"];
    8670 -> 8678;
    8678[label=";"];
    8603 -> 8679;
    8679 [label="Statement(Statement { syntax: 8679, statement: Some(8680), semicolon: None })"];
    8679 -> 8680;
    8680 [label="Foreach(Foreach { syntax: 8680, foreach: Some(8681), lparen: Some(8682), name1: Some(8683), arrow: None, name2: None, in_: Some(8684), value: Some(8685), rparen: Some(8688), body: Some(8689) })"];
    8680 -> 8681;
    8681[label="foreach"];
    8680 -> 8682;
    8682[label="("];
    8680 -> 8683;
    8683[label="Score"];
    8680 -> 8684;
    8684[label="in"];
    8680 -> 8685;
    8685 [label="Expr"];
    8685 -> 8686;
    8686 [label="Identifier"];
    8686 -> 8687;
    8687[label="Scores"];
    8680 -> 8688;
    8688[label=")"];
    8680 -> 8689;
    8689 [label="Statement(Statement { syntax: 8689, statement: Some(8690), semicolon: None })"];
    8689 -> 8690;
    8690 [label="Block(Block { syntax: 8690, lbrace: Some(8691), statements: [8692, 8714, 8735], rbrace: Some(8758) })"];
    8690 -> 8691;
    8691[label="{"];
    8690 -> 8692;
    8692 [label="Statement(Statement { syntax: 8692, statement: Some(8693), semicolon: None })"];
    8692 -> 8693;
    8693 [label="If(If { syntax: 8693, if_: Some(8694), lparen: Some(8695), condition: Some(8696), rparen: Some(8709), body: Some(8710), else_: None })"];
    8693 -> 8694;
    8694[label="if"];
    8693 -> 8695;
    8695[label="("];
    8693 -> 8696;
    8696 [label="Expr"];
    8696 -> 8699;
    8699 [label="BinaryOp(BinaryOp { syntax: 8699, lhs: Some(8697), operator: Some(8700), rhs: Some(8701) })"];
    8699 -> 8697;
    8697 [label="Identifier"];
    8697 -> 8698;
    8698[label="Score"];
    8699 -> 8700;
    8700[label="=="];
    8699 -> 8701;
    8701 [label="Expr"];
    8701 -> 8704;
    8704 [label="BinaryOp(BinaryOp { syntax: 8704, lhs: Some(8702), operator: Some(8705), rhs: Some(8706) })"];
    8704 -> 8702;
    8702 [label="Identifier"];
    8702 -> 8703;
    8703[label="Player"];
    8704 -> 8705;
    8705[label="."];
    8704 -> 8706;
    8706 [label="Expr"];
    8706 -> 8707;
    8707 [label="Identifier"];
    8707 -> 8708;
    8708[label="Score"];
    8693 -> 8709;
    8709[label=")"];
    8693 -> 8710;
    8710 [label="Statement(Statement { syntax: 8710, statement: Some(8711), semicolon: Some(8713) })"];
    8710 -> 8711;
    8711 [label="Continue"];
    8711 -> 8712;
    8712[label="continue"];
    8710 -> 8713;
    8713[label=";"];
    8690 -> 8714;
    8714 [label="Statement(Statement { syntax: 8714, statement: Some(8715), semicolon: None })"];
    8714 -> 8715;
    8715 [label="VarDec(VarDec { syntax: 8715, declare: Some(8716), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(8717), as_: None, alias: None, for_: None, target: None, assignment: Some(8719), value: Some(8720) })"];
    8715 -> 8716;
    8716[label="declare"];
    8715 -> 8717;
    8717 [label="Type(Type { syntax: 8717, basename: Some(8718), members: [], arrays: [] })"];
    8717 -> 8718;
    8718[label="MapPoints"];
    8715 -> 8719;
    8719[label="="];
    8715 -> 8720;
    8720 [label="Expr"];
    8720 -> 8728;
    8728 [label="FunctionCall(FunctionCall { syntax: 8728, lhs: Some(8723), lparen: Some(8729), args: [(8730, None)], rparen: Some(8733) })"];
    8728 -> 8723;
    8723 [label="BinaryOp(BinaryOp { syntax: 8723, lhs: Some(8721), operator: Some(8724), rhs: Some(8725) })"];
    8723 -> 8721;
    8721 [label="Identifier"];
    8721 -> 8722;
    8722[label="Scores"];
    8723 -> 8724;
    8724[label="::"];
    8723 -> 8725;
    8725 [label="Expr"];
    8725 -> 8726;
    8726 [label="Identifier"];
    8726 -> 8727;
    8727[label="GetPlayerMapPoints"];
    8728 -> 8729;
    8729[label="("];
    8728 -> 8730;
    8730 [label="Expr"];
    8730 -> 8731;
    8731 [label="Identifier"];
    8731 -> 8732;
    8732[label="Score"];
    8728 -> 8733;
    8733[label=")"];
    8715 -> 8734;
    8734[label=";"];
    8690 -> 8735;
    8735 [label="Statement(Statement { syntax: 8735, statement: Some(8736), semicolon: None })"];
    8735 -> 8736;
    8736 [label="If(If { syntax: 8736, if_: Some(8737), lparen: Some(8738), condition: Some(8739), rparen: Some(8747), body: Some(8748), else_: None })"];
    8736 -> 8737;
    8737[label="if"];
    8736 -> 8738;
    8738[label="("];
    8736 -> 8739;
    8739 [label="Expr"];
    8739 -> 8742;
    8742 [label="BinaryOp(BinaryOp { syntax: 8742, lhs: Some(8740), operator: Some(8743), rhs: Some(8744) })"];
    8742 -> 8740;
    8740 [label="Identifier"];
    8740 -> 8741;
    8741[label="MapPoints"];
    8742 -> 8743;
    8743[label=">"];
    8742 -> 8744;
    8744 [label="Expr"];
    8744 -> 8745;
    8745 [label="Identifier"];
    8745 -> 8746;
    8746[label="MinTargetScore"];
    8736 -> 8747;
    8747[label=")"];
    8736 -> 8748;
    8748 [label="Statement(Statement { syntax: 8748, statement: Some(8752), semicolon: Some(8757) })"];
    8748 -> 8749;
    8749 [label="Expr"];
    8749 -> 8750;
    8750 [label="Identifier"];
    8750 -> 8751;
    8751[label="MinTargetScore"];
    8748 -> 8752;
    8752 [label="Assignment(Assignment { syntax: 8752, lvalue: Some(8749), operator: Some(8753), rvalue: Some(8754) })"];
    8752 -> 8753;
    8753[label="="];
    8752 -> 8754;
    8754 [label="Expr"];
    8754 -> 8755;
    8755 [label="Identifier"];
    8755 -> 8756;
    8756[label="MapPoints"];
    8748 -> 8757;
    8757[label=";"];
    8690 -> 8758;
    8758[label="}"];
    8603 -> 8759;
    8759 [label="Statement(Statement { syntax: 8759, statement: Some(8760), semicolon: None })"];
    8759 -> 8760;
    8760 [label="VarDec(VarDec { syntax: 8760, declare: Some(8761), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(8762), as_: None, alias: None, for_: None, target: None, assignment: Some(8764), value: Some(8765) })"];
    8760 -> 8761;
    8761[label="declare"];
    8760 -> 8762;
    8762 [label="Type(Type { syntax: 8762, basename: Some(8763), members: [], arrays: [] })"];
    8762 -> 8763;
    8763[label="WinnerMapPoints"];
    8760 -> 8764;
    8764[label="="];
    8760 -> 8765;
    8765 [label="Expr"];
    8765 -> 8773;
    8773 [label="FunctionCall(FunctionCall { syntax: 8773, lhs: Some(8768), lparen: Some(8774), args: [(8775, None)], rparen: Some(8783) })"];
    8773 -> 8768;
    8768 [label="BinaryOp(BinaryOp { syntax: 8768, lhs: Some(8766), operator: Some(8769), rhs: Some(8770) })"];
    8768 -> 8766;
    8766 [label="Identifier"];
    8766 -> 8767;
    8767[label="Scores"];
    8768 -> 8769;
    8769[label="::"];
    8768 -> 8770;
    8770 [label="Expr"];
    8770 -> 8771;
    8771 [label="Identifier"];
    8771 -> 8772;
    8772[label="GetPlayerMapPoints"];
    8773 -> 8774;
    8774[label="("];
    8773 -> 8775;
    8775 [label="Expr"];
    8775 -> 8778;
    8778 [label="BinaryOp(BinaryOp { syntax: 8778, lhs: Some(8776), operator: Some(8779), rhs: Some(8780) })"];
    8778 -> 8776;
    8776 [label="Identifier"];
    8776 -> 8777;
    8777[label="Player"];
    8778 -> 8779;
    8779[label="."];
    8778 -> 8780;
    8780 [label="Expr"];
    8780 -> 8781;
    8781 [label="Identifier"];
    8781 -> 8782;
    8782[label="Score"];
    8773 -> 8783;
    8783[label=")"];
    8760 -> 8784;
    8784[label=";"];
    8603 -> 8785;
    8785 [label="Statement(Statement { syntax: 8785, statement: Some(8786), semicolon: None })"];
    8785 -> 8786;
    8786 [label="VarDec(VarDec { syntax: 8786, declare: Some(8787), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(8788), as_: None, alias: None, for_: None, target: None, assignment: Some(8790), value: Some(8791) })"];
    8786 -> 8787;
    8787[label="declare"];
    8786 -> 8788;
    8788 [label="Type(Type { syntax: 8788, basename: Some(8789), members: [], arrays: [] })"];
    8788 -> 8789;
    8789[label="Difference"];
    8786 -> 8790;
    8790[label="="];
    8786 -> 8791;
    8791 [label="Expr"];
    8791 -> 8794;
    8794 [label="BinaryOp(BinaryOp { syntax: 8794, lhs: Some(8792), operator: Some(8795), rhs: Some(8796) })"];
    8794 -> 8792;
    8792 [label="Identifier"];
    8792 -> 8793;
    8793[label="WinnerMapPoints"];
    8794 -> 8795;
    8795[label="-"];
    8794 -> 8796;
    8796 [label="Expr"];
    8796 -> 8797;
    8797 [label="Identifier"];
    8797 -> 8798;
    8798[label="MinTargetScore"];
    8786 -> 8799;
    8799[label=";"];
    8603 -> 8800;
    8800 [label="Statement(Statement { syntax: 8800, statement: Some(8801), semicolon: None })"];
    8800 -> 8801;
    8801 [label="If(If { syntax: 8801, if_: Some(8802), lparen: Some(8803), condition: Some(8804), rparen: Some(8812), body: Some(8813), else_: Some(8847) })"];
    8801 -> 8802;
    8802[label="if"];
    8801 -> 8803;
    8803[label="("];
    8801 -> 8804;
    8804 [label="Expr"];
    8804 -> 8807;
    8807 [label="BinaryOp(BinaryOp { syntax: 8807, lhs: Some(8805), operator: Some(8808), rhs: Some(8809) })"];
    8807 -> 8805;
    8805 [label="Identifier"];
    8805 -> 8806;
    8806[label="Difference"];
    8807 -> 8808;
    8808[label="<="];
    8807 -> 8809;
    8809 [label="Expr"];
    8809 -> 8810;
    8810 [label="Literal"];
    8810 -> 8811;
    8811[label="0"];
    8801 -> 8812;
    8812[label=")"];
    8801 -> 8813;
    8813 [label="Statement(Statement { syntax: 8813, statement: Some(8814), semicolon: None })"];
    8813 -> 8814;
    8814 [label="Block(Block { syntax: 8814, lbrace: Some(8815), statements: [8816], rbrace: Some(8846) })"];
    8814 -> 8815;
    8815[label="{"];
    8814 -> 8816;
    8816 [label="Statement(Statement { syntax: 8816, statement: Some(8817), semicolon: Some(8845) })"];
    8816 -> 8817;
    8817 [label="Expr"];
    8817 -> 8825;
    8825 [label="FunctionCall(FunctionCall { syntax: 8825, lhs: Some(8820), lparen: Some(8826), args: [(8827, Some(8835)), (8836, None)], rparen: Some(8844) })"];
    8825 -> 8820;
    8820 [label="BinaryOp(BinaryOp { syntax: 8820, lhs: Some(8818), operator: Some(8821), rhs: Some(8822) })"];
    8820 -> 8818;
    8818 [label="Identifier"];
    8818 -> 8819;
    8819[label="Scores"];
    8820 -> 8821;
    8821[label="::"];
    8820 -> 8822;
    8822 [label="Expr"];
    8822 -> 8823;
    8823 [label="Identifier"];
    8823 -> 8824;
    8824[label="SetPlayerMapPoints"];
    8825 -> 8826;
    8826[label="("];
    8825 -> 8827;
    8827 [label="Expr"];
    8827 -> 8830;
    8830 [label="BinaryOp(BinaryOp { syntax: 8830, lhs: Some(8828), operator: Some(8831), rhs: Some(8832) })"];
    8830 -> 8828;
    8828 [label="Identifier"];
    8828 -> 8829;
    8829[label="Player"];
    8830 -> 8831;
    8831[label="."];
    8830 -> 8832;
    8832 [label="Expr"];
    8832 -> 8833;
    8833 [label="Identifier"];
    8833 -> 8834;
    8834[label="Score"];
    8825 -> 8835;
    8835[label=","];
    8825 -> 8836;
    8836 [label="Expr"];
    8836 -> 8839;
    8839 [label="BinaryOp(BinaryOp { syntax: 8839, lhs: Some(8837), operator: Some(8840), rhs: Some(8841) })"];
    8839 -> 8837;
    8837 [label="Identifier"];
    8837 -> 8838;
    8838[label="MinTargetScore"];
    8839 -> 8840;
    8840[label="+"];
    8839 -> 8841;
    8841 [label="Expr"];
    8841 -> 8842;
    8842 [label="Identifier"];
    8842 -> 8843;
    8843[label="C_WinnerMinPointsDiff"];
    8825 -> 8844;
    8844[label=")"];
    8816 -> 8845;
    8845[label=";"];
    8814 -> 8846;
    8846[label="}"];
    8801 -> 8847;
    8847 [label="Else(Else { syntax: 8847, else_: Some(8848), if_: Some(8849), body: None })"];
    8847 -> 8848;
    8848[label="else"];
    8847 -> 8849;
    8849 [label="If(If { syntax: 8849, if_: Some(8850), lparen: Some(8851), condition: Some(8852), rparen: Some(8860), body: Some(8861), else_: None })"];
    8849 -> 8850;
    8850[label="if"];
    8849 -> 8851;
    8851[label="("];
    8849 -> 8852;
    8852 [label="Expr"];
    8852 -> 8855;
    8855 [label="BinaryOp(BinaryOp { syntax: 8855, lhs: Some(8853), operator: Some(8856), rhs: Some(8857) })"];
    8855 -> 8853;
    8853 [label="Identifier"];
    8853 -> 8854;
    8854[label="Difference"];
    8855 -> 8856;
    8856[label="<"];
    8855 -> 8857;
    8857 [label="Expr"];
    8857 -> 8858;
    8858 [label="Identifier"];
    8858 -> 8859;
    8859[label="C_WinnerMinPointsDiff"];
    8849 -> 8860;
    8860[label=")"];
    8849 -> 8861;
    8861 [label="Statement(Statement { syntax: 8861, statement: Some(8862), semicolon: None })"];
    8861 -> 8862;
    8862 [label="Block(Block { syntax: 8862, lbrace: Some(8863), statements: [8864], rbrace: Some(8894) })"];
    8862 -> 8863;
    8863[label="{"];
    8862 -> 8864;
    8864 [label="Statement(Statement { syntax: 8864, statement: Some(8865), semicolon: Some(8893) })"];
    8864 -> 8865;
    8865 [label="Expr"];
    8865 -> 8873;
    8873 [label="FunctionCall(FunctionCall { syntax: 8873, lhs: Some(8868), lparen: Some(8874), args: [(8875, Some(8883)), (8884, None)], rparen: Some(8892) })"];
    8873 -> 8868;
    8868 [label="BinaryOp(BinaryOp { syntax: 8868, lhs: Some(8866), operator: Some(8869), rhs: Some(8870) })"];
    8868 -> 8866;
    8866 [label="Identifier"];
    8866 -> 8867;
    8867[label="Scores"];
    8868 -> 8869;
    8869[label="::"];
    8868 -> 8870;
    8870 [label="Expr"];
    8870 -> 8871;
    8871 [label="Identifier"];
    8871 -> 8872;
    8872[label="AddPlayerMapPoints"];
    8873 -> 8874;
    8874[label="("];
    8873 -> 8875;
    8875 [label="Expr"];
    8875 -> 8878;
    8878 [label="BinaryOp(BinaryOp { syntax: 8878, lhs: Some(8876), operator: Some(8879), rhs: Some(8880) })"];
    8878 -> 8876;
    8876 [label="Identifier"];
    8876 -> 8877;
    8877[label="Player"];
    8878 -> 8879;
    8879[label="."];
    8878 -> 8880;
    8880 [label="Expr"];
    8880 -> 8881;
    8881 [label="Identifier"];
    8881 -> 8882;
    8882[label="Score"];
    8873 -> 8883;
    8883[label=","];
    8873 -> 8884;
    8884 [label="Expr"];
    8884 -> 8887;
    8887 [label="BinaryOp(BinaryOp { syntax: 8887, lhs: Some(8885), operator: Some(8888), rhs: Some(8889) })"];
    8887 -> 8885;
    8885 [label="Identifier"];
    8885 -> 8886;
    8886[label="C_WinnerMinPointsDiff"];
    8887 -> 8888;
    8888[label="-"];
    8887 -> 8889;
    8889 [label="Expr"];
    8889 -> 8890;
    8890 [label="Identifier"];
    8890 -> 8891;
    8891[label="Difference"];
    8873 -> 8892;
    8892[label=")"];
    8864 -> 8893;
    8893[label=";"];
    8862 -> 8894;
    8894[label="}"];
    8603 -> 8895;
    8895 [label="Statement(Statement { syntax: 8895, statement: Some(8896), semicolon: Some(8898) })"];
    8895 -> 8896;
    8896 [label="Break"];
    8896 -> 8897;
    8897[label="break"];
    8895 -> 8898;
    8898[label=";"];
    8603 -> 8899;
    8899[label="}"];
    8439 -> 8900;
    8900 [label="Statement(Statement { syntax: 8900, statement: Some(8914), semicolon: Some(8929) })"];
    8900 -> 8901;
    8901 [label="Expr"];
    8901 -> 8904;
    8904 [label="BinaryOp(BinaryOp { syntax: 8904, lhs: Some(8902), operator: Some(8905), rhs: Some(8906) })"];
    8904 -> 8902;
    8902 [label="Identifier"];
    8902 -> 8903;
    8903[label="UIManager"];
    8904 -> 8905;
    8905[label="."];
    8904 -> 8906;
    8906 [label="Expr"];
    8906 -> 8909;
    8909 [label="BinaryOp(BinaryOp { syntax: 8909, lhs: Some(8907), operator: Some(8910), rhs: Some(8911) })"];
    8909 -> 8907;
    8907 [label="Identifier"];
    8907 -> 8908;
    8908[label="UIAll"];
    8909 -> 8910;
    8910[label="."];
    8909 -> 8911;
    8911 [label="Expr"];
    8911 -> 8912;
    8912 [label="Identifier"];
    8912 -> 8913;
    8913[label="UISequence"];
    8900 -> 8914;
    8914 [label="Assignment(Assignment { syntax: 8914, lvalue: Some(8901), operator: Some(8915), rvalue: Some(8916) })"];
    8914 -> 8915;
    8915[label="="];
    8914 -> 8916;
    8916 [label="Expr"];
    8916 -> 8919;
    8919 [label="BinaryOp(BinaryOp { syntax: 8919, lhs: Some(8917), operator: Some(8920), rhs: Some(8921) })"];
    8919 -> 8917;
    8917 [label="Identifier"];
    8917 -> 8918;
    8918[label="CUIConfig"];
    8919 -> 8920;
    8920[label="::"];
    8919 -> 8921;
    8921 [label="Expr"];
    8921 -> 8924;
    8924 [label="BinaryOp(BinaryOp { syntax: 8924, lhs: Some(8922), operator: Some(8925), rhs: Some(8926) })"];
    8924 -> 8922;
    8922 [label="Identifier"];
    8922 -> 8923;
    8923[label="EUISequence"];
    8924 -> 8925;
    8925[label="::"];
    8924 -> 8926;
    8926 [label="Expr"];
    8926 -> 8927;
    8927 [label="Identifier"];
    8927 -> 8928;
    8928[label="UIInteraction"];
    8900 -> 8929;
    8929[label=";"];
    8439 -> 8930;
    8930 [label="Statement(Statement { syntax: 8930, statement: Some(8931), semicolon: Some(8940) })"];
    8930 -> 8931;
    8931 [label="Expr"];
    8931 -> 8934;
    8934 [label="FunctionCall(FunctionCall { syntax: 8934, lhs: Some(8932), lparen: Some(8935), args: [(8936, None)], rparen: Some(8939) })"];
    8934 -> 8932;
    8932 [label="Identifier"];
    8932 -> 8933;
    8933[label="MB_Sleep"];
    8934 -> 8935;
    8935[label="("];
    8934 -> 8936;
    8936 [label="Expr"];
    8936 -> 8937;
    8937 [label="Literal"];
    8937 -> 8938;
    8938[label="1500"];
    8934 -> 8939;
    8939[label=")"];
    8930 -> 8940;
    8940[label=";"];
    8439 -> 8941;
    8941 [label="Statement(Statement { syntax: 8941, statement: Some(8955), semicolon: Some(8970) })"];
    8941 -> 8942;
    8942 [label="Expr"];
    8942 -> 8945;
    8945 [label="BinaryOp(BinaryOp { syntax: 8945, lhs: Some(8943), operator: Some(8946), rhs: Some(8947) })"];
    8945 -> 8943;
    8943 [label="Identifier"];
    8943 -> 8944;
    8944[label="UIManager"];
    8945 -> 8946;
    8946[label="."];
    8945 -> 8947;
    8947 [label="Expr"];
    8947 -> 8950;
    8950 [label="BinaryOp(BinaryOp { syntax: 8950, lhs: Some(8948), operator: Some(8951), rhs: Some(8952) })"];
    8950 -> 8948;
    8948 [label="Identifier"];
    8948 -> 8949;
    8949[label="UIAll"];
    8950 -> 8951;
    8951[label="."];
    8950 -> 8952;
    8952 [label="Expr"];
    8952 -> 8953;
    8953 [label="Identifier"];
    8953 -> 8954;
    8954[label="UISequence"];
    8941 -> 8955;
    8955 [label="Assignment(Assignment { syntax: 8955, lvalue: Some(8942), operator: Some(8956), rvalue: Some(8957) })"];
    8955 -> 8956;
    8956[label="="];
    8955 -> 8957;
    8957 [label="Expr"];
    8957 -> 8960;
    8960 [label="BinaryOp(BinaryOp { syntax: 8960, lhs: Some(8958), operator: Some(8961), rhs: Some(8962) })"];
    8960 -> 8958;
    8958 [label="Identifier"];
    8958 -> 8959;
    8959[label="CUIConfig"];
    8960 -> 8961;
    8961[label="::"];
    8960 -> 8962;
    8962 [label="Expr"];
    8962 -> 8965;
    8965 [label="BinaryOp(BinaryOp { syntax: 8965, lhs: Some(8963), operator: Some(8966), rhs: Some(8967) })"];
    8965 -> 8963;
    8963 [label="Identifier"];
    8963 -> 8964;
    8964[label="EUISequence"];
    8965 -> 8966;
    8966[label="::"];
    8965 -> 8967;
    8967 [label="Expr"];
    8967 -> 8968;
    8968 [label="Identifier"];
    8968 -> 8969;
    8969[label="EndRound"];
    8941 -> 8970;
    8970[label=";"];
    8439 -> 8971;
    8971 [label="Statement(Statement { syntax: 8971, statement: Some(8972), semicolon: Some(8981) })"];
    8971 -> 8972;
    8972 [label="Expr"];
    8972 -> 8975;
    8975 [label="FunctionCall(FunctionCall { syntax: 8975, lhs: Some(8973), lparen: Some(8976), args: [(8977, None)], rparen: Some(8980) })"];
    8975 -> 8973;
    8973 [label="Identifier"];
    8973 -> 8974;
    8974[label="MB_Sleep"];
    8975 -> 8976;
    8976[label="("];
    8975 -> 8977;
    8977 [label="Expr"];
    8977 -> 8978;
    8978 [label="Literal"];
    8978 -> 8979;
    8979[label="1500"];
    8975 -> 8980;
    8980[label=")"];
    8971 -> 8981;
    8981[label=";"];
    8439 -> 8982;
    8982 [label="Statement(Statement { syntax: 8982, statement: Some(8983), semicolon: Some(8997) })"];
    8982 -> 8983;
    8983 [label="Expr"];
    8983 -> 8991;
    8991 [label="FunctionCall(FunctionCall { syntax: 8991, lhs: Some(8986), lparen: Some(8992), args: [(8993, None)], rparen: Some(8996) })"];
    8991 -> 8986;
    8986 [label="BinaryOp(BinaryOp { syntax: 8986, lhs: Some(8984), operator: Some(8987), rhs: Some(8988) })"];
    8986 -> 8984;
    8984 [label="Identifier"];
    8984 -> 8985;
    8985[label="Layers"];
    8986 -> 8987;
    8987[label="::"];
    8986 -> 8988;
    8988 [label="Expr"];
    8988 -> 8989;
    8989 [label="Identifier"];
    8989 -> 8990;
    8990[label="Detach"];
    8991 -> 8992;
    8992[label="("];
    8991 -> 8993;
    8993 [label="Expr"];
    8993 -> 8994;
    8994 [label="Literal"];
    8994 -> 8995;
    8995[label="\"HungerGames:Statistics\""];
    8991 -> 8996;
    8996[label=")"];
    8982 -> 8997;
    8997[label=";"];
    8439 -> 8998;
    8998 [label="Statement(Statement { syntax: 8998, statement: Some(8999), semicolon: Some(9019) })"];
    8998 -> 8999;
    8999 [label="Expr"];
    8999 -> 9007;
    9007 [label="FunctionCall(FunctionCall { syntax: 9007, lhs: Some(9002), lparen: Some(9008), args: [(9009, None)], rparen: Some(9018) })"];
    9007 -> 9002;
    9002 [label="BinaryOp(BinaryOp { syntax: 9002, lhs: Some(9000), operator: Some(9003), rhs: Some(9004) })"];
    9002 -> 9000;
    9000 [label="Identifier"];
    9000 -> 9001;
    9001[label="ST2"];
    9002 -> 9003;
    9003[label="::"];
    9002 -> 9004;
    9004 [label="Expr"];
    9004 -> 9005;
    9005 [label="Identifier"];
    9005 -> 9006;
    9006[label="SetPos"];
    9007 -> 9008;
    9008[label="("];
    9007 -> 9009;
    9009 [label="Expr"];
    9009 -> 9012;
    9012 [label="ArrayAccess(ArrayAccess { syntax: 9012, lhs: Some(9010), lsquare: Some(9013), index: Some(9014), rsquare: Some(9017) })"];
    9012 -> 9010;
    9010 [label="Identifier"];
    9010 -> 9011;
    9011[label="C_ScoresTablePosition"];
    9012 -> 9013;
    9013[label="["];
    9012 -> 9014;
    9014 [label="Expr"];
    9014 -> 9015;
    9015 [label="Literal"];
    9015 -> 9016;
    9016[label="False"];
    9012 -> 9017;
    9017[label="]"];
    9007 -> 9018;
    9018[label=")"];
    8998 -> 9019;
    9019[label=";"];
    8439 -> 9020;
    9020 [label="Statement(Statement { syntax: 9020, statement: Some(9021), semicolon: Some(9035) })"];
    9020 -> 9021;
    9021 [label="Expr"];
    9021 -> 9029;
    9029 [label="FunctionCall(FunctionCall { syntax: 9029, lhs: Some(9024), lparen: Some(9030), args: [(9031, None)], rparen: Some(9034) })"];
    9029 -> 9024;
    9024 [label="BinaryOp(BinaryOp { syntax: 9024, lhs: Some(9022), operator: Some(9025), rhs: Some(9026) })"];
    9024 -> 9022;
    9022 [label="Identifier"];
    9022 -> 9023;
    9023[label="ST2"];
    9024 -> 9025;
    9025[label="::"];
    9024 -> 9026;
    9026 [label="Expr"];
    9026 -> 9027;
    9027 [label="Identifier"];
    9027 -> 9028;
    9028[label="Build"];
    9029 -> 9030;
    9030[label="("];
    9029 -> 9031;
    9031 [label="Expr"];
    9031 -> 9032;
    9032 [label="Literal"];
    9032 -> 9033;
    9033[label="\"SM\""];
    9029 -> 9034;
    9034[label=")"];
    9020 -> 9035;
    9035[label=";"];
    8439 -> 9036;
    9036 [label="Statement(Statement { syntax: 9036, statement: Some(9037), semicolon: None })"];
    9036 -> 9037;
    9037 [label="VarDec(VarDec { syntax: 9037, declare: Some(9038), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(9039), name: Some(9041), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    9037 -> 9038;
    9038[label="declare"];
    9037 -> 9039;
    9039 [label="Type(Type { syntax: 9039, basename: Some(9040), members: [], arrays: [] })"];
    9039 -> 9040;
    9040[label="Text"];
    9037 -> 9041;
    9041[label="WinnerName"];
    9037 -> 9042;
    9042[label=";"];
    8439 -> 9043;
    9043 [label="Statement(Statement { syntax: 9043, statement: Some(9044), semicolon: None })"];
    9043 -> 9044;
    9044 [label="If(If { syntax: 9044, if_: Some(9045), lparen: Some(9046), condition: Some(9047), rparen: Some(9061), body: Some(9062), else_: None })"];
    9044 -> 9045;
    9045[label="if"];
    9044 -> 9046;
    9046[label="("];
    9044 -> 9047;
    9047 [label="Expr"];
    9047 -> 9055;
    9055 [label="FunctionCall(FunctionCall { syntax: 9055, lhs: Some(9050), lparen: Some(9056), args: [(9057, None)], rparen: Some(9060) })"];
    9055 -> 9050;
    9050 [label="BinaryOp(BinaryOp { syntax: 9050, lhs: Some(9048), operator: Some(9051), rhs: Some(9052) })"];
    9050 -> 9048;
    9048 [label="Identifier"];
    9048 -> 9049;
    9049[label="Players"];
    9050 -> 9051;
    9051[label="."];
    9050 -> 9052;
    9052 [label="Expr"];
    9052 -> 9053;
    9053 [label="Identifier"];
    9053 -> 9054;
    9054[label="existskey"];
    9055 -> 9056;
    9056[label="("];
    9055 -> 9057;
    9057 [label="Expr"];
    9057 -> 9058;
    9058 [label="Identifier"];
    9058 -> 9059;
    9059[label="WinnerId"];
    9055 -> 9060;
    9060[label=")"];
    9044 -> 9061;
    9061[label=")"];
    9044 -> 9062;
    9062 [label="Statement(Statement { syntax: 9062, statement: Some(9066), semicolon: Some(9087) })"];
    9062 -> 9063;
    9063 [label="Expr"];
    9063 -> 9064;
    9064 [label="Identifier"];
    9064 -> 9065;
    9065[label="WinnerName"];
    9062 -> 9066;
    9066 [label="Assignment(Assignment { syntax: 9066, lvalue: Some(9063), operator: Some(9067), rvalue: Some(9068) })"];
    9066 -> 9067;
    9067[label="="];
    9066 -> 9068;
    9068 [label="Expr"];
    9068 -> 9077;
    9077 [label="BinaryOp(BinaryOp { syntax: 9077, lhs: Some(9071), operator: Some(9078), rhs: Some(9079) })"];
    9077 -> 9071;
    9071 [label="ArrayAccess(ArrayAccess { syntax: 9071, lhs: Some(9069), lsquare: Some(9072), index: Some(9073), rsquare: Some(9076) })"];
    9071 -> 9069;
    9069 [label="Identifier"];
    9069 -> 9070;
    9070[label="Players"];
    9071 -> 9072;
    9072[label="["];
    9071 -> 9073;
    9073 [label="Expr"];
    9073 -> 9074;
    9074 [label="Identifier"];
    9074 -> 9075;
    9075[label="WinnerId"];
    9071 -> 9076;
    9076[label="]"];
    9077 -> 9078;
    9078[label="."];
    9077 -> 9079;
    9079 [label="Expr"];
    9079 -> 9082;
    9082 [label="BinaryOp(BinaryOp { syntax: 9082, lhs: Some(9080), operator: Some(9083), rhs: Some(9084) })"];
    9082 -> 9080;
    9080 [label="Identifier"];
    9080 -> 9081;
    9081[label="User"];
    9082 -> 9083;
    9083[label="."];
    9082 -> 9084;
    9084 [label="Expr"];
    9084 -> 9085;
    9085 [label="Identifier"];
    9085 -> 9086;
    9086[label="Name"];
    9062 -> 9087;
    9087[label=";"];
    8439 -> 9088;
    9088 [label="Statement(Statement { syntax: 9088, statement: Some(9102), semicolon: Some(9117) })"];
    9088 -> 9089;
    9089 [label="Expr"];
    9089 -> 9092;
    9092 [label="BinaryOp(BinaryOp { syntax: 9092, lhs: Some(9090), operator: Some(9093), rhs: Some(9094) })"];
    9092 -> 9090;
    9090 [label="Identifier"];
    9090 -> 9091;
    9091[label="UIManager"];
    9092 -> 9093;
    9093[label="."];
    9092 -> 9094;
    9094 [label="Expr"];
    9094 -> 9097;
    9097 [label="BinaryOp(BinaryOp { syntax: 9097, lhs: Some(9095), operator: Some(9098), rhs: Some(9099) })"];
    9097 -> 9095;
    9095 [label="Identifier"];
    9095 -> 9096;
    9096[label="UIAll"];
    9097 -> 9098;
    9098[label="."];
    9097 -> 9099;
    9099 [label="Expr"];
    9099 -> 9100;
    9100 [label="Identifier"];
    9100 -> 9101;
    9101[label="ScoreTableVisibility"];
    9088 -> 9102;
    9102 [label="Assignment(Assignment { syntax: 9102, lvalue: Some(9089), operator: Some(9103), rvalue: Some(9104) })"];
    9102 -> 9103;
    9103[label="="];
    9102 -> 9104;
    9104 [label="Expr"];
    9104 -> 9107;
    9107 [label="BinaryOp(BinaryOp { syntax: 9107, lhs: Some(9105), operator: Some(9108), rhs: Some(9109) })"];
    9107 -> 9105;
    9105 [label="Identifier"];
    9105 -> 9106;
    9106[label="CUIConfig"];
    9107 -> 9108;
    9108[label="::"];
    9107 -> 9109;
    9109 [label="Expr"];
    9109 -> 9112;
    9112 [label="BinaryOp(BinaryOp { syntax: 9112, lhs: Some(9110), operator: Some(9113), rhs: Some(9114) })"];
    9112 -> 9110;
    9110 [label="Identifier"];
    9110 -> 9111;
    9111[label="EVisibility"];
    9112 -> 9113;
    9113[label="::"];
    9112 -> 9114;
    9114 [label="Expr"];
    9114 -> 9115;
    9115 [label="Identifier"];
    9115 -> 9116;
    9116[label="ForcedVisible"];
    9088 -> 9117;
    9117[label=";"];
    8439 -> 9118;
    9118 [label="Statement(Statement { syntax: 9118, statement: Some(9132), semicolon: Some(9147) })"];
    9118 -> 9119;
    9119 [label="Expr"];
    9119 -> 9122;
    9122 [label="BinaryOp(BinaryOp { syntax: 9122, lhs: Some(9120), operator: Some(9123), rhs: Some(9124) })"];
    9122 -> 9120;
    9120 [label="Identifier"];
    9120 -> 9121;
    9121[label="UIManager"];
    9122 -> 9123;
    9123[label="."];
    9122 -> 9124;
    9124 [label="Expr"];
    9124 -> 9127;
    9127 [label="BinaryOp(BinaryOp { syntax: 9127, lhs: Some(9125), operator: Some(9128), rhs: Some(9129) })"];
    9127 -> 9125;
    9125 [label="Identifier"];
    9125 -> 9126;
    9126[label="UIAll"];
    9127 -> 9128;
    9128[label="."];
    9127 -> 9129;
    9129 [label="Expr"];
    9129 -> 9130;
    9130 [label="Identifier"];
    9130 -> 9131;
    9131[label="BigMessageSound"];
    9118 -> 9132;
    9132 [label="Assignment(Assignment { syntax: 9132, lvalue: Some(9119), operator: Some(9133), rvalue: Some(9134) })"];
    9132 -> 9133;
    9133[label="="];
    9132 -> 9134;
    9134 [label="Expr"];
    9134 -> 9137;
    9137 [label="BinaryOp(BinaryOp { syntax: 9137, lhs: Some(9135), operator: Some(9138), rhs: Some(9139) })"];
    9137 -> 9135;
    9135 [label="Identifier"];
    9135 -> 9136;
    9136[label="CUIConfig"];
    9137 -> 9138;
    9138[label="::"];
    9137 -> 9139;
    9139 [label="Expr"];
    9139 -> 9142;
    9142 [label="BinaryOp(BinaryOp { syntax: 9142, lhs: Some(9140), operator: Some(9143), rhs: Some(9144) })"];
    9142 -> 9140;
    9140 [label="Identifier"];
    9140 -> 9141;
    9141[label="EUISound"];
    9142 -> 9143;
    9143[label="::"];
    9142 -> 9144;
    9144 [label="Expr"];
    9144 -> 9145;
    9145 [label="Identifier"];
    9145 -> 9146;
    9146[label="EndRound"];
    9118 -> 9147;
    9147[label=";"];
    8439 -> 9148;
    9148 [label="Statement(Statement { syntax: 9148, statement: Some(9162), semicolon: Some(9167) })"];
    9148 -> 9149;
    9149 [label="Expr"];
    9149 -> 9152;
    9152 [label="BinaryOp(BinaryOp { syntax: 9152, lhs: Some(9150), operator: Some(9153), rhs: Some(9154) })"];
    9152 -> 9150;
    9150 [label="Identifier"];
    9150 -> 9151;
    9151[label="UIManager"];
    9152 -> 9153;
    9153[label="."];
    9152 -> 9154;
    9154 [label="Expr"];
    9154 -> 9157;
    9157 [label="BinaryOp(BinaryOp { syntax: 9157, lhs: Some(9155), operator: Some(9158), rhs: Some(9159) })"];
    9157 -> 9155;
    9155 [label="Identifier"];
    9155 -> 9156;
    9156[label="UIAll"];
    9157 -> 9158;
    9158[label="."];
    9157 -> 9159;
    9159 [label="Expr"];
    9159 -> 9160;
    9160 [label="Identifier"];
    9160 -> 9161;
    9161[label="BigMessageSoundVariant"];
    9148 -> 9162;
    9162 [label="Assignment(Assignment { syntax: 9162, lvalue: Some(9149), operator: Some(9163), rvalue: Some(9164) })"];
    9162 -> 9163;
    9163[label="="];
    9162 -> 9164;
    9164 [label="Expr"];
    9164 -> 9165;
    9165 [label="Literal"];
    9165 -> 9166;
    9166[label="0"];
    9148 -> 9167;
    9167[label=";"];
    8439 -> 9168;
    9168 [label="Statement(Statement { syntax: 9168, statement: Some(9169), semicolon: None })"];
    9168 -> 9169;
    9169 [label="If(If { syntax: 9169, if_: Some(9170), lparen: Some(9171), condition: Some(9172), rparen: Some(9180), body: Some(9181), else_: Some(9207) })"];
    9169 -> 9170;
    9170[label="if"];
    9169 -> 9171;
    9171[label="("];
    9169 -> 9172;
    9172 [label="Expr"];
    9172 -> 9175;
    9175 [label="BinaryOp(BinaryOp { syntax: 9175, lhs: Some(9173), operator: Some(9176), rhs: Some(9177) })"];
    9175 -> 9173;
    9173 [label="Identifier"];
    9173 -> 9174;
    9174[label="WinnerName"];
    9175 -> 9176;
    9176[label="=="];
    9175 -> 9177;
    9177 [label="Expr"];
    9177 -> 9178;
    9178 [label="Literal"];
    9178 -> 9179;
    9179[label="\"\""];
    9169 -> 9180;
    9180[label=")"];
    9169 -> 9181;
    9181 [label="Statement(Statement { syntax: 9181, statement: Some(9195), semicolon: Some(9206) })"];
    9181 -> 9182;
    9182 [label="Expr"];
    9182 -> 9185;
    9185 [label="BinaryOp(BinaryOp { syntax: 9185, lhs: Some(9183), operator: Some(9186), rhs: Some(9187) })"];
    9185 -> 9183;
    9183 [label="Identifier"];
    9183 -> 9184;
    9184[label="UIManager"];
    9185 -> 9186;
    9186[label="."];
    9185 -> 9187;
    9187 [label="Expr"];
    9187 -> 9190;
    9190 [label="BinaryOp(BinaryOp { syntax: 9190, lhs: Some(9188), operator: Some(9191), rhs: Some(9192) })"];
    9190 -> 9188;
    9188 [label="Identifier"];
    9188 -> 9189;
    9189[label="UIAll"];
    9190 -> 9191;
    9191[label="."];
    9190 -> 9192;
    9192 [label="Expr"];
    9192 -> 9193;
    9193 [label="Identifier"];
    9193 -> 9194;
    9194[label="BigMessage"];
    9181 -> 9195;
    9195 [label="Assignment(Assignment { syntax: 9195, lvalue: Some(9182), operator: Some(9196), rvalue: Some(9197) })"];
    9195 -> 9196;
    9196[label="="];
    9195 -> 9197;
    9197 [label="Expr"];
    9197 -> 9200;
    9200 [label="FunctionCall(FunctionCall { syntax: 9200, lhs: Some(9198), lparen: Some(9201), args: [(9202, None)], rparen: Some(9205) })"];
    9200 -> 9198;
    9198 [label="Identifier"];
    9198 -> 9199;
    9199[label="_"];
    9200 -> 9201;
    9201[label="("];
    9200 -> 9202;
    9202 [label="Expr"];
    9202 -> 9203;
    9203 [label="Literal"];
    9203 -> 9204;
    9204[label="\"|Match|Draw\""];
    9200 -> 9205;
    9205[label=")"];
    9181 -> 9206;
    9206[label=";"];
    9169 -> 9207;
    9207 [label="Else(Else { syntax: 9207, else_: Some(9208), if_: None, body: Some(9209) })"];
    9207 -> 9208;
    9208[label="else"];
    9207 -> 9209;
    9209 [label="Statement(Statement { syntax: 9209, statement: Some(9223), semicolon: Some(9249) })"];
    9209 -> 9210;
    9210 [label="Expr"];
    9210 -> 9213;
    9213 [label="BinaryOp(BinaryOp { syntax: 9213, lhs: Some(9211), operator: Some(9214), rhs: Some(9215) })"];
    9213 -> 9211;
    9211 [label="Identifier"];
    9211 -> 9212;
    9212[label="UIManager"];
    9213 -> 9214;
    9214[label="."];
    9213 -> 9215;
    9215 [label="Expr"];
    9215 -> 9218;
    9218 [label="BinaryOp(BinaryOp { syntax: 9218, lhs: Some(9216), operator: Some(9219), rhs: Some(9220) })"];
    9218 -> 9216;
    9216 [label="Identifier"];
    9216 -> 9217;
    9217[label="UIAll"];
    9218 -> 9219;
    9219[label="."];
    9218 -> 9220;
    9220 [label="Expr"];
    9220 -> 9221;
    9221 [label="Identifier"];
    9221 -> 9222;
    9222[label="BigMessage"];
    9209 -> 9223;
    9223 [label="Assignment(Assignment { syntax: 9223, lvalue: Some(9210), operator: Some(9224), rvalue: Some(9225) })"];
    9223 -> 9224;
    9224[label="="];
    9223 -> 9225;
    9225 [label="Expr"];
    9225 -> 9233;
    9233 [label="FunctionCall(FunctionCall { syntax: 9233, lhs: Some(9228), lparen: Some(9234), args: [(9235, Some(9244)), (9245, None)], rparen: Some(9248) })"];
    9233 -> 9228;
    9228 [label="BinaryOp(BinaryOp { syntax: 9228, lhs: Some(9226), operator: Some(9229), rhs: Some(9230) })"];
    9228 -> 9226;
    9226 [label="Identifier"];
    9226 -> 9227;
    9227[label="TL"];
    9228 -> 9229;
    9229[label="::"];
    9228 -> 9230;
    9230 [label="Expr"];
    9230 -> 9231;
    9231 [label="Identifier"];
    9231 -> 9232;
    9232[label="Compose"];
    9233 -> 9234;
    9234[label="("];
    9233 -> 9235;
    9235 [label="Expr"];
    9235 -> 9238;
    9238 [label="FunctionCall(FunctionCall { syntax: 9238, lhs: Some(9236), lparen: Some(9239), args: [(9240, None)], rparen: Some(9243) })"];
    9238 -> 9236;
    9236 [label="Identifier"];
    9236 -> 9237;
    9237[label="_"];
    9238 -> 9239;
    9239[label="("];
    9238 -> 9240;
    9240 [label="Expr"];
    9240 -> 9241;
    9241 [label="Literal"];
    9241 -> 9242;
    9242[label="\"$<%1$> wins the match!\""];
    9238 -> 9243;
    9243[label=")"];
    9233 -> 9244;
    9244[label=","];
    9233 -> 9245;
    9245 [label="Expr"];
    9245 -> 9246;
    9246 [label="Identifier"];
    9246 -> 9247;
    9247[label="WinnerName"];
    9233 -> 9248;
    9248[label=")"];
    9209 -> 9249;
    9249[label=";"];
    8439 -> 9250;
    9250 [label="Statement(Statement { syntax: 9250, statement: Some(9251), semicolon: Some(9260) })"];
    9250 -> 9251;
    9251 [label="Expr"];
    9251 -> 9254;
    9254 [label="FunctionCall(FunctionCall { syntax: 9254, lhs: Some(9252), lparen: Some(9255), args: [(9256, None)], rparen: Some(9259) })"];
    9254 -> 9252;
    9252 [label="Identifier"];
    9252 -> 9253;
    9253[label="MB_Sleep"];
    9254 -> 9255;
    9255[label="("];
    9254 -> 9256;
    9256 [label="Expr"];
    9256 -> 9257;
    9257 [label="Literal"];
    9257 -> 9258;
    9258[label="6000"];
    9254 -> 9259;
    9259[label=")"];
    9250 -> 9260;
    9260[label=";"];
    8439 -> 9261;
    9261 [label="Statement(Statement { syntax: 9261, statement: Some(9275), semicolon: Some(9290) })"];
    9261 -> 9262;
    9262 [label="Expr"];
    9262 -> 9265;
    9265 [label="BinaryOp(BinaryOp { syntax: 9265, lhs: Some(9263), operator: Some(9266), rhs: Some(9267) })"];
    9265 -> 9263;
    9263 [label="Identifier"];
    9263 -> 9264;
    9264[label="UIManager"];
    9265 -> 9266;
    9266[label="."];
    9265 -> 9267;
    9267 [label="Expr"];
    9267 -> 9270;
    9270 [label="BinaryOp(BinaryOp { syntax: 9270, lhs: Some(9268), operator: Some(9271), rhs: Some(9272) })"];
    9270 -> 9268;
    9268 [label="Identifier"];
    9268 -> 9269;
    9269[label="UIAll"];
    9270 -> 9271;
    9271[label="."];
    9270 -> 9272;
    9272 [label="Expr"];
    9272 -> 9273;
    9273 [label="Identifier"];
    9273 -> 9274;
    9274[label="UISequence"];
    9261 -> 9275;
    9275 [label="Assignment(Assignment { syntax: 9275, lvalue: Some(9262), operator: Some(9276), rvalue: Some(9277) })"];
    9275 -> 9276;
    9276[label="="];
    9275 -> 9277;
    9277 [label="Expr"];
    9277 -> 9280;
    9280 [label="BinaryOp(BinaryOp { syntax: 9280, lhs: Some(9278), operator: Some(9281), rhs: Some(9282) })"];
    9280 -> 9278;
    9278 [label="Identifier"];
    9278 -> 9279;
    9279[label="CUIConfig"];
    9280 -> 9281;
    9281[label="::"];
    9280 -> 9282;
    9282 [label="Expr"];
    9282 -> 9285;
    9285 [label="BinaryOp(BinaryOp { syntax: 9285, lhs: Some(9283), operator: Some(9286), rhs: Some(9287) })"];
    9285 -> 9283;
    9283 [label="Identifier"];
    9283 -> 9284;
    9284[label="EUISequence"];
    9285 -> 9286;
    9286[label="::"];
    9285 -> 9287;
    9287 [label="Expr"];
    9287 -> 9288;
    9288 [label="Identifier"];
    9288 -> 9289;
    9289[label="Podium"];
    9261 -> 9290;
    9290[label=";"];
    8439 -> 9291;
    9291 [label="Statement(Statement { syntax: 9291, statement: Some(9292), semicolon: None })"];
    9291 -> 9292;
    9292 [label="While(While { syntax: 9292, while_: Some(9293), lparen: Some(9294), condition: Some(9295), rparen: Some(9311), body: Some(9312) })"];
    9292 -> 9293;
    9293[label="while"];
    9292 -> 9294;
    9294[label="("];
    9292 -> 9295;
    9295 [label="Expr"];
    9295 -> 9296;
    9296 [label="UnOp(UnOp { syntax: 9296, operator: Some(9297), operand: Some(9298) })"];
    9296 -> 9297;
    9297[label="!"];
    9296 -> 9298;
    9298 [label="Expr"];
    9298 -> 9301;
    9301 [label="BinaryOp(BinaryOp { syntax: 9301, lhs: Some(9299), operator: Some(9302), rhs: Some(9303) })"];
    9301 -> 9299;
    9299 [label="Identifier"];
    9299 -> 9300;
    9300[label="UIManager"];
    9301 -> 9302;
    9302[label="."];
    9301 -> 9303;
    9303 [label="Expr"];
    9303 -> 9306;
    9306 [label="BinaryOp(BinaryOp { syntax: 9306, lhs: Some(9304), operator: Some(9307), rhs: Some(9308) })"];
    9306 -> 9304;
    9304 [label="Identifier"];
    9304 -> 9305;
    9305[label="UIAll"];
    9306 -> 9307;
    9307[label="."];
    9306 -> 9308;
    9308 [label="Expr"];
    9308 -> 9309;
    9309 [label="Identifier"];
    9309 -> 9310;
    9310[label="UISequenceIsCompleted"];
    9292 -> 9311;
    9311[label=")"];
    9292 -> 9312;
    9312 [label="Statement(Statement { syntax: 9312, statement: Some(9313), semicolon: Some(9319) })"];
    9312 -> 9313;
    9313 [label="Expr"];
    9313 -> 9316;
    9316 [label="FunctionCall(FunctionCall { syntax: 9316, lhs: Some(9314), lparen: Some(9317), args: [], rparen: Some(9318) })"];
    9316 -> 9314;
    9314 [label="Identifier"];
    9314 -> 9315;
    9315[label="MB_Yield"];
    9316 -> 9317;
    9317[label="("];
    9316 -> 9318;
    9318[label=")"];
    9312 -> 9319;
    9319[label=";"];
    8439 -> 9320;
    9320 [label="Statement(Statement { syntax: 9320, statement: Some(9334), semicolon: Some(9349) })"];
    9320 -> 9321;
    9321 [label="Expr"];
    9321 -> 9324;
    9324 [label="BinaryOp(BinaryOp { syntax: 9324, lhs: Some(9322), operator: Some(9325), rhs: Some(9326) })"];
    9324 -> 9322;
    9322 [label="Identifier"];
    9322 -> 9323;
    9323[label="UIManager"];
    9324 -> 9325;
    9325[label="."];
    9324 -> 9326;
    9326 [label="Expr"];
    9326 -> 9329;
    9329 [label="BinaryOp(BinaryOp { syntax: 9329, lhs: Some(9327), operator: Some(9330), rhs: Some(9331) })"];
    9329 -> 9327;
    9327 [label="Identifier"];
    9327 -> 9328;
    9328[label="UIAll"];
    9329 -> 9330;
    9330[label="."];
    9329 -> 9331;
    9331 [label="Expr"];
    9331 -> 9332;
    9332 [label="Identifier"];
    9332 -> 9333;
    9333[label="ScoreTableVisibility"];
    9320 -> 9334;
    9334 [label="Assignment(Assignment { syntax: 9334, lvalue: Some(9321), operator: Some(9335), rvalue: Some(9336) })"];
    9334 -> 9335;
    9335[label="="];
    9334 -> 9336;
    9336 [label="Expr"];
    9336 -> 9339;
    9339 [label="BinaryOp(BinaryOp { syntax: 9339, lhs: Some(9337), operator: Some(9340), rhs: Some(9341) })"];
    9339 -> 9337;
    9337 [label="Identifier"];
    9337 -> 9338;
    9338[label="CUIConfig"];
    9339 -> 9340;
    9340[label="::"];
    9339 -> 9341;
    9341 [label="Expr"];
    9341 -> 9344;
    9344 [label="BinaryOp(BinaryOp { syntax: 9344, lhs: Some(9342), operator: Some(9345), rhs: Some(9346) })"];
    9344 -> 9342;
    9342 [label="Identifier"];
    9342 -> 9343;
    9343[label="EVisibility"];
    9344 -> 9345;
    9345[label="::"];
    9344 -> 9346;
    9346 [label="Expr"];
    9346 -> 9347;
    9347 [label="Identifier"];
    9347 -> 9348;
    9348[label="Normal"];
    9320 -> 9349;
    9349[label=";"];
    8439 -> 9350;
    9350 [label="Statement(Statement { syntax: 9350, statement: Some(9364), semicolon: Some(9369) })"];
    9350 -> 9351;
    9351 [label="Expr"];
    9351 -> 9354;
    9354 [label="BinaryOp(BinaryOp { syntax: 9354, lhs: Some(9352), operator: Some(9355), rhs: Some(9356) })"];
    9354 -> 9352;
    9352 [label="Identifier"];
    9352 -> 9353;
    9353[label="UIManager"];
    9354 -> 9355;
    9355[label="."];
    9354 -> 9356;
    9356 [label="Expr"];
    9356 -> 9359;
    9359 [label="BinaryOp(BinaryOp { syntax: 9359, lhs: Some(9357), operator: Some(9360), rhs: Some(9361) })"];
    9359 -> 9357;
    9357 [label="Identifier"];
    9357 -> 9358;
    9358[label="UIAll"];
    9359 -> 9360;
    9360[label="."];
    9359 -> 9361;
    9361 [label="Expr"];
    9361 -> 9362;
    9362 [label="Identifier"];
    9362 -> 9363;
    9363[label="BigMessage"];
    9350 -> 9364;
    9364 [label="Assignment(Assignment { syntax: 9364, lvalue: Some(9351), operator: Some(9365), rvalue: Some(9366) })"];
    9364 -> 9365;
    9365[label="="];
    9364 -> 9366;
    9366 [label="Expr"];
    9366 -> 9367;
    9367 [label="Literal"];
    9367 -> 9368;
    9368[label="\"\""];
    9350 -> 9369;
    9369[label=";"];
    8439 -> 9370;
    9370[label="***"];
    0 -> 9371;
    9371 [label="LabelImpl(LabelImpl { syntax: 9371, stars1: Some(9372), name: Some(9373), stars2: Some(9374), stars3: Some(9375), statements: [9376, 9392], stars4: Some(9408) })"];
    9371 -> 9372;
    9372[label="***"];
    9371 -> 9373;
    9373[label="Match_EndServer"];
    9371 -> 9374;
    9374[label="***"];
    9371 -> 9375;
    9375[label="***"];
    9371 -> 9376;
    9376 [label="Statement(Statement { syntax: 9376, statement: Some(9377), semicolon: Some(9391) })"];
    9376 -> 9377;
    9377 [label="Expr"];
    9377 -> 9385;
    9385 [label="FunctionCall(FunctionCall { syntax: 9385, lhs: Some(9380), lparen: Some(9386), args: [(9387, None)], rparen: Some(9390) })"];
    9385 -> 9380;
    9380 [label="BinaryOp(BinaryOp { syntax: 9380, lhs: Some(9378), operator: Some(9381), rhs: Some(9382) })"];
    9380 -> 9378;
    9378 [label="Identifier"];
    9378 -> 9379;
    9379[label="Layers"];
    9380 -> 9381;
    9381[label="::"];
    9380 -> 9382;
    9382 [label="Expr"];
    9382 -> 9383;
    9383 [label="Identifier"];
    9383 -> 9384;
    9384[label="Destroy"];
    9385 -> 9386;
    9386[label="("];
    9385 -> 9387;
    9387 [label="Expr"];
    9387 -> 9388;
    9388 [label="Literal"];
    9388 -> 9389;
    9389[label="\"HungerGames:Interface\""];
    9385 -> 9390;
    9390[label=")"];
    9376 -> 9391;
    9391[label=";"];
    9371 -> 9392;
    9392 [label="Statement(Statement { syntax: 9392, statement: Some(9393), semicolon: Some(9407) })"];
    9392 -> 9393;
    9393 [label="Expr"];
    9393 -> 9401;
    9401 [label="FunctionCall(FunctionCall { syntax: 9401, lhs: Some(9396), lparen: Some(9402), args: [(9403, None)], rparen: Some(9406) })"];
    9401 -> 9396;
    9396 [label="BinaryOp(BinaryOp { syntax: 9396, lhs: Some(9394), operator: Some(9397), rhs: Some(9398) })"];
    9396 -> 9394;
    9394 [label="Identifier"];
    9394 -> 9395;
    9395[label="Layers"];
    9396 -> 9397;
    9397[label="::"];
    9396 -> 9398;
    9398 [label="Expr"];
    9398 -> 9399;
    9399 [label="Identifier"];
    9399 -> 9400;
    9400[label="Destroy"];
    9401 -> 9402;
    9402[label="("];
    9401 -> 9403;
    9403 [label="Expr"];
    9403 -> 9404;
    9404 [label="Literal"];
    9404 -> 9405;
    9405[label="\"HungerGames:Statistics\""];
    9401 -> 9406;
    9406[label=")"];
    9392 -> 9407;
    9407[label=";"];
    9371 -> 9408;
    9408[label="***"];
    0 -> 9409;
    9409 [label="FuncDec(FuncDec { syntax: 9409, type_: Some(9410), name: Some(9412), lparen: Some(9413), args: [9414], rparen: Some(9418), body: Some(9419) })"];
    9409 -> 9410;
    9410 [label="Type(Type { syntax: 9410, basename: Some(9411), members: [], arrays: [] })"];
    9410 -> 9411;
    9411[label="Void"];
    9409 -> 9412;
    9412[label="UpdatePlayerSkills"];
    9409 -> 9413;
    9413[label="("];
    9409 -> 9414;
    9414 [label="FormalArg(FormalArg { syntax: 9414, type_: Some(9415), name: Some(9417), comma: None })"];
    9414 -> 9415;
    9415 [label="Type(Type { syntax: 9415, basename: Some(9416), members: [], arrays: [] })"];
    9415 -> 9416;
    9416[label="CSmPlayer"];
    9414 -> 9417;
    9417[label="_Player"];
    9409 -> 9418;
    9418[label=")"];
    9409 -> 9419;
    9419 [label="Block(Block { syntax: 9419, lbrace: Some(9420), statements: [9421, 9438, 9452, 9531], rbrace: Some(9688) })"];
    9419 -> 9420;
    9420[label="{"];
    9419 -> 9421;
    9421 [label="Statement(Statement { syntax: 9421, statement: Some(9422), semicolon: None })"];
    9421 -> 9422;
    9422 [label="If(If { syntax: 9422, if_: Some(9423), lparen: Some(9424), condition: Some(9425), rparen: Some(9433), body: Some(9434), else_: None })"];
    9422 -> 9423;
    9423[label="if"];
    9422 -> 9424;
    9424[label="("];
    9422 -> 9425;
    9425 [label="Expr"];
    9425 -> 9428;
    9428 [label="BinaryOp(BinaryOp { syntax: 9428, lhs: Some(9426), operator: Some(9429), rhs: Some(9430) })"];
    9428 -> 9426;
    9426 [label="Identifier"];
    9426 -> 9427;
    9427[label="_Player"];
    9428 -> 9429;
    9429[label="=="];
    9428 -> 9430;
    9430 [label="Expr"];
    9430 -> 9431;
    9431 [label="Literal"];
    9431 -> 9432;
    9432[label="Null"];
    9422 -> 9433;
    9433[label=")"];
    9422 -> 9434;
    9434 [label="Statement(Statement { syntax: 9434, statement: Some(9435), semicolon: Some(9437) })"];
    9434 -> 9435;
    9435 [label="Return(Return { syntax: 9435, return_: Some(9436), value: None })"];
    9435 -> 9436;
    9436[label="return"];
    9434 -> 9437;
    9437[label=";"];
    9419 -> 9438;
    9438 [label="Statement(Statement { syntax: 9438, statement: Some(9439), semicolon: None })"];
    9438 -> 9439;
    9439 [label="VarDec(VarDec { syntax: 9439, declare: Some(9440), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(9441), name: Some(9446), as_: None, alias: None, for_: Some(9447), target: Some(9448), assignment: None, value: None })"];
    9439 -> 9440;
    9440[label="declare"];
    9439 -> 9441;
    9441 [label="Type(Type { syntax: 9441, basename: Some(9442), members: [], arrays: [(9443, Some(9444), 9445)] })"];
    9441 -> 9442;
    9442[label="Integer"];
    9441 -> 9443;
    9443[label="["];
    9441 -> 9444;
    9444[label="Text"];
    9441 -> 9445;
    9445[label="]"];
    9439 -> 9446;
    9446[label="PlayerSkillPoints"];
    9439 -> 9447;
    9447[label="for"];
    9439 -> 9448;
    9448 [label="Expr"];
    9448 -> 9449;
    9449 [label="Identifier"];
    9449 -> 9450;
    9450[label="_Player"];
    9439 -> 9451;
    9451[label=";"];
    9419 -> 9452;
    9452 [label="Statement(Statement { syntax: 9452, statement: Some(9453), semicolon: None })"];
    9452 -> 9453;
    9453 [label="Foreach(Foreach { syntax: 9453, foreach: Some(9454), lparen: Some(9455), name1: Some(9456), arrow: Some(9457), name2: Some(9458), in_: Some(9459), value: Some(9460), rparen: Some(9463), body: Some(9464) })"];
    9453 -> 9454;
    9454[label="foreach"];
    9453 -> 9455;
    9455[label="("];
    9453 -> 9456;
    9456[label="SkillType"];
    9453 -> 9457;
    9457[label="=>"];
    9453 -> 9458;
    9458[label="SkillPoints"];
    9453 -> 9459;
    9459[label="in"];
    9453 -> 9460;
    9460 [label="Expr"];
    9460 -> 9461;
    9461 [label="Identifier"];
    9461 -> 9462;
    9462[label="C_SkillsPointsLimit"];
    9453 -> 9463;
    9463[label=")"];
    9453 -> 9464;
    9464 [label="Statement(Statement { syntax: 9464, statement: Some(9465), semicolon: None })"];
    9464 -> 9465;
    9465 [label="Block(Block { syntax: 9465, lbrace: Some(9466), statements: [9467, 9493], rbrace: Some(9530) })"];
    9465 -> 9466;
    9466[label="{"];
    9465 -> 9467;
    9467 [label="Statement(Statement { syntax: 9467, statement: Some(9468), semicolon: None })"];
    9467 -> 9468;
    9468 [label="If(If { syntax: 9468, if_: Some(9469), lparen: Some(9470), condition: Some(9471), rparen: Some(9488), body: Some(9489), else_: None })"];
    9468 -> 9469;
    9469[label="if"];
    9468 -> 9470;
    9470[label="("];
    9468 -> 9471;
    9471 [label="Expr"];
    9471 -> 9482;
    9482 [label="FunctionCall(FunctionCall { syntax: 9482, lhs: Some(9472), lparen: Some(9483), args: [(9484, None)], rparen: Some(9487) })"];
    9482 -> 9472;
    9472 [label="UnOp(UnOp { syntax: 9472, operator: Some(9473), operand: Some(9474) })"];
    9472 -> 9473;
    9473[label="!"];
    9472 -> 9474;
    9474 [label="Expr"];
    9474 -> 9477;
    9477 [label="BinaryOp(BinaryOp { syntax: 9477, lhs: Some(9475), operator: Some(9478), rhs: Some(9479) })"];
    9477 -> 9475;
    9475 [label="Identifier"];
    9475 -> 9476;
    9476[label="PlayerSkillPoints"];
    9477 -> 9478;
    9478[label="."];
    9477 -> 9479;
    9479 [label="Expr"];
    9479 -> 9480;
    9480 [label="Identifier"];
    9480 -> 9481;
    9481[label="existskey"];
    9482 -> 9483;
    9483[label="("];
    9482 -> 9484;
    9484 [label="Expr"];
    9484 -> 9485;
    9485 [label="Identifier"];
    9485 -> 9486;
    9486[label="SkillType"];
    9482 -> 9487;
    9487[label=")"];
    9468 -> 9488;
    9488[label=")"];
    9468 -> 9489;
    9489 [label="Statement(Statement { syntax: 9489, statement: Some(9490), semicolon: Some(9492) })"];
    9489 -> 9490;
    9490 [label="Continue"];
    9490 -> 9491;
    9491[label="continue"];
    9489 -> 9492;
    9492[label=";"];
    9465 -> 9493;
    9493 [label="Statement(Statement { syntax: 9493, statement: Some(9503), semicolon: Some(9529) })"];
    9493 -> 9494;
    9494 [label="Expr"];
    9494 -> 9497;
    9497 [label="ArrayAccess(ArrayAccess { syntax: 9497, lhs: Some(9495), lsquare: Some(9498), index: Some(9499), rsquare: Some(9502) })"];
    9497 -> 9495;
    9495 [label="Identifier"];
    9495 -> 9496;
    9496[label="PlayerSkillPoints"];
    9497 -> 9498;
    9498[label="["];
    9497 -> 9499;
    9499 [label="Expr"];
    9499 -> 9500;
    9500 [label="Identifier"];
    9500 -> 9501;
    9501[label="SkillType"];
    9497 -> 9502;
    9502[label="]"];
    9493 -> 9503;
    9503 [label="Assignment(Assignment { syntax: 9503, lvalue: Some(9494), operator: Some(9504), rvalue: Some(9505) })"];
    9503 -> 9504;
    9504[label="="];
    9503 -> 9505;
    9505 [label="Expr"];
    9505 -> 9513;
    9513 [label="FunctionCall(FunctionCall { syntax: 9513, lhs: Some(9508), lparen: Some(9514), args: [(9515, Some(9524)), (9525, None)], rparen: Some(9528) })"];
    9513 -> 9508;
    9508 [label="BinaryOp(BinaryOp { syntax: 9508, lhs: Some(9506), operator: Some(9509), rhs: Some(9510) })"];
    9508 -> 9506;
    9506 [label="Identifier"];
    9506 -> 9507;
    9507[label="ML"];
    9508 -> 9509;
    9509[label="::"];
    9508 -> 9510;
    9510 [label="Expr"];
    9510 -> 9511;
    9511 [label="Identifier"];
    9511 -> 9512;
    9512[label="Min"];
    9513 -> 9514;
    9514[label="("];
    9513 -> 9515;
    9515 [label="Expr"];
    9515 -> 9518;
    9518 [label="ArrayAccess(ArrayAccess { syntax: 9518, lhs: Some(9516), lsquare: Some(9519), index: Some(9520), rsquare: Some(9523) })"];
    9518 -> 9516;
    9516 [label="Identifier"];
    9516 -> 9517;
    9517[label="PlayerSkillPoints"];
    9518 -> 9519;
    9519[label="["];
    9518 -> 9520;
    9520 [label="Expr"];
    9520 -> 9521;
    9521 [label="Identifier"];
    9521 -> 9522;
    9522[label="SkillType"];
    9518 -> 9523;
    9523[label="]"];
    9513 -> 9524;
    9524[label=","];
    9513 -> 9525;
    9525 [label="Expr"];
    9525 -> 9526;
    9526 [label="Identifier"];
    9526 -> 9527;
    9527[label="SkillPoints"];
    9513 -> 9528;
    9528[label=")"];
    9493 -> 9529;
    9529[label=";"];
    9465 -> 9530;
    9530[label="}"];
    9419 -> 9531;
    9531 [label="Statement(Statement { syntax: 9531, statement: Some(9532), semicolon: None })"];
    9531 -> 9532;
    9532 [label="Foreach(Foreach { syntax: 9532, foreach: Some(9533), lparen: Some(9534), name1: Some(9535), arrow: Some(9536), name2: Some(9537), in_: Some(9538), value: Some(9539), rparen: Some(9542), body: Some(9543) })"];
    9532 -> 9533;
    9533[label="foreach"];
    9532 -> 9534;
    9534[label="("];
    9532 -> 9535;
    9535[label="SkillType"];
    9532 -> 9536;
    9536[label="=>"];
    9532 -> 9537;
    9537[label="SkillPoints"];
    9532 -> 9538;
    9538[label="in"];
    9532 -> 9539;
    9539 [label="Expr"];
    9539 -> 9540;
    9540 [label="Identifier"];
    9540 -> 9541;
    9541[label="PlayerSkillPoints"];
    9532 -> 9542;
    9542[label=")"];
    9532 -> 9543;
    9543 [label="Statement(Statement { syntax: 9543, statement: Some(9544), semicolon: None })"];
    9543 -> 9544;
    9544 [label="Switch(Switch { syntax: 9544, switch: Some(9545), lparen: Some(9546), value: Some(9547), rparen: Some(9550), lbrace: Some(9551), cases: [9552, 9597, 9642], default: None, rbrace: Some(9687), is_type: false })"];
    9544 -> 9545;
    9545[label="switch"];
    9544 -> 9546;
    9546[label="("];
    9544 -> 9547;
    9547 [label="Expr"];
    9547 -> 9548;
    9548 [label="Identifier"];
    9548 -> 9549;
    9549[label="SkillType"];
    9544 -> 9550;
    9550[label=")"];
    9544 -> 9551;
    9551[label="{"];
    9544 -> 9552;
    9552 [label="Case(Case { syntax: 9552, case: Some(9553), value: Some(9554), colon: Some(9557), statement: Some(9558) })"];
    9552 -> 9553;
    9553[label="case"];
    9552 -> 9554;
    9554 [label="Expr"];
    9554 -> 9555;
    9555 [label="Literal"];
    9555 -> 9556;
    9556[label="\"AmmoGain\""];
    9552 -> 9557;
    9557[label=":"];
    9552 -> 9558;
    9558 [label="Statement(Statement { syntax: 9558, statement: Some(9567), semicolon: Some(9596) })"];
    9558 -> 9559;
    9559 [label="Expr"];
    9559 -> 9562;
    9562 [label="BinaryOp(BinaryOp { syntax: 9562, lhs: Some(9560), operator: Some(9563), rhs: Some(9564) })"];
    9562 -> 9560;
    9560 [label="Identifier"];
    9560 -> 9561;
    9561[label="_Player"];
    9562 -> 9563;
    9563[label="."];
    9562 -> 9564;
    9564 [label="Expr"];
    9564 -> 9565;
    9565 [label="Identifier"];
    9565 -> 9566;
    9566[label="AmmoGain"];
    9558 -> 9567;
    9567 [label="Assignment(Assignment { syntax: 9567, lvalue: Some(9559), operator: Some(9568), rvalue: Some(9569) })"];
    9567 -> 9568;
    9568[label="="];
    9567 -> 9569;
    9569 [label="Expr"];
    9569 -> 9577;
    9577 [label="FunctionCall(FunctionCall { syntax: 9577, lhs: Some(9572), lparen: Some(9578), args: [(9579, Some(9587)), (9588, Some(9591)), (9592, None)], rparen: Some(9595) })"];
    9577 -> 9572;
    9572 [label="BinaryOp(BinaryOp { syntax: 9572, lhs: Some(9570), operator: Some(9573), rhs: Some(9574) })"];
    9572 -> 9570;
    9570 [label="Identifier"];
    9570 -> 9571;
    9571[label="ML"];
    9572 -> 9573;
    9573[label="::"];
    9572 -> 9574;
    9574 [label="Expr"];
    9574 -> 9575;
    9575 [label="Identifier"];
    9575 -> 9576;
    9576[label="Clamp"];
    9577 -> 9578;
    9578[label="("];
    9577 -> 9579;
    9579 [label="Expr"];
    9579 -> 9582;
    9582 [label="BinaryOp(BinaryOp { syntax: 9582, lhs: Some(9580), operator: Some(9583), rhs: Some(9584) })"];
    9582 -> 9580;
    9580 [label="Identifier"];
    9580 -> 9581;
    9581[label="SkillPoints"];
    9582 -> 9583;
    9583[label="/"];
    9582 -> 9584;
    9584 [label="Expr"];
    9584 -> 9585;
    9585 [label="Literal"];
    9585 -> 9586;
    9586[label="100."];
    9577 -> 9587;
    9587[label=","];
    9577 -> 9588;
    9588 [label="Expr"];
    9588 -> 9589;
    9589 [label="Literal"];
    9589 -> 9590;
    9590[label="0."];
    9577 -> 9591;
    9591[label=","];
    9577 -> 9592;
    9592 [label="Expr"];
    9592 -> 9593;
    9593 [label="Literal"];
    9593 -> 9594;
    9594[label="10."];
    9577 -> 9595;
    9595[label=")"];
    9558 -> 9596;
    9596[label=";"];
    9544 -> 9597;
    9597 [label="Case(Case { syntax: 9597, case: Some(9598), value: Some(9599), colon: Some(9602), statement: Some(9603) })"];
    9597 -> 9598;
    9598[label="case"];
    9597 -> 9599;
    9599 [label="Expr"];
    9599 -> 9600;
    9600 [label="Literal"];
    9600 -> 9601;
    9601[label="\"StaminaGain\""];
    9597 -> 9602;
    9602[label=":"];
    9597 -> 9603;
    9603 [label="Statement(Statement { syntax: 9603, statement: Some(9612), semicolon: Some(9641) })"];
    9603 -> 9604;
    9604 [label="Expr"];
    9604 -> 9607;
    9607 [label="BinaryOp(BinaryOp { syntax: 9607, lhs: Some(9605), operator: Some(9608), rhs: Some(9609) })"];
    9607 -> 9605;
    9605 [label="Identifier"];
    9605 -> 9606;
    9606[label="_Player"];
    9607 -> 9608;
    9608[label="."];
    9607 -> 9609;
    9609 [label="Expr"];
    9609 -> 9610;
    9610 [label="Identifier"];
    9610 -> 9611;
    9611[label="StaminaGain"];
    9603 -> 9612;
    9612 [label="Assignment(Assignment { syntax: 9612, lvalue: Some(9604), operator: Some(9613), rvalue: Some(9614) })"];
    9612 -> 9613;
    9613[label="="];
    9612 -> 9614;
    9614 [label="Expr"];
    9614 -> 9622;
    9622 [label="FunctionCall(FunctionCall { syntax: 9622, lhs: Some(9617), lparen: Some(9623), args: [(9624, Some(9632)), (9633, Some(9636)), (9637, None)], rparen: Some(9640) })"];
    9622 -> 9617;
    9617 [label="BinaryOp(BinaryOp { syntax: 9617, lhs: Some(9615), operator: Some(9618), rhs: Some(9619) })"];
    9617 -> 9615;
    9615 [label="Identifier"];
    9615 -> 9616;
    9616[label="ML"];
    9617 -> 9618;
    9618[label="::"];
    9617 -> 9619;
    9619 [label="Expr"];
    9619 -> 9620;
    9620 [label="Identifier"];
    9620 -> 9621;
    9621[label="Clamp"];
    9622 -> 9623;
    9623[label="("];
    9622 -> 9624;
    9624 [label="Expr"];
    9624 -> 9627;
    9627 [label="BinaryOp(BinaryOp { syntax: 9627, lhs: Some(9625), operator: Some(9628), rhs: Some(9629) })"];
    9627 -> 9625;
    9625 [label="Identifier"];
    9625 -> 9626;
    9626[label="SkillPoints"];
    9627 -> 9628;
    9628[label="/"];
    9627 -> 9629;
    9629 [label="Expr"];
    9629 -> 9630;
    9630 [label="Literal"];
    9630 -> 9631;
    9631[label="100."];
    9622 -> 9632;
    9632[label=","];
    9622 -> 9633;
    9633 [label="Expr"];
    9633 -> 9634;
    9634 [label="Literal"];
    9634 -> 9635;
    9635[label="0."];
    9622 -> 9636;
    9636[label=","];
    9622 -> 9637;
    9637 [label="Expr"];
    9637 -> 9638;
    9638 [label="Literal"];
    9638 -> 9639;
    9639[label="1."];
    9622 -> 9640;
    9640[label=")"];
    9603 -> 9641;
    9641[label=";"];
    9544 -> 9642;
    9642 [label="Case(Case { syntax: 9642, case: Some(9643), value: Some(9644), colon: Some(9647), statement: Some(9648) })"];
    9642 -> 9643;
    9643[label="case"];
    9642 -> 9644;
    9644 [label="Expr"];
    9644 -> 9645;
    9645 [label="Literal"];
    9645 -> 9646;
    9646[label="\"StaminaMax\""];
    9642 -> 9647;
    9647[label=":"];
    9642 -> 9648;
    9648 [label="Statement(Statement { syntax: 9648, statement: Some(9657), semicolon: Some(9686) })"];
    9648 -> 9649;
    9649 [label="Expr"];
    9649 -> 9652;
    9652 [label="BinaryOp(BinaryOp { syntax: 9652, lhs: Some(9650), operator: Some(9653), rhs: Some(9654) })"];
    9652 -> 9650;
    9650 [label="Identifier"];
    9650 -> 9651;
    9651[label="_Player"];
    9652 -> 9653;
    9653[label="."];
    9652 -> 9654;
    9654 [label="Expr"];
    9654 -> 9655;
    9655 [label="Identifier"];
    9655 -> 9656;
    9656[label="StaminaMax"];
    9648 -> 9657;
    9657 [label="Assignment(Assignment { syntax: 9657, lvalue: Some(9649), operator: Some(9658), rvalue: Some(9659) })"];
    9657 -> 9658;
    9658[label="="];
    9657 -> 9659;
    9659 [label="Expr"];
    9659 -> 9667;
    9667 [label="FunctionCall(FunctionCall { syntax: 9667, lhs: Some(9662), lparen: Some(9668), args: [(9669, Some(9677)), (9678, Some(9681)), (9682, None)], rparen: Some(9685) })"];
    9667 -> 9662;
    9662 [label="BinaryOp(BinaryOp { syntax: 9662, lhs: Some(9660), operator: Some(9663), rhs: Some(9664) })"];
    9662 -> 9660;
    9660 [label="Identifier"];
    9660 -> 9661;
    9661[label="ML"];
    9662 -> 9663;
    9663[label="::"];
    9662 -> 9664;
    9664 [label="Expr"];
    9664 -> 9665;
    9665 [label="Identifier"];
    9665 -> 9666;
    9666[label="Clamp"];
    9667 -> 9668;
    9668[label="("];
    9667 -> 9669;
    9669 [label="Expr"];
    9669 -> 9672;
    9672 [label="BinaryOp(BinaryOp { syntax: 9672, lhs: Some(9670), operator: Some(9673), rhs: Some(9674) })"];
    9672 -> 9670;
    9670 [label="Identifier"];
    9670 -> 9671;
    9671[label="SkillPoints"];
    9672 -> 9673;
    9673[label="/"];
    9672 -> 9674;
    9674 [label="Expr"];
    9674 -> 9675;
    9675 [label="Literal"];
    9675 -> 9676;
    9676[label="100."];
    9667 -> 9677;
    9677[label=","];
    9667 -> 9678;
    9678 [label="Expr"];
    9678 -> 9679;
    9679 [label="Literal"];
    9679 -> 9680;
    9680[label=".1"];
    9667 -> 9681;
    9681[label=","];
    9667 -> 9682;
    9682 [label="Expr"];
    9682 -> 9683;
    9683 [label="Literal"];
    9683 -> 9684;
    9684[label="3."];
    9667 -> 9685;
    9685[label=")"];
    9648 -> 9686;
    9686[label=";"];
    9544 -> 9687;
    9687[label="}"];
    9419 -> 9688;
    9688[label="}"];
    0 -> 9689;
    9689 [label="FuncDec(FuncDec { syntax: 9689, type_: Some(9690), name: Some(9692), lparen: Some(9693), args: [9694, 9699, 9704], rparen: Some(9708), body: Some(9709) })"];
    9689 -> 9690;
    9690 [label="Type(Type { syntax: 9690, basename: Some(9691), members: [], arrays: [] })"];
    9690 -> 9691;
    9691[label="Void"];
    9689 -> 9692;
    9692[label="SetPlayerSkill"];
    9689 -> 9693;
    9693[label="("];
    9689 -> 9694;
    9694 [label="FormalArg(FormalArg { syntax: 9694, type_: Some(9695), name: Some(9697), comma: Some(9698) })"];
    9694 -> 9695;
    9695 [label="Type(Type { syntax: 9695, basename: Some(9696), members: [], arrays: [] })"];
    9695 -> 9696;
    9696[label="CSmPlayer"];
    9694 -> 9697;
    9697[label="_Player"];
    9694 -> 9698;
    9698[label=","];
    9689 -> 9699;
    9699 [label="FormalArg(FormalArg { syntax: 9699, type_: Some(9700), name: Some(9702), comma: Some(9703) })"];
    9699 -> 9700;
    9700 [label="Type(Type { syntax: 9700, basename: Some(9701), members: [], arrays: [] })"];
    9700 -> 9701;
    9701[label="Text"];
    9699 -> 9702;
    9702[label="_SkillType"];
    9699 -> 9703;
    9703[label=","];
    9689 -> 9704;
    9704 [label="FormalArg(FormalArg { syntax: 9704, type_: Some(9705), name: Some(9707), comma: None })"];
    9704 -> 9705;
    9705 [label="Type(Type { syntax: 9705, basename: Some(9706), members: [], arrays: [] })"];
    9705 -> 9706;
    9706[label="Integer"];
    9704 -> 9707;
    9707[label="_SkillPoints"];
    9689 -> 9708;
    9708[label=")"];
    9689 -> 9709;
    9709 [label="Block(Block { syntax: 9709, lbrace: Some(9710), statements: [9711, 9738, 9752, 9783], rbrace: Some(9794) })"];
    9709 -> 9710;
    9710[label="{"];
    9709 -> 9711;
    9711 [label="Statement(Statement { syntax: 9711, statement: Some(9712), semicolon: None })"];
    9711 -> 9712;
    9712 [label="If(If { syntax: 9712, if_: Some(9713), lparen: Some(9714), condition: Some(9715), rparen: Some(9733), body: Some(9734), else_: None })"];
    9712 -> 9713;
    9713[label="if"];
    9712 -> 9714;
    9714[label="("];
    9712 -> 9715;
    9715 [label="Expr"];
    9715 -> 9723;
    9723 [label="BinaryOp(BinaryOp { syntax: 9723, lhs: Some(9718), operator: Some(9724), rhs: Some(9725) })"];
    9723 -> 9718;
    9718 [label="BinaryOp(BinaryOp { syntax: 9718, lhs: Some(9716), operator: Some(9719), rhs: Some(9720) })"];
    9718 -> 9716;
    9716 [label="Identifier"];
    9716 -> 9717;
    9717[label="_Player"];
    9718 -> 9719;
    9719[label="=="];
    9718 -> 9720;
    9720 [label="Expr"];
    9720 -> 9721;
    9721 [label="Literal"];
    9721 -> 9722;
    9722[label="Null"];
    9723 -> 9724;
    9724[label="||"];
    9723 -> 9725;
    9725 [label="Expr"];
    9725 -> 9728;
    9728 [label="BinaryOp(BinaryOp { syntax: 9728, lhs: Some(9726), operator: Some(9729), rhs: Some(9730) })"];
    9728 -> 9726;
    9726 [label="Identifier"];
    9726 -> 9727;
    9727[label="_SkillType"];
    9728 -> 9729;
    9729[label="=="];
    9728 -> 9730;
    9730 [label="Expr"];
    9730 -> 9731;
    9731 [label="Literal"];
    9731 -> 9732;
    9732[label="\"\""];
    9712 -> 9733;
    9733[label=")"];
    9712 -> 9734;
    9734 [label="Statement(Statement { syntax: 9734, statement: Some(9735), semicolon: Some(9737) })"];
    9734 -> 9735;
    9735 [label="Return(Return { syntax: 9735, return_: Some(9736), value: None })"];
    9735 -> 9736;
    9736[label="return"];
    9734 -> 9737;
    9737[label=";"];
    9709 -> 9738;
    9738 [label="Statement(Statement { syntax: 9738, statement: Some(9739), semicolon: None })"];
    9738 -> 9739;
    9739 [label="VarDec(VarDec { syntax: 9739, declare: Some(9740), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(9741), name: Some(9746), as_: None, alias: None, for_: Some(9747), target: Some(9748), assignment: None, value: None })"];
    9739 -> 9740;
    9740[label="declare"];
    9739 -> 9741;
    9741 [label="Type(Type { syntax: 9741, basename: Some(9742), members: [], arrays: [(9743, Some(9744), 9745)] })"];
    9741 -> 9742;
    9742[label="Integer"];
    9741 -> 9743;
    9743[label="["];
    9741 -> 9744;
    9744[label="Text"];
    9741 -> 9745;
    9745[label="]"];
    9739 -> 9746;
    9746[label="PlayerSkillPoints"];
    9739 -> 9747;
    9747[label="for"];
    9739 -> 9748;
    9748 [label="Expr"];
    9748 -> 9749;
    9749 [label="Identifier"];
    9749 -> 9750;
    9750[label="_Player"];
    9739 -> 9751;
    9751[label=";"];
    9709 -> 9752;
    9752 [label="Statement(Statement { syntax: 9752, statement: Some(9762), semicolon: Some(9782) })"];
    9752 -> 9753;
    9753 [label="Expr"];
    9753 -> 9756;
    9756 [label="ArrayAccess(ArrayAccess { syntax: 9756, lhs: Some(9754), lsquare: Some(9757), index: Some(9758), rsquare: Some(9761) })"];
    9756 -> 9754;
    9754 [label="Identifier"];
    9754 -> 9755;
    9755[label="PlayerSkillPoints"];
    9756 -> 9757;
    9757[label="["];
    9756 -> 9758;
    9758 [label="Expr"];
    9758 -> 9759;
    9759 [label="Identifier"];
    9759 -> 9760;
    9760[label="_SkillType"];
    9756 -> 9761;
    9761[label="]"];
    9752 -> 9762;
    9762 [label="Assignment(Assignment { syntax: 9762, lvalue: Some(9753), operator: Some(9763), rvalue: Some(9764) })"];
    9762 -> 9763;
    9763[label="="];
    9762 -> 9764;
    9764 [label="Expr"];
    9764 -> 9772;
    9772 [label="FunctionCall(FunctionCall { syntax: 9772, lhs: Some(9767), lparen: Some(9773), args: [(9774, Some(9777)), (9778, None)], rparen: Some(9781) })"];
    9772 -> 9767;
    9767 [label="BinaryOp(BinaryOp { syntax: 9767, lhs: Some(9765), operator: Some(9768), rhs: Some(9769) })"];
    9767 -> 9765;
    9765 [label="Identifier"];
    9765 -> 9766;
    9766[label="ML"];
    9767 -> 9768;
    9768[label="::"];
    9767 -> 9769;
    9769 [label="Expr"];
    9769 -> 9770;
    9770 [label="Identifier"];
    9770 -> 9771;
    9771[label="Max"];
    9772 -> 9773;
    9773[label="("];
    9772 -> 9774;
    9774 [label="Expr"];
    9774 -> 9775;
    9775 [label="Literal"];
    9775 -> 9776;
    9776[label="0"];
    9772 -> 9777;
    9777[label=","];
    9772 -> 9778;
    9778 [label="Expr"];
    9778 -> 9779;
    9779 [label="Identifier"];
    9779 -> 9780;
    9780[label="_SkillPoints"];
    9772 -> 9781;
    9781[label=")"];
    9752 -> 9782;
    9782[label=";"];
    9709 -> 9783;
    9783 [label="Statement(Statement { syntax: 9783, statement: Some(9784), semicolon: Some(9793) })"];
    9783 -> 9784;
    9784 [label="Expr"];
    9784 -> 9787;
    9787 [label="FunctionCall(FunctionCall { syntax: 9787, lhs: Some(9785), lparen: Some(9788), args: [(9789, None)], rparen: Some(9792) })"];
    9787 -> 9785;
    9785 [label="Identifier"];
    9785 -> 9786;
    9786[label="UpdatePlayerSkills"];
    9787 -> 9788;
    9788[label="("];
    9787 -> 9789;
    9789 [label="Expr"];
    9789 -> 9790;
    9790 [label="Identifier"];
    9790 -> 9791;
    9791[label="_Player"];
    9787 -> 9792;
    9792[label=")"];
    9783 -> 9793;
    9793[label=";"];
    9709 -> 9794;
    9794[label="}"];
    0 -> 9795;
    9795 [label="FuncDec(FuncDec { syntax: 9795, type_: Some(9796), name: Some(9798), lparen: Some(9799), args: [9800, 9805, 9810], rparen: Some(9814), body: Some(9815) })"];
    9795 -> 9796;
    9796 [label="Type(Type { syntax: 9796, basename: Some(9797), members: [], arrays: [] })"];
    9796 -> 9797;
    9797[label="Void"];
    9795 -> 9798;
    9798[label="AddPlayerSkill"];
    9795 -> 9799;
    9799[label="("];
    9795 -> 9800;
    9800 [label="FormalArg(FormalArg { syntax: 9800, type_: Some(9801), name: Some(9803), comma: Some(9804) })"];
    9800 -> 9801;
    9801 [label="Type(Type { syntax: 9801, basename: Some(9802), members: [], arrays: [] })"];
    9801 -> 9802;
    9802[label="CSmPlayer"];
    9800 -> 9803;
    9803[label="_Player"];
    9800 -> 9804;
    9804[label=","];
    9795 -> 9805;
    9805 [label="FormalArg(FormalArg { syntax: 9805, type_: Some(9806), name: Some(9808), comma: Some(9809) })"];
    9805 -> 9806;
    9806 [label="Type(Type { syntax: 9806, basename: Some(9807), members: [], arrays: [] })"];
    9806 -> 9807;
    9807[label="Text"];
    9805 -> 9808;
    9808[label="_SkillType"];
    9805 -> 9809;
    9809[label=","];
    9795 -> 9810;
    9810 [label="FormalArg(FormalArg { syntax: 9810, type_: Some(9811), name: Some(9813), comma: None })"];
    9810 -> 9811;
    9811 [label="Type(Type { syntax: 9811, basename: Some(9812), members: [], arrays: [] })"];
    9811 -> 9812;
    9812[label="Integer"];
    9810 -> 9813;
    9813[label="_SkillPoints"];
    9795 -> 9814;
    9814[label=")"];
    9795 -> 9815;
    9815 [label="Block(Block { syntax: 9815, lbrace: Some(9816), statements: [9817, 9844, 9858, 9896, 9927], rbrace: Some(9938) })"];
    9815 -> 9816;
    9816[label="{"];
    9815 -> 9817;
    9817 [label="Statement(Statement { syntax: 9817, statement: Some(9818), semicolon: None })"];
    9817 -> 9818;
    9818 [label="If(If { syntax: 9818, if_: Some(9819), lparen: Some(9820), condition: Some(9821), rparen: Some(9839), body: Some(9840), else_: None })"];
    9818 -> 9819;
    9819[label="if"];
    9818 -> 9820;
    9820[label="("];
    9818 -> 9821;
    9821 [label="Expr"];
    9821 -> 9829;
    9829 [label="BinaryOp(BinaryOp { syntax: 9829, lhs: Some(9824), operator: Some(9830), rhs: Some(9831) })"];
    9829 -> 9824;
    9824 [label="BinaryOp(BinaryOp { syntax: 9824, lhs: Some(9822), operator: Some(9825), rhs: Some(9826) })"];
    9824 -> 9822;
    9822 [label="Identifier"];
    9822 -> 9823;
    9823[label="_Player"];
    9824 -> 9825;
    9825[label="=="];
    9824 -> 9826;
    9826 [label="Expr"];
    9826 -> 9827;
    9827 [label="Literal"];
    9827 -> 9828;
    9828[label="Null"];
    9829 -> 9830;
    9830[label="||"];
    9829 -> 9831;
    9831 [label="Expr"];
    9831 -> 9834;
    9834 [label="BinaryOp(BinaryOp { syntax: 9834, lhs: Some(9832), operator: Some(9835), rhs: Some(9836) })"];
    9834 -> 9832;
    9832 [label="Identifier"];
    9832 -> 9833;
    9833[label="_SkillType"];
    9834 -> 9835;
    9835[label="=="];
    9834 -> 9836;
    9836 [label="Expr"];
    9836 -> 9837;
    9837 [label="Literal"];
    9837 -> 9838;
    9838[label="\"\""];
    9818 -> 9839;
    9839[label=")"];
    9818 -> 9840;
    9840 [label="Statement(Statement { syntax: 9840, statement: Some(9841), semicolon: Some(9843) })"];
    9840 -> 9841;
    9841 [label="Return(Return { syntax: 9841, return_: Some(9842), value: None })"];
    9841 -> 9842;
    9842[label="return"];
    9840 -> 9843;
    9843[label=";"];
    9815 -> 9844;
    9844 [label="Statement(Statement { syntax: 9844, statement: Some(9845), semicolon: None })"];
    9844 -> 9845;
    9845 [label="VarDec(VarDec { syntax: 9845, declare: Some(9846), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(9847), name: Some(9852), as_: None, alias: None, for_: Some(9853), target: Some(9854), assignment: None, value: None })"];
    9845 -> 9846;
    9846[label="declare"];
    9845 -> 9847;
    9847 [label="Type(Type { syntax: 9847, basename: Some(9848), members: [], arrays: [(9849, Some(9850), 9851)] })"];
    9847 -> 9848;
    9848[label="Integer"];
    9847 -> 9849;
    9849[label="["];
    9847 -> 9850;
    9850[label="Text"];
    9847 -> 9851;
    9851[label="]"];
    9845 -> 9852;
    9852[label="PlayerSkillPoints"];
    9845 -> 9853;
    9853[label="for"];
    9845 -> 9854;
    9854 [label="Expr"];
    9854 -> 9855;
    9855 [label="Identifier"];
    9855 -> 9856;
    9856[label="_Player"];
    9845 -> 9857;
    9857[label=";"];
    9815 -> 9858;
    9858 [label="Statement(Statement { syntax: 9858, statement: Some(9859), semicolon: None })"];
    9858 -> 9859;
    9859 [label="If(If { syntax: 9859, if_: Some(9860), lparen: Some(9861), condition: Some(9862), rparen: Some(9879), body: Some(9880), else_: None })"];
    9859 -> 9860;
    9860[label="if"];
    9859 -> 9861;
    9861[label="("];
    9859 -> 9862;
    9862 [label="Expr"];
    9862 -> 9873;
    9873 [label="FunctionCall(FunctionCall { syntax: 9873, lhs: Some(9863), lparen: Some(9874), args: [(9875, None)], rparen: Some(9878) })"];
    9873 -> 9863;
    9863 [label="UnOp(UnOp { syntax: 9863, operator: Some(9864), operand: Some(9865) })"];
    9863 -> 9864;
    9864[label="!"];
    9863 -> 9865;
    9865 [label="Expr"];
    9865 -> 9868;
    9868 [label="BinaryOp(BinaryOp { syntax: 9868, lhs: Some(9866), operator: Some(9869), rhs: Some(9870) })"];
    9868 -> 9866;
    9866 [label="Identifier"];
    9866 -> 9867;
    9867[label="PlayerSkillPoints"];
    9868 -> 9869;
    9869[label="."];
    9868 -> 9870;
    9870 [label="Expr"];
    9870 -> 9871;
    9871 [label="Identifier"];
    9871 -> 9872;
    9872[label="existskey"];
    9873 -> 9874;
    9874[label="("];
    9873 -> 9875;
    9875 [label="Expr"];
    9875 -> 9876;
    9876 [label="Identifier"];
    9876 -> 9877;
    9877[label="_SkillType"];
    9873 -> 9878;
    9878[label=")"];
    9859 -> 9879;
    9879[label=")"];
    9859 -> 9880;
    9880 [label="Statement(Statement { syntax: 9880, statement: Some(9890), semicolon: Some(9895) })"];
    9880 -> 9881;
    9881 [label="Expr"];
    9881 -> 9884;
    9884 [label="ArrayAccess(ArrayAccess { syntax: 9884, lhs: Some(9882), lsquare: Some(9885), index: Some(9886), rsquare: Some(9889) })"];
    9884 -> 9882;
    9882 [label="Identifier"];
    9882 -> 9883;
    9883[label="PlayerSkillPoints"];
    9884 -> 9885;
    9885[label="["];
    9884 -> 9886;
    9886 [label="Expr"];
    9886 -> 9887;
    9887 [label="Identifier"];
    9887 -> 9888;
    9888[label="_SkillType"];
    9884 -> 9889;
    9889[label="]"];
    9880 -> 9890;
    9890 [label="Assignment(Assignment { syntax: 9890, lvalue: Some(9881), operator: Some(9891), rvalue: Some(9892) })"];
    9890 -> 9891;
    9891[label="="];
    9890 -> 9892;
    9892 [label="Expr"];
    9892 -> 9893;
    9893 [label="Literal"];
    9893 -> 9894;
    9894[label="0"];
    9880 -> 9895;
    9895[label=";"];
    9815 -> 9896;
    9896 [label="Statement(Statement { syntax: 9896, statement: Some(9906), semicolon: Some(9926) })"];
    9896 -> 9897;
    9897 [label="Expr"];
    9897 -> 9900;
    9900 [label="ArrayAccess(ArrayAccess { syntax: 9900, lhs: Some(9898), lsquare: Some(9901), index: Some(9902), rsquare: Some(9905) })"];
    9900 -> 9898;
    9898 [label="Identifier"];
    9898 -> 9899;
    9899[label="PlayerSkillPoints"];
    9900 -> 9901;
    9901[label="["];
    9900 -> 9902;
    9902 [label="Expr"];
    9902 -> 9903;
    9903 [label="Identifier"];
    9903 -> 9904;
    9904[label="_SkillType"];
    9900 -> 9905;
    9905[label="]"];
    9896 -> 9906;
    9906 [label="Assignment(Assignment { syntax: 9906, lvalue: Some(9897), operator: Some(9907), rvalue: Some(9908) })"];
    9906 -> 9907;
    9907[label="+="];
    9906 -> 9908;
    9908 [label="Expr"];
    9908 -> 9916;
    9916 [label="FunctionCall(FunctionCall { syntax: 9916, lhs: Some(9911), lparen: Some(9917), args: [(9918, Some(9921)), (9922, None)], rparen: Some(9925) })"];
    9916 -> 9911;
    9911 [label="BinaryOp(BinaryOp { syntax: 9911, lhs: Some(9909), operator: Some(9912), rhs: Some(9913) })"];
    9911 -> 9909;
    9909 [label="Identifier"];
    9909 -> 9910;
    9910[label="ML"];
    9911 -> 9912;
    9912[label="::"];
    9911 -> 9913;
    9913 [label="Expr"];
    9913 -> 9914;
    9914 [label="Identifier"];
    9914 -> 9915;
    9915[label="Max"];
    9916 -> 9917;
    9917[label="("];
    9916 -> 9918;
    9918 [label="Expr"];
    9918 -> 9919;
    9919 [label="Literal"];
    9919 -> 9920;
    9920[label="0"];
    9916 -> 9921;
    9921[label=","];
    9916 -> 9922;
    9922 [label="Expr"];
    9922 -> 9923;
    9923 [label="Identifier"];
    9923 -> 9924;
    9924[label="_SkillPoints"];
    9916 -> 9925;
    9925[label=")"];
    9896 -> 9926;
    9926[label=";"];
    9815 -> 9927;
    9927 [label="Statement(Statement { syntax: 9927, statement: Some(9928), semicolon: Some(9937) })"];
    9927 -> 9928;
    9928 [label="Expr"];
    9928 -> 9931;
    9931 [label="FunctionCall(FunctionCall { syntax: 9931, lhs: Some(9929), lparen: Some(9932), args: [(9933, None)], rparen: Some(9936) })"];
    9931 -> 9929;
    9929 [label="Identifier"];
    9929 -> 9930;
    9930[label="UpdatePlayerSkills"];
    9931 -> 9932;
    9932[label="("];
    9931 -> 9933;
    9933 [label="Expr"];
    9933 -> 9934;
    9934 [label="Identifier"];
    9934 -> 9935;
    9935[label="_Player"];
    9931 -> 9936;
    9936[label=")"];
    9927 -> 9937;
    9937[label=";"];
    9815 -> 9938;
    9938[label="}"];
    0 -> 9939;
    9939 [label="FuncDec(FuncDec { syntax: 9939, type_: Some(9940), name: Some(9942), lparen: Some(9943), args: [9944], rparen: Some(9948), body: Some(9949) })"];
    9939 -> 9940;
    9940 [label="Type(Type { syntax: 9940, basename: Some(9941), members: [], arrays: [] })"];
    9940 -> 9941;
    9941[label="Void"];
    9939 -> 9942;
    9942[label="HG_SpawnPlayer"];
    9939 -> 9943;
    9943[label="("];
    9939 -> 9944;
    9944 [label="FormalArg(FormalArg { syntax: 9944, type_: Some(9945), name: Some(9947), comma: None })"];
    9944 -> 9945;
    9945 [label="Type(Type { syntax: 9945, basename: Some(9946), members: [], arrays: [] })"];
    9945 -> 9946;
    9946[label="CSmPlayer"];
    9944 -> 9947;
    9947[label="_Player"];
    9939 -> 9948;
    9948[label=")"];
    9939 -> 9949;
    9949 [label="Block(Block { syntax: 9949, lbrace: Some(9950), statements: [9951, 10009, 10020, 10096, 10112, 10141, 10154, 10167, 10198, 10247, 10257, 10349, 10359, 10380, 10415, 10436], rbrace: Some(10451) })"];
    9949 -> 9950;
    9950[label="{"];
    9949 -> 9951;
    9951 [label="Statement(Statement { syntax: 9951, statement: Some(9952), semicolon: None })"];
    9951 -> 9952;
    9952 [label="If(If { syntax: 9952, if_: Some(9953), lparen: Some(9954), condition: Some(9955), rparen: Some(10004), body: Some(10005), else_: None })"];
    9952 -> 9953;
    9953[label="if"];
    9952 -> 9954;
    9954[label="("];
    9952 -> 9955;
    9955 [label="Expr"];
    9955 -> 9988;
    9988 [label="FunctionCall(FunctionCall { syntax: 9988, lhs: Some(9963), lparen: Some(9989), args: [(9990, None)], rparen: Some(10003) })"];
    9988 -> 9963;
    9963 [label="BinaryOp(BinaryOp { syntax: 9963, lhs: Some(9958), operator: Some(9964), rhs: Some(9965) })"];
    9963 -> 9958;
    9958 [label="BinaryOp(BinaryOp { syntax: 9958, lhs: Some(9956), operator: Some(9959), rhs: Some(9960) })"];
    9958 -> 9956;
    9956 [label="Identifier"];
    9956 -> 9957;
    9957[label="_Player"];
    9958 -> 9959;
    9959[label="=="];
    9958 -> 9960;
    9960 [label="Expr"];
    9960 -> 9961;
    9961 [label="Literal"];
    9961 -> 9962;
    9962[label="Null"];
    9963 -> 9964;
    9964[label="||"];
    9963 -> 9965;
    9965 [label="Expr"];
    9965 -> 9978;
    9978 [label="BinaryOp(BinaryOp { syntax: 9978, lhs: Some(9973), operator: Some(9979), rhs: Some(9980) })"];
    9978 -> 9973;
    9973 [label="BinaryOp(BinaryOp { syntax: 9973, lhs: Some(9968), operator: Some(9974), rhs: Some(9975) })"];
    9973 -> 9968;
    9968 [label="BinaryOp(BinaryOp { syntax: 9968, lhs: Some(9966), operator: Some(9969), rhs: Some(9970) })"];
    9968 -> 9966;
    9966 [label="Identifier"];
    9966 -> 9967;
    9967[label="_Player"];
    9968 -> 9969;
    9969[label="."];
    9968 -> 9970;
    9970 [label="Expr"];
    9970 -> 9971;
    9971 [label="Identifier"];
    9971 -> 9972;
    9972[label="User"];
    9973 -> 9974;
    9974[label="=="];
    9973 -> 9975;
    9975 [label="Expr"];
    9975 -> 9976;
    9976 [label="Literal"];
    9976 -> 9977;
    9977[label="Null"];
    9978 -> 9979;
    9979[label="||"];
    9978 -> 9980;
    9980 [label="Expr"];
    9980 -> 9983;
    9983 [label="BinaryOp(BinaryOp { syntax: 9983, lhs: Some(9981), operator: Some(9984), rhs: Some(9985) })"];
    9983 -> 9981;
    9981 [label="Identifier"];
    9981 -> 9982;
    9982[label="G_SpawnedPlayers"];
    9983 -> 9984;
    9984[label="."];
    9983 -> 9985;
    9985 [label="Expr"];
    9985 -> 9986;
    9986 [label="Identifier"];
    9986 -> 9987;
    9987[label="exists"];
    9988 -> 9989;
    9989[label="("];
    9988 -> 9990;
    9990 [label="Expr"];
    9990 -> 9993;
    9993 [label="BinaryOp(BinaryOp { syntax: 9993, lhs: Some(9991), operator: Some(9994), rhs: Some(9995) })"];
    9993 -> 9991;
    9991 [label="Identifier"];
    9991 -> 9992;
    9992[label="_Player"];
    9993 -> 9994;
    9994[label="."];
    9993 -> 9995;
    9995 [label="Expr"];
    9995 -> 9998;
    9998 [label="BinaryOp(BinaryOp { syntax: 9998, lhs: Some(9996), operator: Some(9999), rhs: Some(10000) })"];
    9998 -> 9996;
    9996 [label="Identifier"];
    9996 -> 9997;
    9997[label="User"];
    9998 -> 9999;
    9999[label="."];
    9998 -> 10000;
    10000 [label="Expr"];
    10000 -> 10001;
    10001 [label="Identifier"];
    10001 -> 10002;
    10002[label="Login"];
    9988 -> 10003;
    10003[label=")"];
    9952 -> 10004;
    10004[label=")"];
    9952 -> 10005;
    10005 [label="Statement(Statement { syntax: 10005, statement: Some(10006), semicolon: Some(10008) })"];
    10005 -> 10006;
    10006 [label="Return(Return { syntax: 10006, return_: Some(10007), value: None })"];
    10006 -> 10007;
    10007[label="return"];
    10005 -> 10008;
    10008[label=";"];
    9949 -> 10009;
    10009 [label="Statement(Statement { syntax: 10009, statement: Some(10010), semicolon: Some(10019) })"];
    10009 -> 10010;
    10010 [label="Expr"];
    10010 -> 10013;
    10013 [label="FunctionCall(FunctionCall { syntax: 10013, lhs: Some(10011), lparen: Some(10014), args: [(10015, None)], rparen: Some(10018) })"];
    10013 -> 10011;
    10011 [label="Identifier"];
    10011 -> 10012;
    10012[label="GT_InitPlayer"];
    10013 -> 10014;
    10014[label="("];
    10013 -> 10015;
    10015 [label="Expr"];
    10015 -> 10016;
    10016 [label="Identifier"];
    10016 -> 10017;
    10017[label="_Player"];
    10013 -> 10018;
    10018[label=")"];
    10009 -> 10019;
    10019[label=";"];
    9949 -> 10020;
    10020 [label="Statement(Statement { syntax: 10020, statement: Some(10021), semicolon: Some(10095) })"];
    10020 -> 10021;
    10021 [label="Expr"];
    10021 -> 10029;
    10029 [label="FunctionCall(FunctionCall { syntax: 10029, lhs: Some(10024), lparen: Some(10030), args: [(10031, Some(10034)), (10035, None)], rparen: Some(10094) })"];
    10029 -> 10024;
    10024 [label="BinaryOp(BinaryOp { syntax: 10024, lhs: Some(10022), operator: Some(10025), rhs: Some(10026) })"];
    10024 -> 10022;
    10022 [label="Identifier"];
    10022 -> 10023;
    10023[label="Inventory"];
    10024 -> 10025;
    10025[label="::"];
    10024 -> 10026;
    10026 [label="Expr"];
    10026 -> 10027;
    10027 [label="Identifier"];
    10027 -> 10028;
    10028[label="SetAvailableWeapons"];
    10029 -> 10030;
    10030[label="("];
    10029 -> 10031;
    10031 [label="Expr"];
    10031 -> 10032;
    10032 [label="Identifier"];
    10032 -> 10033;
    10033[label="_Player"];
    10029 -> 10034;
    10034[label=","];
    10029 -> 10035;
    10035 [label="Expr"];
    10035 -> 10036;
    10036 [label="Array(Array { syntax: 10036, lsquare: Some(10037), values: [(10038, Some(10051)), (10052, Some(10065)), (10066, Some(10079)), (10080, None)], rsquare: Some(10093) })"];
    10036 -> 10037;
    10037[label="["];
    10036 -> 10038;
    10038 [label="Expr"];
    10038 -> 10041;
    10041 [label="BinaryOp(BinaryOp { syntax: 10041, lhs: Some(10039), operator: Some(10042), rhs: Some(10043) })"];
    10041 -> 10039;
    10039 [label="Identifier"];
    10039 -> 10040;
    10040[label="CSmMode"];
    10041 -> 10042;
    10042[label="::"];
    10041 -> 10043;
    10043 [label="Expr"];
    10043 -> 10046;
    10046 [label="BinaryOp(BinaryOp { syntax: 10046, lhs: Some(10044), operator: Some(10047), rhs: Some(10048) })"];
    10046 -> 10044;
    10044 [label="Identifier"];
    10044 -> 10045;
    10045[label="EWeapon"];
    10046 -> 10047;
    10047[label="::"];
    10046 -> 10048;
    10048 [label="Expr"];
    10048 -> 10049;
    10049 [label="Identifier"];
    10049 -> 10050;
    10050[label="Laser"];
    10036 -> 10051;
    10051[label=","];
    10036 -> 10052;
    10052 [label="Expr"];
    10052 -> 10055;
    10055 [label="BinaryOp(BinaryOp { syntax: 10055, lhs: Some(10053), operator: Some(10056), rhs: Some(10057) })"];
    10055 -> 10053;
    10053 [label="Identifier"];
    10053 -> 10054;
    10054[label="CSmMode"];
    10055 -> 10056;
    10056[label="::"];
    10055 -> 10057;
    10057 [label="Expr"];
    10057 -> 10060;
    10060 [label="BinaryOp(BinaryOp { syntax: 10060, lhs: Some(10058), operator: Some(10061), rhs: Some(10062) })"];
    10060 -> 10058;
    10058 [label="Identifier"];
    10058 -> 10059;
    10059[label="EWeapon"];
    10060 -> 10061;
    10061[label="::"];
    10060 -> 10062;
    10062 [label="Expr"];
    10062 -> 10063;
    10063 [label="Identifier"];
    10063 -> 10064;
    10064[label="Nucleus"];
    10036 -> 10065;
    10065[label=","];
    10036 -> 10066;
    10066 [label="Expr"];
    10066 -> 10069;
    10069 [label="BinaryOp(BinaryOp { syntax: 10069, lhs: Some(10067), operator: Some(10070), rhs: Some(10071) })"];
    10069 -> 10067;
    10067 [label="Identifier"];
    10067 -> 10068;
    10068[label="CSmMode"];
    10069 -> 10070;
    10070[label="::"];
    10069 -> 10071;
    10071 [label="Expr"];
    10071 -> 10074;
    10074 [label="BinaryOp(BinaryOp { syntax: 10074, lhs: Some(10072), operator: Some(10075), rhs: Some(10076) })"];
    10074 -> 10072;
    10072 [label="Identifier"];
    10072 -> 10073;
    10073[label="EWeapon"];
    10074 -> 10075;
    10075[label="::"];
    10074 -> 10076;
    10076 [label="Expr"];
    10076 -> 10077;
    10077 [label="Identifier"];
    10077 -> 10078;
    10078[label="Arrow"];
    10036 -> 10079;
    10079[label=","];
    10036 -> 10080;
    10080 [label="Expr"];
    10080 -> 10083;
    10083 [label="BinaryOp(BinaryOp { syntax: 10083, lhs: Some(10081), operator: Some(10084), rhs: Some(10085) })"];
    10083 -> 10081;
    10081 [label="Identifier"];
    10081 -> 10082;
    10082[label="CSmMode"];
    10083 -> 10084;
    10084[label="::"];
    10083 -> 10085;
    10085 [label="Expr"];
    10085 -> 10088;
    10088 [label="BinaryOp(BinaryOp { syntax: 10088, lhs: Some(10086), operator: Some(10089), rhs: Some(10090) })"];
    10088 -> 10086;
    10086 [label="Identifier"];
    10086 -> 10087;
    10087[label="EWeapon"];
    10088 -> 10089;
    10089[label="::"];
    10088 -> 10090;
    10090 [label="Expr"];
    10090 -> 10091;
    10091 [label="Identifier"];
    10091 -> 10092;
    10092[label="Rocket"];
    10036 -> 10093;
    10093[label="]"];
    10029 -> 10094;
    10094[label=")"];
    10020 -> 10095;
    10095[label=";"];
    9949 -> 10096;
    10096 [label="Statement(Statement { syntax: 10096, statement: Some(10097), semicolon: Some(10111) })"];
    10096 -> 10097;
    10097 [label="Expr"];
    10097 -> 10105;
    10105 [label="FunctionCall(FunctionCall { syntax: 10105, lhs: Some(10100), lparen: Some(10106), args: [(10107, None)], rparen: Some(10110) })"];
    10105 -> 10100;
    10100 [label="BinaryOp(BinaryOp { syntax: 10100, lhs: Some(10098), operator: Some(10101), rhs: Some(10102) })"];
    10100 -> 10098;
    10098 [label="Identifier"];
    10098 -> 10099;
    10099[label="Inventory"];
    10100 -> 10101;
    10101[label="::"];
    10100 -> 10102;
    10102 [label="Expr"];
    10102 -> 10103;
    10103 [label="Identifier"];
    10103 -> 10104;
    10104[label="SetFirstWeapon"];
    10105 -> 10106;
    10106[label="("];
    10105 -> 10107;
    10107 [label="Expr"];
    10107 -> 10108;
    10108 [label="Identifier"];
    10108 -> 10109;
    10109[label="_Player"];
    10105 -> 10110;
    10110[label=")"];
    10096 -> 10111;
    10111[label=";"];
    9949 -> 10112;
    10112 [label="Statement(Statement { syntax: 10112, statement: Some(10113), semicolon: Some(10140) })"];
    10112 -> 10113;
    10113 [label="Expr"];
    10113 -> 10116;
    10116 [label="FunctionCall(FunctionCall { syntax: 10116, lhs: Some(10114), lparen: Some(10117), args: [(10118, Some(10121)), (10122, Some(10135)), (10136, None)], rparen: Some(10139) })"];
    10116 -> 10114;
    10114 [label="Identifier"];
    10114 -> 10115;
    10115[label="SetPlayerAmmoMax"];
    10116 -> 10117;
    10117[label="("];
    10116 -> 10118;
    10118 [label="Expr"];
    10118 -> 10119;
    10119 [label="Identifier"];
    10119 -> 10120;
    10120[label="_Player"];
    10116 -> 10121;
    10121[label=","];
    10116 -> 10122;
    10122 [label="Expr"];
    10122 -> 10125;
    10125 [label="BinaryOp(BinaryOp { syntax: 10125, lhs: Some(10123), operator: Some(10126), rhs: Some(10127) })"];
    10125 -> 10123;
    10123 [label="Identifier"];
    10123 -> 10124;
    10124[label="CSmMode"];
    10125 -> 10126;
    10126[label="::"];
    10125 -> 10127;
    10127 [label="Expr"];
    10127 -> 10130;
    10130 [label="BinaryOp(BinaryOp { syntax: 10130, lhs: Some(10128), operator: Some(10131), rhs: Some(10132) })"];
    10130 -> 10128;
    10128 [label="Identifier"];
    10128 -> 10129;
    10129[label="EWeapon"];
    10130 -> 10131;
    10131[label="::"];
    10130 -> 10132;
    10132 [label="Expr"];
    10132 -> 10133;
    10133 [label="Identifier"];
    10133 -> 10134;
    10134[label="Rocket"];
    10116 -> 10135;
    10135[label=","];
    10116 -> 10136;
    10136 [label="Expr"];
    10136 -> 10137;
    10137 [label="Literal"];
    10137 -> 10138;
    10138[label="0"];
    10116 -> 10139;
    10139[label=")"];
    10112 -> 10140;
    10140[label=";"];
    9949 -> 10141;
    10141 [label="Statement(Statement { syntax: 10141, statement: Some(10142), semicolon: None })"];
    10141 -> 10142;
    10142 [label="VarDec(VarDec { syntax: 10142, declare: Some(10143), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(10144), name: Some(10148), as_: None, alias: None, for_: Some(10149), target: Some(10150), assignment: None, value: None })"];
    10142 -> 10143;
    10143[label="declare"];
    10142 -> 10144;
    10144 [label="Type(Type { syntax: 10144, basename: Some(10145), members: [], arrays: [(10146, None, 10147)] })"];
    10144 -> 10145;
    10145[label="Text"];
    10144 -> 10146;
    10146[label="["];
    10144 -> 10147;
    10147[label="]"];
    10142 -> 10148;
    10148[label="ObjectsToDrop"];
    10142 -> 10149;
    10149[label="for"];
    10142 -> 10150;
    10150 [label="Expr"];
    10150 -> 10151;
    10151 [label="Identifier"];
    10151 -> 10152;
    10152[label="_Player"];
    10142 -> 10153;
    10153[label=";"];
    9949 -> 10154;
    10154 [label="Statement(Statement { syntax: 10154, statement: Some(10155), semicolon: Some(10166) })"];
    10154 -> 10155;
    10155 [label="Expr"];
    10155 -> 10163;
    10163 [label="FunctionCall(FunctionCall { syntax: 10163, lhs: Some(10158), lparen: Some(10164), args: [], rparen: Some(10165) })"];
    10163 -> 10158;
    10158 [label="BinaryOp(BinaryOp { syntax: 10158, lhs: Some(10156), operator: Some(10159), rhs: Some(10160) })"];
    10158 -> 10156;
    10156 [label="Identifier"];
    10156 -> 10157;
    10157[label="ObjectsToDrop"];
    10158 -> 10159;
    10159[label="."];
    10158 -> 10160;
    10160 [label="Expr"];
    10160 -> 10161;
    10161 [label="Identifier"];
    10161 -> 10162;
    10162[label="clear"];
    10163 -> 10164;
    10164[label="("];
    10163 -> 10165;
    10165[label=")"];
    10154 -> 10166;
    10166[label=";"];
    9949 -> 10167;
    10167 [label="Statement(Statement { syntax: 10167, statement: Some(10168), semicolon: None })"];
    10167 -> 10168;
    10168 [label="Foreach(Foreach { syntax: 10168, foreach: Some(10169), lparen: Some(10170), name1: Some(10171), arrow: Some(10172), name2: Some(10173), in_: Some(10174), value: Some(10175), rparen: Some(10178), body: Some(10179) })"];
    10168 -> 10169;
    10169[label="foreach"];
    10168 -> 10170;
    10170[label="("];
    10168 -> 10171;
    10171[label="SkillType"];
    10168 -> 10172;
    10172[label="=>"];
    10168 -> 10173;
    10173[label="SkillPoints"];
    10168 -> 10174;
    10174[label="in"];
    10168 -> 10175;
    10175 [label="Expr"];
    10175 -> 10176;
    10176 [label="Identifier"];
    10176 -> 10177;
    10177[label="C_SkillsPointsStart"];
    10168 -> 10178;
    10178[label=")"];
    10168 -> 10179;
    10179 [label="Statement(Statement { syntax: 10179, statement: Some(10180), semicolon: Some(10197) })"];
    10179 -> 10180;
    10180 [label="Expr"];
    10180 -> 10183;
    10183 [label="FunctionCall(FunctionCall { syntax: 10183, lhs: Some(10181), lparen: Some(10184), args: [(10185, Some(10188)), (10189, Some(10192)), (10193, None)], rparen: Some(10196) })"];
    10183 -> 10181;
    10181 [label="Identifier"];
    10181 -> 10182;
    10182[label="SetPlayerSkill"];
    10183 -> 10184;
    10184[label="("];
    10183 -> 10185;
    10185 [label="Expr"];
    10185 -> 10186;
    10186 [label="Identifier"];
    10186 -> 10187;
    10187[label="_Player"];
    10183 -> 10188;
    10188[label=","];
    10183 -> 10189;
    10189 [label="Expr"];
    10189 -> 10190;
    10190 [label="Identifier"];
    10190 -> 10191;
    10191[label="SkillType"];
    10183 -> 10192;
    10192[label=","];
    10183 -> 10193;
    10193 [label="Expr"];
    10193 -> 10194;
    10194 [label="Identifier"];
    10194 -> 10195;
    10195[label="SkillPoints"];
    10183 -> 10196;
    10196[label=")"];
    10179 -> 10197;
    10197[label=";"];
    9949 -> 10198;
    10198 [label="Statement(Statement { syntax: 10198, statement: Some(10199), semicolon: None })"];
    10198 -> 10199;
    10199 [label="If(If { syntax: 10199, if_: Some(10200), lparen: Some(10201), condition: Some(10202), rparen: Some(10215), body: Some(10216), else_: None })"];
    10199 -> 10200;
    10200[label="if"];
    10199 -> 10201;
    10201[label="("];
    10199 -> 10202;
    10202 [label="Expr"];
    10202 -> 10210;
    10210 [label="BinaryOp(BinaryOp { syntax: 10210, lhs: Some(10205), operator: Some(10211), rhs: Some(10212) })"];
    10210 -> 10205;
    10205 [label="BinaryOp(BinaryOp { syntax: 10205, lhs: Some(10203), operator: Some(10206), rhs: Some(10207) })"];
    10205 -> 10203;
    10203 [label="Identifier"];
    10203 -> 10204;
    10204[label="G_SpawnsList"];
    10205 -> 10206;
    10206[label="."];
    10205 -> 10207;
    10207 [label="Expr"];
    10207 -> 10208;
    10208 [label="Identifier"];
    10208 -> 10209;
    10209[label="count"];
    10210 -> 10211;
    10211[label="=="];
    10210 -> 10212;
    10212 [label="Expr"];
    10212 -> 10213;
    10213 [label="Literal"];
    10213 -> 10214;
    10214[label="0"];
    10199 -> 10215;
    10215[label=")"];
    10199 -> 10216;
    10216 [label="Statement(Statement { syntax: 10216, statement: Some(10217), semicolon: None })"];
    10216 -> 10217;
    10217 [label="Foreach(Foreach { syntax: 10217, foreach: Some(10218), lparen: Some(10219), name1: Some(10220), arrow: None, name2: None, in_: Some(10221), value: Some(10222), rparen: Some(10225), body: Some(10226) })"];
    10217 -> 10218;
    10218[label="foreach"];
    10217 -> 10219;
    10219[label="("];
    10217 -> 10220;
    10220[label="MapLandmark"];
    10217 -> 10221;
    10221[label="in"];
    10217 -> 10222;
    10222 [label="Expr"];
    10222 -> 10223;
    10223 [label="Identifier"];
    10223 -> 10224;
    10224[label="MapLandmarks_PlayerSpawn"];
    10217 -> 10225;
    10225[label=")"];
    10217 -> 10226;
    10226 [label="Statement(Statement { syntax: 10226, statement: Some(10227), semicolon: Some(10246) })"];
    10226 -> 10227;
    10227 [label="Expr"];
    10227 -> 10235;
    10235 [label="FunctionCall(FunctionCall { syntax: 10235, lhs: Some(10230), lparen: Some(10236), args: [(10237, None)], rparen: Some(10245) })"];
    10235 -> 10230;
    10230 [label="BinaryOp(BinaryOp { syntax: 10230, lhs: Some(10228), operator: Some(10231), rhs: Some(10232) })"];
    10230 -> 10228;
    10228 [label="Identifier"];
    10228 -> 10229;
    10229[label="G_SpawnsList"];
    10230 -> 10231;
    10231[label="."];
    10230 -> 10232;
    10232 [label="Expr"];
    10232 -> 10233;
    10233 [label="Identifier"];
    10233 -> 10234;
    10234[label="add"];
    10235 -> 10236;
    10236[label="("];
    10235 -> 10237;
    10237 [label="Expr"];
    10237 -> 10240;
    10240 [label="BinaryOp(BinaryOp { syntax: 10240, lhs: Some(10238), operator: Some(10241), rhs: Some(10242) })"];
    10240 -> 10238;
    10238 [label="Identifier"];
    10238 -> 10239;
    10239[label="MapLandmark"];
    10240 -> 10241;
    10241[label="."];
    10240 -> 10242;
    10242 [label="Expr"];
    10242 -> 10243;
    10243 [label="Identifier"];
    10243 -> 10244;
    10244[label="Id"];
    10235 -> 10245;
    10245[label=")"];
    10226 -> 10246;
    10246[label=";"];
    9949 -> 10247;
    10247 [label="Statement(Statement { syntax: 10247, statement: Some(10248), semicolon: None })"];
    10247 -> 10248;
    10248 [label="VarDec(VarDec { syntax: 10248, declare: Some(10249), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10250), as_: None, alias: None, for_: None, target: None, assignment: Some(10252), value: Some(10253) })"];
    10248 -> 10249;
    10249[label="declare"];
    10248 -> 10250;
    10250 [label="Type(Type { syntax: 10250, basename: Some(10251), members: [], arrays: [] })"];
    10250 -> 10251;
    10251[label="SpawnId"];
    10248 -> 10252;
    10252[label="="];
    10248 -> 10253;
    10253 [label="Expr"];
    10253 -> 10254;
    10254 [label="Literal"];
    10254 -> 10255;
    10255[label="NullId"];
    10248 -> 10256;
    10256[label=";"];
    9949 -> 10257;
    10257 [label="Statement(Statement { syntax: 10257, statement: Some(10258), semicolon: None })"];
    10257 -> 10258;
    10258 [label="While(While { syntax: 10258, while_: Some(10259), lparen: Some(10260), condition: Some(10261), rparen: Some(10264), body: Some(10265) })"];
    10258 -> 10259;
    10259[label="while"];
    10258 -> 10260;
    10260[label="("];
    10258 -> 10261;
    10261 [label="Expr"];
    10261 -> 10262;
    10262 [label="Literal"];
    10262 -> 10263;
    10263[label="True"];
    10258 -> 10264;
    10264[label=")"];
    10258 -> 10265;
    10265 [label="Statement(Statement { syntax: 10265, statement: Some(10266), semicolon: None })"];
    10265 -> 10266;
    10266 [label="Block(Block { syntax: 10266, lbrace: Some(10267), statements: [10268, 10309, 10326], rbrace: Some(10348) })"];
    10266 -> 10267;
    10267[label="{"];
    10266 -> 10268;
    10268 [label="Statement(Statement { syntax: 10268, statement: Some(10272), semicolon: Some(10308) })"];
    10268 -> 10269;
    10269 [label="Expr"];
    10269 -> 10270;
    10270 [label="Identifier"];
    10270 -> 10271;
    10271[label="SpawnId"];
    10268 -> 10272;
    10272 [label="Assignment(Assignment { syntax: 10272, lvalue: Some(10269), operator: Some(10273), rvalue: Some(10274) })"];
    10272 -> 10273;
    10273[label="="];
    10272 -> 10274;
    10274 [label="Expr"];
    10274 -> 10277;
    10277 [label="ArrayAccess(ArrayAccess { syntax: 10277, lhs: Some(10275), lsquare: Some(10278), index: Some(10279), rsquare: Some(10307) })"];
    10277 -> 10275;
    10275 [label="Identifier"];
    10275 -> 10276;
    10276[label="G_SpawnsList"];
    10277 -> 10278;
    10278[label="["];
    10277 -> 10279;
    10279 [label="Expr"];
    10279 -> 10287;
    10287 [label="FunctionCall(FunctionCall { syntax: 10287, lhs: Some(10282), lparen: Some(10288), args: [(10289, Some(10292)), (10293, None)], rparen: Some(10306) })"];
    10287 -> 10282;
    10282 [label="BinaryOp(BinaryOp { syntax: 10282, lhs: Some(10280), operator: Some(10283), rhs: Some(10284) })"];
    10282 -> 10280;
    10280 [label="Identifier"];
    10280 -> 10281;
    10281[label="ML"];
    10282 -> 10283;
    10283[label="::"];
    10282 -> 10284;
    10284 [label="Expr"];
    10284 -> 10285;
    10285 [label="Identifier"];
    10285 -> 10286;
    10286[label="Rand"];
    10287 -> 10288;
    10288[label="("];
    10287 -> 10289;
    10289 [label="Expr"];
    10289 -> 10290;
    10290 [label="Literal"];
    10290 -> 10291;
    10291[label="0"];
    10287 -> 10292;
    10292[label=","];
    10287 -> 10293;
    10293 [label="Expr"];
    10293 -> 10301;
    10301 [label="BinaryOp(BinaryOp { syntax: 10301, lhs: Some(10296), operator: Some(10302), rhs: Some(10303) })"];
    10301 -> 10296;
    10296 [label="BinaryOp(BinaryOp { syntax: 10296, lhs: Some(10294), operator: Some(10297), rhs: Some(10298) })"];
    10296 -> 10294;
    10294 [label="Identifier"];
    10294 -> 10295;
    10295[label="G_SpawnsList"];
    10296 -> 10297;
    10297[label="."];
    10296 -> 10298;
    10298 [label="Expr"];
    10298 -> 10299;
    10299 [label="Identifier"];
    10299 -> 10300;
    10300[label="count"];
    10301 -> 10302;
    10302[label="-"];
    10301 -> 10303;
    10303 [label="Expr"];
    10303 -> 10304;
    10304 [label="Literal"];
    10304 -> 10305;
    10305[label="1"];
    10287 -> 10306;
    10306[label=")"];
    10277 -> 10307;
    10307[label="]"];
    10268 -> 10308;
    10308[label=";"];
    10266 -> 10309;
    10309 [label="Statement(Statement { syntax: 10309, statement: Some(10310), semicolon: None })"];
    10309 -> 10310;
    10310 [label="If(If { syntax: 10310, if_: Some(10311), lparen: Some(10312), condition: Some(10313), rparen: Some(10321), body: Some(10322), else_: None })"];
    10310 -> 10311;
    10311[label="if"];
    10310 -> 10312;
    10312[label="("];
    10310 -> 10313;
    10313 [label="Expr"];
    10313 -> 10316;
    10316 [label="BinaryOp(BinaryOp { syntax: 10316, lhs: Some(10314), operator: Some(10317), rhs: Some(10318) })"];
    10316 -> 10314;
    10314 [label="Identifier"];
    10314 -> 10315;
    10315[label="SpawnId"];
    10316 -> 10317;
    10317[label="!="];
    10316 -> 10318;
    10318 [label="Expr"];
    10318 -> 10319;
    10319 [label="Identifier"];
    10319 -> 10320;
    10320[label="G_LatestSpawnId"];
    10310 -> 10321;
    10321[label=")"];
    10310 -> 10322;
    10322 [label="Statement(Statement { syntax: 10322, statement: Some(10323), semicolon: Some(10325) })"];
    10322 -> 10323;
    10323 [label="Break"];
    10323 -> 10324;
    10324[label="break"];
    10322 -> 10325;
    10325[label=";"];
    10266 -> 10326;
    10326 [label="Statement(Statement { syntax: 10326, statement: Some(10327), semicolon: None })"];
    10326 -> 10327;
    10327 [label="If(If { syntax: 10327, if_: Some(10328), lparen: Some(10329), condition: Some(10330), rparen: Some(10343), body: Some(10344), else_: None })"];
    10327 -> 10328;
    10328[label="if"];
    10327 -> 10329;
    10329[label="("];
    10327 -> 10330;
    10330 [label="Expr"];
    10330 -> 10338;
    10338 [label="BinaryOp(BinaryOp { syntax: 10338, lhs: Some(10333), operator: Some(10339), rhs: Some(10340) })"];
    10338 -> 10333;
    10333 [label="BinaryOp(BinaryOp { syntax: 10333, lhs: Some(10331), operator: Some(10334), rhs: Some(10335) })"];
    10333 -> 10331;
    10331 [label="Identifier"];
    10331 -> 10332;
    10332[label="G_SpawnsList"];
    10333 -> 10334;
    10334[label="."];
    10333 -> 10335;
    10335 [label="Expr"];
    10335 -> 10336;
    10336 [label="Identifier"];
    10336 -> 10337;
    10337[label="count"];
    10338 -> 10339;
    10339[label="=="];
    10338 -> 10340;
    10340 [label="Expr"];
    10340 -> 10341;
    10341 [label="Literal"];
    10341 -> 10342;
    10342[label="1"];
    10327 -> 10343;
    10343[label=")"];
    10327 -> 10344;
    10344 [label="Statement(Statement { syntax: 10344, statement: Some(10345), semicolon: Some(10347) })"];
    10344 -> 10345;
    10345 [label="Break"];
    10345 -> 10346;
    10346[label="break"];
    10344 -> 10347;
    10347[label=";"];
    10266 -> 10348;
    10348[label="}"];
    9949 -> 10349;
    10349 [label="Statement(Statement { syntax: 10349, statement: Some(10353), semicolon: Some(10358) })"];
    10349 -> 10350;
    10350 [label="Expr"];
    10350 -> 10351;
    10351 [label="Identifier"];
    10351 -> 10352;
    10352[label="G_LatestSpawnId"];
    10349 -> 10353;
    10353 [label="Assignment(Assignment { syntax: 10353, lvalue: Some(10350), operator: Some(10354), rvalue: Some(10355) })"];
    10353 -> 10354;
    10354[label="="];
    10353 -> 10355;
    10355 [label="Expr"];
    10355 -> 10356;
    10356 [label="Identifier"];
    10356 -> 10357;
    10357[label="SpawnId"];
    10349 -> 10358;
    10358[label=";"];
    9949 -> 10359;
    10359 [label="Statement(Statement { syntax: 10359, statement: Some(10360), semicolon: None })"];
    10359 -> 10360;
    10360 [label="VarDec(VarDec { syntax: 10360, declare: Some(10361), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10362), as_: None, alias: None, for_: None, target: None, assignment: Some(10364), value: Some(10365) })"];
    10360 -> 10361;
    10361[label="declare"];
    10360 -> 10362;
    10362 [label="Type(Type { syntax: 10362, basename: Some(10363), members: [], arrays: [] })"];
    10362 -> 10363;
    10363[label="Removed"];
    10360 -> 10364;
    10364[label="="];
    10360 -> 10365;
    10365 [label="Expr"];
    10365 -> 10373;
    10373 [label="FunctionCall(FunctionCall { syntax: 10373, lhs: Some(10368), lparen: Some(10374), args: [(10375, None)], rparen: Some(10378) })"];
    10373 -> 10368;
    10368 [label="BinaryOp(BinaryOp { syntax: 10368, lhs: Some(10366), operator: Some(10369), rhs: Some(10370) })"];
    10368 -> 10366;
    10366 [label="Identifier"];
    10366 -> 10367;
    10367[label="G_SpawnsList"];
    10368 -> 10369;
    10369[label="."];
    10368 -> 10370;
    10370 [label="Expr"];
    10370 -> 10371;
    10371 [label="Identifier"];
    10371 -> 10372;
    10372[label="remove"];
    10373 -> 10374;
    10374[label="("];
    10373 -> 10375;
    10375 [label="Expr"];
    10375 -> 10376;
    10376 [label="Identifier"];
    10376 -> 10377;
    10377[label="SpawnId"];
    10373 -> 10378;
    10378[label=")"];
    10360 -> 10379;
    10379[label=";"];
    9949 -> 10380;
    10380 [label="Statement(Statement { syntax: 10380, statement: Some(10381), semicolon: Some(10414) })"];
    10380 -> 10381;
    10381 [label="Expr"];
    10381 -> 10389;
    10389 [label="FunctionCall(FunctionCall { syntax: 10389, lhs: Some(10384), lparen: Some(10390), args: [(10391, Some(10394)), (10395, Some(10398)), (10399, None)], rparen: Some(10413) })"];
    10389 -> 10384;
    10384 [label="BinaryOp(BinaryOp { syntax: 10384, lhs: Some(10382), operator: Some(10385), rhs: Some(10386) })"];
    10384 -> 10382;
    10382 [label="Identifier"];
    10382 -> 10383;
    10383[label="SM"];
    10384 -> 10385;
    10385[label="::"];
    10384 -> 10386;
    10386 [label="Expr"];
    10386 -> 10387;
    10387 [label="Identifier"];
    10387 -> 10388;
    10388[label="Spawn"];
    10389 -> 10390;
    10390[label="("];
    10389 -> 10391;
    10391 [label="Expr"];
    10391 -> 10392;
    10392 [label="Identifier"];
    10392 -> 10393;
    10393[label="_Player"];
    10389 -> 10394;
    10394[label=","];
    10389 -> 10395;
    10395 [label="Expr"];
    10395 -> 10396;
    10396 [label="Literal"];
    10396 -> 10397;
    10397[label="0"];
    10389 -> 10398;
    10398[label=","];
    10389 -> 10399;
    10399 [label="Expr"];
    10399 -> 10408;
    10408 [label="BinaryOp(BinaryOp { syntax: 10408, lhs: Some(10402), operator: Some(10409), rhs: Some(10410) })"];
    10408 -> 10402;
    10402 [label="ArrayAccess(ArrayAccess { syntax: 10402, lhs: Some(10400), lsquare: Some(10403), index: Some(10404), rsquare: Some(10407) })"];
    10402 -> 10400;
    10400 [label="Identifier"];
    10400 -> 10401;
    10401[label="MapLandmarks_PlayerSpawn"];
    10402 -> 10403;
    10403[label="["];
    10402 -> 10404;
    10404 [label="Expr"];
    10404 -> 10405;
    10405 [label="Identifier"];
    10405 -> 10406;
    10406[label="SpawnId"];
    10402 -> 10407;
    10407[label="]"];
    10408 -> 10409;
    10409[label="."];
    10408 -> 10410;
    10410 [label="Expr"];
    10410 -> 10411;
    10411 [label="Identifier"];
    10411 -> 10412;
    10412[label="PlayerSpawn"];
    10389 -> 10413;
    10413[label=")"];
    10380 -> 10414;
    10414[label=";"];
    9949 -> 10415;
    10415 [label="Statement(Statement { syntax: 10415, statement: Some(10416), semicolon: Some(10435) })"];
    10415 -> 10416;
    10416 [label="Expr"];
    10416 -> 10424;
    10424 [label="FunctionCall(FunctionCall { syntax: 10424, lhs: Some(10419), lparen: Some(10425), args: [(10426, None)], rparen: Some(10434) })"];
    10424 -> 10419;
    10419 [label="BinaryOp(BinaryOp { syntax: 10419, lhs: Some(10417), operator: Some(10420), rhs: Some(10421) })"];
    10419 -> 10417;
    10417 [label="Identifier"];
    10417 -> 10418;
    10418[label="G_SpawnedPlayers"];
    10419 -> 10420;
    10420[label="."];
    10419 -> 10421;
    10421 [label="Expr"];
    10421 -> 10422;
    10422 [label="Identifier"];
    10422 -> 10423;
    10423[label="add"];
    10424 -> 10425;
    10425[label="("];
    10424 -> 10426;
    10426 [label="Expr"];
    10426 -> 10429;
    10429 [label="BinaryOp(BinaryOp { syntax: 10429, lhs: Some(10427), operator: Some(10430), rhs: Some(10431) })"];
    10429 -> 10427;
    10427 [label="Identifier"];
    10427 -> 10428;
    10428[label="_Player"];
    10429 -> 10430;
    10430[label="."];
    10429 -> 10431;
    10431 [label="Expr"];
    10431 -> 10432;
    10432 [label="Identifier"];
    10432 -> 10433;
    10433[label="Login"];
    10424 -> 10434;
    10434[label=")"];
    10415 -> 10435;
    10435[label=";"];
    9949 -> 10436;
    10436 [label="Statement(Statement { syntax: 10436, statement: Some(10445), semicolon: Some(10450) })"];
    10436 -> 10437;
    10437 [label="Expr"];
    10437 -> 10440;
    10440 [label="BinaryOp(BinaryOp { syntax: 10440, lhs: Some(10438), operator: Some(10441), rhs: Some(10442) })"];
    10440 -> 10438;
    10438 [label="Identifier"];
    10438 -> 10439;
    10439[label="_Player"];
    10440 -> 10441;
    10441[label="."];
    10440 -> 10442;
    10442 [label="Expr"];
    10442 -> 10443;
    10443 [label="Identifier"];
    10443 -> 10444;
    10444[label="HasShield"];
    10436 -> 10445;
    10445 [label="Assignment(Assignment { syntax: 10445, lvalue: Some(10437), operator: Some(10446), rvalue: Some(10447) })"];
    10445 -> 10446;
    10446[label="="];
    10445 -> 10447;
    10447 [label="Expr"];
    10447 -> 10448;
    10448 [label="Literal"];
    10448 -> 10449;
    10449[label="False"];
    10436 -> 10450;
    10450[label=";"];
    9949 -> 10451;
    10451[label="}"];
    0 -> 10452;
    10452 [label="FuncDec(FuncDec { syntax: 10452, type_: Some(10453), name: Some(10455), lparen: Some(10456), args: [10457, 10462, 10467], rparen: Some(10471), body: Some(10472) })"];
    10452 -> 10453;
    10453 [label="Type(Type { syntax: 10453, basename: Some(10454), members: [], arrays: [] })"];
    10453 -> 10454;
    10454[label="CSmObject"];
    10452 -> 10455;
    10455[label="SpawnObject"];
    10452 -> 10456;
    10456[label="("];
    10452 -> 10457;
    10457 [label="FormalArg(FormalArg { syntax: 10457, type_: Some(10458), name: Some(10460), comma: Some(10461) })"];
    10457 -> 10458;
    10458 [label="Type(Type { syntax: 10458, basename: Some(10459), members: [], arrays: [] })"];
    10458 -> 10459;
    10459[label="Vec3"];
    10457 -> 10460;
    10460[label="_Position"];
    10457 -> 10461;
    10461[label=","];
    10452 -> 10462;
    10462 [label="FormalArg(FormalArg { syntax: 10462, type_: Some(10463), name: Some(10465), comma: Some(10466) })"];
    10462 -> 10463;
    10463 [label="Type(Type { syntax: 10463, basename: Some(10464), members: [], arrays: [] })"];
    10463 -> 10464;
    10464[label="Text"];
    10462 -> 10465;
    10465[label="_ObjectTag"];
    10462 -> 10466;
    10466[label=","];
    10452 -> 10467;
    10467 [label="FormalArg(FormalArg { syntax: 10467, type_: Some(10468), name: Some(10470), comma: None })"];
    10467 -> 10468;
    10468 [label="Type(Type { syntax: 10468, basename: Some(10469), members: [], arrays: [] })"];
    10468 -> 10469;
    10469[label="Ident"];
    10467 -> 10470;
    10470[label="_AnchorId"];
    10452 -> 10471;
    10471[label=")"];
    10452 -> 10472;
    10472 [label="Block(Block { syntax: 10472, lbrace: Some(10473), statements: [10474, 10525, 10535, 10564, 10589, 10736, 10749, 10760, 10770, 10780, 10801, 10812, 10837], rbrace: Some(10844) })"];
    10472 -> 10473;
    10473[label="{"];
    10472 -> 10474;
    10474 [label="Statement(Statement { syntax: 10474, statement: Some(10475), semicolon: None })"];
    10474 -> 10475;
    10475 [label="If(If { syntax: 10475, if_: Some(10476), lparen: Some(10477), condition: Some(10478), rparen: Some(10517), body: Some(10518), else_: None })"];
    10475 -> 10476;
    10476[label="if"];
    10475 -> 10477;
    10477[label="("];
    10475 -> 10478;
    10478 [label="Expr"];
    10478 -> 10511;
    10511 [label="FunctionCall(FunctionCall { syntax: 10511, lhs: Some(10498), lparen: Some(10512), args: [(10513, None)], rparen: Some(10516) })"];
    10511 -> 10498;
    10498 [label="BinaryOp(BinaryOp { syntax: 10498, lhs: Some(10481), operator: Some(10499), rhs: Some(10500) })"];
    10498 -> 10481;
    10481 [label="BinaryOp(BinaryOp { syntax: 10481, lhs: Some(10479), operator: Some(10482), rhs: Some(10483) })"];
    10481 -> 10479;
    10479 [label="Identifier"];
    10479 -> 10480;
    10480[label="_Position"];
    10481 -> 10482;
    10482[label="=="];
    10481 -> 10483;
    10483 [label="Expr"];
    10483 -> 10484;
    10484 [label="Vector(Vector { syntax: 10484, langle: Some(10485), values: [(10486, Some(10489)), (10490, Some(10493)), (10494, None)], rangle: Some(10497) })"];
    10484 -> 10485;
    10485[label="<"];
    10484 -> 10486;
    10486 [label="Expr"];
    10486 -> 10487;
    10487 [label="Literal"];
    10487 -> 10488;
    10488[label="0."];
    10484 -> 10489;
    10489[label=","];
    10484 -> 10490;
    10490 [label="Expr"];
    10490 -> 10491;
    10491 [label="Literal"];
    10491 -> 10492;
    10492[label="0."];
    10484 -> 10493;
    10493[label=","];
    10484 -> 10494;
    10494 [label="Expr"];
    10494 -> 10495;
    10495 [label="Literal"];
    10495 -> 10496;
    10496[label="0."];
    10484 -> 10497;
    10497[label=">"];
    10498 -> 10499;
    10499[label="||"];
    10498 -> 10500;
    10500 [label="Expr"];
    10500 -> 10501;
    10501 [label="UnOp(UnOp { syntax: 10501, operator: Some(10502), operand: Some(10503) })"];
    10501 -> 10502;
    10502[label="!"];
    10501 -> 10503;
    10503 [label="Expr"];
    10503 -> 10506;
    10506 [label="BinaryOp(BinaryOp { syntax: 10506, lhs: Some(10504), operator: Some(10507), rhs: Some(10508) })"];
    10506 -> 10504;
    10504 [label="Identifier"];
    10504 -> 10505;
    10505[label="C_ModeSupportedObjects"];
    10506 -> 10507;
    10507[label="."];
    10506 -> 10508;
    10508 [label="Expr"];
    10508 -> 10509;
    10509 [label="Identifier"];
    10509 -> 10510;
    10510[label="exists"];
    10511 -> 10512;
    10512[label="("];
    10511 -> 10513;
    10513 [label="Expr"];
    10513 -> 10514;
    10514 [label="Identifier"];
    10514 -> 10515;
    10515[label="_ObjectTag"];
    10511 -> 10516;
    10516[label=")"];
    10475 -> 10517;
    10517[label=")"];
    10475 -> 10518;
    10518 [label="Statement(Statement { syntax: 10518, statement: Some(10519), semicolon: Some(10524) })"];
    10518 -> 10519;
    10519 [label="Return(Return { syntax: 10519, return_: Some(10520), value: Some(10521) })"];
    10519 -> 10520;
    10520[label="return"];
    10519 -> 10521;
    10521 [label="Expr"];
    10521 -> 10522;
    10522 [label="Literal"];
    10522 -> 10523;
    10523[label="Null"];
    10518 -> 10524;
    10524[label=";"];
    10472 -> 10525;
    10525 [label="Statement(Statement { syntax: 10525, statement: Some(10526), semicolon: None })"];
    10525 -> 10526;
    10526 [label="VarDec(VarDec { syntax: 10526, declare: Some(10527), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10528), as_: None, alias: None, for_: None, target: None, assignment: Some(10530), value: Some(10531) })"];
    10526 -> 10527;
    10527[label="declare"];
    10526 -> 10528;
    10528 [label="Type(Type { syntax: 10528, basename: Some(10529), members: [], arrays: [] })"];
    10528 -> 10529;
    10529[label="AnchorId"];
    10526 -> 10530;
    10530[label="="];
    10526 -> 10531;
    10531 [label="Expr"];
    10531 -> 10532;
    10532 [label="Literal"];
    10532 -> 10533;
    10533[label="NullId"];
    10526 -> 10534;
    10534[label=";"];
    10472 -> 10535;
    10535 [label="Statement(Statement { syntax: 10535, statement: Some(10536), semicolon: None })"];
    10535 -> 10536;
    10536 [label="If(If { syntax: 10536, if_: Some(10537), lparen: Some(10538), condition: Some(10539), rparen: Some(10553), body: Some(10554), else_: None })"];
    10536 -> 10537;
    10537[label="if"];
    10536 -> 10538;
    10538[label="("];
    10536 -> 10539;
    10539 [label="Expr"];
    10539 -> 10547;
    10547 [label="FunctionCall(FunctionCall { syntax: 10547, lhs: Some(10542), lparen: Some(10548), args: [(10549, None)], rparen: Some(10552) })"];
    10547 -> 10542;
    10542 [label="BinaryOp(BinaryOp { syntax: 10542, lhs: Some(10540), operator: Some(10543), rhs: Some(10544) })"];
    10542 -> 10540;
    10540 [label="Identifier"];
    10540 -> 10541;
    10541[label="MapLandmarks_ObjectAnchor"];
    10542 -> 10543;
    10543[label="."];
    10542 -> 10544;
    10544 [label="Expr"];
    10544 -> 10545;
    10545 [label="Identifier"];
    10545 -> 10546;
    10546[label="existskey"];
    10547 -> 10548;
    10548[label="("];
    10547 -> 10549;
    10549 [label="Expr"];
    10549 -> 10550;
    10550 [label="Identifier"];
    10550 -> 10551;
    10551[label="_AnchorId"];
    10547 -> 10552;
    10552[label=")"];
    10536 -> 10553;
    10553[label=")"];
    10536 -> 10554;
    10554 [label="Statement(Statement { syntax: 10554, statement: Some(10558), semicolon: Some(10563) })"];
    10554 -> 10555;
    10555 [label="Expr"];
    10555 -> 10556;
    10556 [label="Identifier"];
    10556 -> 10557;
    10557[label="AnchorId"];
    10554 -> 10558;
    10558 [label="Assignment(Assignment { syntax: 10558, lvalue: Some(10555), operator: Some(10559), rvalue: Some(10560) })"];
    10558 -> 10559;
    10559[label="="];
    10558 -> 10560;
    10560 [label="Expr"];
    10560 -> 10561;
    10561 [label="Identifier"];
    10561 -> 10562;
    10562[label="_AnchorId"];
    10554 -> 10563;
    10563[label=";"];
    10472 -> 10564;
    10564 [label="Statement(Statement { syntax: 10564, statement: Some(10565), semicolon: None })"];
    10564 -> 10565;
    10565 [label="VarDec(VarDec { syntax: 10565, declare: Some(10566), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10567), as_: None, alias: None, for_: None, target: None, assignment: Some(10569), value: Some(10570) })"];
    10565 -> 10566;
    10566[label="declare"];
    10565 -> 10567;
    10567 [label="Type(Type { syntax: 10567, basename: Some(10568), members: [], arrays: [] })"];
    10567 -> 10568;
    10568[label="Object"];
    10565 -> 10569;
    10569[label="="];
    10565 -> 10570;
    10570 [label="Expr"];
    10570 -> 10578;
    10578 [label="FunctionCall(FunctionCall { syntax: 10578, lhs: Some(10573), lparen: Some(10579), args: [(10580, Some(10583)), (10584, None)], rparen: Some(10587) })"];
    10578 -> 10573;
    10573 [label="BinaryOp(BinaryOp { syntax: 10573, lhs: Some(10571), operator: Some(10574), rhs: Some(10575) })"];
    10573 -> 10571;
    10571 [label="Identifier"];
    10571 -> 10572;
    10572[label="GalaxyTitles"];
    10573 -> 10574;
    10574[label="::"];
    10573 -> 10575;
    10575 [label="Expr"];
    10575 -> 10576;
    10576 [label="Identifier"];
    10576 -> 10577;
    10577[label="SpawnObject"];
    10578 -> 10579;
    10579[label="("];
    10578 -> 10580;
    10580 [label="Expr"];
    10580 -> 10581;
    10581 [label="Identifier"];
    10581 -> 10582;
    10582[label="_Position"];
    10578 -> 10583;
    10583[label=","];
    10578 -> 10584;
    10584 [label="Expr"];
    10584 -> 10585;
    10585 [label="Identifier"];
    10585 -> 10586;
    10586[label="_ObjectTag"];
    10578 -> 10587;
    10587[label=")"];
    10565 -> 10588;
    10588[label=";"];
    10472 -> 10589;
    10589 [label="Statement(Statement { syntax: 10589, statement: Some(10590), semicolon: None })"];
    10589 -> 10590;
    10590 [label="If(If { syntax: 10590, if_: Some(10591), lparen: Some(10592), condition: Some(10593), rparen: Some(10601), body: Some(10602), else_: None })"];
    10590 -> 10591;
    10591[label="if"];
    10590 -> 10592;
    10592[label="("];
    10590 -> 10593;
    10593 [label="Expr"];
    10593 -> 10596;
    10596 [label="BinaryOp(BinaryOp { syntax: 10596, lhs: Some(10594), operator: Some(10597), rhs: Some(10598) })"];
    10596 -> 10594;
    10594 [label="Identifier"];
    10594 -> 10595;
    10595[label="Object"];
    10596 -> 10597;
    10597[label="=="];
    10596 -> 10598;
    10598 [label="Expr"];
    10598 -> 10599;
    10599 [label="Literal"];
    10599 -> 10600;
    10600[label="Null"];
    10590 -> 10601;
    10601[label=")"];
    10590 -> 10602;
    10602 [label="Statement(Statement { syntax: 10602, statement: Some(10603), semicolon: None })"];
    10602 -> 10603;
    10603 [label="Block(Block { syntax: 10603, lbrace: Some(10604), statements: [10605, 10699, 10719], rbrace: Some(10735) })"];
    10603 -> 10604;
    10604[label="{"];
    10603 -> 10605;
    10605 [label="Statement(Statement { syntax: 10605, statement: Some(10606), semicolon: None })"];
    10605 -> 10606;
    10606 [label="Switch(Switch { syntax: 10606, switch: Some(10607), lparen: Some(10608), value: Some(10609), rparen: Some(10612), lbrace: Some(10613), cases: [10614, 10642, 10670], default: None, rbrace: Some(10698), is_type: false })"];
    10606 -> 10607;
    10607[label="switch"];
    10606 -> 10608;
    10608[label="("];
    10606 -> 10609;
    10609 [label="Expr"];
    10609 -> 10610;
    10610 [label="Identifier"];
    10610 -> 10611;
    10611[label="_ObjectTag"];
    10606 -> 10612;
    10612[label=")"];
    10606 -> 10613;
    10613[label="{"];
    10606 -> 10614;
    10614 [label="Case(Case { syntax: 10614, case: Some(10615), value: Some(10616), colon: Some(10619), statement: Some(10620) })"];
    10614 -> 10615;
    10615[label="case"];
    10614 -> 10616;
    10616 [label="Expr"];
    10616 -> 10617;
    10617 [label="Literal"];
    10617 -> 10618;
    10618[label="\"Weapon\""];
    10614 -> 10619;
    10619[label=":"];
    10614 -> 10620;
    10620 [label="Statement(Statement { syntax: 10620, statement: Some(10624), semicolon: Some(10641) })"];
    10620 -> 10621;
    10621 [label="Expr"];
    10621 -> 10622;
    10622 [label="Identifier"];
    10622 -> 10623;
    10623[label="Object"];
    10620 -> 10624;
    10624 [label="Assignment(Assignment { syntax: 10624, lvalue: Some(10621), operator: Some(10625), rvalue: Some(10626) })"];
    10624 -> 10625;
    10625[label="="];
    10624 -> 10626;
    10626 [label="Expr"];
    10626 -> 10629;
    10629 [label="FunctionCall(FunctionCall { syntax: 10629, lhs: Some(10627), lparen: Some(10630), args: [(10631, None)], rparen: Some(10640) })"];
    10629 -> 10627;
    10627 [label="Identifier"];
    10627 -> 10628;
    10628[label="ObjectCreate"];
    10629 -> 10630;
    10630[label="("];
    10629 -> 10631;
    10631 [label="Expr"];
    10631 -> 10634;
    10634 [label="ArrayAccess(ArrayAccess { syntax: 10634, lhs: Some(10632), lsquare: Some(10635), index: Some(10636), rsquare: Some(10639) })"];
    10634 -> 10632;
    10632 [label="Identifier"];
    10632 -> 10633;
    10633[label="G_ObjectId"];
    10634 -> 10635;
    10635[label="["];
    10634 -> 10636;
    10636 [label="Expr"];
    10636 -> 10637;
    10637 [label="Literal"];
    10637 -> 10638;
    10638[label="\"Weapon\""];
    10634 -> 10639;
    10639[label="]"];
    10629 -> 10640;
    10640[label=")"];
    10620 -> 10641;
    10641[label=";"];
    10606 -> 10642;
    10642 [label="Case(Case { syntax: 10642, case: Some(10643), value: Some(10644), colon: Some(10647), statement: Some(10648) })"];
    10642 -> 10643;
    10643[label="case"];
    10642 -> 10644;
    10644 [label="Expr"];
    10644 -> 10645;
    10645 [label="Literal"];
    10645 -> 10646;
    10646[label="\"Charge\""];
    10642 -> 10647;
    10647[label=":"];
    10642 -> 10648;
    10648 [label="Statement(Statement { syntax: 10648, statement: Some(10652), semicolon: Some(10669) })"];
    10648 -> 10649;
    10649 [label="Expr"];
    10649 -> 10650;
    10650 [label="Identifier"];
    10650 -> 10651;
    10651[label="Object"];
    10648 -> 10652;
    10652 [label="Assignment(Assignment { syntax: 10652, lvalue: Some(10649), operator: Some(10653), rvalue: Some(10654) })"];
    10652 -> 10653;
    10653[label="="];
    10652 -> 10654;
    10654 [label="Expr"];
    10654 -> 10657;
    10657 [label="FunctionCall(FunctionCall { syntax: 10657, lhs: Some(10655), lparen: Some(10658), args: [(10659, None)], rparen: Some(10668) })"];
    10657 -> 10655;
    10655 [label="Identifier"];
    10655 -> 10656;
    10656[label="ObjectCreate"];
    10657 -> 10658;
    10658[label="("];
    10657 -> 10659;
    10659 [label="Expr"];
    10659 -> 10662;
    10662 [label="ArrayAccess(ArrayAccess { syntax: 10662, lhs: Some(10660), lsquare: Some(10663), index: Some(10664), rsquare: Some(10667) })"];
    10662 -> 10660;
    10660 [label="Identifier"];
    10660 -> 10661;
    10661[label="G_ObjectId"];
    10662 -> 10663;
    10663[label="["];
    10662 -> 10664;
    10664 [label="Expr"];
    10664 -> 10665;
    10665 [label="Literal"];
    10665 -> 10666;
    10666[label="\"Charge\""];
    10662 -> 10667;
    10667[label="]"];
    10657 -> 10668;
    10668[label=")"];
    10648 -> 10669;
    10669[label=";"];
    10606 -> 10670;
    10670 [label="Case(Case { syntax: 10670, case: Some(10671), value: Some(10672), colon: Some(10675), statement: Some(10676) })"];
    10670 -> 10671;
    10671[label="case"];
    10670 -> 10672;
    10672 [label="Expr"];
    10672 -> 10673;
    10673 [label="Literal"];
    10673 -> 10674;
    10674[label="\"Mini\""];
    10670 -> 10675;
    10675[label=":"];
    10670 -> 10676;
    10676 [label="Statement(Statement { syntax: 10676, statement: Some(10680), semicolon: Some(10697) })"];
    10676 -> 10677;
    10677 [label="Expr"];
    10677 -> 10678;
    10678 [label="Identifier"];
    10678 -> 10679;
    10679[label="Object"];
    10676 -> 10680;
    10680 [label="Assignment(Assignment { syntax: 10680, lvalue: Some(10677), operator: Some(10681), rvalue: Some(10682) })"];
    10680 -> 10681;
    10681[label="="];
    10680 -> 10682;
    10682 [label="Expr"];
    10682 -> 10685;
    10685 [label="FunctionCall(FunctionCall { syntax: 10685, lhs: Some(10683), lparen: Some(10686), args: [(10687, None)], rparen: Some(10696) })"];
    10685 -> 10683;
    10683 [label="Identifier"];
    10683 -> 10684;
    10684[label="ObjectCreate"];
    10685 -> 10686;
    10686[label="("];
    10685 -> 10687;
    10687 [label="Expr"];
    10687 -> 10690;
    10690 [label="ArrayAccess(ArrayAccess { syntax: 10690, lhs: Some(10688), lsquare: Some(10691), index: Some(10692), rsquare: Some(10695) })"];
    10690 -> 10688;
    10688 [label="Identifier"];
    10688 -> 10689;
    10689[label="G_ObjectId"];
    10690 -> 10691;
    10691[label="["];
    10690 -> 10692;
    10692 [label="Expr"];
    10692 -> 10693;
    10693 [label="Literal"];
    10693 -> 10694;
    10694[label="\"Mini\""];
    10690 -> 10695;
    10695[label="]"];
    10685 -> 10696;
    10696[label=")"];
    10676 -> 10697;
    10697[label=";"];
    10606 -> 10698;
    10698[label="}"];
    10603 -> 10699;
    10699 [label="Statement(Statement { syntax: 10699, statement: Some(10700), semicolon: None })"];
    10699 -> 10700;
    10700 [label="If(If { syntax: 10700, if_: Some(10701), lparen: Some(10702), condition: Some(10703), rparen: Some(10711), body: Some(10712), else_: None })"];
    10700 -> 10701;
    10701[label="if"];
    10700 -> 10702;
    10702[label="("];
    10700 -> 10703;
    10703 [label="Expr"];
    10703 -> 10706;
    10706 [label="BinaryOp(BinaryOp { syntax: 10706, lhs: Some(10704), operator: Some(10707), rhs: Some(10708) })"];
    10706 -> 10704;
    10704 [label="Identifier"];
    10704 -> 10705;
    10705[label="Object"];
    10706 -> 10707;
    10707[label="=="];
    10706 -> 10708;
    10708 [label="Expr"];
    10708 -> 10709;
    10709 [label="Literal"];
    10709 -> 10710;
    10710[label="Null"];
    10700 -> 10711;
    10711[label=")"];
    10700 -> 10712;
    10712 [label="Statement(Statement { syntax: 10712, statement: Some(10713), semicolon: Some(10718) })"];
    10712 -> 10713;
    10713 [label="Return(Return { syntax: 10713, return_: Some(10714), value: Some(10715) })"];
    10713 -> 10714;
    10714[label="return"];
    10713 -> 10715;
    10715 [label="Expr"];
    10715 -> 10716;
    10716 [label="Literal"];
    10716 -> 10717;
    10717[label="Null"];
    10712 -> 10718;
    10718[label=";"];
    10603 -> 10719;
    10719 [label="Statement(Statement { syntax: 10719, statement: Some(10720), semicolon: Some(10734) })"];
    10719 -> 10720;
    10720 [label="Expr"];
    10720 -> 10728;
    10728 [label="FunctionCall(FunctionCall { syntax: 10728, lhs: Some(10723), lparen: Some(10729), args: [(10730, None)], rparen: Some(10733) })"];
    10728 -> 10723;
    10723 [label="BinaryOp(BinaryOp { syntax: 10723, lhs: Some(10721), operator: Some(10724), rhs: Some(10725) })"];
    10723 -> 10721;
    10721 [label="Identifier"];
    10721 -> 10722;
    10722[label="Object"];
    10723 -> 10724;
    10724[label="."];
    10723 -> 10725;
    10725 [label="Expr"];
    10725 -> 10726;
    10726 [label="Identifier"];
    10726 -> 10727;
    10727[label="SetPosition"];
    10728 -> 10729;
    10729[label="("];
    10728 -> 10730;
    10730 [label="Expr"];
    10730 -> 10731;
    10731 [label="Identifier"];
    10731 -> 10732;
    10732[label="_Position"];
    10728 -> 10733;
    10733[label=")"];
    10719 -> 10734;
    10734[label=";"];
    10603 -> 10735;
    10735[label="}"];
    10472 -> 10736;
    10736 [label="Statement(Statement { syntax: 10736, statement: Some(10737), semicolon: None })"];
    10736 -> 10737;
    10737 [label="VarDec(VarDec { syntax: 10737, declare: Some(10738), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(10739), name: Some(10741), as_: Some(10742), alias: Some(10743), for_: Some(10744), target: Some(10745), assignment: None, value: None })"];
    10737 -> 10738;
    10738[label="declare"];
    10737 -> 10739;
    10739 [label="Type(Type { syntax: 10739, basename: Some(10740), members: [], arrays: [] })"];
    10739 -> 10740;
    10740[label="Ident"];
    10737 -> 10741;
    10741[label="AnchorId"];
    10737 -> 10742;
    10742[label="as"];
    10737 -> 10743;
    10743[label="ObjectAnchorId"];
    10737 -> 10744;
    10744[label="for"];
    10737 -> 10745;
    10745 [label="Expr"];
    10745 -> 10746;
    10746 [label="Identifier"];
    10746 -> 10747;
    10747[label="Object"];
    10737 -> 10748;
    10748[label=";"];
    10472 -> 10749;
    10749 [label="Statement(Statement { syntax: 10749, statement: Some(10750), semicolon: None })"];
    10749 -> 10750;
    10750 [label="VarDec(VarDec { syntax: 10750, declare: Some(10751), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(10752), name: Some(10754), as_: None, alias: None, for_: Some(10755), target: Some(10756), assignment: None, value: None })"];
    10750 -> 10751;
    10751[label="declare"];
    10750 -> 10752;
    10752 [label="Type(Type { syntax: 10752, basename: Some(10753), members: [], arrays: [] })"];
    10752 -> 10753;
    10753[label="Text"];
    10750 -> 10754;
    10754[label="Tag"];
    10750 -> 10755;
    10755[label="for"];
    10750 -> 10756;
    10756 [label="Expr"];
    10756 -> 10757;
    10757 [label="Identifier"];
    10757 -> 10758;
    10758[label="Object"];
    10750 -> 10759;
    10759[label=";"];
    10472 -> 10760;
    10760 [label="Statement(Statement { syntax: 10760, statement: Some(10764), semicolon: Some(10769) })"];
    10760 -> 10761;
    10761 [label="Expr"];
    10761 -> 10762;
    10762 [label="Identifier"];
    10762 -> 10763;
    10763[label="ObjectAnchorId"];
    10760 -> 10764;
    10764 [label="Assignment(Assignment { syntax: 10764, lvalue: Some(10761), operator: Some(10765), rvalue: Some(10766) })"];
    10764 -> 10765;
    10765[label="="];
    10764 -> 10766;
    10766 [label="Expr"];
    10766 -> 10767;
    10767 [label="Identifier"];
    10767 -> 10768;
    10768[label="AnchorId"];
    10760 -> 10769;
    10769[label=";"];
    10472 -> 10770;
    10770 [label="Statement(Statement { syntax: 10770, statement: Some(10774), semicolon: Some(10779) })"];
    10770 -> 10771;
    10771 [label="Expr"];
    10771 -> 10772;
    10772 [label="Identifier"];
    10772 -> 10773;
    10773[label="Tag"];
    10770 -> 10774;
    10774 [label="Assignment(Assignment { syntax: 10774, lvalue: Some(10771), operator: Some(10775), rvalue: Some(10776) })"];
    10774 -> 10775;
    10775[label="="];
    10774 -> 10776;
    10776 [label="Expr"];
    10776 -> 10777;
    10777 [label="Identifier"];
    10777 -> 10778;
    10778[label="_ObjectTag"];
    10770 -> 10779;
    10779[label=";"];
    10472 -> 10780;
    10780 [label="Statement(Statement { syntax: 10780, statement: Some(10781), semicolon: Some(10800) })"];
    10780 -> 10781;
    10781 [label="Expr"];
    10781 -> 10789;
    10789 [label="FunctionCall(FunctionCall { syntax: 10789, lhs: Some(10784), lparen: Some(10790), args: [(10791, None)], rparen: Some(10799) })"];
    10789 -> 10784;
    10784 [label="BinaryOp(BinaryOp { syntax: 10784, lhs: Some(10782), operator: Some(10785), rhs: Some(10786) })"];
    10784 -> 10782;
    10782 [label="Identifier"];
    10782 -> 10783;
    10783[label="G_CreatedObjects"];
    10784 -> 10785;
    10785[label="."];
    10784 -> 10786;
    10786 [label="Expr"];
    10786 -> 10787;
    10787 [label="Identifier"];
    10787 -> 10788;
    10788[label="add"];
    10789 -> 10790;
    10790[label="("];
    10789 -> 10791;
    10791 [label="Expr"];
    10791 -> 10794;
    10794 [label="BinaryOp(BinaryOp { syntax: 10794, lhs: Some(10792), operator: Some(10795), rhs: Some(10796) })"];
    10794 -> 10792;
    10792 [label="Identifier"];
    10792 -> 10793;
    10793[label="Object"];
    10794 -> 10795;
    10795[label="."];
    10794 -> 10796;
    10796 [label="Expr"];
    10796 -> 10797;
    10797 [label="Identifier"];
    10797 -> 10798;
    10798[label="Id"];
    10789 -> 10799;
    10799[label=")"];
    10780 -> 10800;
    10800[label=";"];
    10472 -> 10801;
    10801 [label="Statement(Statement { syntax: 10801, statement: Some(10802), semicolon: None })"];
    10801 -> 10802;
    10802 [label="VarDec(VarDec { syntax: 10802, declare: Some(10803), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(10804), name: Some(10806), as_: None, alias: None, for_: Some(10807), target: Some(10808), assignment: None, value: None })"];
    10802 -> 10803;
    10803[label="declare"];
    10802 -> 10804;
    10804 [label="Type(Type { syntax: 10804, basename: Some(10805), members: [], arrays: [] })"];
    10804 -> 10805;
    10805[label="Real"];
    10802 -> 10806;
    10806[label="CenterGoalDistance"];
    10802 -> 10807;
    10807[label="for"];
    10802 -> 10808;
    10808 [label="Expr"];
    10808 -> 10809;
    10809 [label="Identifier"];
    10809 -> 10810;
    10810[label="Object"];
    10802 -> 10811;
    10811[label=";"];
    10472 -> 10812;
    10812 [label="Statement(Statement { syntax: 10812, statement: Some(10816), semicolon: Some(10836) })"];
    10812 -> 10813;
    10813 [label="Expr"];
    10813 -> 10814;
    10814 [label="Identifier"];
    10814 -> 10815;
    10815[label="CenterGoalDistance"];
    10812 -> 10816;
    10816 [label="Assignment(Assignment { syntax: 10816, lvalue: Some(10813), operator: Some(10817), rvalue: Some(10818) })"];
    10816 -> 10817;
    10817[label="="];
    10816 -> 10818;
    10818 [label="Expr"];
    10818 -> 10821;
    10821 [label="FunctionCall(FunctionCall { syntax: 10821, lhs: Some(10819), lparen: Some(10822), args: [(10823, Some(10831)), (10832, None)], rparen: Some(10835) })"];
    10821 -> 10819;
    10819 [label="Identifier"];
    10819 -> 10820;
    10820[label="GT_Distance2D"];
    10821 -> 10822;
    10822[label="("];
    10821 -> 10823;
    10823 [label="Expr"];
    10823 -> 10826;
    10826 [label="BinaryOp(BinaryOp { syntax: 10826, lhs: Some(10824), operator: Some(10827), rhs: Some(10828) })"];
    10826 -> 10824;
    10824 [label="Identifier"];
    10824 -> 10825;
    10825[label="Object"];
    10826 -> 10827;
    10827[label="."];
    10826 -> 10828;
    10828 [label="Expr"];
    10828 -> 10829;
    10829 [label="Identifier"];
    10829 -> 10830;
    10830[label="Position"];
    10821 -> 10831;
    10831[label=","];
    10821 -> 10832;
    10832 [label="Expr"];
    10832 -> 10833;
    10833 [label="Identifier"];
    10833 -> 10834;
    10834[label="G_CenterGoalPosition"];
    10821 -> 10835;
    10835[label=")"];
    10812 -> 10836;
    10836[label=";"];
    10472 -> 10837;
    10837 [label="Statement(Statement { syntax: 10837, statement: Some(10838), semicolon: Some(10843) })"];
    10837 -> 10838;
    10838 [label="Return(Return { syntax: 10838, return_: Some(10839), value: Some(10840) })"];
    10838 -> 10839;
    10839[label="return"];
    10838 -> 10840;
    10840 [label="Expr"];
    10840 -> 10841;
    10841 [label="Identifier"];
    10841 -> 10842;
    10842[label="Object"];
    10837 -> 10843;
    10843[label=";"];
    10472 -> 10844;
    10844[label="}"];
    0 -> 10845;
    10845 [label="FuncDec(FuncDec { syntax: 10845, type_: Some(10846), name: Some(10848), lparen: Some(10849), args: [10850, 10855], rparen: Some(10859), body: Some(10860) })"];
    10845 -> 10846;
    10846 [label="Type(Type { syntax: 10846, basename: Some(10847), members: [], arrays: [] })"];
    10846 -> 10847;
    10847[label="CSmObject"];
    10845 -> 10848;
    10848[label="SpawnObject"];
    10845 -> 10849;
    10849[label="("];
    10845 -> 10850;
    10850 [label="FormalArg(FormalArg { syntax: 10850, type_: Some(10851), name: Some(10853), comma: Some(10854) })"];
    10850 -> 10851;
    10851 [label="Type(Type { syntax: 10851, basename: Some(10852), members: [], arrays: [] })"];
    10851 -> 10852;
    10852[label="Vec3"];
    10850 -> 10853;
    10853[label="_Position"];
    10850 -> 10854;
    10854[label=","];
    10845 -> 10855;
    10855 [label="FormalArg(FormalArg { syntax: 10855, type_: Some(10856), name: Some(10858), comma: None })"];
    10855 -> 10856;
    10856 [label="Type(Type { syntax: 10856, basename: Some(10857), members: [], arrays: [] })"];
    10856 -> 10857;
    10857[label="Text"];
    10855 -> 10858;
    10858[label="_ObjectTag"];
    10845 -> 10859;
    10859[label=")"];
    10845 -> 10860;
    10860 [label="Block(Block { syntax: 10860, lbrace: Some(10861), statements: [10862], rbrace: Some(10883) })"];
    10860 -> 10861;
    10861[label="{"];
    10860 -> 10862;
    10862 [label="Statement(Statement { syntax: 10862, statement: Some(10863), semicolon: Some(10882) })"];
    10862 -> 10863;
    10863 [label="Return(Return { syntax: 10863, return_: Some(10864), value: Some(10865) })"];
    10863 -> 10864;
    10864[label="return"];
    10863 -> 10865;
    10865 [label="Expr"];
    10865 -> 10868;
    10868 [label="FunctionCall(FunctionCall { syntax: 10868, lhs: Some(10866), lparen: Some(10869), args: [(10870, Some(10873)), (10874, Some(10877)), (10878, None)], rparen: Some(10881) })"];
    10868 -> 10866;
    10866 [label="Identifier"];
    10866 -> 10867;
    10867[label="SpawnObject"];
    10868 -> 10869;
    10869[label="("];
    10868 -> 10870;
    10870 [label="Expr"];
    10870 -> 10871;
    10871 [label="Identifier"];
    10871 -> 10872;
    10872[label="_Position"];
    10868 -> 10873;
    10873[label=","];
    10868 -> 10874;
    10874 [label="Expr"];
    10874 -> 10875;
    10875 [label="Identifier"];
    10875 -> 10876;
    10876[label="_ObjectTag"];
    10868 -> 10877;
    10877[label=","];
    10868 -> 10878;
    10878 [label="Expr"];
    10878 -> 10879;
    10879 [label="Literal"];
    10879 -> 10880;
    10880[label="NullId"];
    10868 -> 10881;
    10881[label=")"];
    10862 -> 10882;
    10882[label=";"];
    10860 -> 10883;
    10883[label="}"];
    0 -> 10884;
    10884 [label="FuncDec(FuncDec { syntax: 10884, type_: Some(10885), name: Some(10887), lparen: Some(10888), args: [], rparen: Some(10889), body: Some(10890) })"];
    10884 -> 10885;
    10885 [label="Type(Type { syntax: 10885, basename: Some(10886), members: [], arrays: [] })"];
    10885 -> 10886;
    10886[label="Void"];
    10884 -> 10887;
    10887[label="SpawnObjects"];
    10884 -> 10888;
    10888[label="("];
    10884 -> 10889;
    10889[label=")"];
    10884 -> 10890;
    10890 [label="Block(Block { syntax: 10890, lbrace: Some(10891), statements: [10892], rbrace: Some(11029) })"];
    10890 -> 10891;
    10891[label="{"];
    10890 -> 10892;
    10892 [label="Statement(Statement { syntax: 10892, statement: Some(10893), semicolon: None })"];
    10892 -> 10893;
    10893 [label="Foreach(Foreach { syntax: 10893, foreach: Some(10894), lparen: Some(10895), name1: Some(10896), arrow: None, name2: None, in_: Some(10897), value: Some(10898), rparen: Some(10901), body: Some(10902) })"];
    10893 -> 10894;
    10894[label="foreach"];
    10893 -> 10895;
    10895[label="("];
    10893 -> 10896;
    10896[label="MapLandmark"];
    10893 -> 10897;
    10897[label="in"];
    10893 -> 10898;
    10898 [label="Expr"];
    10898 -> 10899;
    10899 [label="Identifier"];
    10899 -> 10900;
    10900[label="MapLandmarks_ObjectAnchor"];
    10893 -> 10901;
    10901[label=")"];
    10893 -> 10902;
    10902 [label="Statement(Statement { syntax: 10902, statement: Some(10903), semicolon: None })"];
    10902 -> 10903;
    10903 [label="Block(Block { syntax: 10903, lbrace: Some(10904), statements: [10905, 10919, 10933, 10947, 10979, 11013], rbrace: Some(11028) })"];
    10903 -> 10904;
    10904[label="{"];
    10903 -> 10905;
    10905 [label="Statement(Statement { syntax: 10905, statement: Some(10906), semicolon: None })"];
    10905 -> 10906;
    10906 [label="VarDec(VarDec { syntax: 10906, declare: Some(10907), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10908), as_: None, alias: None, for_: Some(10910), target: Some(10911), assignment: Some(10914), value: Some(10915) })"];
    10906 -> 10907;
    10907[label="declare"];
    10906 -> 10908;
    10908 [label="Type(Type { syntax: 10908, basename: Some(10909), members: [], arrays: [] })"];
    10908 -> 10909;
    10909[label="ObjectSpawned"];
    10906 -> 10910;
    10910[label="for"];
    10906 -> 10911;
    10911 [label="Expr"];
    10911 -> 10912;
    10912 [label="Identifier"];
    10912 -> 10913;
    10913[label="MapLandmark"];
    10906 -> 10914;
    10914[label="="];
    10906 -> 10915;
    10915 [label="Expr"];
    10915 -> 10916;
    10916 [label="Literal"];
    10916 -> 10917;
    10917[label="False"];
    10906 -> 10918;
    10918[label=";"];
    10903 -> 10919;
    10919 [label="Statement(Statement { syntax: 10919, statement: Some(10920), semicolon: None })"];
    10919 -> 10920;
    10920 [label="VarDec(VarDec { syntax: 10920, declare: Some(10921), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10922), as_: None, alias: None, for_: Some(10924), target: Some(10925), assignment: Some(10928), value: Some(10929) })"];
    10920 -> 10921;
    10921[label="declare"];
    10920 -> 10922;
    10922 [label="Type(Type { syntax: 10922, basename: Some(10923), members: [], arrays: [] })"];
    10922 -> 10923;
    10923[label="ObjectNextSpawn"];
    10920 -> 10924;
    10924[label="for"];
    10920 -> 10925;
    10925 [label="Expr"];
    10925 -> 10926;
    10926 [label="Identifier"];
    10926 -> 10927;
    10927[label="MapLandmark"];
    10920 -> 10928;
    10928[label="="];
    10920 -> 10929;
    10929 [label="Expr"];
    10929 -> 10930;
    10930 [label="Identifier"];
    10930 -> 10931;
    10931[label="Now"];
    10920 -> 10932;
    10932[label=";"];
    10903 -> 10933;
    10933 [label="Statement(Statement { syntax: 10933, statement: Some(10934), semicolon: None })"];
    10933 -> 10934;
    10934 [label="VarDec(VarDec { syntax: 10934, declare: Some(10935), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10936), as_: None, alias: None, for_: Some(10938), target: Some(10939), assignment: Some(10942), value: Some(10943) })"];
    10934 -> 10935;
    10935[label="declare"];
    10934 -> 10936;
    10936 [label="Type(Type { syntax: 10936, basename: Some(10937), members: [], arrays: [] })"];
    10936 -> 10937;
    10937[label="ObjectType"];
    10934 -> 10938;
    10938[label="for"];
    10934 -> 10939;
    10939 [label="Expr"];
    10939 -> 10940;
    10940 [label="Identifier"];
    10940 -> 10941;
    10941[label="MapLandmark"];
    10934 -> 10942;
    10942[label="="];
    10934 -> 10943;
    10943 [label="Expr"];
    10943 -> 10944;
    10944 [label="Literal"];
    10944 -> 10945;
    10945[label="\"\""];
    10934 -> 10946;
    10946[label=";"];
    10903 -> 10947;
    10947 [label="Statement(Statement { syntax: 10947, statement: Some(10948), semicolon: None })"];
    10947 -> 10948;
    10948 [label="If(If { syntax: 10948, if_: Some(10949), lparen: Some(10950), condition: Some(10951), rparen: Some(10974), body: Some(10975), else_: None })"];
    10948 -> 10949;
    10949[label="if"];
    10948 -> 10950;
    10950[label="("];
    10948 -> 10951;
    10951 [label="Expr"];
    10951 -> 10959;
    10959 [label="BinaryOp(BinaryOp { syntax: 10959, lhs: Some(10954), operator: Some(10960), rhs: Some(10961) })"];
    10959 -> 10954;
    10954 [label="BinaryOp(BinaryOp { syntax: 10954, lhs: Some(10952), operator: Some(10955), rhs: Some(10956) })"];
    10954 -> 10952;
    10952 [label="Identifier"];
    10952 -> 10953;
    10953[label="ObjectType"];
    10954 -> 10955;
    10955[label="=="];
    10954 -> 10956;
    10956 [label="Expr"];
    10956 -> 10957;
    10957 [label="Literal"];
    10957 -> 10958;
    10958[label="\"\""];
    10959 -> 10960;
    10960[label="||"];
    10959 -> 10961;
    10961 [label="Expr"];
    10961 -> 10964;
    10964 [label="BinaryOp(BinaryOp { syntax: 10964, lhs: Some(10962), operator: Some(10965), rhs: Some(10966) })"];
    10964 -> 10962;
    10962 [label="Identifier"];
    10962 -> 10963;
    10963[label="ObjectSpawned"];
    10964 -> 10965;
    10965[label="||"];
    10964 -> 10966;
    10966 [label="Expr"];
    10966 -> 10969;
    10969 [label="BinaryOp(BinaryOp { syntax: 10969, lhs: Some(10967), operator: Some(10970), rhs: Some(10971) })"];
    10969 -> 10967;
    10967 [label="Identifier"];
    10967 -> 10968;
    10968[label="Now"];
    10969 -> 10970;
    10970[label="<"];
    10969 -> 10971;
    10971 [label="Expr"];
    10971 -> 10972;
    10972 [label="Identifier"];
    10972 -> 10973;
    10973[label="ObjectNextSpawn"];
    10948 -> 10974;
    10974[label=")"];
    10948 -> 10975;
    10975 [label="Statement(Statement { syntax: 10975, statement: Some(10976), semicolon: Some(10978) })"];
    10975 -> 10976;
    10976 [label="Continue"];
    10976 -> 10977;
    10977[label="continue"];
    10975 -> 10978;
    10978[label=";"];
    10903 -> 10979;
    10979 [label="Statement(Statement { syntax: 10979, statement: Some(10980), semicolon: None })"];
    10979 -> 10980;
    10980 [label="VarDec(VarDec { syntax: 10980, declare: Some(10981), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(10982), as_: None, alias: None, for_: None, target: None, assignment: Some(10984), value: Some(10985) })"];
    10980 -> 10981;
    10981[label="declare"];
    10980 -> 10982;
    10982 [label="Type(Type { syntax: 10982, basename: Some(10983), members: [], arrays: [] })"];
    10982 -> 10983;
    10983[label="Object"];
    10980 -> 10984;
    10984[label="="];
    10980 -> 10985;
    10985 [label="Expr"];
    10985 -> 10988;
    10988 [label="FunctionCall(FunctionCall { syntax: 10988, lhs: Some(10986), lparen: Some(10989), args: [(10990, Some(10998)), (10999, Some(11002)), (11003, None)], rparen: Some(11011) })"];
    10988 -> 10986;
    10986 [label="Identifier"];
    10986 -> 10987;
    10987[label="SpawnObject"];
    10988 -> 10989;
    10989[label="("];
    10988 -> 10990;
    10990 [label="Expr"];
    10990 -> 10993;
    10993 [label="BinaryOp(BinaryOp { syntax: 10993, lhs: Some(10991), operator: Some(10994), rhs: Some(10995) })"];
    10993 -> 10991;
    10991 [label="Identifier"];
    10991 -> 10992;
    10992[label="MapLandmark"];
    10993 -> 10994;
    10994[label="."];
    10993 -> 10995;
    10995 [label="Expr"];
    10995 -> 10996;
    10996 [label="Identifier"];
    10996 -> 10997;
    10997[label="Position"];
    10988 -> 10998;
    10998[label=","];
    10988 -> 10999;
    10999 [label="Expr"];
    10999 -> 11000;
    11000 [label="Identifier"];
    11000 -> 11001;
    11001[label="ObjectType"];
    10988 -> 11002;
    11002[label=","];
    10988 -> 11003;
    11003 [label="Expr"];
    11003 -> 11006;
    11006 [label="BinaryOp(BinaryOp { syntax: 11006, lhs: Some(11004), operator: Some(11007), rhs: Some(11008) })"];
    11006 -> 11004;
    11004 [label="Identifier"];
    11004 -> 11005;
    11005[label="MapLandmark"];
    11006 -> 11007;
    11007[label="."];
    11006 -> 11008;
    11008 [label="Expr"];
    11008 -> 11009;
    11009 [label="Identifier"];
    11009 -> 11010;
    11010[label="Id"];
    10988 -> 11011;
    11011[label=")"];
    10980 -> 11012;
    11012[label=";"];
    10903 -> 11013;
    11013 [label="Statement(Statement { syntax: 11013, statement: Some(11017), semicolon: Some(11027) })"];
    11013 -> 11014;
    11014 [label="Expr"];
    11014 -> 11015;
    11015 [label="Identifier"];
    11015 -> 11016;
    11016[label="ObjectSpawned"];
    11013 -> 11017;
    11017 [label="Assignment(Assignment { syntax: 11017, lvalue: Some(11014), operator: Some(11018), rvalue: Some(11019) })"];
    11017 -> 11018;
    11018[label="="];
    11017 -> 11019;
    11019 [label="Expr"];
    11019 -> 11022;
    11022 [label="BinaryOp(BinaryOp { syntax: 11022, lhs: Some(11020), operator: Some(11023), rhs: Some(11024) })"];
    11022 -> 11020;
    11020 [label="Identifier"];
    11020 -> 11021;
    11021[label="Object"];
    11022 -> 11023;
    11023[label="!="];
    11022 -> 11024;
    11024 [label="Expr"];
    11024 -> 11025;
    11025 [label="Literal"];
    11025 -> 11026;
    11026[label="Null"];
    11013 -> 11027;
    11027[label=";"];
    10903 -> 11028;
    11028[label="}"];
    10890 -> 11029;
    11029[label="}"];
    0 -> 11030;
    11030 [label="FuncDec(FuncDec { syntax: 11030, type_: Some(11031), name: Some(11033), lparen: Some(11034), args: [11035], rparen: Some(11039), body: Some(11040) })"];
    11030 -> 11031;
    11031 [label="Type(Type { syntax: 11031, basename: Some(11032), members: [], arrays: [] })"];
    11031 -> 11032;
    11032[label="Boolean"];
    11030 -> 11033;
    11033[label="DestroyObject"];
    11030 -> 11034;
    11034[label="("];
    11030 -> 11035;
    11035 [label="FormalArg(FormalArg { syntax: 11035, type_: Some(11036), name: Some(11038), comma: None })"];
    11035 -> 11036;
    11036 [label="Type(Type { syntax: 11036, basename: Some(11037), members: [], arrays: [] })"];
    11036 -> 11037;
    11037[label="CSmObject"];
    11035 -> 11038;
    11038[label="_Object"];
    11030 -> 11039;
    11039[label=")"];
    11030 -> 11040;
    11040 [label="Block(Block { syntax: 11040, lbrace: Some(11041), statements: [11042, 11062, 11088, 11114, 11127, 11138], rbrace: Some(11145) })"];
    11040 -> 11041;
    11041[label="{"];
    11040 -> 11042;
    11042 [label="Statement(Statement { syntax: 11042, statement: Some(11043), semicolon: None })"];
    11042 -> 11043;
    11043 [label="If(If { syntax: 11043, if_: Some(11044), lparen: Some(11045), condition: Some(11046), rparen: Some(11054), body: Some(11055), else_: None })"];
    11043 -> 11044;
    11044[label="if"];
    11043 -> 11045;
    11045[label="("];
    11043 -> 11046;
    11046 [label="Expr"];
    11046 -> 11049;
    11049 [label="BinaryOp(BinaryOp { syntax: 11049, lhs: Some(11047), operator: Some(11050), rhs: Some(11051) })"];
    11049 -> 11047;
    11047 [label="Identifier"];
    11047 -> 11048;
    11048[label="_Object"];
    11049 -> 11050;
    11050[label="=="];
    11049 -> 11051;
    11051 [label="Expr"];
    11051 -> 11052;
    11052 [label="Literal"];
    11052 -> 11053;
    11053[label="Null"];
    11043 -> 11054;
    11054[label=")"];
    11043 -> 11055;
    11055 [label="Statement(Statement { syntax: 11055, statement: Some(11056), semicolon: Some(11061) })"];
    11055 -> 11056;
    11056 [label="Return(Return { syntax: 11056, return_: Some(11057), value: Some(11058) })"];
    11056 -> 11057;
    11057[label="return"];
    11056 -> 11058;
    11058 [label="Expr"];
    11058 -> 11059;
    11059 [label="Literal"];
    11059 -> 11060;
    11060[label="False"];
    11055 -> 11061;
    11061[label=";"];
    11040 -> 11062;
    11062 [label="Statement(Statement { syntax: 11062, statement: Some(11063), semicolon: None })"];
    11062 -> 11063;
    11063 [label="If(If { syntax: 11063, if_: Some(11064), lparen: Some(11065), condition: Some(11066), rparen: Some(11080), body: Some(11081), else_: None })"];
    11063 -> 11064;
    11064[label="if"];
    11063 -> 11065;
    11065[label="("];
    11063 -> 11066;
    11066 [label="Expr"];
    11066 -> 11074;
    11074 [label="FunctionCall(FunctionCall { syntax: 11074, lhs: Some(11069), lparen: Some(11075), args: [(11076, None)], rparen: Some(11079) })"];
    11074 -> 11069;
    11069 [label="BinaryOp(BinaryOp { syntax: 11069, lhs: Some(11067), operator: Some(11070), rhs: Some(11071) })"];
    11069 -> 11067;
    11067 [label="Identifier"];
    11067 -> 11068;
    11068[label="GalaxyTitles"];
    11069 -> 11070;
    11070[label="::"];
    11069 -> 11071;
    11071 [label="Expr"];
    11071 -> 11072;
    11072 [label="Identifier"];
    11072 -> 11073;
    11073[label="DestroyObject"];
    11074 -> 11075;
    11075[label="("];
    11074 -> 11076;
    11076 [label="Expr"];
    11076 -> 11077;
    11077 [label="Identifier"];
    11077 -> 11078;
    11078[label="_Object"];
    11074 -> 11079;
    11079[label=")"];
    11063 -> 11080;
    11080[label=")"];
    11063 -> 11081;
    11081 [label="Statement(Statement { syntax: 11081, statement: Some(11082), semicolon: Some(11087) })"];
    11081 -> 11082;
    11082 [label="Return(Return { syntax: 11082, return_: Some(11083), value: Some(11084) })"];
    11082 -> 11083;
    11083[label="return"];
    11082 -> 11084;
    11084 [label="Expr"];
    11084 -> 11085;
    11085 [label="Literal"];
    11085 -> 11086;
    11086[label="True"];
    11081 -> 11087;
    11087[label=";"];
    11040 -> 11088;
    11088 [label="Statement(Statement { syntax: 11088, statement: Some(11089), semicolon: None })"];
    11088 -> 11089;
    11089 [label="VarDec(VarDec { syntax: 11089, declare: Some(11090), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11091), as_: None, alias: None, for_: None, target: None, assignment: Some(11093), value: Some(11094) })"];
    11089 -> 11090;
    11090[label="declare"];
    11089 -> 11091;
    11091 [label="Type(Type { syntax: 11091, basename: Some(11092), members: [], arrays: [] })"];
    11091 -> 11092;
    11092[label="Removed"];
    11089 -> 11093;
    11093[label="="];
    11089 -> 11094;
    11094 [label="Expr"];
    11094 -> 11102;
    11102 [label="FunctionCall(FunctionCall { syntax: 11102, lhs: Some(11097), lparen: Some(11103), args: [(11104, None)], rparen: Some(11112) })"];
    11102 -> 11097;
    11097 [label="BinaryOp(BinaryOp { syntax: 11097, lhs: Some(11095), operator: Some(11098), rhs: Some(11099) })"];
    11097 -> 11095;
    11095 [label="Identifier"];
    11095 -> 11096;
    11096[label="G_CreatedObjects"];
    11097 -> 11098;
    11098[label="."];
    11097 -> 11099;
    11099 [label="Expr"];
    11099 -> 11100;
    11100 [label="Identifier"];
    11100 -> 11101;
    11101[label="remove"];
    11102 -> 11103;
    11103[label="("];
    11102 -> 11104;
    11104 [label="Expr"];
    11104 -> 11107;
    11107 [label="BinaryOp(BinaryOp { syntax: 11107, lhs: Some(11105), operator: Some(11108), rhs: Some(11109) })"];
    11107 -> 11105;
    11105 [label="Identifier"];
    11105 -> 11106;
    11106[label="_Object"];
    11107 -> 11108;
    11108[label="."];
    11107 -> 11109;
    11109 [label="Expr"];
    11109 -> 11110;
    11110 [label="Identifier"];
    11110 -> 11111;
    11111[label="Id"];
    11102 -> 11112;
    11112[label=")"];
    11089 -> 11113;
    11113[label=";"];
    11040 -> 11114;
    11114 [label="Statement(Statement { syntax: 11114, statement: Some(11115), semicolon: Some(11126) })"];
    11114 -> 11115;
    11115 [label="Expr"];
    11115 -> 11123;
    11123 [label="FunctionCall(FunctionCall { syntax: 11123, lhs: Some(11118), lparen: Some(11124), args: [], rparen: Some(11125) })"];
    11123 -> 11118;
    11118 [label="BinaryOp(BinaryOp { syntax: 11118, lhs: Some(11116), operator: Some(11119), rhs: Some(11120) })"];
    11118 -> 11116;
    11116 [label="Identifier"];
    11116 -> 11117;
    11117[label="_Object"];
    11118 -> 11119;
    11119[label="."];
    11118 -> 11120;
    11120 [label="Expr"];
    11120 -> 11121;
    11121 [label="Identifier"];
    11121 -> 11122;
    11122[label="SetUnspawned"];
    11123 -> 11124;
    11124[label="("];
    11123 -> 11125;
    11125[label=")"];
    11114 -> 11126;
    11126[label=";"];
    11040 -> 11127;
    11127 [label="Statement(Statement { syntax: 11127, statement: Some(11128), semicolon: Some(11137) })"];
    11127 -> 11128;
    11128 [label="Expr"];
    11128 -> 11131;
    11131 [label="FunctionCall(FunctionCall { syntax: 11131, lhs: Some(11129), lparen: Some(11132), args: [(11133, None)], rparen: Some(11136) })"];
    11131 -> 11129;
    11129 [label="Identifier"];
    11129 -> 11130;
    11130[label="ObjectDestroy"];
    11131 -> 11132;
    11132[label="("];
    11131 -> 11133;
    11133 [label="Expr"];
    11133 -> 11134;
    11134 [label="Identifier"];
    11134 -> 11135;
    11135[label="_Object"];
    11131 -> 11136;
    11136[label=")"];
    11127 -> 11137;
    11137[label=";"];
    11040 -> 11138;
    11138 [label="Statement(Statement { syntax: 11138, statement: Some(11139), semicolon: Some(11144) })"];
    11138 -> 11139;
    11139 [label="Return(Return { syntax: 11139, return_: Some(11140), value: Some(11141) })"];
    11139 -> 11140;
    11140[label="return"];
    11139 -> 11141;
    11141 [label="Expr"];
    11141 -> 11142;
    11142 [label="Literal"];
    11142 -> 11143;
    11143[label="True"];
    11138 -> 11144;
    11144[label=";"];
    11040 -> 11145;
    11145[label="}"];
    0 -> 11146;
    11146 [label="FuncDec(FuncDec { syntax: 11146, type_: Some(11147), name: Some(11149), lparen: Some(11150), args: [], rparen: Some(11151), body: Some(11152) })"];
    11146 -> 11147;
    11147 [label="Type(Type { syntax: 11147, basename: Some(11148), members: [], arrays: [] })"];
    11147 -> 11148;
    11148[label="Void"];
    11146 -> 11149;
    11149[label="DestroyAllObjects"];
    11146 -> 11150;
    11150[label="("];
    11146 -> 11151;
    11151[label=")"];
    11146 -> 11152;
    11152 [label="Block(Block { syntax: 11152, lbrace: Some(11153), statements: [11154, 11176, 11238], rbrace: Some(11251) })"];
    11152 -> 11153;
    11153[label="{"];
    11152 -> 11154;
    11154 [label="Statement(Statement { syntax: 11154, statement: Some(11155), semicolon: None })"];
    11154 -> 11155;
    11155 [label="If(If { syntax: 11155, if_: Some(11156), lparen: Some(11157), condition: Some(11158), rparen: Some(11171), body: Some(11172), else_: None })"];
    11155 -> 11156;
    11156[label="if"];
    11155 -> 11157;
    11157[label="("];
    11155 -> 11158;
    11158 [label="Expr"];
    11158 -> 11166;
    11166 [label="BinaryOp(BinaryOp { syntax: 11166, lhs: Some(11161), operator: Some(11167), rhs: Some(11168) })"];
    11166 -> 11161;
    11161 [label="BinaryOp(BinaryOp { syntax: 11161, lhs: Some(11159), operator: Some(11162), rhs: Some(11163) })"];
    11161 -> 11159;
    11159 [label="Identifier"];
    11159 -> 11160;
    11160[label="G_CreatedObjects"];
    11161 -> 11162;
    11162[label="."];
    11161 -> 11163;
    11163 [label="Expr"];
    11163 -> 11164;
    11164 [label="Identifier"];
    11164 -> 11165;
    11165[label="count"];
    11166 -> 11167;
    11167[label="<="];
    11166 -> 11168;
    11168 [label="Expr"];
    11168 -> 11169;
    11169 [label="Literal"];
    11169 -> 11170;
    11170[label="0"];
    11155 -> 11171;
    11171[label=")"];
    11155 -> 11172;
    11172 [label="Statement(Statement { syntax: 11172, statement: Some(11173), semicolon: Some(11175) })"];
    11172 -> 11173;
    11173 [label="Return(Return { syntax: 11173, return_: Some(11174), value: None })"];
    11173 -> 11174;
    11174[label="return"];
    11172 -> 11175;
    11175[label=";"];
    11152 -> 11176;
    11176 [label="Statement(Statement { syntax: 11176, statement: Some(11177), semicolon: None })"];
    11176 -> 11177;
    11177 [label="Foreach(Foreach { syntax: 11177, foreach: Some(11178), lparen: Some(11179), name1: Some(11180), arrow: None, name2: None, in_: Some(11181), value: Some(11182), rparen: Some(11185), body: Some(11186) })"];
    11177 -> 11178;
    11178[label="foreach"];
    11177 -> 11179;
    11179[label="("];
    11177 -> 11180;
    11180[label="ObjectId"];
    11177 -> 11181;
    11181[label="in"];
    11177 -> 11182;
    11182 [label="Expr"];
    11182 -> 11183;
    11183 [label="Identifier"];
    11183 -> 11184;
    11184[label="G_CreatedObjects"];
    11177 -> 11185;
    11185[label=")"];
    11177 -> 11186;
    11186 [label="Statement(Statement { syntax: 11186, statement: Some(11187), semicolon: None })"];
    11186 -> 11187;
    11187 [label="Block(Block { syntax: 11187, lbrace: Some(11188), statements: [11189, 11215], rbrace: Some(11237) })"];
    11187 -> 11188;
    11188[label="{"];
    11187 -> 11189;
    11189 [label="Statement(Statement { syntax: 11189, statement: Some(11190), semicolon: None })"];
    11189 -> 11190;
    11190 [label="If(If { syntax: 11190, if_: Some(11191), lparen: Some(11192), condition: Some(11193), rparen: Some(11210), body: Some(11211), else_: None })"];
    11190 -> 11191;
    11191[label="if"];
    11190 -> 11192;
    11192[label="("];
    11190 -> 11193;
    11193 [label="Expr"];
    11193 -> 11204;
    11204 [label="FunctionCall(FunctionCall { syntax: 11204, lhs: Some(11194), lparen: Some(11205), args: [(11206, None)], rparen: Some(11209) })"];
    11204 -> 11194;
    11194 [label="UnOp(UnOp { syntax: 11194, operator: Some(11195), operand: Some(11196) })"];
    11194 -> 11195;
    11195[label="!"];
    11194 -> 11196;
    11196 [label="Expr"];
    11196 -> 11199;
    11199 [label="BinaryOp(BinaryOp { syntax: 11199, lhs: Some(11197), operator: Some(11200), rhs: Some(11201) })"];
    11199 -> 11197;
    11197 [label="Identifier"];
    11197 -> 11198;
    11198[label="Objects"];
    11199 -> 11200;
    11200[label="."];
    11199 -> 11201;
    11201 [label="Expr"];
    11201 -> 11202;
    11202 [label="Identifier"];
    11202 -> 11203;
    11203[label="existskey"];
    11204 -> 11205;
    11205[label="("];
    11204 -> 11206;
    11206 [label="Expr"];
    11206 -> 11207;
    11207 [label="Identifier"];
    11207 -> 11208;
    11208[label="ObjectId"];
    11204 -> 11209;
    11209[label=")"];
    11190 -> 11210;
    11210[label=")"];
    11190 -> 11211;
    11211 [label="Statement(Statement { syntax: 11211, statement: Some(11212), semicolon: Some(11214) })"];
    11211 -> 11212;
    11212 [label="Continue"];
    11212 -> 11213;
    11213[label="continue"];
    11211 -> 11214;
    11214[label=";"];
    11187 -> 11215;
    11215 [label="Statement(Statement { syntax: 11215, statement: Some(11216), semicolon: None })"];
    11215 -> 11216;
    11216 [label="VarDec(VarDec { syntax: 11216, declare: Some(11217), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11218), as_: None, alias: None, for_: None, target: None, assignment: Some(11220), value: Some(11221) })"];
    11216 -> 11217;
    11217[label="declare"];
    11216 -> 11218;
    11218 [label="Type(Type { syntax: 11218, basename: Some(11219), members: [], arrays: [] })"];
    11218 -> 11219;
    11219[label="Removed"];
    11216 -> 11220;
    11220[label="="];
    11216 -> 11221;
    11221 [label="Expr"];
    11221 -> 11224;
    11224 [label="FunctionCall(FunctionCall { syntax: 11224, lhs: Some(11222), lparen: Some(11225), args: [(11226, None)], rparen: Some(11235) })"];
    11224 -> 11222;
    11222 [label="Identifier"];
    11222 -> 11223;
    11223[label="DestroyObject"];
    11224 -> 11225;
    11225[label="("];
    11224 -> 11226;
    11226 [label="Expr"];
    11226 -> 11229;
    11229 [label="ArrayAccess(ArrayAccess { syntax: 11229, lhs: Some(11227), lsquare: Some(11230), index: Some(11231), rsquare: Some(11234) })"];
    11229 -> 11227;
    11227 [label="Identifier"];
    11227 -> 11228;
    11228[label="Objects"];
    11229 -> 11230;
    11230[label="["];
    11229 -> 11231;
    11231 [label="Expr"];
    11231 -> 11232;
    11232 [label="Identifier"];
    11232 -> 11233;
    11233[label="ObjectId"];
    11229 -> 11234;
    11234[label="]"];
    11224 -> 11235;
    11235[label=")"];
    11216 -> 11236;
    11236[label=";"];
    11187 -> 11237;
    11237[label="}"];
    11152 -> 11238;
    11238 [label="Statement(Statement { syntax: 11238, statement: Some(11239), semicolon: Some(11250) })"];
    11238 -> 11239;
    11239 [label="Expr"];
    11239 -> 11247;
    11247 [label="FunctionCall(FunctionCall { syntax: 11247, lhs: Some(11242), lparen: Some(11248), args: [], rparen: Some(11249) })"];
    11247 -> 11242;
    11242 [label="BinaryOp(BinaryOp { syntax: 11242, lhs: Some(11240), operator: Some(11243), rhs: Some(11244) })"];
    11242 -> 11240;
    11240 [label="Identifier"];
    11240 -> 11241;
    11241[label="G_CreatedObjects"];
    11242 -> 11243;
    11243[label="."];
    11242 -> 11244;
    11244 [label="Expr"];
    11244 -> 11245;
    11245 [label="Identifier"];
    11245 -> 11246;
    11246[label="clear"];
    11247 -> 11248;
    11248[label="("];
    11247 -> 11249;
    11249[label=")"];
    11238 -> 11250;
    11250[label=";"];
    11152 -> 11251;
    11251[label="}"];
    0 -> 11252;
    11252 [label="FuncDec(FuncDec { syntax: 11252, type_: Some(11253), name: Some(11255), lparen: Some(11256), args: [11257], rparen: Some(11261), body: Some(11262) })"];
    11252 -> 11253;
    11253 [label="Type(Type { syntax: 11253, basename: Some(11254), members: [], arrays: [] })"];
    11253 -> 11254;
    11254[label="Boolean"];
    11252 -> 11255;
    11255[label="PickUpObject"];
    11252 -> 11256;
    11256[label="("];
    11252 -> 11257;
    11257 [label="FormalArg(FormalArg { syntax: 11257, type_: Some(11258), name: Some(11260), comma: None })"];
    11257 -> 11258;
    11258 [label="Type(Type { syntax: 11258, basename: Some(11259), members: [], arrays: [] })"];
    11258 -> 11259;
    11259[label="CSmModeEvent"];
    11257 -> 11260;
    11260[label="_Event"];
    11252 -> 11261;
    11261[label=")"];
    11252 -> 11262;
    11262 [label="Block(Block { syntax: 11262, lbrace: Some(11263), statements: [11264, 11384, 11400, 11416, 11438, 11467, 11478, 11488, 11687, 11705, 12199, 12217, 12233, 12267, 12297, 12318], rbrace: Some(12325) })"];
    11262 -> 11263;
    11263[label="{"];
    11262 -> 11264;
    11264 [label="Statement(Statement { syntax: 11264, statement: Some(11265), semicolon: None })"];
    11264 -> 11265;
    11265 [label="If(If { syntax: 11265, if_: Some(11266), lparen: Some(11267), condition: Some(11268), rparen: Some(11376), body: Some(11377), else_: None })"];
    11265 -> 11266;
    11266[label="if"];
    11265 -> 11267;
    11267[label="("];
    11265 -> 11268;
    11268 [label="Expr"];
    11268 -> 11276;
    11276 [label="BinaryOp(BinaryOp { syntax: 11276, lhs: Some(11271), operator: Some(11277), rhs: Some(11278) })"];
    11276 -> 11271;
    11271 [label="BinaryOp(BinaryOp { syntax: 11271, lhs: Some(11269), operator: Some(11272), rhs: Some(11273) })"];
    11271 -> 11269;
    11269 [label="Identifier"];
    11269 -> 11270;
    11270[label="_Event"];
    11271 -> 11272;
    11272[label="=="];
    11271 -> 11273;
    11273 [label="Expr"];
    11273 -> 11274;
    11274 [label="Literal"];
    11274 -> 11275;
    11275[label="Null"];
    11276 -> 11277;
    11277[label="||"];
    11276 -> 11278;
    11278 [label="Expr"];
    11278 -> 11301;
    11301 [label="BinaryOp(BinaryOp { syntax: 11301, lhs: Some(11286), operator: Some(11302), rhs: Some(11303) })"];
    11301 -> 11286;
    11286 [label="BinaryOp(BinaryOp { syntax: 11286, lhs: Some(11281), operator: Some(11287), rhs: Some(11288) })"];
    11286 -> 11281;
    11281 [label="BinaryOp(BinaryOp { syntax: 11281, lhs: Some(11279), operator: Some(11282), rhs: Some(11283) })"];
    11281 -> 11279;
    11279 [label="Identifier"];
    11279 -> 11280;
    11280[label="_Event"];
    11281 -> 11282;
    11282[label="."];
    11281 -> 11283;
    11283 [label="Expr"];
    11283 -> 11284;
    11284 [label="Identifier"];
    11284 -> 11285;
    11285[label="Type"];
    11286 -> 11287;
    11287[label="!="];
    11286 -> 11288;
    11288 [label="Expr"];
    11288 -> 11291;
    11291 [label="BinaryOp(BinaryOp { syntax: 11291, lhs: Some(11289), operator: Some(11292), rhs: Some(11293) })"];
    11291 -> 11289;
    11289 [label="Identifier"];
    11289 -> 11290;
    11290[label="CSmModeEvent"];
    11291 -> 11292;
    11292[label="::"];
    11291 -> 11293;
    11293 [label="Expr"];
    11293 -> 11296;
    11296 [label="BinaryOp(BinaryOp { syntax: 11296, lhs: Some(11294), operator: Some(11297), rhs: Some(11298) })"];
    11296 -> 11294;
    11294 [label="Identifier"];
    11294 -> 11295;
    11295[label="EType"];
    11296 -> 11297;
    11297[label="::"];
    11296 -> 11298;
    11298 [label="Expr"];
    11298 -> 11299;
    11299 [label="Identifier"];
    11299 -> 11300;
    11300[label="OnPlayerTouchesObject"];
    11301 -> 11302;
    11302[label="||"];
    11301 -> 11303;
    11303 [label="Expr"];
    11303 -> 11316;
    11316 [label="BinaryOp(BinaryOp { syntax: 11316, lhs: Some(11311), operator: Some(11317), rhs: Some(11318) })"];
    11316 -> 11311;
    11311 [label="BinaryOp(BinaryOp { syntax: 11311, lhs: Some(11306), operator: Some(11312), rhs: Some(11313) })"];
    11311 -> 11306;
    11306 [label="BinaryOp(BinaryOp { syntax: 11306, lhs: Some(11304), operator: Some(11307), rhs: Some(11308) })"];
    11306 -> 11304;
    11304 [label="Identifier"];
    11304 -> 11305;
    11305[label="_Event"];
    11306 -> 11307;
    11307[label="."];
    11306 -> 11308;
    11308 [label="Expr"];
    11308 -> 11309;
    11309 [label="Identifier"];
    11309 -> 11310;
    11310[label="Object"];
    11311 -> 11312;
    11312[label="=="];
    11311 -> 11313;
    11313 [label="Expr"];
    11313 -> 11314;
    11314 [label="Literal"];
    11314 -> 11315;
    11315[label="Null"];
    11316 -> 11317;
    11317[label="||"];
    11316 -> 11318;
    11318 [label="Expr"];
    11318 -> 11331;
    11331 [label="BinaryOp(BinaryOp { syntax: 11331, lhs: Some(11326), operator: Some(11332), rhs: Some(11333) })"];
    11331 -> 11326;
    11326 [label="BinaryOp(BinaryOp { syntax: 11326, lhs: Some(11321), operator: Some(11327), rhs: Some(11328) })"];
    11326 -> 11321;
    11321 [label="BinaryOp(BinaryOp { syntax: 11321, lhs: Some(11319), operator: Some(11322), rhs: Some(11323) })"];
    11321 -> 11319;
    11319 [label="Identifier"];
    11319 -> 11320;
    11320[label="_Event"];
    11321 -> 11322;
    11322[label="."];
    11321 -> 11323;
    11323 [label="Expr"];
    11323 -> 11324;
    11324 [label="Identifier"];
    11324 -> 11325;
    11325[label="Player"];
    11326 -> 11327;
    11327[label="=="];
    11326 -> 11328;
    11328 [label="Expr"];
    11328 -> 11329;
    11329 [label="Literal"];
    11329 -> 11330;
    11330[label="Null"];
    11331 -> 11332;
    11332[label="||"];
    11331 -> 11333;
    11333 [label="Expr"];
    11333 -> 11346;
    11346 [label="BinaryOp(BinaryOp { syntax: 11346, lhs: Some(11336), operator: Some(11347), rhs: Some(11348) })"];
    11346 -> 11336;
    11336 [label="BinaryOp(BinaryOp { syntax: 11336, lhs: Some(11334), operator: Some(11337), rhs: Some(11338) })"];
    11336 -> 11334;
    11334 [label="Identifier"];
    11334 -> 11335;
    11335[label="_Event"];
    11336 -> 11337;
    11337[label="."];
    11336 -> 11338;
    11338 [label="Expr"];
    11338 -> 11341;
    11341 [label="BinaryOp(BinaryOp { syntax: 11341, lhs: Some(11339), operator: Some(11342), rhs: Some(11343) })"];
    11341 -> 11339;
    11339 [label="Identifier"];
    11339 -> 11340;
    11340[label="Player"];
    11341 -> 11342;
    11342[label="."];
    11341 -> 11343;
    11343 [label="Expr"];
    11343 -> 11344;
    11344 [label="Identifier"];
    11344 -> 11345;
    11345[label="IsBot"];
    11346 -> 11347;
    11347[label="||"];
    11346 -> 11348;
    11348 [label="Expr"];
    11348 -> 11361;
    11361 [label="BinaryOp(BinaryOp { syntax: 11361, lhs: Some(11351), operator: Some(11362), rhs: Some(11363) })"];
    11361 -> 11351;
    11351 [label="BinaryOp(BinaryOp { syntax: 11351, lhs: Some(11349), operator: Some(11352), rhs: Some(11353) })"];
    11351 -> 11349;
    11349 [label="Identifier"];
    11349 -> 11350;
    11350[label="_Event"];
    11351 -> 11352;
    11352[label="."];
    11351 -> 11353;
    11353 [label="Expr"];
    11353 -> 11356;
    11356 [label="BinaryOp(BinaryOp { syntax: 11356, lhs: Some(11354), operator: Some(11357), rhs: Some(11358) })"];
    11356 -> 11354;
    11354 [label="Identifier"];
    11354 -> 11355;
    11355[label="Player"];
    11356 -> 11357;
    11357[label="."];
    11356 -> 11358;
    11358 [label="Expr"];
    11358 -> 11359;
    11359 [label="Identifier"];
    11359 -> 11360;
    11360[label="SpawnStatus"];
    11361 -> 11362;
    11362[label="!="];
    11361 -> 11363;
    11363 [label="Expr"];
    11363 -> 11366;
    11366 [label="BinaryOp(BinaryOp { syntax: 11366, lhs: Some(11364), operator: Some(11367), rhs: Some(11368) })"];
    11366 -> 11364;
    11364 [label="Identifier"];
    11364 -> 11365;
    11365[label="CSmPlayer"];
    11366 -> 11367;
    11367[label="::"];
    11366 -> 11368;
    11368 [label="Expr"];
    11368 -> 11371;
    11371 [label="BinaryOp(BinaryOp { syntax: 11371, lhs: Some(11369), operator: Some(11372), rhs: Some(11373) })"];
    11371 -> 11369;
    11369 [label="Identifier"];
    11369 -> 11370;
    11370[label="ESpawnStatus"];
    11371 -> 11372;
    11372[label="::"];
    11371 -> 11373;
    11373 [label="Expr"];
    11373 -> 11374;
    11374 [label="Identifier"];
    11374 -> 11375;
    11375[label="Spawned"];
    11265 -> 11376;
    11376[label=")"];
    11265 -> 11377;
    11377 [label="Statement(Statement { syntax: 11377, statement: Some(11378), semicolon: Some(11383) })"];
    11377 -> 11378;
    11378 [label="Return(Return { syntax: 11378, return_: Some(11379), value: Some(11380) })"];
    11378 -> 11379;
    11379[label="return"];
    11378 -> 11380;
    11380 [label="Expr"];
    11380 -> 11381;
    11381 [label="Literal"];
    11381 -> 11382;
    11382[label="False"];
    11377 -> 11383;
    11383[label=";"];
    11262 -> 11384;
    11384 [label="Statement(Statement { syntax: 11384, statement: Some(11385), semicolon: None })"];
    11384 -> 11385;
    11385 [label="VarDec(VarDec { syntax: 11385, declare: Some(11386), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(11387), name: Some(11389), as_: None, alias: None, for_: Some(11390), target: Some(11391), assignment: None, value: None })"];
    11385 -> 11386;
    11386[label="declare"];
    11385 -> 11387;
    11387 [label="Type(Type { syntax: 11387, basename: Some(11388), members: [], arrays: [] })"];
    11387 -> 11388;
    11388[label="Text"];
    11385 -> 11389;
    11389[label="Tag"];
    11385 -> 11390;
    11390[label="for"];
    11385 -> 11391;
    11391 [label="Expr"];
    11391 -> 11394;
    11394 [label="BinaryOp(BinaryOp { syntax: 11394, lhs: Some(11392), operator: Some(11395), rhs: Some(11396) })"];
    11394 -> 11392;
    11392 [label="Identifier"];
    11392 -> 11393;
    11393[label="_Event"];
    11394 -> 11395;
    11395[label="."];
    11394 -> 11396;
    11396 [label="Expr"];
    11396 -> 11397;
    11397 [label="Identifier"];
    11397 -> 11398;
    11398[label="Object"];
    11385 -> 11399;
    11399[label=";"];
    11262 -> 11400;
    11400 [label="Statement(Statement { syntax: 11400, statement: Some(11401), semicolon: None })"];
    11400 -> 11401;
    11401 [label="VarDec(VarDec { syntax: 11401, declare: Some(11402), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(11403), name: Some(11405), as_: None, alias: None, for_: Some(11406), target: Some(11407), assignment: None, value: None })"];
    11401 -> 11402;
    11402[label="declare"];
    11401 -> 11403;
    11403 [label="Type(Type { syntax: 11403, basename: Some(11404), members: [], arrays: [] })"];
    11403 -> 11404;
    11404[label="Boolean"];
    11401 -> 11405;
    11405[label="DroppedByPlayer"];
    11401 -> 11406;
    11406[label="for"];
    11401 -> 11407;
    11407 [label="Expr"];
    11407 -> 11410;
    11410 [label="BinaryOp(BinaryOp { syntax: 11410, lhs: Some(11408), operator: Some(11411), rhs: Some(11412) })"];
    11410 -> 11408;
    11408 [label="Identifier"];
    11408 -> 11409;
    11409[label="_Event"];
    11410 -> 11411;
    11411[label="."];
    11410 -> 11412;
    11412 [label="Expr"];
    11412 -> 11413;
    11413 [label="Identifier"];
    11413 -> 11414;
    11414[label="Object"];
    11401 -> 11415;
    11415[label=";"];
    11262 -> 11416;
    11416 [label="Statement(Statement { syntax: 11416, statement: Some(11417), semicolon: None })"];
    11416 -> 11417;
    11417 [label="VarDec(VarDec { syntax: 11417, declare: Some(11418), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11419), as_: None, alias: None, for_: None, target: None, assignment: Some(11421), value: Some(11422) })"];
    11417 -> 11418;
    11418[label="declare"];
    11417 -> 11419;
    11419 [label="Type(Type { syntax: 11419, basename: Some(11420), members: [], arrays: [] })"];
    11419 -> 11420;
    11420[label="SupportedTags"];
    11417 -> 11421;
    11421[label="="];
    11417 -> 11422;
    11422 [label="Expr"];
    11422 -> 11423;
    11423 [label="Array(Array { syntax: 11423, lsquare: Some(11424), values: [(11425, Some(11428)), (11429, Some(11432)), (11433, None)], rsquare: Some(11436) })"];
    11423 -> 11424;
    11424[label="["];
    11423 -> 11425;
    11425 [label="Expr"];
    11425 -> 11426;
    11426 [label="Literal"];
    11426 -> 11427;
    11427[label="\"Weapon\""];
    11423 -> 11428;
    11428[label=","];
    11423 -> 11429;
    11429 [label="Expr"];
    11429 -> 11430;
    11430 [label="Literal"];
    11430 -> 11431;
    11431[label="\"Charge\""];
    11423 -> 11432;
    11432[label=","];
    11423 -> 11433;
    11433 [label="Expr"];
    11433 -> 11434;
    11434 [label="Literal"];
    11434 -> 11435;
    11435[label="\"Mini\""];
    11423 -> 11436;
    11436[label="]"];
    11417 -> 11437;
    11437[label=";"];
    11262 -> 11438;
    11438 [label="Statement(Statement { syntax: 11438, statement: Some(11439), semicolon: None })"];
    11438 -> 11439;
    11439 [label="If(If { syntax: 11439, if_: Some(11440), lparen: Some(11441), condition: Some(11442), rparen: Some(11459), body: Some(11460), else_: None })"];
    11439 -> 11440;
    11440[label="if"];
    11439 -> 11441;
    11441[label="("];
    11439 -> 11442;
    11442 [label="Expr"];
    11442 -> 11453;
    11453 [label="FunctionCall(FunctionCall { syntax: 11453, lhs: Some(11443), lparen: Some(11454), args: [(11455, None)], rparen: Some(11458) })"];
    11453 -> 11443;
    11443 [label="UnOp(UnOp { syntax: 11443, operator: Some(11444), operand: Some(11445) })"];
    11443 -> 11444;
    11444[label="!"];
    11443 -> 11445;
    11445 [label="Expr"];
    11445 -> 11448;
    11448 [label="BinaryOp(BinaryOp { syntax: 11448, lhs: Some(11446), operator: Some(11449), rhs: Some(11450) })"];
    11448 -> 11446;
    11446 [label="Identifier"];
    11446 -> 11447;
    11447[label="SupportedTags"];
    11448 -> 11449;
    11449[label="."];
    11448 -> 11450;
    11450 [label="Expr"];
    11450 -> 11451;
    11451 [label="Identifier"];
    11451 -> 11452;
    11452[label="exists"];
    11453 -> 11454;
    11454[label="("];
    11453 -> 11455;
    11455 [label="Expr"];
    11455 -> 11456;
    11456 [label="Identifier"];
    11456 -> 11457;
    11457[label="Tag"];
    11453 -> 11458;
    11458[label=")"];
    11439 -> 11459;
    11459[label=")"];
    11439 -> 11460;
    11460 [label="Statement(Statement { syntax: 11460, statement: Some(11461), semicolon: Some(11466) })"];
    11460 -> 11461;
    11461 [label="Return(Return { syntax: 11461, return_: Some(11462), value: Some(11463) })"];
    11461 -> 11462;
    11462[label="return"];
    11461 -> 11463;
    11463 [label="Expr"];
    11463 -> 11464;
    11464 [label="Literal"];
    11464 -> 11465;
    11465[label="False"];
    11460 -> 11466;
    11466[label=";"];
    11262 -> 11467;
    11467 [label="Statement(Statement { syntax: 11467, statement: Some(11468), semicolon: None })"];
    11467 -> 11468;
    11468 [label="VarDec(VarDec { syntax: 11468, declare: Some(11469), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(11470), name: Some(11476), as_: None, alias: None, for_: None, target: None, assignment: None, value: None })"];
    11468 -> 11469;
    11469[label="declare"];
    11468 -> 11470;
    11470 [label="Type(Type { syntax: 11470, basename: Some(11471), members: [(11472, 11473)], arrays: [(11474, None, 11475)] })"];
    11470 -> 11471;
    11471[label="CSmMode"];
    11470 -> 11472;
    11472[label="::"];
    11470 -> 11473;
    11473[label="EWeapon"];
    11470 -> 11474;
    11474[label="["];
    11470 -> 11475;
    11475[label="]"];
    11468 -> 11476;
    11476[label="PossibleWeapons"];
    11468 -> 11477;
    11477[label=";"];
    11262 -> 11478;
    11478 [label="Statement(Statement { syntax: 11478, statement: Some(11479), semicolon: None })"];
    11478 -> 11479;
    11479 [label="VarDec(VarDec { syntax: 11479, declare: Some(11480), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11481), as_: None, alias: None, for_: None, target: None, assignment: Some(11483), value: Some(11484) })"];
    11479 -> 11480;
    11480[label="declare"];
    11479 -> 11481;
    11481 [label="Type(Type { syntax: 11481, basename: Some(11482), members: [], arrays: [] })"];
    11481 -> 11482;
    11482[label="CanPickUpObject"];
    11479 -> 11483;
    11483[label="="];
    11479 -> 11484;
    11484 [label="Expr"];
    11484 -> 11485;
    11485 [label="Literal"];
    11485 -> 11486;
    11486[label="True"];
    11479 -> 11487;
    11487[label=";"];
    11262 -> 11488;
    11488 [label="Statement(Statement { syntax: 11488, statement: Some(11489), semicolon: None })"];
    11488 -> 11489;
    11489 [label="Switch(Switch { syntax: 11489, switch: Some(11490), lparen: Some(11491), value: Some(11492), rparen: Some(11495), lbrace: Some(11496), cases: [11497, 11645], default: None, rbrace: Some(11686), is_type: false })"];
    11489 -> 11490;
    11490[label="switch"];
    11489 -> 11491;
    11491[label="("];
    11489 -> 11492;
    11492 [label="Expr"];
    11492 -> 11493;
    11493 [label="Identifier"];
    11493 -> 11494;
    11494[label="Tag"];
    11489 -> 11495;
    11495[label=")"];
    11489 -> 11496;
    11496[label="{"];
    11489 -> 11497;
    11497 [label="Case(Case { syntax: 11497, case: Some(11498), value: Some(11499), colon: Some(11502), statement: Some(11503) })"];
    11497 -> 11498;
    11498[label="case"];
    11497 -> 11499;
    11499 [label="Expr"];
    11499 -> 11500;
    11500 [label="Literal"];
    11500 -> 11501;
    11501[label="\"Weapon\""];
    11497 -> 11502;
    11502[label=":"];
    11497 -> 11503;
    11503 [label="Statement(Statement { syntax: 11503, statement: Some(11504), semicolon: None })"];
    11503 -> 11504;
    11504 [label="Block(Block { syntax: 11504, lbrace: Some(11505), statements: [11506, 11624], rbrace: Some(11644) })"];
    11504 -> 11505;
    11505[label="{"];
    11504 -> 11506;
    11506 [label="Statement(Statement { syntax: 11506, statement: Some(11507), semicolon: None })"];
    11506 -> 11507;
    11507 [label="Foreach(Foreach { syntax: 11507, foreach: Some(11508), lparen: Some(11509), name1: Some(11510), arrow: Some(11511), name2: Some(11512), in_: Some(11513), value: Some(11514), rparen: Some(11517), body: Some(11518) })"];
    11507 -> 11508;
    11508[label="foreach"];
    11507 -> 11509;
    11509[label="("];
    11507 -> 11510;
    11510[label="Weapon"];
    11507 -> 11511;
    11511[label="=>"];
    11507 -> 11512;
    11512[label="A"];
    11507 -> 11513;
    11513[label="in"];
    11507 -> 11514;
    11514 [label="Expr"];
    11514 -> 11515;
    11515 [label="Identifier"];
    11515 -> 11516;
    11516[label="C_PlayerInitialWeapons"];
    11507 -> 11517;
    11517[label=")"];
    11507 -> 11518;
    11518 [label="Statement(Statement { syntax: 11518, statement: Some(11519), semicolon: None })"];
    11518 -> 11519;
    11519 [label="Block(Block { syntax: 11519, lbrace: Some(11520), statements: [11521, 11531, 11564], rbrace: Some(11623) })"];
    11519 -> 11520;
    11520[label="{"];
    11519 -> 11521;
    11521 [label="Statement(Statement { syntax: 11521, statement: Some(11522), semicolon: None })"];
    11521 -> 11522;
    11522 [label="VarDec(VarDec { syntax: 11522, declare: Some(11523), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11524), as_: None, alias: None, for_: None, target: None, assignment: Some(11526), value: Some(11527) })"];
    11522 -> 11523;
    11523[label="declare"];
    11522 -> 11524;
    11524 [label="Type(Type { syntax: 11524, basename: Some(11525), members: [], arrays: [] })"];
    11524 -> 11525;
    11525[label="WeaponMaxSlots"];
    11522 -> 11526;
    11526[label="="];
    11522 -> 11527;
    11527 [label="Expr"];
    11527 -> 11528;
    11528 [label="Identifier"];
    11528 -> 11529;
    11529[label="S_MaximumNbWeapons"];
    11522 -> 11530;
    11530[label=";"];
    11519 -> 11531;
    11531 [label="Statement(Statement { syntax: 11531, statement: Some(11532), semicolon: None })"];
    11531 -> 11532;
    11532 [label="If(If { syntax: 11532, if_: Some(11533), lparen: Some(11534), condition: Some(11535), rparen: Some(11553), body: Some(11554), else_: None })"];
    11532 -> 11533;
    11533[label="if"];
    11532 -> 11534;
    11534[label="("];
    11532 -> 11535;
    11535 [label="Expr"];
    11535 -> 11538;
    11538 [label="BinaryOp(BinaryOp { syntax: 11538, lhs: Some(11536), operator: Some(11539), rhs: Some(11540) })"];
    11538 -> 11536;
    11536 [label="Identifier"];
    11536 -> 11537;
    11537[label="Weapon"];
    11538 -> 11539;
    11539[label="=="];
    11538 -> 11540;
    11540 [label="Expr"];
    11540 -> 11543;
    11543 [label="BinaryOp(BinaryOp { syntax: 11543, lhs: Some(11541), operator: Some(11544), rhs: Some(11545) })"];
    11543 -> 11541;
    11541 [label="Identifier"];
    11541 -> 11542;
    11542[label="CSmMode"];
    11543 -> 11544;
    11544[label="::"];
    11543 -> 11545;
    11545 [label="Expr"];
    11545 -> 11548;
    11548 [label="BinaryOp(BinaryOp { syntax: 11548, lhs: Some(11546), operator: Some(11549), rhs: Some(11550) })"];
    11548 -> 11546;
    11546 [label="Identifier"];
    11546 -> 11547;
    11547[label="EWeapon"];
    11548 -> 11549;
    11549[label="::"];
    11548 -> 11550;
    11550 [label="Expr"];
    11550 -> 11551;
    11551 [label="Identifier"];
    11551 -> 11552;
    11552[label="Rocket"];
    11532 -> 11553;
    11553[label=")"];
    11532 -> 11554;
    11554 [label="Statement(Statement { syntax: 11554, statement: Some(11558), semicolon: Some(11563) })"];
    11554 -> 11555;
    11555 [label="Expr"];
    11555 -> 11556;
    11556 [label="Identifier"];
    11556 -> 11557;
    11557[label="WeaponMaxSlots"];
    11554 -> 11558;
    11558 [label="Assignment(Assignment { syntax: 11558, lvalue: Some(11555), operator: Some(11559), rvalue: Some(11560) })"];
    11558 -> 11559;
    11559[label="="];
    11558 -> 11560;
    11560 [label="Expr"];
    11560 -> 11561;
    11561 [label="Identifier"];
    11561 -> 11562;
    11562[label="C_PlayerMaxNbRocketSlots"];
    11554 -> 11563;
    11563[label=";"];
    11519 -> 11564;
    11564 [label="Statement(Statement { syntax: 11564, statement: Some(11565), semicolon: None })"];
    11564 -> 11565;
    11565 [label="If(If { syntax: 11565, if_: Some(11566), lparen: Some(11567), condition: Some(11568), rparen: Some(11606), body: Some(11607), else_: None })"];
    11565 -> 11566;
    11566[label="if"];
    11565 -> 11567;
    11567[label="("];
    11565 -> 11568;
    11568 [label="Expr"];
    11568 -> 11601;
    11601 [label="BinaryOp(BinaryOp { syntax: 11601, lhs: Some(11586), operator: Some(11602), rhs: Some(11603) })"];
    11601 -> 11586;
    11586 [label="FunctionCall(FunctionCall { syntax: 11586, lhs: Some(11576), lparen: Some(11587), args: [(11588, Some(11596)), (11597, None)], rparen: Some(11600) })"];
    11586 -> 11576;
    11576 [label="BinaryOp(BinaryOp { syntax: 11576, lhs: Some(11571), operator: Some(11577), rhs: Some(11578) })"];
    11576 -> 11571;
    11571 [label="BinaryOp(BinaryOp { syntax: 11571, lhs: Some(11569), operator: Some(11572), rhs: Some(11573) })"];
    11571 -> 11569;
    11569 [label="Identifier"];
    11569 -> 11570;
    11570[label="WeaponMaxSlots"];
    11571 -> 11572;
    11572[label="<="];
    11571 -> 11573;
    11573 [label="Expr"];
    11573 -> 11574;
    11574 [label="Literal"];
    11574 -> 11575;
    11575[label="0"];
    11576 -> 11577;
    11577[label="||"];
    11576 -> 11578;
    11578 [label="Expr"];
    11578 -> 11581;
    11581 [label="BinaryOp(BinaryOp { syntax: 11581, lhs: Some(11579), operator: Some(11582), rhs: Some(11583) })"];
    11581 -> 11579;
    11579 [label="Identifier"];
    11579 -> 11580;
    11580[label="Inventory"];
    11581 -> 11582;
    11582[label="::"];
    11581 -> 11583;
    11583 [label="Expr"];
    11583 -> 11584;
    11584 [label="Identifier"];
    11584 -> 11585;
    11585[label="GetWeaponSlots"];
    11586 -> 11587;
    11587[label="("];
    11586 -> 11588;
    11588 [label="Expr"];
    11588 -> 11591;
    11591 [label="BinaryOp(BinaryOp { syntax: 11591, lhs: Some(11589), operator: Some(11592), rhs: Some(11593) })"];
    11591 -> 11589;
    11589 [label="Identifier"];
    11589 -> 11590;
    11590[label="_Event"];
    11591 -> 11592;
    11592[label="."];
    11591 -> 11593;
    11593 [label="Expr"];
    11593 -> 11594;
    11594 [label="Identifier"];
    11594 -> 11595;
    11595[label="Player"];
    11586 -> 11596;
    11596[label=","];
    11586 -> 11597;
    11597 [label="Expr"];
    11597 -> 11598;
    11598 [label="Identifier"];
    11598 -> 11599;
    11599[label="Weapon"];
    11586 -> 11600;
    11600[label=")"];
    11601 -> 11602;
    11602[label="<"];
    11601 -> 11603;
    11603 [label="Expr"];
    11603 -> 11604;
    11604 [label="Identifier"];
    11604 -> 11605;
    11605[label="WeaponMaxSlots"];
    11565 -> 11606;
    11606[label=")"];
    11565 -> 11607;
    11607 [label="Statement(Statement { syntax: 11607, statement: Some(11608), semicolon: Some(11622) })"];
    11607 -> 11608;
    11608 [label="Expr"];
    11608 -> 11616;
    11616 [label="FunctionCall(FunctionCall { syntax: 11616, lhs: Some(11611), lparen: Some(11617), args: [(11618, None)], rparen: Some(11621) })"];
    11616 -> 11611;
    11611 [label="BinaryOp(BinaryOp { syntax: 11611, lhs: Some(11609), operator: Some(11612), rhs: Some(11613) })"];
    11611 -> 11609;
    11609 [label="Identifier"];
    11609 -> 11610;
    11610[label="PossibleWeapons"];
    11611 -> 11612;
    11612[label="."];
    11611 -> 11613;
    11613 [label="Expr"];
    11613 -> 11614;
    11614 [label="Identifier"];
    11614 -> 11615;
    11615[label="add"];
    11616 -> 11617;
    11617[label="("];
    11616 -> 11618;
    11618 [label="Expr"];
    11618 -> 11619;
    11619 [label="Identifier"];
    11619 -> 11620;
    11620[label="Weapon"];
    11616 -> 11621;
    11621[label=")"];
    11607 -> 11622;
    11622[label=";"];
    11519 -> 11623;
    11623[label="}"];
    11504 -> 11624;
    11624 [label="Statement(Statement { syntax: 11624, statement: Some(11628), semicolon: Some(11643) })"];
    11624 -> 11625;
    11625 [label="Expr"];
    11625 -> 11626;
    11626 [label="Identifier"];
    11626 -> 11627;
    11627[label="CanPickUpObject"];
    11624 -> 11628;
    11628 [label="Assignment(Assignment { syntax: 11628, lvalue: Some(11625), operator: Some(11629), rvalue: Some(11630) })"];
    11628 -> 11629;
    11629[label="="];
    11628 -> 11630;
    11630 [label="Expr"];
    11630 -> 11638;
    11638 [label="BinaryOp(BinaryOp { syntax: 11638, lhs: Some(11633), operator: Some(11639), rhs: Some(11640) })"];
    11638 -> 11633;
    11633 [label="BinaryOp(BinaryOp { syntax: 11633, lhs: Some(11631), operator: Some(11634), rhs: Some(11635) })"];
    11633 -> 11631;
    11631 [label="Identifier"];
    11631 -> 11632;
    11632[label="PossibleWeapons"];
    11633 -> 11634;
    11634[label="."];
    11633 -> 11635;
    11635 [label="Expr"];
    11635 -> 11636;
    11636 [label="Identifier"];
    11636 -> 11637;
    11637[label="count"];
    11638 -> 11639;
    11639[label=">"];
    11638 -> 11640;
    11640 [label="Expr"];
    11640 -> 11641;
    11641 [label="Literal"];
    11641 -> 11642;
    11642[label="0"];
    11624 -> 11643;
    11643[label=";"];
    11504 -> 11644;
    11644[label="}"];
    11489 -> 11645;
    11645 [label="Case(Case { syntax: 11645, case: Some(11646), value: Some(11647), colon: Some(11650), statement: Some(11651) })"];
    11645 -> 11646;
    11646[label="case"];
    11645 -> 11647;
    11647 [label="Expr"];
    11647 -> 11648;
    11648 [label="Literal"];
    11648 -> 11649;
    11649[label="\"Mini\""];
    11645 -> 11650;
    11650[label=":"];
    11645 -> 11651;
    11651 [label="Statement(Statement { syntax: 11651, statement: Some(11655), semicolon: Some(11685) })"];
    11651 -> 11652;
    11652 [label="Expr"];
    11652 -> 11653;
    11653 [label="Identifier"];
    11653 -> 11654;
    11654[label="CanPickUpObject"];
    11651 -> 11655;
    11655 [label="Assignment(Assignment { syntax: 11655, lvalue: Some(11652), operator: Some(11656), rvalue: Some(11657) })"];
    11655 -> 11656;
    11656[label="="];
    11655 -> 11657;
    11657 [label="Expr"];
    11657 -> 11660;
    11660 [label="BinaryOp(BinaryOp { syntax: 11660, lhs: Some(11658), operator: Some(11661), rhs: Some(11662) })"];
    11660 -> 11658;
    11658 [label="Identifier"];
    11658 -> 11659;
    11659[label="DroppedByPlayer"];
    11660 -> 11661;
    11661[label="||"];
    11660 -> 11662;
    11662 [label="Expr"];
    11662 -> 11680;
    11680 [label="BinaryOp(BinaryOp { syntax: 11680, lhs: Some(11675), operator: Some(11681), rhs: Some(11682) })"];
    11680 -> 11675;
    11675 [label="BinaryOp(BinaryOp { syntax: 11675, lhs: Some(11665), operator: Some(11676), rhs: Some(11677) })"];
    11675 -> 11665;
    11665 [label="BinaryOp(BinaryOp { syntax: 11665, lhs: Some(11663), operator: Some(11666), rhs: Some(11667) })"];
    11665 -> 11663;
    11663 [label="Identifier"];
    11663 -> 11664;
    11664[label="_Event"];
    11665 -> 11666;
    11666[label="."];
    11665 -> 11667;
    11667 [label="Expr"];
    11667 -> 11670;
    11670 [label="BinaryOp(BinaryOp { syntax: 11670, lhs: Some(11668), operator: Some(11671), rhs: Some(11672) })"];
    11670 -> 11668;
    11668 [label="Identifier"];
    11668 -> 11669;
    11669[label="Player"];
    11670 -> 11671;
    11671[label="."];
    11670 -> 11672;
    11672 [label="Expr"];
    11672 -> 11673;
    11673 [label="Identifier"];
    11673 -> 11674;
    11674[label="Armor"];
    11675 -> 11676;
    11676[label="-"];
    11675 -> 11677;
    11677 [label="Expr"];
    11677 -> 11678;
    11678 [label="Identifier"];
    11678 -> 11679;
    11679[label="C_MiniItemArmorTakenOnPick"];
    11680 -> 11681;
    11681[label=">"];
    11680 -> 11682;
    11682 [label="Expr"];
    11682 -> 11683;
    11683 [label="Literal"];
    11683 -> 11684;
    11684[label="0"];
    11651 -> 11685;
    11685[label=";"];
    11489 -> 11686;
    11686[label="}"];
    11262 -> 11687;
    11687 [label="Statement(Statement { syntax: 11687, statement: Some(11688), semicolon: None })"];
    11687 -> 11688;
    11688 [label="If(If { syntax: 11688, if_: Some(11689), lparen: Some(11690), condition: Some(11691), rparen: Some(11697), body: Some(11698), else_: None })"];
    11688 -> 11689;
    11689[label="if"];
    11688 -> 11690;
    11690[label="("];
    11688 -> 11691;
    11691 [label="Expr"];
    11691 -> 11692;
    11692 [label="UnOp(UnOp { syntax: 11692, operator: Some(11693), operand: Some(11694) })"];
    11692 -> 11693;
    11693[label="!"];
    11692 -> 11694;
    11694 [label="Expr"];
    11694 -> 11695;
    11695 [label="Identifier"];
    11695 -> 11696;
    11696[label="CanPickUpObject"];
    11688 -> 11697;
    11697[label=")"];
    11688 -> 11698;
    11698 [label="Statement(Statement { syntax: 11698, statement: Some(11699), semicolon: Some(11704) })"];
    11698 -> 11699;
    11699 [label="Return(Return { syntax: 11699, return_: Some(11700), value: Some(11701) })"];
    11699 -> 11700;
    11700[label="return"];
    11699 -> 11701;
    11701 [label="Expr"];
    11701 -> 11702;
    11702 [label="Literal"];
    11702 -> 11703;
    11703[label="False"];
    11698 -> 11704;
    11704[label=";"];
    11262 -> 11705;
    11705 [label="Statement(Statement { syntax: 11705, statement: Some(11706), semicolon: None })"];
    11705 -> 11706;
    11706 [label="Switch(Switch { syntax: 11706, switch: Some(11707), lparen: Some(11708), value: Some(11709), rparen: Some(11712), lbrace: Some(11713), cases: [11714, 11913, 12031], default: None, rbrace: Some(12198), is_type: false })"];
    11706 -> 11707;
    11707[label="switch"];
    11706 -> 11708;
    11708[label="("];
    11706 -> 11709;
    11709 [label="Expr"];
    11709 -> 11710;
    11710 [label="Identifier"];
    11710 -> 11711;
    11711[label="Tag"];
    11706 -> 11712;
    11712[label=")"];
    11706 -> 11713;
    11713[label="{"];
    11706 -> 11714;
    11714 [label="Case(Case { syntax: 11714, case: Some(11715), value: Some(11716), colon: Some(11719), statement: Some(11720) })"];
    11714 -> 11715;
    11715[label="case"];
    11714 -> 11716;
    11716 [label="Expr"];
    11716 -> 11717;
    11717 [label="Literal"];
    11717 -> 11718;
    11718[label="\"Weapon\""];
    11714 -> 11719;
    11719[label=":"];
    11714 -> 11720;
    11720 [label="Statement(Statement { syntax: 11720, statement: Some(11721), semicolon: None })"];
    11720 -> 11721;
    11721 [label="Block(Block { syntax: 11721, lbrace: Some(11722), statements: [11723, 11764, 11793, 11823, 11876], rbrace: Some(11912) })"];
    11721 -> 11722;
    11722[label="{"];
    11721 -> 11723;
    11723 [label="Statement(Statement { syntax: 11723, statement: Some(11724), semicolon: None })"];
    11723 -> 11724;
    11724 [label="VarDec(VarDec { syntax: 11724, declare: Some(11725), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11726), as_: None, alias: None, for_: None, target: None, assignment: Some(11728), value: Some(11729) })"];
    11724 -> 11725;
    11725[label="declare"];
    11724 -> 11726;
    11726 [label="Type(Type { syntax: 11726, basename: Some(11727), members: [], arrays: [] })"];
    11726 -> 11727;
    11727[label="NewWeapon"];
    11724 -> 11728;
    11728[label="="];
    11724 -> 11729;
    11729 [label="Expr"];
    11729 -> 11732;
    11732 [label="ArrayAccess(ArrayAccess { syntax: 11732, lhs: Some(11730), lsquare: Some(11733), index: Some(11734), rsquare: Some(11762) })"];
    11732 -> 11730;
    11730 [label="Identifier"];
    11730 -> 11731;
    11731[label="PossibleWeapons"];
    11732 -> 11733;
    11733[label="["];
    11732 -> 11734;
    11734 [label="Expr"];
    11734 -> 11742;
    11742 [label="FunctionCall(FunctionCall { syntax: 11742, lhs: Some(11737), lparen: Some(11743), args: [(11744, Some(11747)), (11748, None)], rparen: Some(11761) })"];
    11742 -> 11737;
    11737 [label="BinaryOp(BinaryOp { syntax: 11737, lhs: Some(11735), operator: Some(11738), rhs: Some(11739) })"];
    11737 -> 11735;
    11735 [label="Identifier"];
    11735 -> 11736;
    11736[label="ML"];
    11737 -> 11738;
    11738[label="::"];
    11737 -> 11739;
    11739 [label="Expr"];
    11739 -> 11740;
    11740 [label="Identifier"];
    11740 -> 11741;
    11741[label="Rand"];
    11742 -> 11743;
    11743[label="("];
    11742 -> 11744;
    11744 [label="Expr"];
    11744 -> 11745;
    11745 [label="Literal"];
    11745 -> 11746;
    11746[label="0"];
    11742 -> 11747;
    11747[label=","];
    11742 -> 11748;
    11748 [label="Expr"];
    11748 -> 11756;
    11756 [label="BinaryOp(BinaryOp { syntax: 11756, lhs: Some(11751), operator: Some(11757), rhs: Some(11758) })"];
    11756 -> 11751;
    11751 [label="BinaryOp(BinaryOp { syntax: 11751, lhs: Some(11749), operator: Some(11752), rhs: Some(11753) })"];
    11751 -> 11749;
    11749 [label="Identifier"];
    11749 -> 11750;
    11750[label="PossibleWeapons"];
    11751 -> 11752;
    11752[label="."];
    11751 -> 11753;
    11753 [label="Expr"];
    11753 -> 11754;
    11754 [label="Identifier"];
    11754 -> 11755;
    11755[label="count"];
    11756 -> 11757;
    11757[label="-"];
    11756 -> 11758;
    11758 [label="Expr"];
    11758 -> 11759;
    11759 [label="Literal"];
    11759 -> 11760;
    11760[label="1"];
    11742 -> 11761;
    11761[label=")"];
    11732 -> 11762;
    11762[label="]"];
    11724 -> 11763;
    11763[label=";"];
    11721 -> 11764;
    11764 [label="Statement(Statement { syntax: 11764, statement: Some(11765), semicolon: Some(11792) })"];
    11764 -> 11765;
    11765 [label="Expr"];
    11765 -> 11773;
    11773 [label="FunctionCall(FunctionCall { syntax: 11773, lhs: Some(11768), lparen: Some(11774), args: [(11775, Some(11783)), (11784, Some(11787)), (11788, None)], rparen: Some(11791) })"];
    11773 -> 11768;
    11768 [label="BinaryOp(BinaryOp { syntax: 11768, lhs: Some(11766), operator: Some(11769), rhs: Some(11770) })"];
    11768 -> 11766;
    11766 [label="Identifier"];
    11766 -> 11767;
    11767[label="Inventory"];
    11768 -> 11769;
    11769[label="::"];
    11768 -> 11770;
    11770 [label="Expr"];
    11770 -> 11771;
    11771 [label="Identifier"];
    11771 -> 11772;
    11772[label="AddWeaponSlots"];
    11773 -> 11774;
    11774[label="("];
    11773 -> 11775;
    11775 [label="Expr"];
    11775 -> 11778;
    11778 [label="BinaryOp(BinaryOp { syntax: 11778, lhs: Some(11776), operator: Some(11779), rhs: Some(11780) })"];
    11778 -> 11776;
    11776 [label="Identifier"];
    11776 -> 11777;
    11777[label="_Event"];
    11778 -> 11779;
    11779[label="."];
    11778 -> 11780;
    11780 [label="Expr"];
    11780 -> 11781;
    11781 [label="Identifier"];
    11781 -> 11782;
    11782[label="Player"];
    11773 -> 11783;
    11783[label=","];
    11773 -> 11784;
    11784 [label="Expr"];
    11784 -> 11785;
    11785 [label="Identifier"];
    11785 -> 11786;
    11786[label="NewWeapon"];
    11773 -> 11787;
    11787[label=","];
    11773 -> 11788;
    11788 [label="Expr"];
    11788 -> 11789;
    11789 [label="Literal"];
    11789 -> 11790;
    11790[label="1"];
    11773 -> 11791;
    11791[label=")"];
    11764 -> 11792;
    11792[label=";"];
    11721 -> 11793;
    11793 [label="Statement(Statement { syntax: 11793, statement: Some(11794), semicolon: None })"];
    11793 -> 11794;
    11794 [label="VarDec(VarDec { syntax: 11794, declare: Some(11795), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11796), as_: None, alias: None, for_: None, target: None, assignment: Some(11798), value: Some(11799) })"];
    11794 -> 11795;
    11795[label="declare"];
    11794 -> 11796;
    11796 [label="Type(Type { syntax: 11796, basename: Some(11797), members: [], arrays: [] })"];
    11796 -> 11797;
    11797[label="WeaponName"];
    11794 -> 11798;
    11798[label="="];
    11794 -> 11799;
    11799 [label="Expr"];
    11799 -> 11807;
    11807 [label="FunctionCall(FunctionCall { syntax: 11807, lhs: Some(11802), lparen: Some(11808), args: [(11809, Some(11812)), (11813, None)], rparen: Some(11821) })"];
    11807 -> 11802;
    11802 [label="BinaryOp(BinaryOp { syntax: 11802, lhs: Some(11800), operator: Some(11803), rhs: Some(11804) })"];
    11802 -> 11800;
    11800 [label="Identifier"];
    11800 -> 11801;
    11801[label="TL"];
    11802 -> 11803;
    11803[label="::"];
    11802 -> 11804;
    11804 [label="Expr"];
    11804 -> 11805;
    11805 [label="Identifier"];
    11805 -> 11806;
    11806[label="Split"];
    11807 -> 11808;
    11808[label="("];
    11807 -> 11809;
    11809 [label="Expr"];
    11809 -> 11810;
    11810 [label="Literal"];
    11810 -> 11811;
    11811[label="\"::\""];
    11807 -> 11812;
    11812[label=","];
    11807 -> 11813;
    11813 [label="Expr"];
    11813 -> 11816;
    11816 [label="BinaryOp(BinaryOp { syntax: 11816, lhs: Some(11814), operator: Some(11817), rhs: Some(11818) })"];
    11816 -> 11814;
    11814 [label="Literal"];
    11814 -> 11815;
    11815[label="\"\""];
    11816 -> 11817;
    11817[label="^"];
    11816 -> 11818;
    11818 [label="Expr"];
    11818 -> 11819;
    11819 [label="Identifier"];
    11819 -> 11820;
    11820[label="NewWeapon"];
    11807 -> 11821;
    11821[label=")"];
    11794 -> 11822;
    11822[label=";"];
    11721 -> 11823;
    11823 [label="Statement(Statement { syntax: 11823, statement: Some(11824), semicolon: Some(11875) })"];
    11823 -> 11824;
    11824 [label="Expr"];
    11824 -> 11832;
    11832 [label="FunctionCall(FunctionCall { syntax: 11832, lhs: Some(11827), lparen: Some(11833), args: [(11834, Some(11842)), (11843, Some(11870)), (11871, None)], rparen: Some(11874) })"];
    11832 -> 11827;
    11827 [label="BinaryOp(BinaryOp { syntax: 11827, lhs: Some(11825), operator: Some(11828), rhs: Some(11829) })"];
    11827 -> 11825;
    11825 [label="Identifier"];
    11825 -> 11826;
    11826[label="Interfancy"];
    11827 -> 11828;
    11828[label="::"];
    11827 -> 11829;
    11829 [label="Expr"];
    11829 -> 11830;
    11830 [label="Identifier"];
    11830 -> 11831;
    11831[label="SendCrosshairNote"];
    11832 -> 11833;
    11833[label="("];
    11832 -> 11834;
    11834 [label="Expr"];
    11834 -> 11837;
    11837 [label="BinaryOp(BinaryOp { syntax: 11837, lhs: Some(11835), operator: Some(11838), rhs: Some(11839) })"];
    11837 -> 11835;
    11835 [label="Identifier"];
    11835 -> 11836;
    11836[label="_Event"];
    11837 -> 11838;
    11838[label="."];
    11837 -> 11839;
    11839 [label="Expr"];
    11839 -> 11840;
    11840 [label="Identifier"];
    11840 -> 11841;
    11841[label="Player"];
    11832 -> 11842;
    11842[label=","];
    11832 -> 11843;
    11843 [label="Expr"];
    11843 -> 11844;
    11844 [label="Array(Array { syntax: 11844, lsquare: Some(11845), values: [(11846, Some(11849)), (11850, None)], rsquare: Some(11869) })"];
    11844 -> 11845;
    11845[label="["];
    11844 -> 11846;
    11846 [label="Expr"];
    11846 -> 11847;
    11847 [label="Literal"];
    11847 -> 11848;
    11848[label="\"+1 %1 \""];
    11844 -> 11849;
    11849[label=","];
    11844 -> 11850;
    11850 [label="Expr"];
    11850 -> 11853;
    11853 [label="ArrayAccess(ArrayAccess { syntax: 11853, lhs: Some(11851), lsquare: Some(11854), index: Some(11855), rsquare: Some(11868) })"];
    11853 -> 11851;
    11851 [label="Identifier"];
    11851 -> 11852;
    11852[label="WeaponName"];
    11853 -> 11854;
    11854[label="["];
    11853 -> 11855;
    11855 [label="Expr"];
    11855 -> 11863;
    11863 [label="BinaryOp(BinaryOp { syntax: 11863, lhs: Some(11858), operator: Some(11864), rhs: Some(11865) })"];
    11863 -> 11858;
    11858 [label="BinaryOp(BinaryOp { syntax: 11858, lhs: Some(11856), operator: Some(11859), rhs: Some(11860) })"];
    11858 -> 11856;
    11856 [label="Identifier"];
    11856 -> 11857;
    11857[label="WeaponName"];
    11858 -> 11859;
    11859[label="."];
    11858 -> 11860;
    11860 [label="Expr"];
    11860 -> 11861;
    11861 [label="Identifier"];
    11861 -> 11862;
    11862[label="count"];
    11863 -> 11864;
    11864[label="-"];
    11863 -> 11865;
    11865 [label="Expr"];
    11865 -> 11866;
    11866 [label="Literal"];
    11866 -> 11867;
    11867[label="1"];
    11853 -> 11868;
    11868[label="]"];
    11844 -> 11869;
    11869[label="]"];
    11832 -> 11870;
    11870[label=","];
    11832 -> 11871;
    11871 [label="Expr"];
    11871 -> 11872;
    11872 [label="Literal"];
    11872 -> 11873;
    11873[label="2000"];
    11832 -> 11874;
    11874[label=")"];
    11823 -> 11875;
    11875[label=";"];
    11721 -> 11876;
    11876 [label="Statement(Statement { syntax: 11876, statement: Some(11877), semicolon: None })"];
    11876 -> 11877;
    11877 [label="If(If { syntax: 11877, if_: Some(11878), lparen: Some(11879), condition: Some(11880), rparen: Some(11886), body: Some(11887), else_: None })"];
    11877 -> 11878;
    11878[label="if"];
    11877 -> 11879;
    11879[label="("];
    11877 -> 11880;
    11880 [label="Expr"];
    11880 -> 11881;
    11881 [label="UnOp(UnOp { syntax: 11881, operator: Some(11882), operand: Some(11883) })"];
    11881 -> 11882;
    11882[label="!"];
    11881 -> 11883;
    11883 [label="Expr"];
    11883 -> 11884;
    11884 [label="Identifier"];
    11884 -> 11885;
    11885[label="DroppedByPlayer"];
    11877 -> 11886;
    11886[label=")"];
    11877 -> 11887;
    11887 [label="Statement(Statement { syntax: 11887, statement: Some(11888), semicolon: Some(11911) })"];
    11887 -> 11888;
    11888 [label="Expr"];
    11888 -> 11896;
    11896 [label="FunctionCall(FunctionCall { syntax: 11896, lhs: Some(11891), lparen: Some(11897), args: [(11898, Some(11906)), (11907, None)], rparen: Some(11910) })"];
    11896 -> 11891;
    11891 [label="BinaryOp(BinaryOp { syntax: 11891, lhs: Some(11889), operator: Some(11892), rhs: Some(11893) })"];
    11891 -> 11889;
    11889 [label="Identifier"];
    11889 -> 11890;
    11890[label="GalaxyTitles"];
    11891 -> 11892;
    11892[label="::"];
    11891 -> 11893;
    11893 [label="Expr"];
    11893 -> 11894;
    11894 [label="Identifier"];
    11894 -> 11895;
    11895[label="GivePlayerArmor"];
    11896 -> 11897;
    11897[label="("];
    11896 -> 11898;
    11898 [label="Expr"];
    11898 -> 11901;
    11901 [label="BinaryOp(BinaryOp { syntax: 11901, lhs: Some(11899), operator: Some(11902), rhs: Some(11903) })"];
    11901 -> 11899;
    11899 [label="Identifier"];
    11899 -> 11900;
    11900[label="_Event"];
    11901 -> 11902;
    11902[label="."];
    11901 -> 11903;
    11903 [label="Expr"];
    11903 -> 11904;
    11904 [label="Identifier"];
    11904 -> 11905;
    11905[label="Player"];
    11896 -> 11906;
    11906[label=","];
    11896 -> 11907;
    11907 [label="Expr"];
    11907 -> 11908;
    11908 [label="Identifier"];
    11908 -> 11909;
    11909[label="C_WeaponItemArmorBonus"];
    11896 -> 11910;
    11910[label=")"];
    11887 -> 11911;
    11911[label=";"];
    11721 -> 11912;
    11912[label="}"];
    11706 -> 11913;
    11913 [label="Case(Case { syntax: 11913, case: Some(11914), value: Some(11915), colon: Some(11918), statement: Some(11919) })"];
    11913 -> 11914;
    11914[label="case"];
    11913 -> 11915;
    11915 [label="Expr"];
    11915 -> 11916;
    11916 [label="Literal"];
    11916 -> 11917;
    11917[label="\"Charge\""];
    11913 -> 11918;
    11918[label=":"];
    11913 -> 11919;
    11919 [label="Statement(Statement { syntax: 11919, statement: Some(11920), semicolon: None })"];
    11919 -> 11920;
    11920 [label="Block(Block { syntax: 11920, lbrace: Some(11921), statements: [11922, 11944, 11978], rbrace: Some(12030) })"];
    11920 -> 11921;
    11921[label="{"];
    11920 -> 11922;
    11922 [label="Statement(Statement { syntax: 11922, statement: Some(11923), semicolon: None })"];
    11922 -> 11923;
    11923 [label="VarDec(VarDec { syntax: 11923, declare: Some(11924), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(11925), as_: None, alias: None, for_: None, target: None, assignment: Some(11927), value: Some(11928) })"];
    11923 -> 11924;
    11924[label="declare"];
    11923 -> 11925;
    11925 [label="Type(Type { syntax: 11925, basename: Some(11926), members: [], arrays: [] })"];
    11925 -> 11926;
    11926[label="SkillsToIncrease"];
    11923 -> 11927;
    11927[label="="];
    11923 -> 11928;
    11928 [label="Expr"];
    11928 -> 11929;
    11929 [label="Array(Array { syntax: 11929, lsquare: Some(11930), values: [(11931, Some(11934)), (11935, Some(11938)), (11939, None)], rsquare: Some(11942) })"];
    11929 -> 11930;
    11930[label="["];
    11929 -> 11931;
    11931 [label="Expr"];
    11931 -> 11932;
    11932 [label="Literal"];
    11932 -> 11933;
    11933[label="\"AmmoGain\""];
    11929 -> 11934;
    11934[label=","];
    11929 -> 11935;
    11935 [label="Expr"];
    11935 -> 11936;
    11936 [label="Literal"];
    11936 -> 11937;
    11937[label="\"StaminaGain\""];
    11929 -> 11938;
    11938[label=","];
    11929 -> 11939;
    11939 [label="Expr"];
    11939 -> 11940;
    11940 [label="Literal"];
    11940 -> 11941;
    11941[label="\"StaminaMax\""];
    11929 -> 11942;
    11942[label="]"];
    11923 -> 11943;
    11943[label=";"];
    11920 -> 11944;
    11944 [label="Statement(Statement { syntax: 11944, statement: Some(11945), semicolon: None })"];
    11944 -> 11945;
    11945 [label="Foreach(Foreach { syntax: 11945, foreach: Some(11946), lparen: Some(11947), name1: Some(11948), arrow: None, name2: None, in_: Some(11949), value: Some(11950), rparen: Some(11953), body: Some(11954) })"];
    11945 -> 11946;
    11946[label="foreach"];
    11945 -> 11947;
    11947[label="("];
    11945 -> 11948;
    11948[label="SkillType"];
    11945 -> 11949;
    11949[label="in"];
    11945 -> 11950;
    11950 [label="Expr"];
    11950 -> 11951;
    11951 [label="Identifier"];
    11951 -> 11952;
    11952[label="SkillsToIncrease"];
    11945 -> 11953;
    11953[label=")"];
    11945 -> 11954;
    11954 [label="Statement(Statement { syntax: 11954, statement: Some(11955), semicolon: Some(11977) })"];
    11954 -> 11955;
    11955 [label="Expr"];
    11955 -> 11958;
    11958 [label="FunctionCall(FunctionCall { syntax: 11958, lhs: Some(11956), lparen: Some(11959), args: [(11960, Some(11968)), (11969, Some(11972)), (11973, None)], rparen: Some(11976) })"];
    11958 -> 11956;
    11956 [label="Identifier"];
    11956 -> 11957;
    11957[label="AddPlayerSkill"];
    11958 -> 11959;
    11959[label="("];
    11958 -> 11960;
    11960 [label="Expr"];
    11960 -> 11963;
    11963 [label="BinaryOp(BinaryOp { syntax: 11963, lhs: Some(11961), operator: Some(11964), rhs: Some(11965) })"];
    11963 -> 11961;
    11961 [label="Identifier"];
    11961 -> 11962;
    11962[label="_Event"];
    11963 -> 11964;
    11964[label="."];
    11963 -> 11965;
    11965 [label="Expr"];
    11965 -> 11966;
    11966 [label="Identifier"];
    11966 -> 11967;
    11967[label="Player"];
    11958 -> 11968;
    11968[label=","];
    11958 -> 11969;
    11969 [label="Expr"];
    11969 -> 11970;
    11970 [label="Identifier"];
    11970 -> 11971;
    11971[label="SkillType"];
    11958 -> 11972;
    11972[label=","];
    11958 -> 11973;
    11973 [label="Expr"];
    11973 -> 11974;
    11974 [label="Identifier"];
    11974 -> 11975;
    11975[label="C_ChargeItemSkillPoints"];
    11958 -> 11976;
    11976[label=")"];
    11954 -> 11977;
    11977[label=";"];
    11920 -> 11978;
    11978 [label="Statement(Statement { syntax: 11978, statement: Some(11979), semicolon: Some(12029) })"];
    11978 -> 11979;
    11979 [label="Expr"];
    11979 -> 11987;
    11987 [label="FunctionCall(FunctionCall { syntax: 11987, lhs: Some(11982), lparen: Some(11988), args: [(11989, Some(11997)), (11998, Some(12024)), (12025, None)], rparen: Some(12028) })"];
    11987 -> 11982;
    11982 [label="BinaryOp(BinaryOp { syntax: 11982, lhs: Some(11980), operator: Some(11983), rhs: Some(11984) })"];
    11982 -> 11980;
    11980 [label="Identifier"];
    11980 -> 11981;
    11981[label="Interfancy"];
    11982 -> 11983;
    11983[label="::"];
    11982 -> 11984;
    11984 [label="Expr"];
    11984 -> 11985;
    11985 [label="Identifier"];
    11985 -> 11986;
    11986[label="SendCrosshairNote"];
    11987 -> 11988;
    11988[label="("];
    11987 -> 11989;
    11989 [label="Expr"];
    11989 -> 11992;
    11992 [label="BinaryOp(BinaryOp { syntax: 11992, lhs: Some(11990), operator: Some(11993), rhs: Some(11994) })"];
    11992 -> 11990;
    11990 [label="Identifier"];
    11990 -> 11991;
    11991[label="_Event"];
    11992 -> 11993;
    11993[label="."];
    11992 -> 11994;
    11994 [label="Expr"];
    11994 -> 11995;
    11995 [label="Identifier"];
    11995 -> 11996;
    11996[label="Player"];
    11987 -> 11997;
    11997[label=","];
    11987 -> 11998;
    11998 [label="Expr"];
    11998 -> 11999;
    11999 [label="Array(Array { syntax: 11999, lsquare: Some(12000), values: [(12001, Some(12004)), (12005, Some(12019)), (12020, None)], rsquare: Some(12023) })"];
    11999 -> 12000;
    12000[label="["];
    11999 -> 12001;
    12001 [label="Expr"];
    12001 -> 12002;
    12002 [label="Literal"];
    12002 -> 12003;
    12003[label="\"+%1% %2 \""];
    11999 -> 12004;
    12004[label=","];
    11999 -> 12005;
    12005 [label="Expr"];
    12005 -> 12013;
    12013 [label="FunctionCall(FunctionCall { syntax: 12013, lhs: Some(12008), lparen: Some(12014), args: [(12015, None)], rparen: Some(12018) })"];
    12013 -> 12008;
    12008 [label="BinaryOp(BinaryOp { syntax: 12008, lhs: Some(12006), operator: Some(12009), rhs: Some(12010) })"];
    12008 -> 12006;
    12006 [label="Identifier"];
    12006 -> 12007;
    12007[label="TL"];
    12008 -> 12009;
    12009[label="::"];
    12008 -> 12010;
    12010 [label="Expr"];
    12010 -> 12011;
    12011 [label="Identifier"];
    12011 -> 12012;
    12012[label="ToText"];
    12013 -> 12014;
    12014[label="("];
    12013 -> 12015;
    12015 [label="Expr"];
    12015 -> 12016;
    12016 [label="Identifier"];
    12016 -> 12017;
    12017[label="C_ChargeItemSkillPoints"];
    12013 -> 12018;
    12018[label=")"];
    11999 -> 12019;
    12019[label=","];
    11999 -> 12020;
    12020 [label="Expr"];
    12020 -> 12021;
    12021 [label="Literal"];
    12021 -> 12022;
    12022[label="\"Skills\""];
    11999 -> 12023;
    12023[label="]"];
    11987 -> 12024;
    12024[label=","];
    11987 -> 12025;
    12025 [label="Expr"];
    12025 -> 12026;
    12026 [label="Literal"];
    12026 -> 12027;
    12027[label="2000"];
    11987 -> 12028;
    12028[label=")"];
    11978 -> 12029;
    12029[label=";"];
    11920 -> 12030;
    12030[label="}"];
    11706 -> 12031;
    12031 [label="Case(Case { syntax: 12031, case: Some(12032), value: Some(12033), colon: Some(12036), statement: Some(12037) })"];
    12031 -> 12032;
    12032[label="case"];
    12031 -> 12033;
    12033 [label="Expr"];
    12033 -> 12034;
    12034 [label="Literal"];
    12034 -> 12035;
    12035[label="\"Mini\""];
    12031 -> 12036;
    12036[label=":"];
    12031 -> 12037;
    12037 [label="Statement(Statement { syntax: 12037, statement: Some(12038), semicolon: None })"];
    12037 -> 12038;
    12038 [label="Block(Block { syntax: 12038, lbrace: Some(12039), statements: [12040, 12062, 12101, 12140], rbrace: Some(12197) })"];
    12038 -> 12039;
    12039[label="{"];
    12038 -> 12040;
    12040 [label="Statement(Statement { syntax: 12040, statement: Some(12041), semicolon: None })"];
    12040 -> 12041;
    12041 [label="VarDec(VarDec { syntax: 12041, declare: Some(12042), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12043), as_: None, alias: None, for_: None, target: None, assignment: Some(12045), value: Some(12046) })"];
    12041 -> 12042;
    12042[label="declare"];
    12041 -> 12043;
    12043 [label="Type(Type { syntax: 12043, basename: Some(12044), members: [], arrays: [] })"];
    12043 -> 12044;
    12044[label="SkillsToIncrease"];
    12041 -> 12045;
    12045[label="="];
    12041 -> 12046;
    12046 [label="Expr"];
    12046 -> 12047;
    12047 [label="Array(Array { syntax: 12047, lsquare: Some(12048), values: [(12049, Some(12052)), (12053, Some(12056)), (12057, None)], rsquare: Some(12060) })"];
    12047 -> 12048;
    12048[label="["];
    12047 -> 12049;
    12049 [label="Expr"];
    12049 -> 12050;
    12050 [label="Literal"];
    12050 -> 12051;
    12051[label="\"AmmoGain\""];
    12047 -> 12052;
    12052[label=","];
    12047 -> 12053;
    12053 [label="Expr"];
    12053 -> 12054;
    12054 [label="Literal"];
    12054 -> 12055;
    12055[label="\"StaminaGain\""];
    12047 -> 12056;
    12056[label=","];
    12047 -> 12057;
    12057 [label="Expr"];
    12057 -> 12058;
    12058 [label="Literal"];
    12058 -> 12059;
    12059[label="\"StaminaMax\""];
    12047 -> 12060;
    12060[label="]"];
    12041 -> 12061;
    12061[label=";"];
    12038 -> 12062;
    12062 [label="Statement(Statement { syntax: 12062, statement: Some(12063), semicolon: None })"];
    12062 -> 12063;
    12063 [label="Foreach(Foreach { syntax: 12063, foreach: Some(12064), lparen: Some(12065), name1: Some(12066), arrow: None, name2: None, in_: Some(12067), value: Some(12068), rparen: Some(12071), body: Some(12072) })"];
    12063 -> 12064;
    12064[label="foreach"];
    12063 -> 12065;
    12065[label="("];
    12063 -> 12066;
    12066[label="SkillType"];
    12063 -> 12067;
    12067[label="in"];
    12063 -> 12068;
    12068 [label="Expr"];
    12068 -> 12069;
    12069 [label="Identifier"];
    12069 -> 12070;
    12070[label="SkillsToIncrease"];
    12063 -> 12071;
    12071[label=")"];
    12063 -> 12072;
    12072 [label="Statement(Statement { syntax: 12072, statement: Some(12073), semicolon: Some(12100) })"];
    12072 -> 12073;
    12073 [label="Expr"];
    12073 -> 12076;
    12076 [label="FunctionCall(FunctionCall { syntax: 12076, lhs: Some(12074), lparen: Some(12077), args: [(12078, Some(12086)), (12087, Some(12090)), (12091, None)], rparen: Some(12099) })"];
    12076 -> 12074;
    12074 [label="Identifier"];
    12074 -> 12075;
    12075[label="AddPlayerSkill"];
    12076 -> 12077;
    12077[label="("];
    12076 -> 12078;
    12078 [label="Expr"];
    12078 -> 12081;
    12081 [label="BinaryOp(BinaryOp { syntax: 12081, lhs: Some(12079), operator: Some(12082), rhs: Some(12083) })"];
    12081 -> 12079;
    12079 [label="Identifier"];
    12079 -> 12080;
    12080[label="_Event"];
    12081 -> 12082;
    12082[label="."];
    12081 -> 12083;
    12083 [label="Expr"];
    12083 -> 12084;
    12084 [label="Identifier"];
    12084 -> 12085;
    12085[label="Player"];
    12076 -> 12086;
    12086[label=","];
    12076 -> 12087;
    12087 [label="Expr"];
    12087 -> 12088;
    12088 [label="Identifier"];
    12088 -> 12089;
    12089[label="SkillType"];
    12076 -> 12090;
    12090[label=","];
    12076 -> 12091;
    12091 [label="Expr"];
    12091 -> 12094;
    12094 [label="BinaryOp(BinaryOp { syntax: 12094, lhs: Some(12092), operator: Some(12095), rhs: Some(12096) })"];
    12094 -> 12092;
    12092 [label="Identifier"];
    12092 -> 12093;
    12093[label="C_ChargeItemSkillPoints"];
    12094 -> 12095;
    12095[label="*"];
    12094 -> 12096;
    12096 [label="Expr"];
    12096 -> 12097;
    12097 [label="Identifier"];
    12097 -> 12098;
    12098[label="C_MiniItemBonusMultiplier"];
    12076 -> 12099;
    12099[label=")"];
    12072 -> 12100;
    12100[label=";"];
    12038 -> 12101;
    12101 [label="Statement(Statement { syntax: 12101, statement: Some(12102), semicolon: None })"];
    12101 -> 12102;
    12102 [label="If(If { syntax: 12102, if_: Some(12103), lparen: Some(12104), condition: Some(12105), rparen: Some(12111), body: Some(12112), else_: None })"];
    12102 -> 12103;
    12103[label="if"];
    12102 -> 12104;
    12104[label="("];
    12102 -> 12105;
    12105 [label="Expr"];
    12105 -> 12106;
    12106 [label="UnOp(UnOp { syntax: 12106, operator: Some(12107), operand: Some(12108) })"];
    12106 -> 12107;
    12107[label="!"];
    12106 -> 12108;
    12108 [label="Expr"];
    12108 -> 12109;
    12109 [label="Identifier"];
    12109 -> 12110;
    12110[label="DroppedByPlayer"];
    12102 -> 12111;
    12111[label=")"];
    12102 -> 12112;
    12112 [label="Statement(Statement { syntax: 12112, statement: Some(12113), semicolon: Some(12139) })"];
    12112 -> 12113;
    12113 [label="Expr"];
    12113 -> 12116;
    12116 [label="FunctionCall(FunctionCall { syntax: 12116, lhs: Some(12114), lparen: Some(12117), args: [(12118, Some(12126)), (12127, Some(12130)), (12131, Some(12134)), (12135, None)], rparen: Some(12138) })"];
    12116 -> 12114;
    12114 [label="Identifier"];
    12114 -> 12115;
    12115[label="RemovePlayerArmor"];
    12116 -> 12117;
    12117[label="("];
    12116 -> 12118;
    12118 [label="Expr"];
    12118 -> 12121;
    12121 [label="BinaryOp(BinaryOp { syntax: 12121, lhs: Some(12119), operator: Some(12122), rhs: Some(12123) })"];
    12121 -> 12119;
    12119 [label="Identifier"];
    12119 -> 12120;
    12120[label="_Event"];
    12121 -> 12122;
    12122[label="."];
    12121 -> 12123;
    12123 [label="Expr"];
    12123 -> 12124;
    12124 [label="Identifier"];
    12124 -> 12125;
    12125[label="Player"];
    12116 -> 12126;
    12126[label=","];
    12116 -> 12127;
    12127 [label="Expr"];
    12127 -> 12128;
    12128 [label="Identifier"];
    12128 -> 12129;
    12129[label="C_MiniItemArmorTakenOnPick"];
    12116 -> 12130;
    12130[label=","];
    12116 -> 12131;
    12131 [label="Expr"];
    12131 -> 12132;
    12132 [label="Literal"];
    12132 -> 12133;
    12133[label="Null"];
    12116 -> 12134;
    12134[label=","];
    12116 -> 12135;
    12135 [label="Expr"];
    12135 -> 12136;
    12136 [label="Literal"];
    12136 -> 12137;
    12137[label="0"];
    12116 -> 12138;
    12138[label=")"];
    12112 -> 12139;
    12139[label=";"];
    12038 -> 12140;
    12140 [label="Statement(Statement { syntax: 12140, statement: Some(12141), semicolon: Some(12196) })"];
    12140 -> 12141;
    12141 [label="Expr"];
    12141 -> 12149;
    12149 [label="FunctionCall(FunctionCall { syntax: 12149, lhs: Some(12144), lparen: Some(12150), args: [(12151, Some(12159)), (12160, Some(12191)), (12192, None)], rparen: Some(12195) })"];
    12149 -> 12144;
    12144 [label="BinaryOp(BinaryOp { syntax: 12144, lhs: Some(12142), operator: Some(12145), rhs: Some(12146) })"];
    12144 -> 12142;
    12142 [label="Identifier"];
    12142 -> 12143;
    12143[label="Interfancy"];
    12144 -> 12145;
    12145[label="::"];
    12144 -> 12146;
    12146 [label="Expr"];
    12146 -> 12147;
    12147 [label="Identifier"];
    12147 -> 12148;
    12148[label="SendCrosshairNote"];
    12149 -> 12150;
    12150[label="("];
    12149 -> 12151;
    12151 [label="Expr"];
    12151 -> 12154;
    12154 [label="BinaryOp(BinaryOp { syntax: 12154, lhs: Some(12152), operator: Some(12155), rhs: Some(12156) })"];
    12154 -> 12152;
    12152 [label="Identifier"];
    12152 -> 12153;
    12153[label="_Event"];
    12154 -> 12155;
    12155[label="."];
    12154 -> 12156;
    12156 [label="Expr"];
    12156 -> 12157;
    12157 [label="Identifier"];
    12157 -> 12158;
    12158[label="Player"];
    12149 -> 12159;
    12159[label=","];
    12149 -> 12160;
    12160 [label="Expr"];
    12160 -> 12161;
    12161 [label="Array(Array { syntax: 12161, lsquare: Some(12162), values: [(12163, Some(12166)), (12167, Some(12186)), (12187, None)], rsquare: Some(12190) })"];
    12161 -> 12162;
    12162[label="["];
    12161 -> 12163;
    12163 [label="Expr"];
    12163 -> 12164;
    12164 [label="Literal"];
    12164 -> 12165;
    12165[label="\"+%1% %2 \""];
    12161 -> 12166;
    12166[label=","];
    12161 -> 12167;
    12167 [label="Expr"];
    12167 -> 12175;
    12175 [label="FunctionCall(FunctionCall { syntax: 12175, lhs: Some(12170), lparen: Some(12176), args: [(12177, None)], rparen: Some(12185) })"];
    12175 -> 12170;
    12170 [label="BinaryOp(BinaryOp { syntax: 12170, lhs: Some(12168), operator: Some(12171), rhs: Some(12172) })"];
    12170 -> 12168;
    12168 [label="Identifier"];
    12168 -> 12169;
    12169[label="TL"];
    12170 -> 12171;
    12171[label="::"];
    12170 -> 12172;
    12172 [label="Expr"];
    12172 -> 12173;
    12173 [label="Identifier"];
    12173 -> 12174;
    12174[label="ToText"];
    12175 -> 12176;
    12176[label="("];
    12175 -> 12177;
    12177 [label="Expr"];
    12177 -> 12180;
    12180 [label="BinaryOp(BinaryOp { syntax: 12180, lhs: Some(12178), operator: Some(12181), rhs: Some(12182) })"];
    12180 -> 12178;
    12178 [label="Identifier"];
    12178 -> 12179;
    12179[label="C_ChargeItemSkillPoints"];
    12180 -> 12181;
    12181[label="*"];
    12180 -> 12182;
    12182 [label="Expr"];
    12182 -> 12183;
    12183 [label="Identifier"];
    12183 -> 12184;
    12184[label="C_MiniItemBonusMultiplier"];
    12175 -> 12185;
    12185[label=")"];
    12161 -> 12186;
    12186[label=","];
    12161 -> 12187;
    12187 [label="Expr"];
    12187 -> 12188;
    12188 [label="Literal"];
    12188 -> 12189;
    12189[label="\"Skills\""];
    12161 -> 12190;
    12190[label="]"];
    12149 -> 12191;
    12191[label=","];
    12149 -> 12192;
    12192 [label="Expr"];
    12192 -> 12193;
    12193 [label="Literal"];
    12193 -> 12194;
    12194[label="2000"];
    12149 -> 12195;
    12195[label=")"];
    12140 -> 12196;
    12196[label=";"];
    12038 -> 12197;
    12197[label="}"];
    11706 -> 12198;
    12198[label="}"];
    11262 -> 12199;
    12199 [label="Statement(Statement { syntax: 12199, statement: Some(12200), semicolon: None })"];
    12199 -> 12200;
    12200 [label="VarDec(VarDec { syntax: 12200, declare: Some(12201), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(12202), name: Some(12206), as_: None, alias: None, for_: Some(12207), target: Some(12208), assignment: None, value: None })"];
    12200 -> 12201;
    12201[label="declare"];
    12200 -> 12202;
    12202 [label="Type(Type { syntax: 12202, basename: Some(12203), members: [], arrays: [(12204, None, 12205)] })"];
    12202 -> 12203;
    12203[label="Text"];
    12202 -> 12204;
    12204[label="["];
    12202 -> 12205;
    12205[label="]"];
    12200 -> 12206;
    12206[label="ObjectsToDrop"];
    12200 -> 12207;
    12207[label="for"];
    12200 -> 12208;
    12208 [label="Expr"];
    12208 -> 12211;
    12211 [label="BinaryOp(BinaryOp { syntax: 12211, lhs: Some(12209), operator: Some(12212), rhs: Some(12213) })"];
    12211 -> 12209;
    12209 [label="Identifier"];
    12209 -> 12210;
    12210[label="_Event"];
    12211 -> 12212;
    12212[label="."];
    12211 -> 12213;
    12213 [label="Expr"];
    12213 -> 12214;
    12214 [label="Identifier"];
    12214 -> 12215;
    12215[label="Player"];
    12200 -> 12216;
    12216[label=";"];
    11262 -> 12217;
    12217 [label="Statement(Statement { syntax: 12217, statement: Some(12218), semicolon: Some(12232) })"];
    12217 -> 12218;
    12218 [label="Expr"];
    12218 -> 12226;
    12226 [label="FunctionCall(FunctionCall { syntax: 12226, lhs: Some(12221), lparen: Some(12227), args: [(12228, None)], rparen: Some(12231) })"];
    12226 -> 12221;
    12221 [label="BinaryOp(BinaryOp { syntax: 12221, lhs: Some(12219), operator: Some(12222), rhs: Some(12223) })"];
    12221 -> 12219;
    12219 [label="Identifier"];
    12219 -> 12220;
    12220[label="ObjectsToDrop"];
    12221 -> 12222;
    12222[label="."];
    12221 -> 12223;
    12223 [label="Expr"];
    12223 -> 12224;
    12224 [label="Identifier"];
    12224 -> 12225;
    12225[label="add"];
    12226 -> 12227;
    12227[label="("];
    12226 -> 12228;
    12228 [label="Expr"];
    12228 -> 12229;
    12229 [label="Identifier"];
    12229 -> 12230;
    12230[label="Tag"];
    12226 -> 12231;
    12231[label=")"];
    12217 -> 12232;
    12232[label=";"];
    11262 -> 12233;
    12233 [label="Statement(Statement { syntax: 12233, statement: Some(12234), semicolon: Some(12266) })"];
    12233 -> 12234;
    12234 [label="Expr"];
    12234 -> 12242;
    12242 [label="FunctionCall(FunctionCall { syntax: 12242, lhs: Some(12237), lparen: Some(12243), args: [(12244, Some(12257)), (12258, Some(12261)), (12262, None)], rparen: Some(12265) })"];
    12242 -> 12237;
    12237 [label="BinaryOp(BinaryOp { syntax: 12237, lhs: Some(12235), operator: Some(12238), rhs: Some(12239) })"];
    12237 -> 12235;
    12235 [label="Identifier"];
    12235 -> 12236;
    12236[label="TopScores"];
    12237 -> 12238;
    12238[label="::"];
    12237 -> 12239;
    12239 [label="Expr"];
    12239 -> 12240;
    12240 [label="Identifier"];
    12240 -> 12241;
    12241[label="AddPoints"];
    12242 -> 12243;
    12243[label="("];
    12242 -> 12244;
    12244 [label="Expr"];
    12244 -> 12247;
    12247 [label="BinaryOp(BinaryOp { syntax: 12247, lhs: Some(12245), operator: Some(12248), rhs: Some(12249) })"];
    12247 -> 12245;
    12245 [label="Identifier"];
    12245 -> 12246;
    12246[label="_Event"];
    12247 -> 12248;
    12248[label="."];
    12247 -> 12249;
    12249 [label="Expr"];
    12249 -> 12252;
    12252 [label="BinaryOp(BinaryOp { syntax: 12252, lhs: Some(12250), operator: Some(12253), rhs: Some(12254) })"];
    12252 -> 12250;
    12250 [label="Identifier"];
    12250 -> 12251;
    12251[label="Player"];
    12252 -> 12253;
    12253[label="."];
    12252 -> 12254;
    12254 [label="Expr"];
    12254 -> 12255;
    12255 [label="Identifier"];
    12255 -> 12256;
    12256[label="Score"];
    12242 -> 12257;
    12257[label=","];
    12242 -> 12258;
    12258 [label="Expr"];
    12258 -> 12259;
    12259 [label="Literal"];
    12259 -> 12260;
    12260[label="\"Items\""];
    12242 -> 12261;
    12261[label=","];
    12242 -> 12262;
    12262 [label="Expr"];
    12262 -> 12263;
    12263 [label="Literal"];
    12263 -> 12264;
    12264[label="1"];
    12242 -> 12265;
    12265[label=")"];
    12233 -> 12266;
    12266[label=";"];
    11262 -> 12267;
    12267 [label="Statement(Statement { syntax: 12267, statement: Some(12268), semicolon: Some(12296) })"];
    12267 -> 12268;
    12268 [label="Expr"];
    12268 -> 12276;
    12276 [label="FunctionCall(FunctionCall { syntax: 12276, lhs: Some(12271), lparen: Some(12277), args: [(12278, Some(12291)), (12292, None)], rparen: Some(12295) })"];
    12276 -> 12271;
    12271 [label="BinaryOp(BinaryOp { syntax: 12271, lhs: Some(12269), operator: Some(12272), rhs: Some(12273) })"];
    12271 -> 12269;
    12269 [label="Identifier"];
    12269 -> 12270;
    12270[label="Scores"];
    12271 -> 12272;
    12272[label="::"];
    12271 -> 12273;
    12273 [label="Expr"];
    12273 -> 12274;
    12274 [label="Identifier"];
    12274 -> 12275;
    12275[label="AddPlayerMapPoints"];
    12276 -> 12277;
    12277[label="("];
    12276 -> 12278;
    12278 [label="Expr"];
    12278 -> 12281;
    12281 [label="BinaryOp(BinaryOp { syntax: 12281, lhs: Some(12279), operator: Some(12282), rhs: Some(12283) })"];
    12281 -> 12279;
    12279 [label="Identifier"];
    12279 -> 12280;
    12280[label="_Event"];
    12281 -> 12282;
    12282[label="."];
    12281 -> 12283;
    12283 [label="Expr"];
    12283 -> 12286;
    12286 [label="BinaryOp(BinaryOp { syntax: 12286, lhs: Some(12284), operator: Some(12287), rhs: Some(12288) })"];
    12286 -> 12284;
    12284 [label="Identifier"];
    12284 -> 12285;
    12285[label="Player"];
    12286 -> 12287;
    12287[label="."];
    12286 -> 12288;
    12288 [label="Expr"];
    12288 -> 12289;
    12289 [label="Identifier"];
    12289 -> 12290;
    12290[label="Score"];
    12276 -> 12291;
    12291[label=","];
    12276 -> 12292;
    12292 [label="Expr"];
    12292 -> 12293;
    12293 [label="Identifier"];
    12293 -> 12294;
    12294[label="C_PlayerPointsForObjects"];
    12276 -> 12295;
    12295[label=")"];
    12267 -> 12296;
    12296[label=";"];
    11262 -> 12297;
    12297 [label="Statement(Statement { syntax: 12297, statement: Some(12298), semicolon: None })"];
    12297 -> 12298;
    12298 [label="VarDec(VarDec { syntax: 12298, declare: Some(12299), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12300), as_: None, alias: None, for_: None, target: None, assignment: Some(12302), value: Some(12303) })"];
    12298 -> 12299;
    12299[label="declare"];
    12298 -> 12300;
    12300 [label="Type(Type { syntax: 12300, basename: Some(12301), members: [], arrays: [] })"];
    12300 -> 12301;
    12301[label="Destroyed"];
    12298 -> 12302;
    12302[label="="];
    12298 -> 12303;
    12303 [label="Expr"];
    12303 -> 12306;
    12306 [label="FunctionCall(FunctionCall { syntax: 12306, lhs: Some(12304), lparen: Some(12307), args: [(12308, None)], rparen: Some(12316) })"];
    12306 -> 12304;
    12304 [label="Identifier"];
    12304 -> 12305;
    12305[label="DestroyObject"];
    12306 -> 12307;
    12307[label="("];
    12306 -> 12308;
    12308 [label="Expr"];
    12308 -> 12311;
    12311 [label="BinaryOp(BinaryOp { syntax: 12311, lhs: Some(12309), operator: Some(12312), rhs: Some(12313) })"];
    12311 -> 12309;
    12309 [label="Identifier"];
    12309 -> 12310;
    12310[label="_Event"];
    12311 -> 12312;
    12312[label="."];
    12311 -> 12313;
    12313 [label="Expr"];
    12313 -> 12314;
    12314 [label="Identifier"];
    12314 -> 12315;
    12315[label="Object"];
    12306 -> 12316;
    12316[label=")"];
    12298 -> 12317;
    12317[label=";"];
    11262 -> 12318;
    12318 [label="Statement(Statement { syntax: 12318, statement: Some(12319), semicolon: Some(12324) })"];
    12318 -> 12319;
    12319 [label="Return(Return { syntax: 12319, return_: Some(12320), value: Some(12321) })"];
    12319 -> 12320;
    12320[label="return"];
    12319 -> 12321;
    12321 [label="Expr"];
    12321 -> 12322;
    12322 [label="Literal"];
    12322 -> 12323;
    12323[label="True"];
    12318 -> 12324;
    12324[label=";"];
    11262 -> 12325;
    12325[label="}"];
    0 -> 12326;
    12326 [label="FuncDec(FuncDec { syntax: 12326, type_: Some(12327), name: Some(12329), lparen: Some(12330), args: [12331, 12336], rparen: Some(12340), body: Some(12341) })"];
    12326 -> 12327;
    12327 [label="Type(Type { syntax: 12327, basename: Some(12328), members: [], arrays: [] })"];
    12327 -> 12328;
    12328[label="Void"];
    12326 -> 12329;
    12329[label="DropPlayerObjects"];
    12326 -> 12330;
    12330[label="("];
    12326 -> 12331;
    12331 [label="FormalArg(FormalArg { syntax: 12331, type_: Some(12332), name: Some(12334), comma: Some(12335) })"];
    12331 -> 12332;
    12332 [label="Type(Type { syntax: 12332, basename: Some(12333), members: [], arrays: [] })"];
    12332 -> 12333;
    12333[label="CSmPlayer"];
    12331 -> 12334;
    12334[label="_Player"];
    12331 -> 12335;
    12335[label=","];
    12326 -> 12336;
    12336 [label="FormalArg(FormalArg { syntax: 12336, type_: Some(12337), name: Some(12339), comma: None })"];
    12336 -> 12337;
    12337 [label="Type(Type { syntax: 12337, basename: Some(12338), members: [], arrays: [] })"];
    12337 -> 12338;
    12338[label="Real"];
    12336 -> 12339;
    12339[label="_DropRatio"];
    12326 -> 12340;
    12340[label=")"];
    12326 -> 12341;
    12341 [label="Block(Block { syntax: 12341, lbrace: Some(12342), statements: [12343, 12370, 12383, 12408, 12451, 12466, 12539], rbrace: Some(12679) })"];
    12341 -> 12342;
    12342[label="{"];
    12341 -> 12343;
    12343 [label="Statement(Statement { syntax: 12343, statement: Some(12344), semicolon: None })"];
    12343 -> 12344;
    12344 [label="If(If { syntax: 12344, if_: Some(12345), lparen: Some(12346), condition: Some(12347), rparen: Some(12365), body: Some(12366), else_: None })"];
    12344 -> 12345;
    12345[label="if"];
    12344 -> 12346;
    12346[label="("];
    12344 -> 12347;
    12347 [label="Expr"];
    12347 -> 12355;
    12355 [label="BinaryOp(BinaryOp { syntax: 12355, lhs: Some(12350), operator: Some(12356), rhs: Some(12357) })"];
    12355 -> 12350;
    12350 [label="BinaryOp(BinaryOp { syntax: 12350, lhs: Some(12348), operator: Some(12351), rhs: Some(12352) })"];
    12350 -> 12348;
    12348 [label="Identifier"];
    12348 -> 12349;
    12349[label="_Player"];
    12350 -> 12351;
    12351[label="=="];
    12350 -> 12352;
    12352 [label="Expr"];
    12352 -> 12353;
    12353 [label="Literal"];
    12353 -> 12354;
    12354[label="Null"];
    12355 -> 12356;
    12356[label="||"];
    12355 -> 12357;
    12357 [label="Expr"];
    12357 -> 12360;
    12360 [label="BinaryOp(BinaryOp { syntax: 12360, lhs: Some(12358), operator: Some(12361), rhs: Some(12362) })"];
    12360 -> 12358;
    12358 [label="Identifier"];
    12358 -> 12359;
    12359[label="_DropRatio"];
    12360 -> 12361;
    12361[label="<="];
    12360 -> 12362;
    12362 [label="Expr"];
    12362 -> 12363;
    12363 [label="Literal"];
    12363 -> 12364;
    12364[label="0"];
    12344 -> 12365;
    12365[label=")"];
    12344 -> 12366;
    12366 [label="Statement(Statement { syntax: 12366, statement: Some(12367), semicolon: Some(12369) })"];
    12366 -> 12367;
    12367 [label="Return(Return { syntax: 12367, return_: Some(12368), value: None })"];
    12367 -> 12368;
    12368[label="return"];
    12366 -> 12369;
    12369[label=";"];
    12341 -> 12370;
    12370 [label="Statement(Statement { syntax: 12370, statement: Some(12371), semicolon: None })"];
    12370 -> 12371;
    12371 [label="VarDec(VarDec { syntax: 12371, declare: Some(12372), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(12373), name: Some(12377), as_: None, alias: None, for_: Some(12378), target: Some(12379), assignment: None, value: None })"];
    12371 -> 12372;
    12372[label="declare"];
    12371 -> 12373;
    12373 [label="Type(Type { syntax: 12373, basename: Some(12374), members: [], arrays: [(12375, None, 12376)] })"];
    12373 -> 12374;
    12374[label="Text"];
    12373 -> 12375;
    12375[label="["];
    12373 -> 12376;
    12376[label="]"];
    12371 -> 12377;
    12377[label="ObjectsToDrop"];
    12371 -> 12378;
    12378[label="for"];
    12371 -> 12379;
    12379 [label="Expr"];
    12379 -> 12380;
    12380 [label="Identifier"];
    12380 -> 12381;
    12381[label="_Player"];
    12371 -> 12382;
    12382[label=";"];
    12341 -> 12383;
    12383 [label="Statement(Statement { syntax: 12383, statement: Some(12384), semicolon: None })"];
    12383 -> 12384;
    12384 [label="VarDec(VarDec { syntax: 12384, declare: Some(12385), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12386), as_: None, alias: None, for_: None, target: None, assignment: Some(12388), value: Some(12389) })"];
    12384 -> 12385;
    12385[label="declare"];
    12384 -> 12386;
    12386 [label="Type(Type { syntax: 12386, basename: Some(12387), members: [], arrays: [] })"];
    12386 -> 12387;
    12387[label="PlayerReplies"];
    12384 -> 12388;
    12388[label="="];
    12384 -> 12389;
    12389 [label="Expr"];
    12389 -> 12397;
    12397 [label="FunctionCall(FunctionCall { syntax: 12397, lhs: Some(12392), lparen: Some(12398), args: [(12399, Some(12402)), (12403, None)], rparen: Some(12406) })"];
    12397 -> 12392;
    12392 [label="BinaryOp(BinaryOp { syntax: 12392, lhs: Some(12390), operator: Some(12393), rhs: Some(12394) })"];
    12392 -> 12390;
    12390 [label="Identifier"];
    12390 -> 12391;
    12391[label="Inventory"];
    12392 -> 12393;
    12393[label="::"];
    12392 -> 12394;
    12394 [label="Expr"];
    12394 -> 12395;
    12395 [label="Identifier"];
    12395 -> 12396;
    12396[label="GetItemAmount"];
    12397 -> 12398;
    12398[label="("];
    12397 -> 12399;
    12399 [label="Expr"];
    12399 -> 12400;
    12400 [label="Identifier"];
    12400 -> 12401;
    12401[label="_Player"];
    12397 -> 12402;
    12402[label=","];
    12397 -> 12403;
    12403 [label="Expr"];
    12403 -> 12404;
    12404 [label="Literal"];
    12404 -> 12405;
    12405[label="\"LibGalaxyTitles_Replie\""];
    12397 -> 12406;
    12406[label=")"];
    12384 -> 12407;
    12407[label=";"];
    12341 -> 12408;
    12408 [label="Statement(Statement { syntax: 12408, statement: Some(12409), semicolon: None })"];
    12408 -> 12409;
    12409 [label="If(If { syntax: 12409, if_: Some(12410), lparen: Some(12411), condition: Some(12412), rparen: Some(12420), body: Some(12421), else_: None })"];
    12409 -> 12410;
    12410[label="if"];
    12409 -> 12411;
    12411[label="("];
    12409 -> 12412;
    12412 [label="Expr"];
    12412 -> 12415;
    12415 [label="BinaryOp(BinaryOp { syntax: 12415, lhs: Some(12413), operator: Some(12416), rhs: Some(12417) })"];
    12415 -> 12413;
    12413 [label="Identifier"];
    12413 -> 12414;
    12414[label="PlayerReplies"];
    12415 -> 12416;
    12416[label=">"];
    12415 -> 12417;
    12417 [label="Expr"];
    12417 -> 12418;
    12418 [label="Literal"];
    12418 -> 12419;
    12419[label="0"];
    12409 -> 12420;
    12420[label=")"];
    12409 -> 12421;
    12421 [label="Statement(Statement { syntax: 12421, statement: Some(12422), semicolon: None })"];
    12421 -> 12422;
    12422 [label="For(For { syntax: 12422, for_: Some(12423), lparen: Some(12424), name: Some(12425), comma1: Some(12426), value_start: Some(12427), comma2: Some(12430), value_end: Some(12431), rparen: Some(12434), body: Some(12435) })"];
    12422 -> 12423;
    12423[label="for"];
    12422 -> 12424;
    12424[label="("];
    12422 -> 12425;
    12425[label="I"];
    12422 -> 12426;
    12426[label=","];
    12422 -> 12427;
    12427 [label="Expr"];
    12427 -> 12428;
    12428 [label="Literal"];
    12428 -> 12429;
    12429[label="1"];
    12422 -> 12430;
    12430[label=","];
    12422 -> 12431;
    12431 [label="Expr"];
    12431 -> 12432;
    12432 [label="Identifier"];
    12432 -> 12433;
    12433[label="PlayerReplies"];
    12422 -> 12434;
    12434[label=")"];
    12422 -> 12435;
    12435 [label="Statement(Statement { syntax: 12435, statement: Some(12436), semicolon: Some(12450) })"];
    12435 -> 12436;
    12436 [label="Expr"];
    12436 -> 12444;
    12444 [label="FunctionCall(FunctionCall { syntax: 12444, lhs: Some(12439), lparen: Some(12445), args: [(12446, None)], rparen: Some(12449) })"];
    12444 -> 12439;
    12439 [label="BinaryOp(BinaryOp { syntax: 12439, lhs: Some(12437), operator: Some(12440), rhs: Some(12441) })"];
    12439 -> 12437;
    12437 [label="Identifier"];
    12437 -> 12438;
    12438[label="ObjectsToDrop"];
    12439 -> 12440;
    12440[label="."];
    12439 -> 12441;
    12441 [label="Expr"];
    12441 -> 12442;
    12442 [label="Identifier"];
    12442 -> 12443;
    12443[label="add"];
    12444 -> 12445;
    12445[label="("];
    12444 -> 12446;
    12446 [label="Expr"];
    12446 -> 12447;
    12447 [label="Literal"];
    12447 -> 12448;
    12448[label="\"Replie\""];
    12444 -> 12449;
    12449[label=")"];
    12435 -> 12450;
    12450[label=";"];
    12341 -> 12451;
    12451 [label="Statement(Statement { syntax: 12451, statement: Some(12452), semicolon: None })"];
    12451 -> 12452;
    12452 [label="VarDec(VarDec { syntax: 12452, declare: Some(12453), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12454), as_: None, alias: None, for_: None, target: None, assignment: Some(12456), value: Some(12457) })"];
    12452 -> 12453;
    12453[label="declare"];
    12452 -> 12454;
    12454 [label="Type(Type { syntax: 12454, basename: Some(12455), members: [], arrays: [] })"];
    12454 -> 12455;
    12455[label="TotalObjectsCount"];
    12452 -> 12456;
    12456[label="="];
    12452 -> 12457;
    12457 [label="Expr"];
    12457 -> 12460;
    12460 [label="BinaryOp(BinaryOp { syntax: 12460, lhs: Some(12458), operator: Some(12461), rhs: Some(12462) })"];
    12460 -> 12458;
    12458 [label="Identifier"];
    12458 -> 12459;
    12459[label="ObjectsToDrop"];
    12460 -> 12461;
    12461[label="."];
    12460 -> 12462;
    12462 [label="Expr"];
    12462 -> 12463;
    12463 [label="Identifier"];
    12463 -> 12464;
    12464[label="count"];
    12452 -> 12465;
    12465[label=";"];
    12341 -> 12466;
    12466 [label="Statement(Statement { syntax: 12466, statement: Some(12467), semicolon: None })"];
    12466 -> 12467;
    12467 [label="While(While { syntax: 12467, while_: Some(12468), lparen: Some(12469), condition: Some(12470), rparen: Some(12488), body: Some(12489) })"];
    12467 -> 12468;
    12468[label="while"];
    12467 -> 12469;
    12469[label="("];
    12467 -> 12470;
    12470 [label="Expr"];
    12470 -> 12478;
    12478 [label="BinaryOp(BinaryOp { syntax: 12478, lhs: Some(12473), operator: Some(12479), rhs: Some(12480) })"];
    12478 -> 12473;
    12473 [label="BinaryOp(BinaryOp { syntax: 12473, lhs: Some(12471), operator: Some(12474), rhs: Some(12475) })"];
    12473 -> 12471;
    12471 [label="Identifier"];
    12471 -> 12472;
    12472[label="ObjectsToDrop"];
    12473 -> 12474;
    12474[label="."];
    12473 -> 12475;
    12475 [label="Expr"];
    12475 -> 12476;
    12476 [label="Identifier"];
    12476 -> 12477;
    12477[label="count"];
    12478 -> 12479;
    12479[label=">"];
    12478 -> 12480;
    12480 [label="Expr"];
    12480 -> 12483;
    12483 [label="BinaryOp(BinaryOp { syntax: 12483, lhs: Some(12481), operator: Some(12484), rhs: Some(12485) })"];
    12483 -> 12481;
    12481 [label="Identifier"];
    12481 -> 12482;
    12482[label="TotalObjectsCount"];
    12483 -> 12484;
    12484[label="*"];
    12483 -> 12485;
    12485 [label="Expr"];
    12485 -> 12486;
    12486 [label="Identifier"];
    12486 -> 12487;
    12487[label="_DropRatio"];
    12467 -> 12488;
    12488[label=")"];
    12467 -> 12489;
    12489 [label="Statement(Statement { syntax: 12489, statement: Some(12490), semicolon: None })"];
    12489 -> 12490;
    12490 [label="Block(Block { syntax: 12490, lbrace: Some(12491), statements: [12492], rbrace: Some(12538) })"];
    12490 -> 12491;
    12491[label="{"];
    12490 -> 12492;
    12492 [label="Statement(Statement { syntax: 12492, statement: Some(12493), semicolon: None })"];
    12492 -> 12493;
    12493 [label="VarDec(VarDec { syntax: 12493, declare: Some(12494), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12495), as_: None, alias: None, for_: None, target: None, assignment: Some(12497), value: Some(12498) })"];
    12493 -> 12494;
    12494[label="declare"];
    12493 -> 12495;
    12495 [label="Type(Type { syntax: 12495, basename: Some(12496), members: [], arrays: [] })"];
    12495 -> 12496;
    12496[label="Removed"];
    12493 -> 12497;
    12497[label="="];
    12493 -> 12498;
    12498 [label="Expr"];
    12498 -> 12506;
    12506 [label="FunctionCall(FunctionCall { syntax: 12506, lhs: Some(12501), lparen: Some(12507), args: [(12508, None)], rparen: Some(12536) })"];
    12506 -> 12501;
    12501 [label="BinaryOp(BinaryOp { syntax: 12501, lhs: Some(12499), operator: Some(12502), rhs: Some(12503) })"];
    12501 -> 12499;
    12499 [label="Identifier"];
    12499 -> 12500;
    12500[label="ObjectsToDrop"];
    12501 -> 12502;
    12502[label="."];
    12501 -> 12503;
    12503 [label="Expr"];
    12503 -> 12504;
    12504 [label="Identifier"];
    12504 -> 12505;
    12505[label="removekey"];
    12506 -> 12507;
    12507[label="("];
    12506 -> 12508;
    12508 [label="Expr"];
    12508 -> 12516;
    12516 [label="FunctionCall(FunctionCall { syntax: 12516, lhs: Some(12511), lparen: Some(12517), args: [(12518, Some(12521)), (12522, None)], rparen: Some(12535) })"];
    12516 -> 12511;
    12511 [label="BinaryOp(BinaryOp { syntax: 12511, lhs: Some(12509), operator: Some(12512), rhs: Some(12513) })"];
    12511 -> 12509;
    12509 [label="Identifier"];
    12509 -> 12510;
    12510[label="ML"];
    12511 -> 12512;
    12512[label="::"];
    12511 -> 12513;
    12513 [label="Expr"];
    12513 -> 12514;
    12514 [label="Identifier"];
    12514 -> 12515;
    12515[label="Rand"];
    12516 -> 12517;
    12517[label="("];
    12516 -> 12518;
    12518 [label="Expr"];
    12518 -> 12519;
    12519 [label="Literal"];
    12519 -> 12520;
    12520[label="0"];
    12516 -> 12521;
    12521[label=","];
    12516 -> 12522;
    12522 [label="Expr"];
    12522 -> 12530;
    12530 [label="BinaryOp(BinaryOp { syntax: 12530, lhs: Some(12525), operator: Some(12531), rhs: Some(12532) })"];
    12530 -> 12525;
    12525 [label="BinaryOp(BinaryOp { syntax: 12525, lhs: Some(12523), operator: Some(12526), rhs: Some(12527) })"];
    12525 -> 12523;
    12523 [label="Identifier"];
    12523 -> 12524;
    12524[label="ObjectsToDrop"];
    12525 -> 12526;
    12526[label="."];
    12525 -> 12527;
    12527 [label="Expr"];
    12527 -> 12528;
    12528 [label="Identifier"];
    12528 -> 12529;
    12529[label="count"];
    12530 -> 12531;
    12531[label="-"];
    12530 -> 12532;
    12532 [label="Expr"];
    12532 -> 12533;
    12533 [label="Literal"];
    12533 -> 12534;
    12534[label="1"];
    12516 -> 12535;
    12535[label=")"];
    12506 -> 12536;
    12536[label=")"];
    12493 -> 12537;
    12537[label=";"];
    12490 -> 12538;
    12538[label="}"];
    12341 -> 12539;
    12539 [label="Statement(Statement { syntax: 12539, statement: Some(12540), semicolon: None })"];
    12539 -> 12540;
    12540 [label="Foreach(Foreach { syntax: 12540, foreach: Some(12541), lparen: Some(12542), name1: Some(12543), arrow: None, name2: None, in_: Some(12544), value: Some(12545), rparen: Some(12548), body: Some(12549) })"];
    12540 -> 12541;
    12541[label="foreach"];
    12540 -> 12542;
    12542[label="("];
    12540 -> 12543;
    12543[label="NewObjectTag"];
    12540 -> 12544;
    12544[label="in"];
    12540 -> 12545;
    12545 [label="Expr"];
    12545 -> 12546;
    12546 [label="Identifier"];
    12546 -> 12547;
    12547[label="ObjectsToDrop"];
    12540 -> 12548;
    12548[label=")"];
    12540 -> 12549;
    12549 [label="Statement(Statement { syntax: 12549, statement: Some(12550), semicolon: None })"];
    12549 -> 12550;
    12550 [label="Block(Block { syntax: 12550, lbrace: Some(12551), statements: [12552, 12567, 12620, 12640, 12657, 12668], rbrace: Some(12678) })"];
    12550 -> 12551;
    12551[label="{"];
    12550 -> 12552;
    12552 [label="Statement(Statement { syntax: 12552, statement: Some(12553), semicolon: None })"];
    12552 -> 12553;
    12553 [label="VarDec(VarDec { syntax: 12553, declare: Some(12554), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12555), as_: None, alias: None, for_: None, target: None, assignment: Some(12557), value: Some(12558) })"];
    12553 -> 12554;
    12554[label="declare"];
    12553 -> 12555;
    12555 [label="Type(Type { syntax: 12555, basename: Some(12556), members: [], arrays: [] })"];
    12555 -> 12556;
    12556[label="ObjectPosition"];
    12553 -> 12557;
    12557[label="="];
    12553 -> 12558;
    12558 [label="Expr"];
    12558 -> 12561;
    12561 [label="BinaryOp(BinaryOp { syntax: 12561, lhs: Some(12559), operator: Some(12562), rhs: Some(12563) })"];
    12561 -> 12559;
    12559 [label="Identifier"];
    12559 -> 12560;
    12560[label="_Player"];
    12561 -> 12562;
    12562[label="."];
    12561 -> 12563;
    12563 [label="Expr"];
    12563 -> 12564;
    12564 [label="Identifier"];
    12564 -> 12565;
    12565[label="Position"];
    12553 -> 12566;
    12566[label=";"];
    12550 -> 12567;
    12567 [label="Statement(Statement { syntax: 12567, statement: Some(12568), semicolon: None })"];
    12567 -> 12568;
    12568 [label="For(For { syntax: 12568, for_: Some(12569), lparen: Some(12570), name: Some(12571), comma1: Some(12572), value_start: Some(12573), comma2: Some(12576), value_end: Some(12577), rparen: Some(12580), body: Some(12581) })"];
    12568 -> 12569;
    12569[label="for"];
    12568 -> 12570;
    12570[label="("];
    12568 -> 12571;
    12571[label="I"];
    12568 -> 12572;
    12572[label=","];
    12568 -> 12573;
    12573 [label="Expr"];
    12573 -> 12574;
    12574 [label="Literal"];
    12574 -> 12575;
    12575[label="0"];
    12568 -> 12576;
    12576[label=","];
    12568 -> 12577;
    12577 [label="Expr"];
    12577 -> 12578;
    12578 [label="Literal"];
    12578 -> 12579;
    12579[label="1"];
    12568 -> 12580;
    12580[label=")"];
    12568 -> 12581;
    12581 [label="Statement(Statement { syntax: 12581, statement: Some(12596), semicolon: Some(12619) })"];
    12581 -> 12582;
    12582 [label="Expr"];
    12582 -> 12585;
    12585 [label="ArrayAccess(ArrayAccess { syntax: 12585, lhs: Some(12583), lsquare: Some(12586), index: Some(12587), rsquare: Some(12595) })"];
    12585 -> 12583;
    12583 [label="Identifier"];
    12583 -> 12584;
    12584[label="ObjectPosition"];
    12585 -> 12586;
    12586[label="["];
    12585 -> 12587;
    12587 [label="Expr"];
    12587 -> 12590;
    12590 [label="BinaryOp(BinaryOp { syntax: 12590, lhs: Some(12588), operator: Some(12591), rhs: Some(12592) })"];
    12590 -> 12588;
    12588 [label="Identifier"];
    12588 -> 12589;
    12589[label="I"];
    12590 -> 12591;
    12591[label="*"];
    12590 -> 12592;
    12592 [label="Expr"];
    12592 -> 12593;
    12593 [label="Literal"];
    12593 -> 12594;
    12594[label="2"];
    12585 -> 12595;
    12595[label="]"];
    12581 -> 12596;
    12596 [label="Assignment(Assignment { syntax: 12596, lvalue: Some(12582), operator: Some(12597), rvalue: Some(12598) })"];
    12596 -> 12597;
    12597[label="+="];
    12596 -> 12598;
    12598 [label="Expr"];
    12598 -> 12606;
    12606 [label="FunctionCall(FunctionCall { syntax: 12606, lhs: Some(12601), lparen: Some(12607), args: [(12608, Some(12614)), (12615, None)], rparen: Some(12618) })"];
    12606 -> 12601;
    12601 [label="BinaryOp(BinaryOp { syntax: 12601, lhs: Some(12599), operator: Some(12602), rhs: Some(12603) })"];
    12601 -> 12599;
    12599 [label="Identifier"];
    12599 -> 12600;
    12600[label="ML"];
    12601 -> 12602;
    12602[label="::"];
    12601 -> 12603;
    12603 [label="Expr"];
    12603 -> 12604;
    12604 [label="Identifier"];
    12604 -> 12605;
    12605[label="Rand"];
    12606 -> 12607;
    12607[label="("];
    12606 -> 12608;
    12608 [label="Expr"];
    12608 -> 12609;
    12609 [label="UnOp(UnOp { syntax: 12609, operator: Some(12610), operand: Some(12611) })"];
    12609 -> 12610;
    12610[label="-"];
    12609 -> 12611;
    12611 [label="Expr"];
    12611 -> 12612;
    12612 [label="Identifier"];
    12612 -> 12613;
    12613[label="C_ObjectsDropSpreadRadius"];
    12606 -> 12614;
    12614[label=","];
    12606 -> 12615;
    12615 [label="Expr"];
    12615 -> 12616;
    12616 [label="Identifier"];
    12616 -> 12617;
    12617[label="C_ObjectsDropSpreadRadius"];
    12606 -> 12618;
    12618[label=")"];
    12581 -> 12619;
    12619[label=";"];
    12550 -> 12620;
    12620 [label="Statement(Statement { syntax: 12620, statement: Some(12621), semicolon: None })"];
    12620 -> 12621;
    12621 [label="VarDec(VarDec { syntax: 12621, declare: Some(12622), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12623), as_: None, alias: None, for_: None, target: None, assignment: Some(12625), value: Some(12626) })"];
    12621 -> 12622;
    12622[label="declare"];
    12621 -> 12623;
    12623 [label="Type(Type { syntax: 12623, basename: Some(12624), members: [], arrays: [] })"];
    12623 -> 12624;
    12624[label="Object"];
    12621 -> 12625;
    12625[label="="];
    12621 -> 12626;
    12626 [label="Expr"];
    12626 -> 12629;
    12629 [label="FunctionCall(FunctionCall { syntax: 12629, lhs: Some(12627), lparen: Some(12630), args: [(12631, Some(12634)), (12635, None)], rparen: Some(12638) })"];
    12629 -> 12627;
    12627 [label="Identifier"];
    12627 -> 12628;
    12628[label="SpawnObject"];
    12629 -> 12630;
    12630[label="("];
    12629 -> 12631;
    12631 [label="Expr"];
    12631 -> 12632;
    12632 [label="Identifier"];
    12632 -> 12633;
    12633[label="ObjectPosition"];
    12629 -> 12634;
    12634[label=","];
    12629 -> 12635;
    12635 [label="Expr"];
    12635 -> 12636;
    12636 [label="Identifier"];
    12636 -> 12637;
    12637[label="NewObjectTag"];
    12629 -> 12638;
    12638[label=")"];
    12621 -> 12639;
    12639[label=";"];
    12550 -> 12640;
    12640 [label="Statement(Statement { syntax: 12640, statement: Some(12641), semicolon: None })"];
    12640 -> 12641;
    12641 [label="If(If { syntax: 12641, if_: Some(12642), lparen: Some(12643), condition: Some(12644), rparen: Some(12652), body: Some(12653), else_: None })"];
    12641 -> 12642;
    12642[label="if"];
    12641 -> 12643;
    12643[label="("];
    12641 -> 12644;
    12644 [label="Expr"];
    12644 -> 12647;
    12647 [label="BinaryOp(BinaryOp { syntax: 12647, lhs: Some(12645), operator: Some(12648), rhs: Some(12649) })"];
    12647 -> 12645;
    12645 [label="Identifier"];
    12645 -> 12646;
    12646[label="Object"];
    12647 -> 12648;
    12648[label="=="];
    12647 -> 12649;
    12649 [label="Expr"];
    12649 -> 12650;
    12650 [label="Literal"];
    12650 -> 12651;
    12651[label="Null"];
    12641 -> 12652;
    12652[label=")"];
    12641 -> 12653;
    12653 [label="Statement(Statement { syntax: 12653, statement: Some(12654), semicolon: Some(12656) })"];
    12653 -> 12654;
    12654 [label="Continue"];
    12654 -> 12655;
    12655[label="continue"];
    12653 -> 12656;
    12656[label=";"];
    12550 -> 12657;
    12657 [label="Statement(Statement { syntax: 12657, statement: Some(12658), semicolon: None })"];
    12657 -> 12658;
    12658 [label="VarDec(VarDec { syntax: 12658, declare: Some(12659), netread: None, netwrite: None, persistent: None, metadata: None, type_: Some(12660), name: Some(12662), as_: None, alias: None, for_: Some(12663), target: Some(12664), assignment: None, value: None })"];
    12658 -> 12659;
    12659[label="declare"];
    12658 -> 12660;
    12660 [label="Type(Type { syntax: 12660, basename: Some(12661), members: [], arrays: [] })"];
    12660 -> 12661;
    12661[label="Boolean"];
    12658 -> 12662;
    12662[label="DroppedByPlayer"];
    12658 -> 12663;
    12663[label="for"];
    12658 -> 12664;
    12664 [label="Expr"];
    12664 -> 12665;
    12665 [label="Identifier"];
    12665 -> 12666;
    12666[label="Object"];
    12658 -> 12667;
    12667[label=";"];
    12550 -> 12668;
    12668 [label="Statement(Statement { syntax: 12668, statement: Some(12672), semicolon: Some(12677) })"];
    12668 -> 12669;
    12669 [label="Expr"];
    12669 -> 12670;
    12670 [label="Identifier"];
    12670 -> 12671;
    12671[label="DroppedByPlayer"];
    12668 -> 12672;
    12672 [label="Assignment(Assignment { syntax: 12672, lvalue: Some(12669), operator: Some(12673), rvalue: Some(12674) })"];
    12672 -> 12673;
    12673[label="="];
    12672 -> 12674;
    12674 [label="Expr"];
    12674 -> 12675;
    12675 [label="Literal"];
    12675 -> 12676;
    12676[label="True"];
    12668 -> 12677;
    12677[label=";"];
    12550 -> 12678;
    12678[label="}"];
    12341 -> 12679;
    12679[label="}"];
    0 -> 12680;
    12680 [label="FuncDec(FuncDec { syntax: 12680, type_: Some(12681), name: Some(12683), lparen: Some(12684), args: [12685], rparen: Some(12689), body: Some(12690) })"];
    12680 -> 12681;
    12681 [label="Type(Type { syntax: 12681, basename: Some(12682), members: [], arrays: [] })"];
    12681 -> 12682;
    12682[label="Void"];
    12680 -> 12683;
    12683[label="UISetStartTime"];
    12680 -> 12684;
    12684[label="("];
    12680 -> 12685;
    12685 [label="FormalArg(FormalArg { syntax: 12685, type_: Some(12686), name: Some(12688), comma: None })"];
    12685 -> 12686;
    12686 [label="Type(Type { syntax: 12686, basename: Some(12687), members: [], arrays: [] })"];
    12686 -> 12687;
    12687[label="Integer"];
    12685 -> 12688;
    12688[label="_StartTime"];
    12680 -> 12689;
    12689[label=")"];
    12680 -> 12690;
    12690 [label="Block(Block { syntax: 12690, lbrace: Some(12691), statements: [12692, 12710], rbrace: Some(12720) })"];
    12690 -> 12691;
    12691[label="{"];
    12690 -> 12692;
    12692 [label="Statement(Statement { syntax: 12692, statement: Some(12693), semicolon: None })"];
    12692 -> 12693;
    12693 [label="VarDec(VarDec { syntax: 12693, declare: Some(12694), netread: None, netwrite: Some(12695), persistent: None, metadata: None, type_: Some(12696), name: Some(12698), as_: None, alias: None, for_: Some(12699), target: Some(12700), assignment: None, value: None })"];
    12693 -> 12694;
    12694[label="declare"];
    12693 -> 12695;
    12695[label="netwrite"];
    12693 -> 12696;
    12696 [label="Type(Type { syntax: 12696, basename: Some(12697), members: [], arrays: [] })"];
    12696 -> 12697;
    12697[label="Integer"];
    12693 -> 12698;
    12698[label="Net_HungerGames_StartTime"];
    12693 -> 12699;
    12699[label="for"];
    12693 -> 12700;
    12700 [label="Expr"];
    12700 -> 12703;
    12703 [label="ArrayAccess(ArrayAccess { syntax: 12703, lhs: Some(12701), lsquare: Some(12704), index: Some(12705), rsquare: Some(12708) })"];
    12703 -> 12701;
    12701 [label="Identifier"];
    12701 -> 12702;
    12702[label="Teams"];
    12703 -> 12704;
    12704[label="["];
    12703 -> 12705;
    12705 [label="Expr"];
    12705 -> 12706;
    12706 [label="Literal"];
    12706 -> 12707;
    12707[label="0"];
    12703 -> 12708;
    12708[label="]"];
    12693 -> 12709;
    12709[label=";"];
    12690 -> 12710;
    12710 [label="Statement(Statement { syntax: 12710, statement: Some(12714), semicolon: Some(12719) })"];
    12710 -> 12711;
    12711 [label="Expr"];
    12711 -> 12712;
    12712 [label="Identifier"];
    12712 -> 12713;
    12713[label="Net_HungerGames_StartTime"];
    12710 -> 12714;
    12714 [label="Assignment(Assignment { syntax: 12714, lvalue: Some(12711), operator: Some(12715), rvalue: Some(12716) })"];
    12714 -> 12715;
    12715[label="="];
    12714 -> 12716;
    12716 [label="Expr"];
    12716 -> 12717;
    12717 [label="Identifier"];
    12717 -> 12718;
    12718[label="_StartTime"];
    12710 -> 12719;
    12719[label=";"];
    12690 -> 12720;
    12720[label="}"];
    0 -> 12721;
    12721 [label="FuncDec(FuncDec { syntax: 12721, type_: Some(12722), name: Some(12724), lparen: Some(12725), args: [12726], rparen: Some(12730), body: Some(12731) })"];
    12721 -> 12722;
    12722 [label="Type(Type { syntax: 12722, basename: Some(12723), members: [], arrays: [] })"];
    12722 -> 12723;
    12723[label="Void"];
    12721 -> 12724;
    12724[label="UISetNbPlayersAlive"];
    12721 -> 12725;
    12725[label="("];
    12721 -> 12726;
    12726 [label="FormalArg(FormalArg { syntax: 12726, type_: Some(12727), name: Some(12729), comma: None })"];
    12726 -> 12727;
    12727 [label="Type(Type { syntax: 12727, basename: Some(12728), members: [], arrays: [] })"];
    12727 -> 12728;
    12728[label="Integer"];
    12726 -> 12729;
    12729[label="_PlayersNbAlive"];
    12721 -> 12730;
    12730[label=")"];
    12721 -> 12731;
    12731 [label="Block(Block { syntax: 12731, lbrace: Some(12732), statements: [12733, 12751], rbrace: Some(12761) })"];
    12731 -> 12732;
    12732[label="{"];
    12731 -> 12733;
    12733 [label="Statement(Statement { syntax: 12733, statement: Some(12734), semicolon: None })"];
    12733 -> 12734;
    12734 [label="VarDec(VarDec { syntax: 12734, declare: Some(12735), netread: None, netwrite: Some(12736), persistent: None, metadata: None, type_: Some(12737), name: Some(12739), as_: None, alias: None, for_: Some(12740), target: Some(12741), assignment: None, value: None })"];
    12734 -> 12735;
    12735[label="declare"];
    12734 -> 12736;
    12736[label="netwrite"];
    12734 -> 12737;
    12737 [label="Type(Type { syntax: 12737, basename: Some(12738), members: [], arrays: [] })"];
    12737 -> 12738;
    12738[label="Integer"];
    12734 -> 12739;
    12739[label="Net_HungerGames_PlayersAlive"];
    12734 -> 12740;
    12740[label="for"];
    12734 -> 12741;
    12741 [label="Expr"];
    12741 -> 12744;
    12744 [label="ArrayAccess(ArrayAccess { syntax: 12744, lhs: Some(12742), lsquare: Some(12745), index: Some(12746), rsquare: Some(12749) })"];
    12744 -> 12742;
    12742 [label="Identifier"];
    12742 -> 12743;
    12743[label="Teams"];
    12744 -> 12745;
    12745[label="["];
    12744 -> 12746;
    12746 [label="Expr"];
    12746 -> 12747;
    12747 [label="Literal"];
    12747 -> 12748;
    12748[label="0"];
    12744 -> 12749;
    12749[label="]"];
    12734 -> 12750;
    12750[label=";"];
    12731 -> 12751;
    12751 [label="Statement(Statement { syntax: 12751, statement: Some(12755), semicolon: Some(12760) })"];
    12751 -> 12752;
    12752 [label="Expr"];
    12752 -> 12753;
    12753 [label="Identifier"];
    12753 -> 12754;
    12754[label="Net_HungerGames_PlayersAlive"];
    12751 -> 12755;
    12755 [label="Assignment(Assignment { syntax: 12755, lvalue: Some(12752), operator: Some(12756), rvalue: Some(12757) })"];
    12755 -> 12756;
    12756[label="="];
    12755 -> 12757;
    12757 [label="Expr"];
    12757 -> 12758;
    12758 [label="Identifier"];
    12758 -> 12759;
    12759[label="_PlayersNbAlive"];
    12751 -> 12760;
    12760[label=";"];
    12731 -> 12761;
    12761[label="}"];
    0 -> 12762;
    12762 [label="FuncDec(FuncDec { syntax: 12762, type_: Some(12763), name: Some(12765), lparen: Some(12766), args: [12767], rparen: Some(12771), body: Some(12772) })"];
    12762 -> 12763;
    12763 [label="Type(Type { syntax: 12763, basename: Some(12764), members: [], arrays: [] })"];
    12763 -> 12764;
    12764[label="Void"];
    12762 -> 12765;
    12765[label="UIAddPlayerTouchingGoal"];
    12762 -> 12766;
    12766[label="("];
    12762 -> 12767;
    12767 [label="FormalArg(FormalArg { syntax: 12767, type_: Some(12768), name: Some(12770), comma: None })"];
    12767 -> 12768;
    12768 [label="Type(Type { syntax: 12768, basename: Some(12769), members: [], arrays: [] })"];
    12768 -> 12769;
    12769[label="Text"];
    12767 -> 12770;
    12770[label="_Login"];
    12762 -> 12771;
    12771[label=")"];
    12762 -> 12772;
    12772 [label="Block(Block { syntax: 12772, lbrace: Some(12773), statements: [12774, 12794], rbrace: Some(12810) })"];
    12772 -> 12773;
    12773[label="{"];
    12772 -> 12774;
    12774 [label="Statement(Statement { syntax: 12774, statement: Some(12775), semicolon: None })"];
    12774 -> 12775;
    12775 [label="VarDec(VarDec { syntax: 12775, declare: Some(12776), netread: None, netwrite: Some(12777), persistent: None, metadata: None, type_: Some(12778), name: Some(12782), as_: None, alias: None, for_: Some(12783), target: Some(12784), assignment: None, value: None })"];
    12775 -> 12776;
    12776[label="declare"];
    12775 -> 12777;
    12777[label="netwrite"];
    12775 -> 12778;
    12778 [label="Type(Type { syntax: 12778, basename: Some(12779), members: [], arrays: [(12780, None, 12781)] })"];
    12778 -> 12779;
    12779[label="Text"];
    12778 -> 12780;
    12780[label="["];
    12778 -> 12781;
    12781[label="]"];
    12775 -> 12782;
    12782[label="Net_HungerGames_TouchedGoal"];
    12775 -> 12783;
    12783[label="for"];
    12775 -> 12784;
    12784 [label="Expr"];
    12784 -> 12787;
    12787 [label="ArrayAccess(ArrayAccess { syntax: 12787, lhs: Some(12785), lsquare: Some(12788), index: Some(12789), rsquare: Some(12792) })"];
    12787 -> 12785;
    12785 [label="Identifier"];
    12785 -> 12786;
    12786[label="Teams"];
    12787 -> 12788;
    12788[label="["];
    12787 -> 12789;
    12789 [label="Expr"];
    12789 -> 12790;
    12790 [label="Literal"];
    12790 -> 12791;
    12791[label="0"];
    12787 -> 12792;
    12792[label="]"];
    12775 -> 12793;
    12793[label=";"];
    12772 -> 12794;
    12794 [label="Statement(Statement { syntax: 12794, statement: Some(12795), semicolon: Some(12809) })"];
    12794 -> 12795;
    12795 [label="Expr"];
    12795 -> 12803;
    12803 [label="FunctionCall(FunctionCall { syntax: 12803, lhs: Some(12798), lparen: Some(12804), args: [(12805, None)], rparen: Some(12808) })"];
    12803 -> 12798;
    12798 [label="BinaryOp(BinaryOp { syntax: 12798, lhs: Some(12796), operator: Some(12799), rhs: Some(12800) })"];
    12798 -> 12796;
    12796 [label="Identifier"];
    12796 -> 12797;
    12797[label="Net_HungerGames_TouchedGoal"];
    12798 -> 12799;
    12799[label="."];
    12798 -> 12800;
    12800 [label="Expr"];
    12800 -> 12801;
    12801 [label="Identifier"];
    12801 -> 12802;
    12802[label="add"];
    12803 -> 12804;
    12804[label="("];
    12803 -> 12805;
    12805 [label="Expr"];
    12805 -> 12806;
    12806 [label="Identifier"];
    12806 -> 12807;
    12807[label="_Login"];
    12803 -> 12808;
    12808[label=")"];
    12794 -> 12809;
    12809[label=";"];
    12772 -> 12810;
    12810[label="}"];
    0 -> 12811;
    12811 [label="FuncDec(FuncDec { syntax: 12811, type_: Some(12812), name: Some(12814), lparen: Some(12815), args: [12816, 12821], rparen: Some(12825), body: Some(12826) })"];
    12811 -> 12812;
    12812 [label="Type(Type { syntax: 12812, basename: Some(12813), members: [], arrays: [] })"];
    12812 -> 12813;
    12813[label="Void"];
    12811 -> 12814;
    12814[label="UISetRespawnStartTime"];
    12811 -> 12815;
    12815[label="("];
    12811 -> 12816;
    12816 [label="FormalArg(FormalArg { syntax: 12816, type_: Some(12817), name: Some(12819), comma: Some(12820) })"];
    12816 -> 12817;
    12817 [label="Type(Type { syntax: 12817, basename: Some(12818), members: [], arrays: [] })"];
    12817 -> 12818;
    12818[label="CSmPlayer"];
    12816 -> 12819;
    12819[label="_Player"];
    12816 -> 12820;
    12820[label=","];
    12811 -> 12821;
    12821 [label="FormalArg(FormalArg { syntax: 12821, type_: Some(12822), name: Some(12824), comma: None })"];
    12821 -> 12822;
    12822 [label="Type(Type { syntax: 12822, basename: Some(12823), members: [], arrays: [] })"];
    12822 -> 12823;
    12823[label="Integer"];
    12821 -> 12824;
    12824[label="_Time"];
    12811 -> 12825;
    12825[label=")"];
    12811 -> 12826;
    12826 [label="Block(Block { syntax: 12826, lbrace: Some(12827), statements: [12828, 12870, 12890, 12911], rbrace: Some(12985) })"];
    12826 -> 12827;
    12827[label="{"];
    12826 -> 12828;
    12828 [label="Statement(Statement { syntax: 12828, statement: Some(12829), semicolon: None })"];
    12828 -> 12829;
    12829 [label="If(If { syntax: 12829, if_: Some(12830), lparen: Some(12831), condition: Some(12832), rparen: Some(12865), body: Some(12866), else_: None })"];
    12829 -> 12830;
    12830[label="if"];
    12829 -> 12831;
    12831[label="("];
    12829 -> 12832;
    12832 [label="Expr"];
    12832 -> 12840;
    12840 [label="BinaryOp(BinaryOp { syntax: 12840, lhs: Some(12835), operator: Some(12841), rhs: Some(12842) })"];
    12840 -> 12835;
    12835 [label="BinaryOp(BinaryOp { syntax: 12835, lhs: Some(12833), operator: Some(12836), rhs: Some(12837) })"];
    12835 -> 12833;
    12833 [label="Identifier"];
    12833 -> 12834;
    12834[label="_Player"];
    12835 -> 12836;
    12836[label="=="];
    12835 -> 12837;
    12837 [label="Expr"];
    12837 -> 12838;
    12838 [label="Literal"];
    12838 -> 12839;
    12839[label="Null"];
    12840 -> 12841;
    12841[label="||"];
    12840 -> 12842;
    12842 [label="Expr"];
    12842 -> 12850;
    12850 [label="BinaryOp(BinaryOp { syntax: 12850, lhs: Some(12845), operator: Some(12851), rhs: Some(12852) })"];
    12850 -> 12845;
    12845 [label="BinaryOp(BinaryOp { syntax: 12845, lhs: Some(12843), operator: Some(12846), rhs: Some(12847) })"];
    12845 -> 12843;
    12843 [label="Identifier"];
    12843 -> 12844;
    12844[label="_Player"];
    12845 -> 12846;
    12846[label="."];
    12845 -> 12847;
    12847 [label="Expr"];
    12847 -> 12848;
    12848 [label="Identifier"];
    12848 -> 12849;
    12849[label="IsBot"];
    12850 -> 12851;
    12851[label="||"];
    12850 -> 12852;
    12852 [label="Expr"];
    12852 -> 12860;
    12860 [label="BinaryOp(BinaryOp { syntax: 12860, lhs: Some(12855), operator: Some(12861), rhs: Some(12862) })"];
    12860 -> 12855;
    12855 [label="BinaryOp(BinaryOp { syntax: 12855, lhs: Some(12853), operator: Some(12856), rhs: Some(12857) })"];
    12855 -> 12853;
    12853 [label="Identifier"];
    12853 -> 12854;
    12854[label="_Player"];
    12855 -> 12856;
    12856[label="."];
    12855 -> 12857;
    12857 [label="Expr"];
    12857 -> 12858;
    12858 [label="Identifier"];
    12858 -> 12859;
    12859[label="User"];
    12860 -> 12861;
    12861[label="=="];
    12860 -> 12862;
    12862 [label="Expr"];
    12862 -> 12863;
    12863 [label="Literal"];
    12863 -> 12864;
    12864[label="Null"];
    12829 -> 12865;
    12865[label=")"];
    12829 -> 12866;
    12866 [label="Statement(Statement { syntax: 12866, statement: Some(12867), semicolon: Some(12869) })"];
    12866 -> 12867;
    12867 [label="Return(Return { syntax: 12867, return_: Some(12868), value: None })"];
    12867 -> 12868;
    12868[label="return"];
    12866 -> 12869;
    12869[label=";"];
    12826 -> 12870;
    12870 [label="Statement(Statement { syntax: 12870, statement: Some(12871), semicolon: None })"];
    12870 -> 12871;
    12871 [label="VarDec(VarDec { syntax: 12871, declare: Some(12872), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12873), as_: None, alias: None, for_: None, target: None, assignment: Some(12875), value: Some(12876) })"];
    12871 -> 12872;
    12872[label="declare"];
    12871 -> 12873;
    12873 [label="Type(Type { syntax: 12873, basename: Some(12874), members: [], arrays: [] })"];
    12873 -> 12874;
    12874[label="Login"];
    12871 -> 12875;
    12875[label="="];
    12871 -> 12876;
    12876 [label="Expr"];
    12876 -> 12879;
    12879 [label="BinaryOp(BinaryOp { syntax: 12879, lhs: Some(12877), operator: Some(12880), rhs: Some(12881) })"];
    12879 -> 12877;
    12877 [label="Identifier"];
    12877 -> 12878;
    12878[label="_Player"];
    12879 -> 12880;
    12880[label="."];
    12879 -> 12881;
    12881 [label="Expr"];
    12881 -> 12884;
    12884 [label="BinaryOp(BinaryOp { syntax: 12884, lhs: Some(12882), operator: Some(12885), rhs: Some(12886) })"];
    12884 -> 12882;
    12882 [label="Identifier"];
    12882 -> 12883;
    12883[label="User"];
    12884 -> 12885;
    12885[label="."];
    12884 -> 12886;
    12886 [label="Expr"];
    12886 -> 12887;
    12887 [label="Identifier"];
    12887 -> 12888;
    12888[label="Login"];
    12871 -> 12889;
    12889[label=";"];
    12826 -> 12890;
    12890 [label="Statement(Statement { syntax: 12890, statement: Some(12891), semicolon: None })"];
    12890 -> 12891;
    12891 [label="VarDec(VarDec { syntax: 12891, declare: Some(12892), netread: None, netwrite: Some(12893), persistent: None, metadata: None, type_: Some(12894), name: Some(12899), as_: None, alias: None, for_: Some(12900), target: Some(12901), assignment: None, value: None })"];
    12891 -> 12892;
    12892[label="declare"];
    12891 -> 12893;
    12893[label="netwrite"];
    12891 -> 12894;
    12894 [label="Type(Type { syntax: 12894, basename: Some(12895), members: [], arrays: [(12896, Some(12897), 12898)] })"];
    12894 -> 12895;
    12895[label="Integer"];
    12894 -> 12896;
    12896[label="["];
    12894 -> 12897;
    12897[label="Text"];
    12894 -> 12898;
    12898[label="]"];
    12891 -> 12899;
    12899[label="Net_HungerGames_RespawnStart"];
    12891 -> 12900;
    12900[label="for"];
    12891 -> 12901;
    12901 [label="Expr"];
    12901 -> 12904;
    12904 [label="ArrayAccess(ArrayAccess { syntax: 12904, lhs: Some(12902), lsquare: Some(12905), index: Some(12906), rsquare: Some(12909) })"];
    12904 -> 12902;
    12902 [label="Identifier"];
    12902 -> 12903;
    12903[label="Teams"];
    12904 -> 12905;
    12905[label="["];
    12904 -> 12906;
    12906 [label="Expr"];
    12906 -> 12907;
    12907 [label="Literal"];
    12907 -> 12908;
    12908[label="0"];
    12904 -> 12909;
    12909[label="]"];
    12891 -> 12910;
    12910[label=";"];
    12826 -> 12911;
    12911 [label="Statement(Statement { syntax: 12911, statement: Some(12912), semicolon: None })"];
    12911 -> 12912;
    12912 [label="If(If { syntax: 12912, if_: Some(12913), lparen: Some(12914), condition: Some(12915), rparen: Some(12923), body: Some(12924), else_: Some(12940) })"];
    12912 -> 12913;
    12913[label="if"];
    12912 -> 12914;
    12914[label="("];
    12912 -> 12915;
    12915 [label="Expr"];
    12915 -> 12918;
    12918 [label="BinaryOp(BinaryOp { syntax: 12918, lhs: Some(12916), operator: Some(12919), rhs: Some(12920) })"];
    12918 -> 12916;
    12916 [label="Identifier"];
    12916 -> 12917;
    12917[label="_Time"];
    12918 -> 12919;
    12919[label=">"];
    12918 -> 12920;
    12920 [label="Expr"];
    12920 -> 12921;
    12921 [label="Literal"];
    12921 -> 12922;
    12922[label="0"];
    12912 -> 12923;
    12923[label=")"];
    12912 -> 12924;
    12924 [label="Statement(Statement { syntax: 12924, statement: Some(12934), semicolon: Some(12939) })"];
    12924 -> 12925;
    12925 [label="Expr"];
    12925 -> 12928;
    12928 [label="ArrayAccess(ArrayAccess { syntax: 12928, lhs: Some(12926), lsquare: Some(12929), index: Some(12930), rsquare: Some(12933) })"];
    12928 -> 12926;
    12926 [label="Identifier"];
    12926 -> 12927;
    12927[label="Net_HungerGames_RespawnStart"];
    12928 -> 12929;
    12929[label="["];
    12928 -> 12930;
    12930 [label="Expr"];
    12930 -> 12931;
    12931 [label="Identifier"];
    12931 -> 12932;
    12932[label="Login"];
    12928 -> 12933;
    12933[label="]"];
    12924 -> 12934;
    12934 [label="Assignment(Assignment { syntax: 12934, lvalue: Some(12925), operator: Some(12935), rvalue: Some(12936) })"];
    12934 -> 12935;
    12935[label="="];
    12934 -> 12936;
    12936 [label="Expr"];
    12936 -> 12937;
    12937 [label="Identifier"];
    12937 -> 12938;
    12938[label="_Time"];
    12924 -> 12939;
    12939[label=";"];
    12912 -> 12940;
    12940 [label="Else(Else { syntax: 12940, else_: Some(12941), if_: Some(12942), body: None })"];
    12940 -> 12941;
    12941[label="else"];
    12940 -> 12942;
    12942 [label="If(If { syntax: 12942, if_: Some(12943), lparen: Some(12944), condition: Some(12945), rparen: Some(12959), body: Some(12960), else_: None })"];
    12942 -> 12943;
    12943[label="if"];
    12942 -> 12944;
    12944[label="("];
    12942 -> 12945;
    12945 [label="Expr"];
    12945 -> 12953;
    12953 [label="FunctionCall(FunctionCall { syntax: 12953, lhs: Some(12948), lparen: Some(12954), args: [(12955, None)], rparen: Some(12958) })"];
    12953 -> 12948;
    12948 [label="BinaryOp(BinaryOp { syntax: 12948, lhs: Some(12946), operator: Some(12949), rhs: Some(12950) })"];
    12948 -> 12946;
    12946 [label="Identifier"];
    12946 -> 12947;
    12947[label="Net_HungerGames_RespawnStart"];
    12948 -> 12949;
    12949[label="."];
    12948 -> 12950;
    12950 [label="Expr"];
    12950 -> 12951;
    12951 [label="Identifier"];
    12951 -> 12952;
    12952[label="existskey"];
    12953 -> 12954;
    12954[label="("];
    12953 -> 12955;
    12955 [label="Expr"];
    12955 -> 12956;
    12956 [label="Identifier"];
    12956 -> 12957;
    12957[label="Login"];
    12953 -> 12958;
    12958[label=")"];
    12942 -> 12959;
    12959[label=")"];
    12942 -> 12960;
    12960 [label="Statement(Statement { syntax: 12960, statement: Some(12961), semicolon: None })"];
    12960 -> 12961;
    12961 [label="Block(Block { syntax: 12961, lbrace: Some(12962), statements: [12963], rbrace: Some(12984) })"];
    12961 -> 12962;
    12962[label="{"];
    12961 -> 12963;
    12963 [label="Statement(Statement { syntax: 12963, statement: Some(12964), semicolon: None })"];
    12963 -> 12964;
    12964 [label="VarDec(VarDec { syntax: 12964, declare: Some(12965), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(12966), as_: None, alias: None, for_: None, target: None, assignment: Some(12968), value: Some(12969) })"];
    12964 -> 12965;
    12965[label="declare"];
    12964 -> 12966;
    12966 [label="Type(Type { syntax: 12966, basename: Some(12967), members: [], arrays: [] })"];
    12966 -> 12967;
    12967[label="Removed"];
    12964 -> 12968;
    12968[label="="];
    12964 -> 12969;
    12969 [label="Expr"];
    12969 -> 12977;
    12977 [label="FunctionCall(FunctionCall { syntax: 12977, lhs: Some(12972), lparen: Some(12978), args: [(12979, None)], rparen: Some(12982) })"];
    12977 -> 12972;
    12972 [label="BinaryOp(BinaryOp { syntax: 12972, lhs: Some(12970), operator: Some(12973), rhs: Some(12974) })"];
    12972 -> 12970;
    12970 [label="Identifier"];
    12970 -> 12971;
    12971[label="Net_HungerGames_RespawnStart"];
    12972 -> 12973;
    12973[label="."];
    12972 -> 12974;
    12974 [label="Expr"];
    12974 -> 12975;
    12975 [label="Identifier"];
    12975 -> 12976;
    12976[label="removekey"];
    12977 -> 12978;
    12978[label="("];
    12977 -> 12979;
    12979 [label="Expr"];
    12979 -> 12980;
    12980 [label="Identifier"];
    12980 -> 12981;
    12981[label="Login"];
    12977 -> 12982;
    12982[label=")"];
    12964 -> 12983;
    12983[label=";"];
    12961 -> 12984;
    12984[label="}"];
    12826 -> 12985;
    12985[label="}"];
    0 -> 12986;
    12986 [label="FuncDec(FuncDec { syntax: 12986, type_: Some(12987), name: Some(12989), lparen: Some(12990), args: [], rparen: Some(12991), body: Some(12992) })"];
    12986 -> 12987;
    12987 [label="Type(Type { syntax: 12987, basename: Some(12988), members: [], arrays: [] })"];
    12987 -> 12988;
    12988[label="Void"];
    12986 -> 12989;
    12989[label="UIResetAll"];
    12986 -> 12990;
    12990[label="("];
    12986 -> 12991;
    12991[label=")"];
    12986 -> 12992;
    12992 [label="Block(Block { syntax: 12992, lbrace: Some(12993), statements: [12994, 13014, 13035, 13048], rbrace: Some(13061) })"];
    12992 -> 12993;
    12993[label="{"];
    12992 -> 12994;
    12994 [label="Statement(Statement { syntax: 12994, statement: Some(12995), semicolon: None })"];
    12994 -> 12995;
    12995 [label="VarDec(VarDec { syntax: 12995, declare: Some(12996), netread: None, netwrite: Some(12997), persistent: None, metadata: None, type_: Some(12998), name: Some(13002), as_: None, alias: None, for_: Some(13003), target: Some(13004), assignment: None, value: None })"];
    12995 -> 12996;
    12996[label="declare"];
    12995 -> 12997;
    12997[label="netwrite"];
    12995 -> 12998;
    12998 [label="Type(Type { syntax: 12998, basename: Some(12999), members: [], arrays: [(13000, None, 13001)] })"];
    12998 -> 12999;
    12999[label="Text"];
    12998 -> 13000;
    13000[label="["];
    12998 -> 13001;
    13001[label="]"];
    12995 -> 13002;
    13002[label="Net_HungerGames_TouchedGoal"];
    12995 -> 13003;
    13003[label="for"];
    12995 -> 13004;
    13004 [label="Expr"];
    13004 -> 13007;
    13007 [label="ArrayAccess(ArrayAccess { syntax: 13007, lhs: Some(13005), lsquare: Some(13008), index: Some(13009), rsquare: Some(13012) })"];
    13007 -> 13005;
    13005 [label="Identifier"];
    13005 -> 13006;
    13006[label="Teams"];
    13007 -> 13008;
    13008[label="["];
    13007 -> 13009;
    13009 [label="Expr"];
    13009 -> 13010;
    13010 [label="Literal"];
    13010 -> 13011;
    13011[label="0"];
    13007 -> 13012;
    13012[label="]"];
    12995 -> 13013;
    13013[label=";"];
    12992 -> 13014;
    13014 [label="Statement(Statement { syntax: 13014, statement: Some(13015), semicolon: None })"];
    13014 -> 13015;
    13015 [label="VarDec(VarDec { syntax: 13015, declare: Some(13016), netread: None, netwrite: Some(13017), persistent: None, metadata: None, type_: Some(13018), name: Some(13023), as_: None, alias: None, for_: Some(13024), target: Some(13025), assignment: None, value: None })"];
    13015 -> 13016;
    13016[label="declare"];
    13015 -> 13017;
    13017[label="netwrite"];
    13015 -> 13018;
    13018 [label="Type(Type { syntax: 13018, basename: Some(13019), members: [], arrays: [(13020, Some(13021), 13022)] })"];
    13018 -> 13019;
    13019[label="Integer"];
    13018 -> 13020;
    13020[label="["];
    13018 -> 13021;
    13021[label="Text"];
    13018 -> 13022;
    13022[label="]"];
    13015 -> 13023;
    13023[label="Net_HungerGames_RespawnStart"];
    13015 -> 13024;
    13024[label="for"];
    13015 -> 13025;
    13025 [label="Expr"];
    13025 -> 13028;
    13028 [label="ArrayAccess(ArrayAccess { syntax: 13028, lhs: Some(13026), lsquare: Some(13029), index: Some(13030), rsquare: Some(13033) })"];
    13028 -> 13026;
    13026 [label="Identifier"];
    13026 -> 13027;
    13027[label="Teams"];
    13028 -> 13029;
    13029[label="["];
    13028 -> 13030;
    13030 [label="Expr"];
    13030 -> 13031;
    13031 [label="Literal"];
    13031 -> 13032;
    13032[label="0"];
    13028 -> 13033;
    13033[label="]"];
    13015 -> 13034;
    13034[label=";"];
    12992 -> 13035;
    13035 [label="Statement(Statement { syntax: 13035, statement: Some(13036), semicolon: Some(13047) })"];
    13035 -> 13036;
    13036 [label="Expr"];
    13036 -> 13044;
    13044 [label="FunctionCall(FunctionCall { syntax: 13044, lhs: Some(13039), lparen: Some(13045), args: [], rparen: Some(13046) })"];
    13044 -> 13039;
    13039 [label="BinaryOp(BinaryOp { syntax: 13039, lhs: Some(13037), operator: Some(13040), rhs: Some(13041) })"];
    13039 -> 13037;
    13037 [label="Identifier"];
    13037 -> 13038;
    13038[label="Net_HungerGames_TouchedGoal"];
    13039 -> 13040;
    13040[label="."];
    13039 -> 13041;
    13041 [label="Expr"];
    13041 -> 13042;
    13042 [label="Identifier"];
    13042 -> 13043;
    13043[label="clear"];
    13044 -> 13045;
    13045[label="("];
    13044 -> 13046;
    13046[label=")"];
    13035 -> 13047;
    13047[label=";"];
    12992 -> 13048;
    13048 [label="Statement(Statement { syntax: 13048, statement: Some(13049), semicolon: Some(13060) })"];
    13048 -> 13049;
    13049 [label="Expr"];
    13049 -> 13057;
    13057 [label="FunctionCall(FunctionCall { syntax: 13057, lhs: Some(13052), lparen: Some(13058), args: [], rparen: Some(13059) })"];
    13057 -> 13052;
    13052 [label="BinaryOp(BinaryOp { syntax: 13052, lhs: Some(13050), operator: Some(13053), rhs: Some(13054) })"];
    13052 -> 13050;
    13050 [label="Identifier"];
    13050 -> 13051;
    13051[label="Net_HungerGames_RespawnStart"];
    13052 -> 13053;
    13053[label="."];
    13052 -> 13054;
    13054 [label="Expr"];
    13054 -> 13055;
    13055 [label="Identifier"];
    13055 -> 13056;
    13056[label="clear"];
    13057 -> 13058;
    13058[label="("];
    13057 -> 13059;
    13059[label=")"];
    13048 -> 13060;
    13060[label=";"];
    12992 -> 13061;
    13061[label="}"];
    0 -> 13062;
    13062 [label="FuncDec(FuncDec { syntax: 13062, type_: Some(13063), name: Some(13065), lparen: Some(13066), args: [13067, 13072], rparen: Some(13076), body: Some(13077) })"];
    13062 -> 13063;
    13063 [label="Type(Type { syntax: 13063, basename: Some(13064), members: [], arrays: [] })"];
    13063 -> 13064;
    13064[label="Void"];
    13062 -> 13065;
    13065[label="UISetPlayerSurvivedPosition"];
    13062 -> 13066;
    13066[label="("];
    13062 -> 13067;
    13067 [label="FormalArg(FormalArg { syntax: 13067, type_: Some(13068), name: Some(13070), comma: Some(13071) })"];
    13067 -> 13068;
    13068 [label="Type(Type { syntax: 13068, basename: Some(13069), members: [], arrays: [] })"];
    13068 -> 13069;
    13069[label="CSmPlayer"];
    13067 -> 13070;
    13070[label="_Player"];
    13067 -> 13071;
    13071[label=","];
    13062 -> 13072;
    13072 [label="FormalArg(FormalArg { syntax: 13072, type_: Some(13073), name: Some(13075), comma: None })"];
    13072 -> 13073;
    13073 [label="Type(Type { syntax: 13073, basename: Some(13074), members: [], arrays: [] })"];
    13073 -> 13074;
    13074[label="Integer"];
    13072 -> 13075;
    13075[label="_SurvivedPosition"];
    13062 -> 13076;
    13076[label=")"];
    13062 -> 13077;
    13077 [label="Block(Block { syntax: 13077, lbrace: Some(13078), statements: [13079, 13096, 13117, 13134, 13146], rbrace: Some(13156) })"];
    13077 -> 13078;
    13078[label="{"];
    13077 -> 13079;
    13079 [label="Statement(Statement { syntax: 13079, statement: Some(13080), semicolon: None })"];
    13079 -> 13080;
    13080 [label="If(If { syntax: 13080, if_: Some(13081), lparen: Some(13082), condition: Some(13083), rparen: Some(13091), body: Some(13092), else_: None })"];
    13080 -> 13081;
    13081[label="if"];
    13080 -> 13082;
    13082[label="("];
    13080 -> 13083;
    13083 [label="Expr"];
    13083 -> 13086;
    13086 [label="BinaryOp(BinaryOp { syntax: 13086, lhs: Some(13084), operator: Some(13087), rhs: Some(13088) })"];
    13086 -> 13084;
    13084 [label="Identifier"];
    13084 -> 13085;
    13085[label="_Player"];
    13086 -> 13087;
    13087[label="=="];
    13086 -> 13088;
    13088 [label="Expr"];
    13088 -> 13089;
    13089 [label="Literal"];
    13089 -> 13090;
    13090[label="Null"];
    13080 -> 13091;
    13091[label=")"];
    13080 -> 13092;
    13092 [label="Statement(Statement { syntax: 13092, statement: Some(13093), semicolon: Some(13095) })"];
    13092 -> 13093;
    13093 [label="Return(Return { syntax: 13093, return_: Some(13094), value: None })"];
    13093 -> 13094;
    13094[label="return"];
    13092 -> 13095;
    13095[label=";"];
    13077 -> 13096;
    13096 [label="Statement(Statement { syntax: 13096, statement: Some(13097), semicolon: None })"];
    13096 -> 13097;
    13097 [label="VarDec(VarDec { syntax: 13097, declare: Some(13098), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(13099), as_: None, alias: None, for_: None, target: None, assignment: Some(13101), value: Some(13102) })"];
    13097 -> 13098;
    13098[label="declare"];
    13097 -> 13099;
    13099 [label="Type(Type { syntax: 13099, basename: Some(13100), members: [], arrays: [] })"];
    13099 -> 13100;
    13100[label="UI"];
    13097 -> 13101;
    13101[label="<=>"];
    13097 -> 13102;
    13102 [label="Expr"];
    13102 -> 13110;
    13110 [label="FunctionCall(FunctionCall { syntax: 13110, lhs: Some(13105), lparen: Some(13111), args: [(13112, None)], rparen: Some(13115) })"];
    13110 -> 13105;
    13105 [label="BinaryOp(BinaryOp { syntax: 13105, lhs: Some(13103), operator: Some(13106), rhs: Some(13107) })"];
    13105 -> 13103;
    13103 [label="Identifier"];
    13103 -> 13104;
    13104[label="UIManager"];
    13105 -> 13106;
    13106[label="."];
    13105 -> 13107;
    13107 [label="Expr"];
    13107 -> 13108;
    13108 [label="Identifier"];
    13108 -> 13109;
    13109[label="GetUI"];
    13110 -> 13111;
    13111[label="("];
    13110 -> 13112;
    13112 [label="Expr"];
    13112 -> 13113;
    13113 [label="Identifier"];
    13113 -> 13114;
    13114[label="_Player"];
    13110 -> 13115;
    13115[label=")"];
    13097 -> 13116;
    13116[label=";"];
    13077 -> 13117;
    13117 [label="Statement(Statement { syntax: 13117, statement: Some(13118), semicolon: None })"];
    13117 -> 13118;
    13118 [label="If(If { syntax: 13118, if_: Some(13119), lparen: Some(13120), condition: Some(13121), rparen: Some(13129), body: Some(13130), else_: None })"];
    13118 -> 13119;
    13119[label="if"];
    13118 -> 13120;
    13120[label="("];
    13118 -> 13121;
    13121 [label="Expr"];
    13121 -> 13124;
    13124 [label="BinaryOp(BinaryOp { syntax: 13124, lhs: Some(13122), operator: Some(13125), rhs: Some(13126) })"];
    13124 -> 13122;
    13122 [label="Identifier"];
    13122 -> 13123;
    13123[label="UI"];
    13124 -> 13125;
    13125[label="=="];
    13124 -> 13126;
    13126 [label="Expr"];
    13126 -> 13127;
    13127 [label="Literal"];
    13127 -> 13128;
    13128[label="Null"];
    13118 -> 13129;
    13129[label=")"];
    13118 -> 13130;
    13130 [label="Statement(Statement { syntax: 13130, statement: Some(13131), semicolon: Some(13133) })"];
    13130 -> 13131;
    13131 [label="Return(Return { syntax: 13131, return_: Some(13132), value: None })"];
    13131 -> 13132;
    13132[label="return"];
    13130 -> 13133;
    13133[label=";"];
    13077 -> 13134;
    13134 [label="Statement(Statement { syntax: 13134, statement: Some(13135), semicolon: None })"];
    13134 -> 13135;
    13135 [label="VarDec(VarDec { syntax: 13135, declare: Some(13136), netread: None, netwrite: Some(13137), persistent: None, metadata: None, type_: Some(13138), name: Some(13140), as_: None, alias: None, for_: Some(13141), target: Some(13142), assignment: None, value: None })"];
    13135 -> 13136;
    13136[label="declare"];
    13135 -> 13137;
    13137[label="netwrite"];
    13135 -> 13138;
    13138 [label="Type(Type { syntax: 13138, basename: Some(13139), members: [], arrays: [] })"];
    13138 -> 13139;
    13139[label="Integer"];
    13135 -> 13140;
    13140[label="Net_HungerGames_SurvivedPosition"];
    13135 -> 13141;
    13141[label="for"];
    13135 -> 13142;
    13142 [label="Expr"];
    13142 -> 13143;
    13143 [label="Identifier"];
    13143 -> 13144;
    13144[label="UI"];
    13135 -> 13145;
    13145[label=";"];
    13077 -> 13146;
    13146 [label="Statement(Statement { syntax: 13146, statement: Some(13150), semicolon: Some(13155) })"];
    13146 -> 13147;
    13147 [label="Expr"];
    13147 -> 13148;
    13148 [label="Identifier"];
    13148 -> 13149;
    13149[label="Net_HungerGames_SurvivedPosition"];
    13146 -> 13150;
    13150 [label="Assignment(Assignment { syntax: 13150, lvalue: Some(13147), operator: Some(13151), rvalue: Some(13152) })"];
    13150 -> 13151;
    13151[label="="];
    13150 -> 13152;
    13152 [label="Expr"];
    13152 -> 13153;
    13153 [label="Identifier"];
    13153 -> 13154;
    13154[label="_SurvivedPosition"];
    13146 -> 13155;
    13155[label=";"];
    13077 -> 13156;
    13156[label="}"];
    0 -> 13157;
    13157 [label="FuncDec(FuncDec { syntax: 13157, type_: Some(13158), name: Some(13160), lparen: Some(13161), args: [], rparen: Some(13162), body: Some(13163) })"];
    13157 -> 13158;
    13158 [label="Type(Type { syntax: 13158, basename: Some(13159), members: [], arrays: [] })"];
    13158 -> 13159;
    13159[label="Text"];
    13157 -> 13160;
    13160[label="CreateManialinkInterface"];
    13157 -> 13161;
    13161[label="("];
    13157 -> 13162;
    13162[label=")"];
    13157 -> 13163;
    13163 [label="Block(Block { syntax: 13163, lbrace: Some(13164), statements: [13165], rbrace: Some(13172) })"];
    13163 -> 13164;
    13164[label="{"];
    13163 -> 13165;
    13165 [label="Statement(Statement { syntax: 13165, statement: Some(13166), semicolon: Some(13171) })"];
    13165 -> 13166;
    13166 [label="Return(Return { syntax: 13166, return_: Some(13167), value: Some(13168) })"];
    13166 -> 13167;
    13167[label="return"];
    13166 -> 13168;
    13168 [label="Expr"];
    13168 -> 13169;
    13169 [label="Literal"];
    13169 -> 13170;
    13170[label="\"\"\"
<manialink version=\"3\" name=\"HungerGames:Interface\">
<stylesheet>
	<style class=\"font\" halign=\"center\" valign=\"center2\" textsize=\"1\" textemboss=\"1\" textcolor=\"FFF\" textfont=\"Eurostile_Bold\" />
	<style class=\"FontM\" valign=\"center2\" textemboss=\"1\" textcolor=\"FFF\" textfont=\"{{{TL::MLEncode(\"Eurostile\")}}}\" />
</stylesheet>

<frame id=\"Frame_RespawnProgress\" pos=\"0 -54 5\">
	<frame id=\"Frame_RespawnProgAnim\">
		<label class=\"font\" textsize=\"3\" id=\"Label_RespawnProgress\" opacity=\"0\" />
		<quad pos=\"0 8\" size=\"12 12\" halign=\"center\" valign=\"center\" id=\"Quad_RespawnProgIcon\" opacity=\"0\" />
		<gauge pos=\"0 -3\" size=\"52 8\" halign=\"center\" valign=\"center\" drawbg=\"0\" id=\"Gauge_RespawnProgress\" hidden=\"1\" />
	</frame>
</frame>

<frame id=\"Frame_Countdown\">
	<quad size=\"40 40\" halign=\"center\" valign=\"center\" id=\"Quad_DigitPri\" />
	<quad size=\"40 40\" halign=\"center\" valign=\"center\" id=\"Quad_DigitSec\" />
</frame>

<frame id=\"Frame_TouchGoal\" pos=\"0 76\">
	<label pos=\"0 2\" class=\"font\" textsize=\"4\" textprefix=\"$T\" id=\"Label_TouchGoalTitle\" opacity=\"0\" />
	<label pos=\"0 -2\" class=\"font\" textprefix=\"$T\" id=\"Label_TouchGoalDesc\" opacity=\"0\" />
</frame>

<frame id=\"Frame_Eliminated\" pos=\"-60 54\" hidden=\"1\">
	<label pos=\"4 -4\" class=\"FontM\" textsize=\"4\" textprefix=\"$t\" text=\"Eliminated!\" translate=\"1\" />
	<quad pos=\"2 -8\" size=\"116 .5\" valign=\"center\" bgcolor=\"FFF\" opacity=\".5\" />

	<!-- Description -->
	<label pos=\"60 -18\" size=\"116\" class=\"FontM\" halign=\"center\" textsize=\"2\" autonewline=\"1\" id=\"Label_Description\" />

	<!-- Footer -->
	<frame id=\"Frame_BottomButtonsRow\" pos=\"2 -28\">
		<quad size=\"116 .5\" valign=\"center\" bgcolor=\"FFF\" opacity=\".5\" />

		<!-- Resume button -->
		<frame id=\"Frame_SpectateButton\" pos=\"2 -2\">
			<label pos=\"2 -4\" class=\"FontM\" text=\"\" />
			<label pos=\"8 -4\" class=\"FontM\" textsize=\"2\" textprefix=\"$t\" text=\"Spectate\" translate=\"1\" />

			<quad size=\"55.5 8\" bgcolorfocus=\"FFF\" opacity=\".125\" class=\"Click\" id=\"Quad_SpectateButtonCard\" ScriptEvents=\"1\" />
			<quad size=\"55.5 8\" bgcolor=\"FFF\" opacity=\".125\" />
		</frame>

		<!-- Quit button -->
		<frame id=\"Frame_QuitButton\" pos=\"58.5 -2\">
			<label pos=\"2 -4.5\" class=\"FontM\" text=\"\" id=\"Label_QuitButtonIcon\" />
			<label pos=\"8 -4\" class=\"FontM\" textsize=\"2\" textprefix=\"$t\" text=\"Return to lobby\" translate=\"1\" id=\"Label_QuitButtonText\" />

			<quad size=\"55.5 8\" bgcolorfocus=\"FFF\" opacity=\".125\" class=\"Click\" id=\"Quad_QuitButtonCard\" ScriptEvents=\"1\" />
			<quad size=\"55.5 8\" bgcolor=\"FFF\" opacity=\".125\" id=\"Quad_QuitButtonBg\" />
		</frame>
	</frame>

	<quad size=\"120 40\" bgcolor=\"000\" opacity=\".75\" />
	<quad size=\"120 40\" style=\"Bgs1\" substyle=\"BgDialogBlur\" opacity=\"0\" />
	<quad pos=\"-2.5 2.5\" size=\"250 90\" scale=\".5\" style=\"Bgs1InRace\" substyle=\"BgButtonShadow\" />
</frame>

<script><!--
/**
 *	HungerGames: Interface
 */

#Include \"TextLib\" as TL
#Include \"MathLib\" as ML

#Const C_MaxCountdownTicks	{{{ML::Max(C_StartCountdownDuration / 1000, 0)}}}
#Const C_PoleAlertDistance	60.
#Const C_RespawnBarImgBase	\"file://Media/Manialinks/ShootMania/Common/\"
#Const C_DisplayDuration	2000

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Load interface elements
declare Quad_DigitPri <=> (Page.GetFirstChild(\"Quad_DigitPri\") as CMlQuad);
declare Quad_DigitSec <=> (Page.GetFirstChild(\"Quad_DigitSec\") as CMlQuad);
declare Label_TouchGoalTitle <=> (Page.GetFirstChild(\"Label_TouchGoalTitle\") as CMlLabel);
declare Label_TouchGoalDesc <=> (Page.GetFirstChild(\"Label_TouchGoalDesc\") as CMlLabel);

/// Respawn progress bar
declare Frame_RespawnProgress <=> (Page.GetFirstChild(\"Frame_RespawnProgress\") as CMlFrame);
declare Frame_RespawnProgAnim <=> (Page.GetFirstChild(\"Frame_RespawnProgAnim\") as CMlLabel);
declare Label_RespawnProgress <=> (Page.GetFirstChild(\"Label_RespawnProgress\") as CMlLabel);
declare Quad_RespawnProgIcon <=> (Page.GetFirstChild(\"Quad_RespawnProgIcon\") as CMlQuad);
declare Gauge_RespawnProgress <=> (Page.GetFirstChild(\"Gauge_RespawnProgress\") as CMlGauge);

// Eliminated screen
declare Frame_Eliminated <=> (Page.GetFirstChild(\"Frame_Eliminated\") as CMlFrame);
declare Label_Description <=> (Page.GetFirstChild(\"Label_Description\") as CMlLabel);

Label_TouchGoalTitle.SetText(ReplaceChars(Translate(\"Touch the Goal!\")));
Label_TouchGoalDesc.SetText(ReplaceChars(Translate(\"You must touch the Goal to be able to pick up items!\")));
Label_Description.SetText(Translate(\"You've been eliminated - the game is over for you!\nYou may want to spectate rest of the game, if not, use the button below to return to the lobby and find yourself a new match!\"));

// ---------------------------------- //
// Netcode
declare netread Integer Net_HungerGames_StartTime for Teams[0];
declare netread Integer Net_HungerGames_PlayersAlive for Teams[0];
declare netread Text[] Net_HungerGames_TouchedGoal for Teams[0];
declare netread Integer[Text] Net_HungerGames_RespawnStart for Teams[0];
declare netread Integer Net_HungerGames_SurvivedPosition for UI;
declare netread Text Net_LibPauseMenu_LobbyJoinLink for Teams[0];

// ---------------------------------- //
// Variables
declare CountdownSound = Audio.CreateSound(\"{{{C_ImgBase}}}Sounds/CountdownHungerGames.ogg\");
declare CountdownTick = -1;
declare CenterGoalPosition = Vec3;
declare TouchGoalAlertVisible = False;
declare RespawnStartTime = -1;
declare RespawnProgressVisible = False;
declare WaitingDuration = {{{C_RespawnWaitingDuration}}};

// Update
declare PrevCountdownTick = CountdownTick;
declare PrevNbPlayersAlive = -1;
declare PrevTouchGoalAlertVisible = False;
declare PrevRespawnProgressVisible = RespawnProgressVisible;
declare PrevSurvivedPosition = 0;

foreach (MapLandmark in MapLandmarks) {
	if (MapLandmark.Gauge != Null && MapLandmark.Tag == \"Goal\") CenterGoalPosition = MapLandmark.Position;
}
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Manage events
foreach (Event in PendingEvents) {
	// ---------------------------------- //
	// On mouse click
	if (Event.Type == CMlEvent::Type::MouseClick) {
		// Close the window
		if (Event.ControlId == \"Quad_SpectateButtonCard\") {
			Frame_Eliminated.Hide();
		}

		// Return to the lobby
		else if (Event.ControlId == \"Quad_QuitButtonCard\") {
			OpenLink(Net_LibPauseMenu_LobbyJoinLink, CMlScript::LinkType::ManialinkBrowser);
		}
	}
	// ---------------------------------- //
	// On mouse over
	else if (Event.Type == CMlEvent::Type::MouseOver) {
		if (Event.Control.HasClass(\"Click\"))
			Audio.PlaySoundEvent(CAudioManager::ELibSound::Focus, 1, 1.);
	}
}

// ---------------------------------- //
// Show the eliminated window
if (PrevSurvivedPosition != Net_HungerGames_SurvivedPosition) {
	PrevSurvivedPosition = Net_HungerGames_SurvivedPosition;

	declare NbPlayersAlive = 0;
	foreach (Player in Players) {
		if (Player.IsBot || Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) continue;
		NbPlayersAlive += 1;
	}

	if (PrevSurvivedPosition > 0 && NbPlayersAlive > 0) Frame_Eliminated.Show();
}

// ---------------------------------- //
// Set \"Touch the Goal\" message visibility
TouchGoalAlertVisible = GUIPlayer != Null && GameTime >= GUIPlayer.StartTime && GUIPlayer.Armor > 0 && !Net_HungerGames_TouchedGoal.exists(GUIPlayer.Login);

// ---------------------------------- //
// Update alert visibility
if (PrevTouchGoalAlertVisible != TouchGoalAlertVisible) {
	PrevTouchGoalAlertVisible = TouchGoalAlertVisible;
	
	// ---------------------------------- //
	// Show alert
	if (TouchGoalAlertVisible) {
		Label_TouchGoalTitle.RelativePosition_V3.Y = 4.;
		Label_TouchGoalDesc.RelativePosition_V3.Y = 0.;
		Label_TouchGoalTitle.Opacity = 0.;
		Label_TouchGoalDesc.Opacity = 0.;
		AnimMgr.Add(Label_TouchGoalTitle, \"<label pos='0 2' opacity='1' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(Label_TouchGoalDesc, \"<label pos='0 -2' opacity='1' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
	}
	// ---------------------------------- //
	// Hide alert
	else {
		Label_TouchGoalTitle.RelativePosition_V3.Y = 2.;
		Label_TouchGoalDesc.RelativePosition_V3.Y = -2.;
		Label_TouchGoalTitle.Opacity = 1.;
		Label_TouchGoalDesc.Opacity = 1.;
		AnimMgr.Add(Label_TouchGoalTitle, \"<label pos='0 0' opacity='0' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(Label_TouchGoalDesc, \"<label pos='0 -4' opacity='0' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
	}
}

// ---------------------------------- //
// Warning about touching the Goal
if (TouchGoalAlertVisible && CenterGoalPosition != <0., 0., 0.>) {
	declare Distance = ML::Distance(CenterGoalPosition, GUIPlayer.Position);
	if (Distance > C_PoleAlertDistance) {
		declare Color = <.5 + .5 * Pulse(Now, 3.), 0., 0.>;
		Label_TouchGoalTitle.TextColor = Color;
		Label_TouchGoalDesc.TextColor = Color;
	} else {
		Label_TouchGoalTitle.TextColor = <1., 1., 1.>;
		Label_TouchGoalDesc.TextColor = <1., 1., 1.>;
	}
}

// ---------------------------------- //
// Get current countdown tick
CountdownTick = (Net_HungerGames_StartTime - GameTime + 1000) / 1000;

// ---------------------------------- //
// Cannon sound upon elimination
if (PrevNbPlayersAlive != Net_HungerGames_PlayersAlive) {
	if (PrevNbPlayersAlive > Net_HungerGames_PlayersAlive && Net_HungerGames_PlayersAlive >= 2 && GameTime > Net_HungerGames_StartTime) {
		Audio.PlaySoundEvent(\"{{{C_ImgBase}}}Sounds/PlayerEliminated.ogg\", 10.);
	}
	PrevNbPlayersAlive = Net_HungerGames_PlayersAlive;
}

// ---------------------------------- //
// Tick update
if (PrevCountdownTick != CountdownTick) {
	PrevCountdownTick = CountdownTick;
	
	// ---------------------------------- //
	// Animate the countdown number on tick change
	if (CountdownTick >= 0 && CountdownTick <= C_MaxCountdownTicks) {
		Quad_DigitPri.ImageUrl = \"{{{C_ImgBase}}}Countdown/main_\"^CountdownTick^\".png\";
		Quad_DigitSec.ImageUrl = \"{{{C_ImgBase}}}Countdown/sec_\"^CountdownTick^\".png\";
		
		Quad_DigitPri.RelativeScale = 2.;
		Quad_DigitSec.RelativeScale = 1.;
		
		Quad_DigitPri.Opacity = 1.;
		Quad_DigitSec.Opacity = 1.;
		
		AnimMgr.Add(Quad_DigitPri, \"<quad scale='1' />\", 1000, CAnimManager::EAnimManagerEasing::CircOut);
		AnimMgr.Add(Quad_DigitSec, \"<quad scale='1.5' />\", 1000, CAnimManager::EAnimManagerEasing::Linear);
		
		AnimMgr.AddChain(Quad_DigitPri, \"<quad opacity='0' />\", 250, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.AddChain(Quad_DigitSec, \"<quad opacity='0' />\", 250, CAnimManager::EAnimManagerEasing::Linear);
		
		// ---------------------------------- //
		// Manage countdown sound
		if (!CountdownSound.IsPlaying && CountdownTick > 0) CountdownSound.Play();
		declare TargetPlayCursor = ML::ToReal(10 - CountdownTick);
		if (ML::Abs(CountdownSound.PlayCursor - TargetPlayCursor) > .01) CountdownSound.PlayCursor = TargetPlayCursor;
	}
	
	// ---------------------------------- //
	// Match start sound
	if (CountdownTick == 0) PlayUiSound(CMlScriptIngame::EUISound::StartMatch, 1, 1.);
	
	// ---------------------------------- //
	// Stop countdown sound
	if (CountdownSound.IsPlaying && (CountdownTick <= 0 || CountdownTick > 10)) CountdownSound.Stop();
}

// ---------------------------------- //
// Change respawn progress bar visibility
if (GUIPlayer != Null && Net_HungerGames_RespawnStart.existskey(GUIPlayer.User.Login)) {
	RespawnStartTime = Net_HungerGames_RespawnStart[GUIPlayer.User.Login];
}
else if (RespawnStartTime > 0) RespawnStartTime = -1;

RespawnProgressVisible = GUIPlayer != Null && RespawnStartTime > 0 && GameTime - C_DisplayDuration <= RespawnStartTime + WaitingDuration;

if (PrevRespawnProgressVisible != RespawnProgressVisible) {
	PrevRespawnProgressVisible = RespawnProgressVisible;
	Gauge_RespawnProgress.Visible = RespawnProgressVisible;
	
	Frame_RespawnProgAnim.RelativePosition_V3.Y = 0.;
	Label_RespawnProgress.Opacity = 1.;
	declare PositionY = -2.;
	declare Opacity = 0.;
	
	if (RespawnProgressVisible) {
		Frame_RespawnProgAnim.RelativePosition_V3.Y = -PositionY;
		Label_RespawnProgress.Opacity = 0.;
		PositionY = 0.;
		Opacity = 1.;
	}
	
	AnimMgr.Add(Frame_RespawnProgAnim, \"<frame pos='0 \"^PositionY^\"' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(Label_RespawnProgress, \"<label opacity='\"^Opacity^\"' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(Quad_RespawnProgIcon, \"<quad opacity='\"^Opacity^\"' />\", 125, CAnimManager::EAnimManagerEasing::Linear);
	
	// ---------------------------------- //
	// Play sound
	declare Sound = CAudioManager::ELibSound::ShowMenu;
	if (!RespawnProgressVisible) Sound = CAudioManager::ELibSound::HideMenu;
	Audio.PlaySoundEvent(Sound, 0, 0.);
}

// ---------------------------------- //
// Configure respawn progress bar
if (RespawnProgressVisible) {
	declare TimeUntilRespawn = RespawnStartTime + WaitingDuration - GameTime;
	
	// ---------------------------------- //
	// Set respawn gauge
	Gauge_RespawnProgress.Color = GUIPlayer.User.Color;
	SetGaugeRatio(Gauge_RespawnProgress, 1 - ML::ToReal(TimeUntilRespawn) / WaitingDuration);
	
	// ---------------------------------- //
	// Set respawn icon
	declare IconURL = C_RespawnBarImgBase^\"c_goal_shield.dds\";
	if (TimeUntilRespawn <= 0) IconURL = C_RespawnBarImgBase^\"c_goal_captured.dds\";
	Quad_RespawnProgIcon.ImageUrl = IconURL;
	
	// ---------------------------------- //
	// Ser respawn message text
	declare Message = \"\";
	if (TimeUntilRespawn <= 0) Message = Translate(\"Respawned!\");
	else Message = Translate([\"%1 (%2s)\", \"Respawning...\", TL::ToText(ML::CeilingInteger(TimeUntilRespawn / 1000.))]);
	Label_RespawnProgress.Value = Message;
}
***

{{{ManialinkTools::Functions([\"Pulse\", \"SetGaugeRatio\", \"ReplaceChars\"])}}}
{{{Translations::InjectInManialink([\"Touch the Goal!\", \"You must touch the Goal to be able to pick up items!\", \"Respawning...\", \"Respawned!\", \"Return to lobby\"])}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>\"\"\""];
    13165 -> 13171;
    13171[label=";"];
    13163 -> 13172;
    13172[label="}"];
    0 -> 13173;
    13173 [label="FuncDec(FuncDec { syntax: 13173, type_: Some(13174), name: Some(13176), lparen: Some(13177), args: [], rparen: Some(13178), body: Some(13179) })"];
    13173 -> 13174;
    13174 [label="Type(Type { syntax: 13174, basename: Some(13175), members: [], arrays: [] })"];
    13174 -> 13175;
    13175[label="Text"];
    13173 -> 13176;
    13176[label="CreateManialinkStatistics"];
    13173 -> 13177;
    13177[label="("];
    13173 -> 13178;
    13178[label=")"];
    13173 -> 13179;
    13179 [label="Block(Block { syntax: 13179, lbrace: Some(13180), statements: [13181, 13191], rbrace: Some(13198) })"];
    13179 -> 13180;
    13180[label="{"];
    13179 -> 13181;
    13181 [label="Statement(Statement { syntax: 13181, statement: Some(13182), semicolon: None })"];
    13181 -> 13182;
    13182 [label="VarDec(VarDec { syntax: 13182, declare: Some(13183), netread: None, netwrite: None, persistent: None, metadata: None, type_: None, name: Some(13184), as_: None, alias: None, for_: None, target: None, assignment: Some(13186), value: Some(13187) })"];
    13182 -> 13183;
    13183[label="declare"];
    13182 -> 13184;
    13184 [label="Type(Type { syntax: 13184, basename: Some(13185), members: [], arrays: [] })"];
    13184 -> 13185;
    13185[label="WB"];
    13182 -> 13186;
    13186[label="="];
    13182 -> 13187;
    13187 [label="Expr"];
    13187 -> 13188;
    13188 [label="Literal"];
    13188 -> 13189;
    13189[label="\"file://Media/Manialinks/ShootMania/Window/\""];
    13182 -> 13190;
    13190[label=";"];
    13179 -> 13191;
    13191 [label="Statement(Statement { syntax: 13191, statement: Some(13192), semicolon: Some(13197) })"];
    13191 -> 13192;
    13192 [label="Return(Return { syntax: 13192, return_: Some(13193), value: Some(13194) })"];
    13192 -> 13193;
    13193[label="return"];
    13192 -> 13194;
    13194 [label="Expr"];
    13194 -> 13195;
    13195 [label="Literal"];
    13195 -> 13196;
    13196[label="\"\"\"
<manialink version=\"3\" name=\"HungerGames:Statistics\">
<stylesheet>
	<style class=\"font\" valign=\"center2\" textemboss=\"1\" textcolor=\"FFF\" textsize=\"1\" textfont=\"Eurostile_Bold\" />
</stylesheet>

<framemodel id=\"FrameModel_StatGauge\">
	<label pos=\"0 3\" class=\"font\" halign=\"center\" textsize=\"3\" id=\"Label_StatValueCur\" text=\"0%\" />
	<label pos=\"-25 2.25\" class=\"font\" halign=\"left\" textcolor=\"888\" id=\"Label_StatValueMin\" text=\"0%\" />
	<label pos=\"25 2.25\" class=\"font\" halign=\"right\" textcolor=\"888\" id=\"Label_StatValueMax\" text=\"0%\" />
	<gauge size=\"54 8\" halign=\"center\" valign=\"center\" drawbg=\"0\" id=\"Gauge_StatProgress\" />
	<label pos=\"0 -3\" size=\"50 0\" class=\"font\" halign=\"center\" textprefix=\"$t\" id=\"Label_StatDescription\" text=\"---\" />
</framemodel>

<frame pos=\"-84 -44.5\" valign=\"center\" size=\"170 28\">
	<frameinstance modelid=\"FrameModel_StatGauge\" id=\"Frame_StatGauge#0\" pos=\"31 -6\" />
	<frameinstance modelid=\"FrameModel_StatGauge\" id=\"Frame_StatGauge#1\" pos=\"84 -6\" />
	<frameinstance modelid=\"FrameModel_StatGauge\" id=\"Frame_StatGauge#2\" pos=\"137 -6\" />

	<quad pos=\"0 36\" size=\"10 50\" image=\"{{{WB}}}BottomLeft.png\" colorize=\"000\" />
	<quad pos=\"10 36\" size=\"148 50\" image=\"{{{WB}}}Bottom.png\" colorize=\"000\" />
	<quad pos=\"158 36\" size=\"10 50\" image=\"{{{WB}}}BottomRight.png\" colorize=\"000\" />
</frame>

<script><!--
/**
 *	HungerGames: Statistics
 */

#Include \"MathLib\" as ML
#Include \"TextLib\" as TL

#Const C_StatsNames 	[\"Ammo reload\", \"Stamina reload\", \"Stamina max\"]
#Const C_StatsMaximum	[3., 1., 3.]

// ---------------------------------- //
// Main
// ---------------------------------- //
***Main***
***
// ---------------------------------- //
// Laod interface elements
declare CMlFrame[] Frame_StatGauges;
for (I, 0, 2) Frame_StatGauges.add((Page.GetFirstChild(\"Frame_StatGauge#\"^I) as CMlFrame));

// ---------------------------------- //
// Variables
declare InterfaceColor = LocalUser.Color;
declare StatsValues = [0., 0., 0.];

/// Update
declare PrevGUIPlayerId = NullId;
declare PrevInterfaceColor = Vec3;
declare PrevStatsValues = [0., 0., 0.];

// ---------------------------------- //
// Setup statistics
foreach (I => Frame in Frame_StatGauges) {
	declare Label_StatDescription <=> (Frame.GetFirstChild(\"Label_StatDescription\") as CMlLabel);
	declare Label_StatValueMin <=> (Frame.GetFirstChild(\"Label_StatValueMin\") as CMlLabel);
	declare Label_StatValueMax <=> (Frame.GetFirstChild(\"Label_StatValueMax\") as CMlLabel);
	
	Label_StatDescription.SetText(ReplaceChars(Translate(C_StatsNames[I])));
	Label_StatValueMin.SetText(\"0%\");
	Label_StatValueMax.SetText(ML::FloorInteger(C_StatsMaximum[I] * 100)^\"%\");
}
***

// ---------------------------------- //
// Yield
// ---------------------------------- //
***Yield***
***
// ---------------------------------- //
// Update interface on player change
if (GUIPlayer != Null && GUIPlayer.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) {
	if (PrevGUIPlayerId != GUIPlayer.Id) {
		PrevGUIPlayerId = GUIPlayer.Id;
		InterfaceColor = GUIPlayer.User.Color;
	}
} else if (PrevGUIPlayerId != NullId) {
	PrevGUIPlayerId = NullId;
	InterfaceColor = LocalUser.Color;
	StatsValues = [0., 0., 0.];
}

// ---------------------------------- //
// Update the color of the interface
if (PrevInterfaceColor != InterfaceColor) {
	PrevInterfaceColor = InterfaceColor;
	
	foreach (Frame in Frame_StatGauges) {
		declare Label_StatDescription <=> (Frame.GetFirstChild(\"Label_StatDescription\") as CMlLabel);
		declare Gauge_StatProgress <=> (Frame.GetFirstChild(\"Gauge_StatProgress\") as CMlGauge);
		
		Label_StatDescription.TextColor = Brightness(InterfaceColor, 4.);
		Gauge_StatProgress.Color = InterfaceColor;
	}
}

// ---------------------------------- //
// Update current player statistics
if (PrevGUIPlayerId != NullId && GUIPlayer != Null) {
	StatsValues[0] = GUIPlayer.AmmoGain;
	StatsValues[1] = GUIPlayer.StaminaGain;
	StatsValues[2] = GUIPlayer.StaminaMax;
}

// ---------------------------------- //
// Update statistics frames
foreach (I => Frame in Frame_StatGauges) {
	if (!StatsValues.existskey(I) || !PrevStatsValues.existskey(I) || StatsValues[I] == PrevStatsValues[I]) continue;
	PrevStatsValues[I] = StatsValues[I];
	
	// ---------------------------------- //
	// Get frame elements
	declare Label_StatValueCur <=> (Frame.GetFirstChild(\"Label_StatValueCur\") as CMlLabel);
	declare Gauge_StatProgress <=> (Frame.GetFirstChild(\"Gauge_StatProgress\") as CMlGauge);
	
	// ---------------------------------- //
	// Set gauges ratio
	Label_StatValueCur.SetText(ML::NearestInteger(StatsValues[I] * 100)^\"%\");
	SetGaugeRatio(Gauge_StatProgress, StatsValues[I] / C_StatsMaximum[I]);
}
***

{{{ManialinkTools::Functions([\"SetGaugeRatio\", \"Brightness\", \"ReplaceChars\"])}}}
{{{Translations::InjectInManialink([\"Ammo reload\", \"Stamina reload\", \"Stamina max\"])}}}

// ---------------------------------- //
// Main
// ---------------------------------- //
main() {
	---Main---
	while (True) {
		yield;
		---Yield---
	}
}
--></script>
</manialink>\"\"\""];
    13191 -> 13197;
    13197[label=";"];
    13179 -> 13198;
    13198[label="}"];
    0 -> 13199;
    13199[label=""];
}
