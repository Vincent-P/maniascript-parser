digraph ast {
    0 [label="File(File { syntax: 0, hashes: [1, 4, 10, 16, 22, 27, 32, 49, 66, 86, 103, 120, 137, 154, 171, 188, 205, 211, 217, 223, 229, 235, 241, 247, 277, 283, 289, 295, 301, 307, 313, 319, 325, 331, 337, 343, 349, 355, 361, 367, 373, 379, 385, 391, 397, 403, 415, 497, 530, 554, 587], globals: [], labels: [], functions: [635], eof: Some(703) })"];
    0 -> 1;
    1 [label="Extends(Extends { syntax: 1, extends: Some(2), path: Some(3) })"];
    1 -> 2;
    2[label="#Extends"];
    1 -> 3;
    3[label="\"Modes/ShootMania/ModeGalaxyTitles.Script.txt\""];
    0 -> 4;
    4 [label="Const(Const { syntax: 4, const_: Some(5), name: Some(6), value: Some(7) })"];
    4 -> 5;
    5[label="#Const"];
    4 -> 6;
    6[label="CompatibleMapTypes"];
    4 -> 7;
    7 [label="Expr"];
    7 -> 8;
    8 [label="Literal"];
    8 -> 9;
    9[label="\"HungerGamesV2Arena\""];
    0 -> 10;
    10 [label="Const(Const { syntax: 10, const_: Some(11), name: Some(12), value: Some(13) })"];
    10 -> 11;
    11[label="#Const"];
    10 -> 12;
    12[label="Version"];
    10 -> 13;
    13 [label="Expr"];
    13 -> 14;
    14 [label="Literal"];
    14 -> 15;
    15[label="\"2018-02-17\""];
    0 -> 16;
    16 [label="Const(Const { syntax: 16, const_: Some(17), name: Some(18), value: Some(19) })"];
    16 -> 17;
    17[label="#Const"];
    16 -> 18;
    18[label="ScriptName"];
    16 -> 19;
    19 [label="Expr"];
    19 -> 20;
    20 [label="Literal"];
    20 -> 21;
    21[label="\"Modes/ShootMania/HungerGames.Script.txt\""];
    0 -> 22;
    22 [label="Include(Include { syntax: 22, include: Some(23), path: Some(24), as_: Some(25), name: Some(26) })"];
    22 -> 23;
    23[label="#Include"];
    22 -> 24;
    24[label="\"Libs/Nadeo/ShootMania/Map.Script.txt\""];
    22 -> 25;
    25[label="as"];
    22 -> 26;
    26[label="Map"];
    0 -> 27;
    27 [label="Include(Include { syntax: 27, include: Some(28), path: Some(29), as_: Some(30), name: Some(31) })"];
    27 -> 28;
    28[label="#Include"];
    27 -> 29;
    29[label="\"Libs/domino54/MultiClans.Script.txt\""];
    27 -> 30;
    30[label="as"];
    27 -> 31;
    31[label="Clans"];
    0 -> 32;
    32 [label="Setting(Setting { syntax: 32, setting: Some(33), name: Some(34), value: Some(35) })"];
    32 -> 33;
    33[label="#Setting"];
    32 -> 34;
    34[label="S_OffZoneActivationTime"];
    32 -> 35;
    35 [label="Expr"];
    35 -> 43;
    43 [label="FunctionCall(FunctionCall { syntax: 43, lhs: Some(38), lparen: Some(44), args: [(45, None)], rparen: Some(48) })"];
    43 -> 38;
    38 [label="BinaryOp(BinaryOp { syntax: 38, lhs: Some(36), operator: Some(39), rhs: Some(40) })"];
    38 -> 36;
    36 [label="Literal"];
    36 -> 37;
    37[label="360"];
    38 -> 39;
    39[label="as"];
    38 -> 40;
    40 [label="Expr"];
    40 -> 41;
    41 [label="Identifier"];
    41 -> 42;
    42[label="_"];
    43 -> 44;
    44[label="("];
    43 -> 45;
    45 [label="Expr"];
    45 -> 46;
    46 [label="Literal"];
    46 -> 47;
    47[label="\"OffZone activation time (0 = don't activate)\""];
    43 -> 48;
    48[label=")"];
    0 -> 49;
    49 [label="Setting(Setting { syntax: 49, setting: Some(50), name: Some(51), value: Some(52) })"];
    49 -> 50;
    50[label="#Setting"];
    49 -> 51;
    51[label="S_OffZoneShrinkDuration"];
    49 -> 52;
    52 [label="Expr"];
    52 -> 60;
    60 [label="FunctionCall(FunctionCall { syntax: 60, lhs: Some(55), lparen: Some(61), args: [(62, None)], rparen: Some(65) })"];
    60 -> 55;
    55 [label="BinaryOp(BinaryOp { syntax: 55, lhs: Some(53), operator: Some(56), rhs: Some(57) })"];
    55 -> 53;
    53 [label="Literal"];
    53 -> 54;
    54[label="180"];
    55 -> 56;
    56[label="as"];
    55 -> 57;
    57 [label="Expr"];
    57 -> 58;
    58 [label="Identifier"];
    58 -> 59;
    59[label="_"];
    60 -> 61;
    61[label="("];
    60 -> 62;
    62 [label="Expr"];
    62 -> 63;
    63 [label="Literal"];
    63 -> 64;
    64[label="\"OffZone shrink duration (min. 60)\""];
    60 -> 65;
    65[label=")"];
    0 -> 66;
    66 [label="Setting(Setting { syntax: 66, setting: Some(67), name: Some(68), value: Some(69) })"];
    66 -> 67;
    67[label="#Setting"];
    66 -> 68;
    68[label="S_ObjectsSpawnRatio"];
    66 -> 69;
    69 [label="Expr"];
    69 -> 80;
    80 [label="FunctionCall(FunctionCall { syntax: 80, lhs: Some(75), lparen: Some(81), args: [(82, None)], rparen: Some(85) })"];
    80 -> 75;
    75 [label="BinaryOp(BinaryOp { syntax: 75, lhs: Some(70), operator: Some(76), rhs: Some(77) })"];
    75 -> 70;
    70 [label="UnOp(UnOp { syntax: 70, operator: Some(71), operand: Some(72) })"];
    70 -> 71;
    71[label="-"];
    70 -> 72;
    72 [label="Expr"];
    72 -> 73;
    73 [label="Literal"];
    73 -> 74;
    74[label="1."];
    75 -> 76;
    76[label="as"];
    75 -> 77;
    77 [label="Expr"];
    77 -> 78;
    78 [label="Identifier"];
    78 -> 79;
    79[label="_"];
    80 -> 81;
    81[label="("];
    80 -> 82;
    82 [label="Expr"];
    82 -> 83;
    83 [label="Literal"];
    83 -> 84;
    84[label="\"Objects spawning ratio (-1 = auto)\""];
    80 -> 85;
    85[label=")"];
    0 -> 86;
    86 [label="Setting(Setting { syntax: 86, setting: Some(87), name: Some(88), value: Some(89) })"];
    86 -> 87;
    87[label="#Setting"];
    86 -> 88;
    88[label="S_NewcomersJoinTime"];
    86 -> 89;
    89 [label="Expr"];
    89 -> 97;
    97 [label="FunctionCall(FunctionCall { syntax: 97, lhs: Some(92), lparen: Some(98), args: [(99, None)], rparen: Some(102) })"];
    97 -> 92;
    92 [label="BinaryOp(BinaryOp { syntax: 92, lhs: Some(90), operator: Some(93), rhs: Some(94) })"];
    92 -> 90;
    90 [label="Literal"];
    90 -> 91;
    91[label="240"];
    92 -> 93;
    93[label="as"];
    92 -> 94;
    94 [label="Expr"];
    94 -> 95;
    95 [label="Identifier"];
    95 -> 96;
    96[label="_"];
    97 -> 98;
    98[label="("];
    97 -> 99;
    99 [label="Expr"];
    99 -> 100;
    100 [label="Literal"];
    100 -> 101;
    101[label="\"Time for new players to join the game after it starts\""];
    97 -> 102;
    102[label=")"];
    0 -> 103;
    103 [label="Setting(Setting { syntax: 103, setting: Some(104), name: Some(105), value: Some(106) })"];
    103 -> 104;
    104[label="#Setting"];
    103 -> 105;
    105[label="S_ObjectsDroppingRatio"];
    103 -> 106;
    106 [label="Expr"];
    106 -> 114;
    114 [label="FunctionCall(FunctionCall { syntax: 114, lhs: Some(109), lparen: Some(115), args: [(116, None)], rparen: Some(119) })"];
    114 -> 109;
    109 [label="BinaryOp(BinaryOp { syntax: 109, lhs: Some(107), operator: Some(110), rhs: Some(111) })"];
    109 -> 107;
    107 [label="Literal"];
    107 -> 108;
    108[label=".5"];
    109 -> 110;
    110[label="as"];
    109 -> 111;
    111 [label="Expr"];
    111 -> 112;
    112 [label="Identifier"];
    112 -> 113;
    113[label="_"];
    114 -> 115;
    115[label="("];
    114 -> 116;
    116 [label="Expr"];
    116 -> 117;
    117 [label="Literal"];
    117 -> 118;
    118[label="\"Objects drop ratio from eliminated players\""];
    114 -> 119;
    119[label=")"];
    0 -> 120;
    120 [label="Setting(Setting { syntax: 120, setting: Some(121), name: Some(122), value: Some(123) })"];
    120 -> 121;
    121[label="#Setting"];
    120 -> 122;
    122[label="S_RandomizeObjectsSpawns"];
    120 -> 123;
    123 [label="Expr"];
    123 -> 131;
    131 [label="FunctionCall(FunctionCall { syntax: 131, lhs: Some(126), lparen: Some(132), args: [(133, None)], rparen: Some(136) })"];
    131 -> 126;
    126 [label="BinaryOp(BinaryOp { syntax: 126, lhs: Some(124), operator: Some(127), rhs: Some(128) })"];
    126 -> 124;
    124 [label="Literal"];
    124 -> 125;
    125[label="True"];
    126 -> 127;
    127[label="as"];
    126 -> 128;
    128 [label="Expr"];
    128 -> 129;
    129 [label="Identifier"];
    129 -> 130;
    130[label="_"];
    131 -> 132;
    132[label="("];
    131 -> 133;
    133 [label="Expr"];
    133 -> 134;
    134 [label="Literal"];
    134 -> 135;
    135[label="\"Randomize objects locations on the map (except Armor)\""];
    131 -> 136;
    136[label=")"];
    0 -> 137;
    137 [label="Setting(Setting { syntax: 137, setting: Some(138), name: Some(139), value: Some(140) })"];
    137 -> 138;
    138[label="#Setting"];
    137 -> 139;
    139[label="S_ArmorRespawnTime"];
    137 -> 140;
    140 [label="Expr"];
    140 -> 148;
    148 [label="FunctionCall(FunctionCall { syntax: 148, lhs: Some(143), lparen: Some(149), args: [(150, None)], rparen: Some(153) })"];
    148 -> 143;
    143 [label="BinaryOp(BinaryOp { syntax: 143, lhs: Some(141), operator: Some(144), rhs: Some(145) })"];
    143 -> 141;
    141 [label="Literal"];
    141 -> 142;
    142[label="180"];
    143 -> 144;
    144[label="as"];
    143 -> 145;
    145 [label="Expr"];
    145 -> 146;
    146 [label="Identifier"];
    146 -> 147;
    147[label="_"];
    148 -> 149;
    149[label="("];
    148 -> 150;
    150 [label="Expr"];
    150 -> 151;
    151 [label="Literal"];
    151 -> 152;
    152[label="\"Armor and Replie respawn duration (0 = don't respawn)\""];
    148 -> 153;
    153[label=")"];
    0 -> 154;
    154 [label="Setting(Setting { syntax: 154, setting: Some(155), name: Some(156), value: Some(157) })"];
    154 -> 155;
    155[label="#Setting"];
    154 -> 156;
    156[label="S_ToadsFirstSpawnDelay"];
    154 -> 157;
    157 [label="Expr"];
    157 -> 165;
    165 [label="FunctionCall(FunctionCall { syntax: 165, lhs: Some(160), lparen: Some(166), args: [(167, None)], rparen: Some(170) })"];
    165 -> 160;
    160 [label="BinaryOp(BinaryOp { syntax: 160, lhs: Some(158), operator: Some(161), rhs: Some(162) })"];
    160 -> 158;
    158 [label="Literal"];
    158 -> 159;
    159[label="30"];
    160 -> 161;
    161[label="as"];
    160 -> 162;
    162 [label="Expr"];
    162 -> 163;
    163 [label="Identifier"];
    163 -> 164;
    164[label="_"];
    165 -> 166;
    166[label="("];
    165 -> 167;
    167 [label="Expr"];
    167 -> 168;
    168 [label="Literal"];
    168 -> 169;
    169[label="\"Delay before Toads are spawned\""];
    165 -> 170;
    170[label=")"];
    0 -> 171;
    171 [label="Setting(Setting { syntax: 171, setting: Some(172), name: Some(173), value: Some(174) })"];
    171 -> 172;
    172[label="#Setting"];
    171 -> 173;
    173[label="S_AllowPlayersRespawn"];
    171 -> 174;
    174 [label="Expr"];
    174 -> 182;
    182 [label="FunctionCall(FunctionCall { syntax: 182, lhs: Some(177), lparen: Some(183), args: [(184, None)], rparen: Some(187) })"];
    182 -> 177;
    177 [label="BinaryOp(BinaryOp { syntax: 177, lhs: Some(175), operator: Some(178), rhs: Some(179) })"];
    177 -> 175;
    175 [label="Literal"];
    175 -> 176;
    176[label="True"];
    177 -> 178;
    178[label="as"];
    177 -> 179;
    179 [label="Expr"];
    179 -> 180;
    180 [label="Identifier"];
    180 -> 181;
    181[label="_"];
    182 -> 183;
    183[label="("];
    182 -> 184;
    184 [label="Expr"];
    184 -> 185;
    185 [label="Literal"];
    185 -> 186;
    186[label="\"Allow players to respawn on Checkpoints\""];
    182 -> 187;
    187[label=")"];
    0 -> 188;
    188 [label="Setting(Setting { syntax: 188, setting: Some(189), name: Some(190), value: Some(191) })"];
    188 -> 189;
    189[label="#Setting"];
    188 -> 190;
    190[label="S_MatchmakingFormat"];
    188 -> 191;
    191 [label="Expr"];
    191 -> 199;
    199 [label="FunctionCall(FunctionCall { syntax: 199, lhs: Some(194), lparen: Some(200), args: [(201, None)], rparen: Some(204) })"];
    199 -> 194;
    194 [label="BinaryOp(BinaryOp { syntax: 194, lhs: Some(192), operator: Some(195), rhs: Some(196) })"];
    194 -> 192;
    192 [label="Literal"];
    192 -> 193;
    193[label="8"];
    194 -> 195;
    195[label="as"];
    194 -> 196;
    196 [label="Expr"];
    196 -> 197;
    197 [label="Identifier"];
    197 -> 198;
    198[label="_"];
    199 -> 200;
    200[label="("];
    199 -> 201;
    201 [label="Expr"];
    201 -> 202;
    202 [label="Literal"];
    202 -> 203;
    203[label="\"Number of players in matchmaking mode\""];
    199 -> 204;
    204[label=")"];
    0 -> 205;
    205 [label="Setting(Setting { syntax: 205, setting: Some(206), name: Some(207), value: Some(208) })"];
    205 -> 206;
    206[label="#Setting"];
    205 -> 207;
    207[label="S_AutoManageAFK"];
    205 -> 208;
    208 [label="Expr"];
    208 -> 209;
    209 [label="Literal"];
    209 -> 210;
    210[label="False"];
    0 -> 211;
    211 [label="Setting(Setting { syntax: 211, setting: Some(212), name: Some(213), value: Some(214) })"];
    211 -> 212;
    212[label="#Setting"];
    211 -> 213;
    213[label="S_PlayerArmorPoints"];
    211 -> 214;
    214 [label="Expr"];
    214 -> 215;
    215 [label="Literal"];
    215 -> 216;
    216[label="5"];
    0 -> 217;
    217 [label="Setting(Setting { syntax: 217, setting: Some(218), name: Some(219), value: Some(220) })"];
    217 -> 218;
    218[label="#Setting"];
    217 -> 219;
    219[label="S_MaximumNbWeapons"];
    217 -> 220;
    220 [label="Expr"];
    220 -> 221;
    221 [label="Literal"];
    221 -> 222;
    222[label="3"];
    0 -> 223;
    223 [label="Setting(Setting { syntax: 223, setting: Some(224), name: Some(225), value: Some(226) })"];
    223 -> 224;
    224[label="#Setting"];
    223 -> 225;
    225[label="S_MaximumNbReplies"];
    223 -> 226;
    226 [label="Expr"];
    226 -> 227;
    227 [label="Literal"];
    227 -> 228;
    228[label="5"];
    0 -> 229;
    229 [label="Setting(Setting { syntax: 229, setting: Some(230), name: Some(231), value: Some(232) })"];
    229 -> 230;
    230[label="#Setting"];
    229 -> 231;
    231[label="S_ObjectsRespawnTime"];
    229 -> 232;
    232 [label="Expr"];
    232 -> 233;
    233 [label="Literal"];
    233 -> 234;
    234[label="300"];
    0 -> 235;
    235 [label="Setting(Setting { syntax: 235, setting: Some(236), name: Some(237), value: Some(238) })"];
    235 -> 236;
    236[label="#Setting"];
    235 -> 237;
    237[label="S_ToadsRespawnTime"];
    235 -> 238;
    238 [label="Expr"];
    238 -> 239;
    239 [label="Literal"];
    239 -> 240;
    240[label="240"];
    0 -> 241;
    241 [label="Setting(Setting { syntax: 241, setting: Some(242), name: Some(243), value: Some(244) })"];
    241 -> 242;
    242[label="#Setting"];
    241 -> 243;
    243[label="S_ToadsSpawnRatio"];
    241 -> 244;
    244 [label="Expr"];
    244 -> 245;
    245 [label="Literal"];
    245 -> 246;
    246[label="1."];
    0 -> 247;
    247 [label="Const(Const { syntax: 247, const_: Some(248), name: Some(249), value: Some(250) })"];
    247 -> 248;
    248[label="#Const"];
    247 -> 249;
    249[label="C_ModeSupportedObjects"];
    247 -> 250;
    250 [label="Expr"];
    250 -> 251;
    251 [label="Array(Array { syntax: 251, lsquare: Some(252), values: [(253, Some(256)), (257, Some(260)), (261, Some(264)), (265, Some(268)), (269, Some(272)), (273, None)], rsquare: Some(276) })"];
    251 -> 252;
    252[label="["];
    251 -> 253;
    253 [label="Expr"];
    253 -> 254;
    254 [label="Literal"];
    254 -> 255;
    255[label="\"Weapon\""];
    251 -> 256;
    256[label=","];
    251 -> 257;
    257 [label="Expr"];
    257 -> 258;
    258 [label="Literal"];
    258 -> 259;
    259[label="\"Charge\""];
    251 -> 260;
    260[label=","];
    251 -> 261;
    261 [label="Expr"];
    261 -> 262;
    262 [label="Literal"];
    262 -> 263;
    263[label="\"Mini\""];
    251 -> 264;
    264[label=","];
    251 -> 265;
    265 [label="Expr"];
    265 -> 266;
    266 [label="Literal"];
    266 -> 267;
    267[label="\"Replie\""];
    251 -> 268;
    268[label=","];
    251 -> 269;
    269 [label="Expr"];
    269 -> 270;
    270 [label="Literal"];
    270 -> 271;
    271[label="\"Armor\""];
    251 -> 272;
    272[label=","];
    251 -> 273;
    273 [label="Expr"];
    273 -> 274;
    274 [label="Literal"];
    274 -> 275;
    275[label="\"Fuel\""];
    251 -> 276;
    276[label="]"];
    0 -> 277;
    277 [label="Const(Const { syntax: 277, const_: Some(278), name: Some(279), value: Some(280) })"];
    277 -> 278;
    278[label="#Const"];
    277 -> 279;
    279[label="C_RequiredPlayersNb"];
    277 -> 280;
    280 [label="Expr"];
    280 -> 281;
    281 [label="Literal"];
    281 -> 282;
    282[label="2"];
    0 -> 283;
    283 [label="Const(Const { syntax: 283, const_: Some(284), name: Some(285), value: Some(286) })"];
    283 -> 284;
    284[label="#Const"];
    283 -> 285;
    285[label="C_StartCountdownDuration"];
    283 -> 286;
    286 [label="Expr"];
    286 -> 287;
    287 [label="Literal"];
    287 -> 288;
    288[label="10000"];
    0 -> 289;
    289 [label="Const(Const { syntax: 289, const_: Some(290), name: Some(291), value: Some(292) })"];
    289 -> 290;
    290[label="#Const"];
    289 -> 291;
    291[label="C_OffZoneMinShrinkDuration"];
    289 -> 292;
    292 [label="Expr"];
    292 -> 293;
    293 [label="Literal"];
    293 -> 294;
    294[label="60"];
    0 -> 295;
    295 [label="Const(Const { syntax: 295, const_: Some(296), name: Some(297), value: Some(298) })"];
    295 -> 296;
    296[label="#Const"];
    295 -> 297;
    297[label="C_OffZoneMinimumRadius"];
    295 -> 298;
    298 [label="Expr"];
    298 -> 299;
    299 [label="Literal"];
    299 -> 300;
    300[label="36."];
    0 -> 301;
    301 [label="Const(Const { syntax: 301, const_: Some(302), name: Some(303), value: Some(304) })"];
    301 -> 302;
    302[label="#Const"];
    301 -> 303;
    303[label="C_AutoRatioItemsPerPlayer"];
    301 -> 304;
    304 [label="Expr"];
    304 -> 305;
    305 [label="Literal"];
    305 -> 306;
    306[label="15"];
    0 -> 307;
    307 [label="Const(Const { syntax: 307, const_: Some(308), name: Some(309), value: Some(310) })"];
    307 -> 308;
    308[label="#Const"];
    307 -> 309;
    309[label="C_PlayerMaxNbRocketSlots"];
    307 -> 310;
    310 [label="Expr"];
    310 -> 311;
    311 [label="Literal"];
    311 -> 312;
    312[label="4"];
    0 -> 313;
    313 [label="Const(Const { syntax: 313, const_: Some(314), name: Some(315), value: Some(316) })"];
    313 -> 314;
    314[label="#Const"];
    313 -> 315;
    315[label="C_PlayerPointsForSurvival"];
    313 -> 316;
    316 [label="Expr"];
    316 -> 317;
    317 [label="Literal"];
    317 -> 318;
    318[label="10"];
    0 -> 319;
    319 [label="Const(Const { syntax: 319, const_: Some(320), name: Some(321), value: Some(322) })"];
    319 -> 320;
    320[label="#Const"];
    319 -> 321;
    321[label="C_PlayerPointsForObjects"];
    319 -> 322;
    322 [label="Expr"];
    322 -> 323;
    323 [label="Literal"];
    323 -> 324;
    324[label="1"];
    0 -> 325;
    325 [label="Const(Const { syntax: 325, const_: Some(326), name: Some(327), value: Some(328) })"];
    325 -> 326;
    326[label="#Const"];
    325 -> 327;
    327[label="C_WinnerMinPointsDiff"];
    325 -> 328;
    328 [label="Expr"];
    328 -> 329;
    329 [label="Literal"];
    329 -> 330;
    330[label="10"];
    0 -> 331;
    331 [label="Const(Const { syntax: 331, const_: Some(332), name: Some(333), value: Some(334) })"];
    331 -> 332;
    332[label="#Const"];
    331 -> 333;
    333[label="C_WeaponItemArmorBonus"];
    331 -> 334;
    334 [label="Expr"];
    334 -> 335;
    335 [label="Literal"];
    335 -> 336;
    336[label="100"];
    0 -> 337;
    337 [label="Const(Const { syntax: 337, const_: Some(338), name: Some(339), value: Some(340) })"];
    337 -> 338;
    338[label="#Const"];
    337 -> 339;
    339[label="C_ChargeItemSkillPoints"];
    337 -> 340;
    340 [label="Expr"];
    340 -> 341;
    341 [label="Literal"];
    341 -> 342;
    342[label="5"];
    0 -> 343;
    343 [label="Const(Const { syntax: 343, const_: Some(344), name: Some(345), value: Some(346) })"];
    343 -> 344;
    344[label="#Const"];
    343 -> 345;
    345[label="C_MiniItemBonusMultiplier"];
    343 -> 346;
    346 [label="Expr"];
    346 -> 347;
    347 [label="Literal"];
    347 -> 348;
    348[label="2"];
    0 -> 349;
    349 [label="Const(Const { syntax: 349, const_: Some(350), name: Some(351), value: Some(352) })"];
    349 -> 350;
    350[label="#Const"];
    349 -> 351;
    351[label="C_MiniItemArmorTakenOnPick"];
    349 -> 352;
    352 [label="Expr"];
    352 -> 353;
    353 [label="Literal"];
    353 -> 354;
    354[label="100"];
    0 -> 355;
    355 [label="Const(Const { syntax: 355, const_: Some(356), name: Some(357), value: Some(358) })"];
    355 -> 356;
    356[label="#Const"];
    355 -> 357;
    357[label="C_ObjectsDropSpreadRadius"];
    355 -> 358;
    358 [label="Expr"];
    358 -> 359;
    359 [label="Literal"];
    359 -> 360;
    360[label="1."];
    0 -> 361;
    361 [label="Const(Const { syntax: 361, const_: Some(362), name: Some(363), value: Some(364) })"];
    361 -> 362;
    362[label="#Const"];
    361 -> 363;
    363[label="C_ToadObjectDropChance"];
    361 -> 364;
    364 [label="Expr"];
    364 -> 365;
    365 [label="Literal"];
    365 -> 366;
    366[label=".25"];
    0 -> 367;
    367 [label="Const(Const { syntax: 367, const_: Some(368), name: Some(369), value: Some(370) })"];
    367 -> 368;
    368[label="#Const"];
    367 -> 369;
    369[label="C_ToadChanceForArmorDrop"];
    367 -> 370;
    370 [label="Expr"];
    370 -> 371;
    371 [label="Literal"];
    371 -> 372;
    372[label=".25"];
    0 -> 373;
    373 [label="Const(Const { syntax: 373, const_: Some(374), name: Some(375), value: Some(376) })"];
    373 -> 374;
    374[label="#Const"];
    373 -> 375;
    375[label="C_GateOpeningDuration"];
    373 -> 376;
    376 [label="Expr"];
    376 -> 377;
    377 [label="Literal"];
    377 -> 378;
    378[label="5000"];
    0 -> 379;
    379 [label="Const(Const { syntax: 379, const_: Some(380), name: Some(381), value: Some(382) })"];
    379 -> 380;
    380[label="#Const"];
    379 -> 381;
    381[label="C_GateAutoCloseDelay"];
    379 -> 382;
    382 [label="Expr"];
    382 -> 383;
    383 [label="Literal"];
    383 -> 384;
    384[label="7500"];
    0 -> 385;
    385 [label="Const(Const { syntax: 385, const_: Some(386), name: Some(387), value: Some(388) })"];
    385 -> 386;
    386[label="#Const"];
    385 -> 387;
    387[label="C_CheckpointSafeDistance"];
    385 -> 388;
    388 [label="Expr"];
    388 -> 389;
    389 [label="Literal"];
    389 -> 390;
    390[label="12."];
    0 -> 391;
    391 [label="Const(Const { syntax: 391, const_: Some(392), name: Some(393), value: Some(394) })"];
    391 -> 392;
    392[label="#Const"];
    391 -> 393;
    393[label="C_RespawnWaitingDuration"];
    391 -> 394;
    394 [label="Expr"];
    394 -> 395;
    395 [label="Literal"];
    395 -> 396;
    396[label="15000"];
    0 -> 397;
    397 [label="Const(Const { syntax: 397, const_: Some(398), name: Some(399), value: Some(400) })"];
    397 -> 398;
    398[label="#Const"];
    397 -> 399;
    399[label="C_RespawnCancellingSpeed"];
    397 -> 400;
    400 [label="Expr"];
    400 -> 401;
    401 [label="Literal"];
    401 -> 402;
    402[label="2.5"];
    0 -> 403;
    403 [label="Const(Const { syntax: 403, const_: Some(404), name: Some(405), value: Some(406) })"];
    403 -> 404;
    404[label="#Const"];
    403 -> 405;
    405[label="Description"];
    403 -> 406;
    406 [label="Expr"];
    406 -> 409;
    409 [label="FunctionCall(FunctionCall { syntax: 409, lhs: Some(407), lparen: Some(410), args: [(411, None)], rparen: Some(414) })"];
    409 -> 407;
    407 [label="Identifier"];
    407 -> 408;
    408[label="_"];
    409 -> 410;
    410[label="("];
    409 -> 411;
    411 [label="Expr"];
    411 -> 412;
    412 [label="Literal"];
    412 -> 413;
    413[label="\"TYPE: Free for all\nOBJECTIVE: Protect Pole from Toads attack as long as it's possible. Game is over when 20 Toads reach the Pole.\""];
    409 -> 414;
    414[label=")"];
    0 -> 415;
    415 [label="Const(Const { syntax: 415, const_: Some(416), name: Some(417), value: Some(418) })"];
    415 -> 416;
    416[label="#Const"];
    415 -> 417;
    417[label="C_PlayerInitialWeapons"];
    415 -> 418;
    418 [label="Expr"];
    418 -> 419;
    419 [label="Array(Array { syntax: 419, lsquare: Some(420), values: [(421, Some(439)), (440, Some(458)), (459, Some(477)), (478, None)], rsquare: Some(496) })"];
    419 -> 420;
    420[label="["];
    419 -> 421;
    421 [label="Expr"];
    421 -> 434;
    434 [label="BinaryOp(BinaryOp { syntax: 434, lhs: Some(424), operator: Some(435), rhs: Some(436) })"];
    434 -> 424;
    424 [label="BinaryOp(BinaryOp { syntax: 424, lhs: Some(422), operator: Some(425), rhs: Some(426) })"];
    424 -> 422;
    422 [label="Identifier"];
    422 -> 423;
    423[label="CSmMode"];
    424 -> 425;
    425[label="::"];
    424 -> 426;
    426 [label="Expr"];
    426 -> 429;
    429 [label="BinaryOp(BinaryOp { syntax: 429, lhs: Some(427), operator: Some(430), rhs: Some(431) })"];
    429 -> 427;
    427 [label="Identifier"];
    427 -> 428;
    428[label="EWeapon"];
    429 -> 430;
    430[label="::"];
    429 -> 431;
    431 [label="Expr"];
    431 -> 432;
    432 [label="Identifier"];
    432 -> 433;
    433[label="Laser"];
    434 -> 435;
    435[label="=>"];
    434 -> 436;
    436 [label="Expr"];
    436 -> 437;
    437 [label="Literal"];
    437 -> 438;
    438[label="0"];
    419 -> 439;
    439[label=","];
    419 -> 440;
    440 [label="Expr"];
    440 -> 453;
    453 [label="BinaryOp(BinaryOp { syntax: 453, lhs: Some(443), operator: Some(454), rhs: Some(455) })"];
    453 -> 443;
    443 [label="BinaryOp(BinaryOp { syntax: 443, lhs: Some(441), operator: Some(444), rhs: Some(445) })"];
    443 -> 441;
    441 [label="Identifier"];
    441 -> 442;
    442[label="CSmMode"];
    443 -> 444;
    444[label="::"];
    443 -> 445;
    445 [label="Expr"];
    445 -> 448;
    448 [label="BinaryOp(BinaryOp { syntax: 448, lhs: Some(446), operator: Some(449), rhs: Some(450) })"];
    448 -> 446;
    446 [label="Identifier"];
    446 -> 447;
    447[label="EWeapon"];
    448 -> 449;
    449[label="::"];
    448 -> 450;
    450 [label="Expr"];
    450 -> 451;
    451 [label="Identifier"];
    451 -> 452;
    452[label="Nucleus"];
    453 -> 454;
    454[label="=>"];
    453 -> 455;
    455 [label="Expr"];
    455 -> 456;
    456 [label="Literal"];
    456 -> 457;
    457[label="0"];
    419 -> 458;
    458[label=","];
    419 -> 459;
    459 [label="Expr"];
    459 -> 472;
    472 [label="BinaryOp(BinaryOp { syntax: 472, lhs: Some(462), operator: Some(473), rhs: Some(474) })"];
    472 -> 462;
    462 [label="BinaryOp(BinaryOp { syntax: 462, lhs: Some(460), operator: Some(463), rhs: Some(464) })"];
    462 -> 460;
    460 [label="Identifier"];
    460 -> 461;
    461[label="CSmMode"];
    462 -> 463;
    463[label="::"];
    462 -> 464;
    464 [label="Expr"];
    464 -> 467;
    467 [label="BinaryOp(BinaryOp { syntax: 467, lhs: Some(465), operator: Some(468), rhs: Some(469) })"];
    467 -> 465;
    465 [label="Identifier"];
    465 -> 466;
    466[label="EWeapon"];
    467 -> 468;
    468[label="::"];
    467 -> 469;
    469 [label="Expr"];
    469 -> 470;
    470 [label="Identifier"];
    470 -> 471;
    471[label="Arrow"];
    472 -> 473;
    473[label="=>"];
    472 -> 474;
    474 [label="Expr"];
    474 -> 475;
    475 [label="Literal"];
    475 -> 476;
    476[label="0"];
    419 -> 477;
    477[label=","];
    419 -> 478;
    478 [label="Expr"];
    478 -> 491;
    491 [label="BinaryOp(BinaryOp { syntax: 491, lhs: Some(481), operator: Some(492), rhs: Some(493) })"];
    491 -> 481;
    481 [label="BinaryOp(BinaryOp { syntax: 481, lhs: Some(479), operator: Some(482), rhs: Some(483) })"];
    481 -> 479;
    479 [label="Identifier"];
    479 -> 480;
    480[label="CSmMode"];
    481 -> 482;
    482[label="::"];
    481 -> 483;
    483 [label="Expr"];
    483 -> 486;
    486 [label="BinaryOp(BinaryOp { syntax: 486, lhs: Some(484), operator: Some(487), rhs: Some(488) })"];
    486 -> 484;
    484 [label="Identifier"];
    484 -> 485;
    485[label="EWeapon"];
    486 -> 487;
    487[label="::"];
    486 -> 488;
    488 [label="Expr"];
    488 -> 489;
    489 [label="Identifier"];
    489 -> 490;
    490[label="Rocket"];
    491 -> 492;
    492[label="=>"];
    491 -> 493;
    493 [label="Expr"];
    493 -> 494;
    494 [label="Literal"];
    494 -> 495;
    495[label="4"];
    419 -> 496;
    496[label="]"];
    0 -> 497;
    497 [label="Const(Const { syntax: 497, const_: Some(498), name: Some(499), value: Some(500) })"];
    497 -> 498;
    498[label="#Const"];
    497 -> 499;
    499[label="C_SkillsPointsStart"];
    497 -> 500;
    500 [label="Expr"];
    500 -> 501;
    501 [label="Array(Array { syntax: 501, lsquare: Some(502), values: [(503, Some(511)), (512, Some(520)), (521, None)], rsquare: Some(529) })"];
    501 -> 502;
    502[label="["];
    501 -> 503;
    503 [label="Expr"];
    503 -> 506;
    506 [label="BinaryOp(BinaryOp { syntax: 506, lhs: Some(504), operator: Some(507), rhs: Some(508) })"];
    506 -> 504;
    504 [label="Literal"];
    504 -> 505;
    505[label="\"AmmoGain\""];
    506 -> 507;
    507[label="=>"];
    506 -> 508;
    508 [label="Expr"];
    508 -> 509;
    509 [label="Literal"];
    509 -> 510;
    510[label="0"];
    501 -> 511;
    511[label=","];
    501 -> 512;
    512 [label="Expr"];
    512 -> 515;
    515 [label="BinaryOp(BinaryOp { syntax: 515, lhs: Some(513), operator: Some(516), rhs: Some(517) })"];
    515 -> 513;
    513 [label="Literal"];
    513 -> 514;
    514[label="\"StaminaGain\""];
    515 -> 516;
    516[label="=>"];
    515 -> 517;
    517 [label="Expr"];
    517 -> 518;
    518 [label="Literal"];
    518 -> 519;
    519[label="0"];
    501 -> 520;
    520[label=","];
    501 -> 521;
    521 [label="Expr"];
    521 -> 524;
    524 [label="BinaryOp(BinaryOp { syntax: 524, lhs: Some(522), operator: Some(525), rhs: Some(526) })"];
    524 -> 522;
    522 [label="Literal"];
    522 -> 523;
    523[label="\"StaminaMax\""];
    524 -> 525;
    525[label="=>"];
    524 -> 526;
    526 [label="Expr"];
    526 -> 527;
    527 [label="Literal"];
    527 -> 528;
    528[label="75"];
    501 -> 529;
    529[label="]"];
    0 -> 530;
    530 [label="Const(Const { syntax: 530, const_: Some(531), name: Some(532), value: Some(533) })"];
    530 -> 531;
    531[label="#Const"];
    530 -> 532;
    532[label="C_SkillsPointsOnGoal"];
    530 -> 533;
    533 [label="Expr"];
    533 -> 534;
    534 [label="Array(Array { syntax: 534, lsquare: Some(535), values: [(536, Some(544)), (545, None)], rsquare: Some(553) })"];
    534 -> 535;
    535[label="["];
    534 -> 536;
    536 [label="Expr"];
    536 -> 539;
    539 [label="BinaryOp(BinaryOp { syntax: 539, lhs: Some(537), operator: Some(540), rhs: Some(541) })"];
    539 -> 537;
    537 [label="Literal"];
    537 -> 538;
    538[label="\"AmmoGain\""];
    539 -> 540;
    540[label="=>"];
    539 -> 541;
    541 [label="Expr"];
    541 -> 542;
    542 [label="Literal"];
    542 -> 543;
    543[label="50"];
    534 -> 544;
    544[label=","];
    534 -> 545;
    545 [label="Expr"];
    545 -> 548;
    548 [label="BinaryOp(BinaryOp { syntax: 548, lhs: Some(546), operator: Some(549), rhs: Some(550) })"];
    548 -> 546;
    546 [label="Literal"];
    546 -> 547;
    547[label="\"StaminaGain\""];
    548 -> 549;
    549[label="=>"];
    548 -> 550;
    550 [label="Expr"];
    550 -> 551;
    551 [label="Literal"];
    551 -> 552;
    552[label="20"];
    534 -> 553;
    553[label="]"];
    0 -> 554;
    554 [label="Const(Const { syntax: 554, const_: Some(555), name: Some(556), value: Some(557) })"];
    554 -> 555;
    555[label="#Const"];
    554 -> 556;
    556[label="C_SkillsPointsLimit"];
    554 -> 557;
    557 [label="Expr"];
    557 -> 558;
    558 [label="Array(Array { syntax: 558, lsquare: Some(559), values: [(560, Some(568)), (569, Some(577)), (578, None)], rsquare: Some(586) })"];
    558 -> 559;
    559[label="["];
    558 -> 560;
    560 [label="Expr"];
    560 -> 563;
    563 [label="BinaryOp(BinaryOp { syntax: 563, lhs: Some(561), operator: Some(564), rhs: Some(565) })"];
    563 -> 561;
    561 [label="Literal"];
    561 -> 562;
    562[label="\"AmmoGain\""];
    563 -> 564;
    564[label="=>"];
    563 -> 565;
    565 [label="Expr"];
    565 -> 566;
    566 [label="Literal"];
    566 -> 567;
    567[label="300"];
    558 -> 568;
    568[label=","];
    558 -> 569;
    569 [label="Expr"];
    569 -> 572;
    572 [label="BinaryOp(BinaryOp { syntax: 572, lhs: Some(570), operator: Some(573), rhs: Some(574) })"];
    572 -> 570;
    570 [label="Literal"];
    570 -> 571;
    571[label="\"StaminaGain\""];
    572 -> 573;
    573[label="=>"];
    572 -> 574;
    574 [label="Expr"];
    574 -> 575;
    575 [label="Literal"];
    575 -> 576;
    576[label="100"];
    558 -> 577;
    577[label=","];
    558 -> 578;
    578 [label="Expr"];
    578 -> 581;
    581 [label="BinaryOp(BinaryOp { syntax: 581, lhs: Some(579), operator: Some(582), rhs: Some(583) })"];
    581 -> 579;
    579 [label="Literal"];
    579 -> 580;
    580[label="\"StaminaMax\""];
    581 -> 582;
    582[label="=>"];
    581 -> 583;
    583 [label="Expr"];
    583 -> 584;
    584 [label="Literal"];
    584 -> 585;
    585[label="300"];
    558 -> 586;
    586[label="]"];
    0 -> 587;
    587 [label="Const(Const { syntax: 587, const_: Some(588), name: Some(589), value: Some(590) })"];
    587 -> 588;
    588[label="#Const"];
    587 -> 589;
    589[label="C_ScoresTablePosition"];
    587 -> 590;
    590 [label="Expr"];
    590 -> 591;
    591 [label="Array(Array { syntax: 591, lsquare: Some(592), values: [(593, Some(613)), (614, None)], rsquare: Some(634) })"];
    591 -> 592;
    592[label="["];
    591 -> 593;
    593 [label="Expr"];
    593 -> 596;
    596 [label="BinaryOp(BinaryOp { syntax: 596, lhs: Some(594), operator: Some(597), rhs: Some(598) })"];
    596 -> 594;
    594 [label="Literal"];
    594 -> 595;
    595[label="False"];
    596 -> 597;
    597[label="=>"];
    596 -> 598;
    598 [label="Expr"];
    598 -> 599;
    599 [label="Vector(Vector { syntax: 599, langle: Some(600), values: [(601, Some(604)), (605, Some(608)), (609, None)], rangle: Some(612) })"];
    599 -> 600;
    600[label="<"];
    599 -> 601;
    601 [label="Expr"];
    601 -> 602;
    602 [label="Literal"];
    602 -> 603;
    603[label="0."];
    599 -> 604;
    604[label=","];
    599 -> 605;
    605 [label="Expr"];
    605 -> 606;
    606 [label="Literal"];
    606 -> 607;
    607[label="40."];
    599 -> 608;
    608[label=","];
    599 -> 609;
    609 [label="Expr"];
    609 -> 610;
    610 [label="Literal"];
    610 -> 611;
    611[label="20."];
    599 -> 612;
    612[label=">"];
    591 -> 613;
    613[label=","];
    591 -> 614;
    614 [label="Expr"];
    614 -> 617;
    617 [label="BinaryOp(BinaryOp { syntax: 617, lhs: Some(615), operator: Some(618), rhs: Some(619) })"];
    617 -> 615;
    615 [label="Literal"];
    615 -> 616;
    616[label="True"];
    617 -> 618;
    618[label="=>"];
    617 -> 619;
    619 [label="Expr"];
    619 -> 620;
    620 [label="Vector(Vector { syntax: 620, langle: Some(621), values: [(622, Some(625)), (626, Some(629)), (630, None)], rangle: Some(633) })"];
    620 -> 621;
    621[label="<"];
    620 -> 622;
    622 [label="Expr"];
    622 -> 623;
    623 [label="Literal"];
    623 -> 624;
    624[label="0."];
    620 -> 625;
    625[label=","];
    620 -> 626;
    626 [label="Expr"];
    626 -> 627;
    627 [label="Literal"];
    627 -> 628;
    628[label="47."];
    620 -> 629;
    629[label=","];
    620 -> 630;
    630 [label="Expr"];
    630 -> 631;
    631 [label="Literal"];
    631 -> 632;
    632[label="20."];
    620 -> 633;
    633[label=">"];
    591 -> 634;
    634[label="]"];
    0 -> 635;
    635 [label="FuncDec(FuncDec { syntax: 635, type_: Some(636), name: Some(638), lparen: Some(639), args: [], rparen: Some(640), body: Some(641) })"];
    635 -> 636;
    636 [label="Type(Type { syntax: 636, basename: Some(637), members: [], arrays: [] })"];
    636 -> 637;
    637[label="Void"];
    635 -> 638;
    638[label="Private_Test"];
    635 -> 639;
    639[label="("];
    635 -> 640;
    640[label=")"];
    635 -> 641;
    641 [label="Block(Block { syntax: 641, lbrace: Some(642), statements: [643, 673], rbrace: Some(702) })"];
    641 -> 642;
    642[label="{"];
    641 -> 643;
    643 [label="Statement(Statement { syntax: 643, statement: Some(644), semicolon: Some(672) })"];
    643 -> 644;
    644 [label="Expr"];
    644 -> 652;
    652 [label="FunctionCall(FunctionCall { syntax: 652, lhs: Some(647), lparen: Some(653), args: [(654, Some(657)), (658, None)], rparen: Some(671) })"];
    652 -> 647;
    647 [label="BinaryOp(BinaryOp { syntax: 647, lhs: Some(645), operator: Some(648), rhs: Some(649) })"];
    647 -> 645;
    645 [label="Identifier"];
    645 -> 646;
    646[label="UI"];
    647 -> 648;
    648[label="."];
    647 -> 649;
    649 [label="Expr"];
    649 -> 650;
    650 [label="Identifier"];
    650 -> 651;
    651[label="SendNotice"];
    652 -> 653;
    653[label="("];
    652 -> 654;
    654 [label="Expr"];
    654 -> 655;
    655 [label="Literal"];
    655 -> 656;
    656[label="\"\""];
    652 -> 657;
    657[label=","];
    652 -> 658;
    658 [label="Expr"];
    658 -> 661;
    661 [label="BinaryOp(BinaryOp { syntax: 661, lhs: Some(659), operator: Some(662), rhs: Some(663) })"];
    661 -> 659;
    659 [label="Identifier"];
    659 -> 660;
    660[label="CUIConfig"];
    661 -> 662;
    662[label="::"];
    661 -> 663;
    663 [label="Expr"];
    663 -> 666;
    666 [label="BinaryOp(BinaryOp { syntax: 666, lhs: Some(664), operator: Some(667), rhs: Some(668) })"];
    666 -> 664;
    664 [label="Identifier"];
    664 -> 665;
    665[label="ENoticeLevel"];
    666 -> 667;
    667[label="::"];
    666 -> 668;
    668 [label="Expr"];
    668 -> 669;
    669 [label="Identifier"];
    669 -> 670;
    670[label="PlayerInfo"];
    652 -> 671;
    671[label=")"];
    643 -> 672;
    672[label=";"];
    641 -> 673;
    673 [label="Statement(Statement { syntax: 673, statement: Some(674), semicolon: None })"];
    673 -> 674;
    674 [label="If(If { syntax: 674, if_: Some(675), lparen: Some(676), condition: Some(677), rparen: Some(686), body: Some(687), else_: None })"];
    674 -> 675;
    675[label="if"];
    674 -> 676;
    676[label="("];
    674 -> 677;
    677 [label="Expr"];
    677 -> 680;
    680 [label="ArrayAccess(ArrayAccess { syntax: 680, lhs: Some(678), lsquare: Some(681), index: Some(682), rsquare: Some(685) })"];
    680 -> 678;
    678 [label="Identifier"];
    678 -> 679;
    679[label="Mdr"];
    680 -> 681;
    681[label="["];
    680 -> 682;
    682 [label="Expr"];
    682 -> 683;
    683 [label="Literal"];
    683 -> 684;
    684[label="0"];
    680 -> 685;
    685[label="]"];
    674 -> 686;
    686[label=")"];
    674 -> 687;
    687 [label="Statement(Statement { syntax: 687, statement: Some(688), semicolon: None })"];
    687 -> 688;
    688 [label="Block(Block { syntax: 688, lbrace: Some(689), statements: [690], rbrace: Some(701) })"];
    688 -> 689;
    689[label="{"];
    688 -> 690;
    690 [label="Statement(Statement { syntax: 690, statement: Some(691), semicolon: Some(700) })"];
    690 -> 691;
    691 [label="Expr"];
    691 -> 694;
    694 [label="FunctionCall(FunctionCall { syntax: 694, lhs: Some(692), lparen: Some(695), args: [(696, None)], rparen: Some(699) })"];
    694 -> 692;
    692 [label="Identifier"];
    692 -> 693;
    693[label="log"];
    694 -> 695;
    695[label="("];
    694 -> 696;
    696 [label="Expr"];
    696 -> 697;
    697 [label="Literal"];
    697 -> 698;
    698[label="\"MDR\""];
    694 -> 699;
    699[label=")"];
    690 -> 700;
    700[label=";"];
    688 -> 701;
    701[label="}"];
    641 -> 702;
    702[label="}"];
    0 -> 703;
    703[label=""];
}
