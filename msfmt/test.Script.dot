digraph ast {
    0 [label="File(File { syntax: 0, hashes: [1], globals: [], labels: [], functions: [31], eof: Some(93) })"];
    0 -> 1;
    1 [label="Const(Const { syntax: 1, const_: Some(2), name: Some(3), value: Some(4) })"];
    1 -> 2;
    2[label="#Const"];
    1 -> 3;
    3[label="C_ModeSupportedObjects"];
    1 -> 4;
    4 [label="Expr"];
    4 -> 5;
    5 [label="Array(Array { syntax: 5, lsquare: Some(6), values: [(7, Some(10)), (11, Some(14)), (15, Some(18)), (19, Some(22)), (23, Some(26)), (27, None)], rsquare: Some(30) })"];
    5 -> 6;
    6[label="["];
    5 -> 7;
    7 [label="Expr"];
    7 -> 8;
    8 [label="Literal"];
    8 -> 9;
    9[label="\"Weapon\""];
    5 -> 10;
    10[label=","];
    5 -> 11;
    11 [label="Expr"];
    11 -> 12;
    12 [label="Literal"];
    12 -> 13;
    13[label="\"Charge\""];
    5 -> 14;
    14[label=","];
    5 -> 15;
    15 [label="Expr"];
    15 -> 16;
    16 [label="Literal"];
    16 -> 17;
    17[label="\"Mini\""];
    5 -> 18;
    18[label=","];
    5 -> 19;
    19 [label="Expr"];
    19 -> 20;
    20 [label="Literal"];
    20 -> 21;
    21[label="\"Replie\""];
    5 -> 22;
    22[label=","];
    5 -> 23;
    23 [label="Expr"];
    23 -> 24;
    24 [label="Literal"];
    24 -> 25;
    25[label="\"Armor\""];
    5 -> 26;
    26[label=","];
    5 -> 27;
    27 [label="Expr"];
    27 -> 28;
    28 [label="Literal"];
    28 -> 29;
    29[label="\"Fuel\""];
    5 -> 30;
    30[label="]"];
    0 -> 31;
    31 [label="FuncDec(FuncDec { syntax: 31, type_: Some(32), name: Some(34), lparen: Some(35), args: [], rparen: Some(36), body: Some(37) })"];
    31 -> 32;
    32 [label="Type(Type { syntax: 32, basename: Some(33), members: [], arrays: [] })"];
    32 -> 33;
    33[label="Void"];
    31 -> 34;
    34[label="Private_Test"];
    31 -> 35;
    35[label="("];
    31 -> 36;
    36[label=")"];
    31 -> 37;
    37 [label="Block(Block { syntax: 37, lbrace: Some(38), statements: [39, 69], rbrace: Some(92) })"];
    37 -> 38;
    38[label="{"];
    37 -> 39;
    39 [label="Statement(Statement { syntax: 39, statement: Some(40), semicolon: Some(68) })"];
    39 -> 40;
    40 [label="Expr"];
    40 -> 48;
    48 [label="FunctionCall(FunctionCall { syntax: 48, lhs: Some(43), lparen: Some(49), args: [(50, Some(53)), (54, None)], rparen: Some(67) })"];
    48 -> 43;
    43 [label="BinaryOp(BinaryOp { syntax: 43, lhs: Some(41), operator: Some(44), rhs: Some(45) })"];
    43 -> 41;
    41 [label="Identifier"];
    41 -> 42;
    42[label="UI"];
    43 -> 44;
    44[label="."];
    43 -> 45;
    45 [label="Expr"];
    45 -> 46;
    46 [label="Identifier"];
    46 -> 47;
    47[label="SendNotice"];
    48 -> 49;
    49[label="("];
    48 -> 50;
    50 [label="Expr"];
    50 -> 51;
    51 [label="Literal"];
    51 -> 52;
    52[label="\"\""];
    48 -> 53;
    53[label=","];
    48 -> 54;
    54 [label="Expr"];
    54 -> 57;
    57 [label="BinaryOp(BinaryOp { syntax: 57, lhs: Some(55), operator: Some(58), rhs: Some(59) })"];
    57 -> 55;
    55 [label="Identifier"];
    55 -> 56;
    56[label="CUIConfig"];
    57 -> 58;
    58[label="::"];
    57 -> 59;
    59 [label="Expr"];
    59 -> 62;
    62 [label="BinaryOp(BinaryOp { syntax: 62, lhs: Some(60), operator: Some(63), rhs: Some(64) })"];
    62 -> 60;
    60 [label="Identifier"];
    60 -> 61;
    61[label="ENoticeLevel"];
    62 -> 63;
    63[label="::"];
    62 -> 64;
    64 [label="Expr"];
    64 -> 65;
    65 [label="Identifier"];
    65 -> 66;
    66[label="PlayerInfo"];
    48 -> 67;
    67[label=")"];
    39 -> 68;
    68[label=";"];
    37 -> 69;
    69 [label="Statement(Statement { syntax: 69, statement: Some(70), semicolon: None })"];
    69 -> 70;
    70 [label="If(If { syntax: 70, if_: Some(71), lparen: Some(72), condition: Some(73), rparen: Some(76), body: Some(77), else_: None })"];
    70 -> 71;
    71[label="if"];
    70 -> 72;
    72[label="("];
    70 -> 73;
    73 [label="Expr"];
    73 -> 74;
    74 [label="Literal"];
    74 -> 75;
    75[label="True"];
    70 -> 76;
    76[label=")"];
    70 -> 77;
    77 [label="Statement(Statement { syntax: 77, statement: Some(78), semicolon: None })"];
    77 -> 78;
    78 [label="Block(Block { syntax: 78, lbrace: Some(79), statements: [80], rbrace: Some(91) })"];
    78 -> 79;
    79[label="{"];
    78 -> 80;
    80 [label="Statement(Statement { syntax: 80, statement: Some(81), semicolon: Some(90) })"];
    80 -> 81;
    81 [label="Expr"];
    81 -> 84;
    84 [label="FunctionCall(FunctionCall { syntax: 84, lhs: Some(82), lparen: Some(85), args: [(86, None)], rparen: Some(89) })"];
    84 -> 82;
    82 [label="Identifier"];
    82 -> 83;
    83[label="log"];
    84 -> 85;
    85[label="("];
    84 -> 86;
    86 [label="Expr"];
    86 -> 87;
    87 [label="Literal"];
    87 -> 88;
    88[label="\"MDR\""];
    84 -> 89;
    89[label=")"];
    80 -> 90;
    90[label=";"];
    78 -> 91;
    91[label="}"];
    37 -> 92;
    92[label="}"];
    0 -> 93;
    93[label=""];
}
